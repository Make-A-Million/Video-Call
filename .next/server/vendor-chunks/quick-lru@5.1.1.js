"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/quick-lru@5.1.1";
exports.ids = ["vendor-chunks/quick-lru@5.1.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/quick-lru@5.1.1/node_modules/quick-lru/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/quick-lru@5.1.1/node_modules/quick-lru/index.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\nclass QuickLRU {\n    constructor(options = {}){\n        if (!(options.maxSize && options.maxSize > 0)) {\n            throw new TypeError(\"`maxSize` must be a number greater than 0\");\n        }\n        this.maxSize = options.maxSize;\n        this.onEviction = options.onEviction;\n        this.cache = new Map();\n        this.oldCache = new Map();\n        this._size = 0;\n    }\n    _set(key, value) {\n        this.cache.set(key, value);\n        this._size++;\n        if (this._size >= this.maxSize) {\n            this._size = 0;\n            if (typeof this.onEviction === \"function\") {\n                for (const [key, value] of this.oldCache.entries()){\n                    this.onEviction(key, value);\n                }\n            }\n            this.oldCache = this.cache;\n            this.cache = new Map();\n        }\n    }\n    get(key) {\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        if (this.oldCache.has(key)) {\n            const value = this.oldCache.get(key);\n            this.oldCache.delete(key);\n            this._set(key, value);\n            return value;\n        }\n    }\n    set(key, value) {\n        if (this.cache.has(key)) {\n            this.cache.set(key, value);\n        } else {\n            this._set(key, value);\n        }\n        return this;\n    }\n    has(key) {\n        return this.cache.has(key) || this.oldCache.has(key);\n    }\n    peek(key) {\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        if (this.oldCache.has(key)) {\n            return this.oldCache.get(key);\n        }\n    }\n    delete(key) {\n        const deleted = this.cache.delete(key);\n        if (deleted) {\n            this._size--;\n        }\n        return this.oldCache.delete(key) || deleted;\n    }\n    clear() {\n        this.cache.clear();\n        this.oldCache.clear();\n        this._size = 0;\n    }\n    *keys() {\n        for (const [key] of this){\n            yield key;\n        }\n    }\n    *values() {\n        for (const [, value] of this){\n            yield value;\n        }\n    }\n    *[Symbol.iterator]() {\n        for (const item of this.cache){\n            yield item;\n        }\n        for (const item of this.oldCache){\n            const [key] = item;\n            if (!this.cache.has(key)) {\n                yield item;\n            }\n        }\n    }\n    get size() {\n        let oldCacheSize = 0;\n        for (const key of this.oldCache.keys()){\n            if (!this.cache.has(key)) {\n                oldCacheSize++;\n            }\n        }\n        return Math.min(this._size + oldCacheSize, this.maxSize);\n    }\n}\nmodule.exports = QuickLRU;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vcXVpY2stbHJ1QDUuMS4xL25vZGVfbW9kdWxlcy9xdWljay1scnUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQTtJQUNMQyxZQUFZQyxVQUFVLENBQUMsQ0FBQyxDQUFFO1FBQ3pCLElBQUksQ0FBRUEsQ0FBQUEsUUFBUUMsT0FBTyxJQUFJRCxRQUFRQyxPQUFPLEdBQUcsSUFBSTtZQUM5QyxNQUFNLElBQUlDLFVBQVU7UUFDckI7UUFFQSxJQUFJLENBQUNELE9BQU8sR0FBR0QsUUFBUUMsT0FBTztRQUM5QixJQUFJLENBQUNFLFVBQVUsR0FBR0gsUUFBUUcsVUFBVTtRQUNwQyxJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJQztRQUNqQixJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJRDtRQUNwQixJQUFJLENBQUNFLEtBQUssR0FBRztJQUNkO0lBRUFDLEtBQUtDLEdBQUcsRUFBRUMsS0FBSyxFQUFFO1FBQ2hCLElBQUksQ0FBQ04sS0FBSyxDQUFDTyxHQUFHLENBQUNGLEtBQUtDO1FBQ3BCLElBQUksQ0FBQ0gsS0FBSztRQUVWLElBQUksSUFBSSxDQUFDQSxLQUFLLElBQUksSUFBSSxDQUFDTixPQUFPLEVBQUU7WUFDL0IsSUFBSSxDQUFDTSxLQUFLLEdBQUc7WUFFYixJQUFJLE9BQU8sSUFBSSxDQUFDSixVQUFVLEtBQUssWUFBWTtnQkFDMUMsS0FBSyxNQUFNLENBQUNNLEtBQUtDLE1BQU0sSUFBSSxJQUFJLENBQUNKLFFBQVEsQ0FBQ00sT0FBTyxHQUFJO29CQUNuRCxJQUFJLENBQUNULFVBQVUsQ0FBQ00sS0FBS0M7Z0JBQ3RCO1lBQ0Q7WUFFQSxJQUFJLENBQUNKLFFBQVEsR0FBRyxJQUFJLENBQUNGLEtBQUs7WUFDMUIsSUFBSSxDQUFDQSxLQUFLLEdBQUcsSUFBSUM7UUFDbEI7SUFDRDtJQUVBUSxJQUFJSixHQUFHLEVBQUU7UUFDUixJQUFJLElBQUksQ0FBQ0wsS0FBSyxDQUFDVSxH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dUA1LjEuMS9ub2RlX21vZHVsZXMvcXVpY2stbHJ1L2luZGV4LmpzP2FiNGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBRdWlja0xSVSB7XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuXHRcdGlmICghKG9wdGlvbnMubWF4U2l6ZSAmJiBvcHRpb25zLm1heFNpemUgPiAwKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignYG1heFNpemVgIG11c3QgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIDAnKTtcblx0XHR9XG5cblx0XHR0aGlzLm1heFNpemUgPSBvcHRpb25zLm1heFNpemU7XG5cdFx0dGhpcy5vbkV2aWN0aW9uID0gb3B0aW9ucy5vbkV2aWN0aW9uO1xuXHRcdHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XG5cdFx0dGhpcy5vbGRDYWNoZSA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLl9zaXplID0gMDtcblx0fVxuXG5cdF9zZXQoa2V5LCB2YWx1ZSkge1xuXHRcdHRoaXMuY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuXHRcdHRoaXMuX3NpemUrKztcblxuXHRcdGlmICh0aGlzLl9zaXplID49IHRoaXMubWF4U2l6ZSkge1xuXHRcdFx0dGhpcy5fc2l6ZSA9IDA7XG5cblx0XHRcdGlmICh0eXBlb2YgdGhpcy5vbkV2aWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRoaXMub2xkQ2FjaGUuZW50cmllcygpKSB7XG5cdFx0XHRcdFx0dGhpcy5vbkV2aWN0aW9uKGtleSwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMub2xkQ2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRcdFx0dGhpcy5jYWNoZSA9IG5ldyBNYXAoKTtcblx0XHR9XG5cdH1cblxuXHRnZXQoa2V5KSB7XG5cdFx0aWYgKHRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdHJldHVybiB0aGlzLmNhY2hlLmdldChrZXkpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLm9sZENhY2hlLmhhcyhrZXkpKSB7XG5cdFx0XHRjb25zdCB2YWx1ZSA9IHRoaXMub2xkQ2FjaGUuZ2V0KGtleSk7XG5cdFx0XHR0aGlzLm9sZENhY2hlLmRlbGV0ZShrZXkpO1xuXHRcdFx0dGhpcy5fc2V0KGtleSwgdmFsdWUpO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdHNldChrZXksIHZhbHVlKSB7XG5cdFx0aWYgKHRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdHRoaXMuY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9zZXQoa2V5LCB2YWx1ZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRoYXMoa2V5KSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FjaGUuaGFzKGtleSkgfHwgdGhpcy5vbGRDYWNoZS5oYXMoa2V5KTtcblx0fVxuXG5cdHBlZWsoa2V5KSB7XG5cdFx0aWYgKHRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdHJldHVybiB0aGlzLmNhY2hlLmdldChrZXkpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLm9sZENhY2hlLmhhcyhrZXkpKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vbGRDYWNoZS5nZXQoa2V5KTtcblx0XHR9XG5cdH1cblxuXHRkZWxldGUoa2V5KSB7XG5cdFx0Y29uc3QgZGVsZXRlZCA9IHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG5cdFx0aWYgKGRlbGV0ZWQpIHtcblx0XHRcdHRoaXMuX3NpemUtLTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5vbGRDYWNoZS5kZWxldGUoa2V5KSB8fCBkZWxldGVkO1xuXHR9XG5cblx0Y2xlYXIoKSB7XG5cdFx0dGhpcy5jYWNoZS5jbGVhcigpO1xuXHRcdHRoaXMub2xkQ2FjaGUuY2xlYXIoKTtcblx0XHR0aGlzLl9zaXplID0gMDtcblx0fVxuXG5cdCoga2V5cygpIHtcblx0XHRmb3IgKGNvbnN0IFtrZXldIG9mIHRoaXMpIHtcblx0XHRcdHlpZWxkIGtleTtcblx0XHR9XG5cdH1cblxuXHQqIHZhbHVlcygpIHtcblx0XHRmb3IgKGNvbnN0IFssIHZhbHVlXSBvZiB0aGlzKSB7XG5cdFx0XHR5aWVsZCB2YWx1ZTtcblx0XHR9XG5cdH1cblxuXHQqIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuXHRcdGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLmNhY2hlKSB7XG5cdFx0XHR5aWVsZCBpdGVtO1xuXHRcdH1cblxuXHRcdGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLm9sZENhY2hlKSB7XG5cdFx0XHRjb25zdCBba2V5XSA9IGl0ZW07XG5cdFx0XHRpZiAoIXRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdFx0eWllbGQgaXRlbTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZXQgc2l6ZSgpIHtcblx0XHRsZXQgb2xkQ2FjaGVTaXplID0gMDtcblx0XHRmb3IgKGNvbnN0IGtleSBvZiB0aGlzLm9sZENhY2hlLmtleXMoKSkge1xuXHRcdFx0aWYgKCF0aGlzLmNhY2hlLmhhcyhrZXkpKSB7XG5cdFx0XHRcdG9sZENhY2hlU2l6ZSsrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBNYXRoLm1pbih0aGlzLl9zaXplICsgb2xkQ2FjaGVTaXplLCB0aGlzLm1heFNpemUpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUXVpY2tMUlU7XG4iXSwibmFtZXMiOlsiUXVpY2tMUlUiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJtYXhTaXplIiwiVHlwZUVycm9yIiwib25FdmljdGlvbiIsImNhY2hlIiwiTWFwIiwib2xkQ2FjaGUiLCJfc2l6ZSIsIl9zZXQiLCJrZXkiLCJ2YWx1ZSIsInNldCIsImVudHJpZXMiLCJnZXQiLCJoYXMiLCJkZWxldGUiLCJwZWVrIiwiZGVsZXRlZCIsImNsZWFyIiwia2V5cyIsInZhbHVlcyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiaXRlbSIsInNpemUiLCJvbGRDYWNoZVNpemUiLCJNYXRoIiwibWluIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/quick-lru@5.1.1/node_modules/quick-lru/index.js\n");

/***/ })

};
;