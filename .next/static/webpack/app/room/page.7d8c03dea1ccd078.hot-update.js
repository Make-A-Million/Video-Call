/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/room/page",{

/***/ "(app-pages-browser)/./node_modules/.pnpm/@react-hook+latest@1.0.3_react@18.0.0/node_modules/@react-hook/latest/dist/module/index.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@react-hook+latest@1.0.3_react@18.0.0/node_modules/@react-hook/latest/dist/module/index.js ***!
  \***********************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst useLatest = current => {\n  const storedValue = react__WEBPACK_IMPORTED_MODULE_0__.useRef(current);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    storedValue.current = current;\n  });\n  return storedValue;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (useLatest);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcmVhY3QtaG9vaytsYXRlc3RAMS4wLjNfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy9AcmVhY3QtaG9vay9sYXRlc3QvZGlzdC9tb2R1bGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7O0FBQStCOztBQUUvQjtBQUNBLHNCQUFzQix5Q0FBWTtBQUNsQyxFQUFFLDRDQUFlO0FBQ2pCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUEsK0RBQWUsU0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlYWN0LWhvb2srbGF0ZXN0QDEuMC4zX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvQHJlYWN0LWhvb2svbGF0ZXN0L2Rpc3QvbW9kdWxlL2luZGV4LmpzPzc3YjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCB1c2VMYXRlc3QgPSBjdXJyZW50ID0+IHtcbiAgY29uc3Qgc3RvcmVkVmFsdWUgPSBSZWFjdC51c2VSZWYoY3VycmVudCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc3RvcmVkVmFsdWUuY3VycmVudCA9IGN1cnJlbnQ7XG4gIH0pO1xuICByZXR1cm4gc3RvcmVkVmFsdWU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VMYXRlc3Q7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@react-hook+latest@1.0.3_react@18.0.0/node_modules/@react-hook/latest/dist/module/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/global-tld-list@0.0.1139/node_modules/global-tld-list/dist/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/global-tld-list@0.0.1139/node_modules/global-tld-list/dist/index.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TLDs = void 0;\nexports.TLDs = [\n    'aaa',\n    'aarp',\n    'abb',\n    'abbott',\n    'abbvie',\n    'abc',\n    'able',\n    'abogado',\n    'abudhabi',\n    'ac',\n    'academy',\n    'accenture',\n    'accountant',\n    'accountants',\n    'aco',\n    'actor',\n    'ad',\n    'ads',\n    'adult',\n    'ae',\n    'aeg',\n    'aero',\n    'aetna',\n    'af',\n    'afl',\n    'africa',\n    'ag',\n    'agakhan',\n    'agency',\n    'ai',\n    'aig',\n    'airbus',\n    'airforce',\n    'airtel',\n    'akdn',\n    'al',\n    'alibaba',\n    'alipay',\n    'allfinanz',\n    'allstate',\n    'ally',\n    'alsace',\n    'alstom',\n    'am',\n    'amazon',\n    'americanexpress',\n    'americanfamily',\n    'amex',\n    'amfam',\n    'amica',\n    'amsterdam',\n    'analytics',\n    'android',\n    'anquan',\n    'anz',\n    'ao',\n    'aol',\n    'apartments',\n    'app',\n    'apple',\n    'aq',\n    'aquarelle',\n    'ar',\n    'arab',\n    'aramco',\n    'archi',\n    'army',\n    'arpa',\n    'art',\n    'arte',\n    'as',\n    'asda',\n    'asia',\n    'associates',\n    'at',\n    'athleta',\n    'attorney',\n    'au',\n    'auction',\n    'audi',\n    'audible',\n    'audio',\n    'auspost',\n    'author',\n    'auto',\n    'autos',\n    'avianca',\n    'aw',\n    'aws',\n    'ax',\n    'axa',\n    'az',\n    'azure',\n    'ba',\n    'baby',\n    'baidu',\n    'banamex',\n    'bananarepublic',\n    'band',\n    'bank',\n    'bar',\n    'barcelona',\n    'barclaycard',\n    'barclays',\n    'barefoot',\n    'bargains',\n    'baseball',\n    'basketball',\n    'bauhaus',\n    'bayern',\n    'bb',\n    'bbc',\n    'bbt',\n    'bbva',\n    'bcg',\n    'bcn',\n    'bd',\n    'be',\n    'beats',\n    'beauty',\n    'beer',\n    'bentley',\n    'berlin',\n    'best',\n    'bestbuy',\n    'bet',\n    'bf',\n    'bg',\n    'bh',\n    'bharti',\n    'bi',\n    'bible',\n    'bid',\n    'bike',\n    'bing',\n    'bingo',\n    'bio',\n    'biz',\n    'bj',\n    'black',\n    'blackfriday',\n    'blockbuster',\n    'blog',\n    'bloomberg',\n    'blue',\n    'bm',\n    'bms',\n    'bmw',\n    'bn',\n    'bnpparibas',\n    'bo',\n    'boats',\n    'boehringer',\n    'bofa',\n    'bom',\n    'bond',\n    'boo',\n    'book',\n    'booking',\n    'bosch',\n    'bostik',\n    'boston',\n    'bot',\n    'boutique',\n    'box',\n    'br',\n    'bradesco',\n    'bridgestone',\n    'broadway',\n    'broker',\n    'brother',\n    'brussels',\n    'bs',\n    'bt',\n    'build',\n    'builders',\n    'business',\n    'buy',\n    'buzz',\n    'bv',\n    'bw',\n    'by',\n    'bz',\n    'bzh',\n    'ca',\n    'cab',\n    'cafe',\n    'cal',\n    'call',\n    'calvinklein',\n    'cam',\n    'camera',\n    'camp',\n    'canon',\n    'capetown',\n    'capital',\n    'capitalone',\n    'car',\n    'caravan',\n    'cards',\n    'care',\n    'career',\n    'careers',\n    'cars',\n    'casa',\n    'case',\n    'cash',\n    'casino',\n    'cat',\n    'catering',\n    'catholic',\n    'cba',\n    'cbn',\n    'cbre',\n    'cbs',\n    'cc',\n    'cd',\n    'center',\n    'ceo',\n    'cern',\n    'cf',\n    'cfa',\n    'cfd',\n    'cg',\n    'ch',\n    'chanel',\n    'channel',\n    'charity',\n    'chase',\n    'chat',\n    'cheap',\n    'chintai',\n    'christmas',\n    'chrome',\n    'church',\n    'ci',\n    'cipriani',\n    'circle',\n    'cisco',\n    'citadel',\n    'citi',\n    'citic',\n    'city',\n    'cityeats',\n    'ck',\n    'cl',\n    'claims',\n    'cleaning',\n    'click',\n    'clinic',\n    'clinique',\n    'clothing',\n    'cloud',\n    'club',\n    'clubmed',\n    'cm',\n    'cn',\n    'co',\n    'coach',\n    'codes',\n    'coffee',\n    'college',\n    'cologne',\n    'com',\n    'comcast',\n    'commbank',\n    'community',\n    'company',\n    'compare',\n    'computer',\n    'comsec',\n    'condos',\n    'construction',\n    'consulting',\n    'contact',\n    'contractors',\n    'cooking',\n    'cool',\n    'coop',\n    'corsica',\n    'country',\n    'coupon',\n    'coupons',\n    'courses',\n    'cpa',\n    'cr',\n    'credit',\n    'creditcard',\n    'creditunion',\n    'cricket',\n    'crown',\n    'crs',\n    'cruise',\n    'cruises',\n    'cu',\n    'cuisinella',\n    'cv',\n    'cw',\n    'cx',\n    'cy',\n    'cymru',\n    'cyou',\n    'cz',\n    'dabur',\n    'dad',\n    'dance',\n    'data',\n    'date',\n    'dating',\n    'datsun',\n    'day',\n    'dclk',\n    'dds',\n    'de',\n    'deal',\n    'dealer',\n    'deals',\n    'degree',\n    'delivery',\n    'dell',\n    'deloitte',\n    'delta',\n    'democrat',\n    'dental',\n    'dentist',\n    'desi',\n    'design',\n    'dev',\n    'dhl',\n    'diamonds',\n    'diet',\n    'digital',\n    'direct',\n    'directory',\n    'discount',\n    'discover',\n    'dish',\n    'diy',\n    'dj',\n    'dk',\n    'dm',\n    'dnp',\n    'do',\n    'docs',\n    'doctor',\n    'dog',\n    'domains',\n    'dot',\n    'download',\n    'drive',\n    'dtv',\n    'dubai',\n    'dunlop',\n    'dupont',\n    'durban',\n    'dvag',\n    'dvr',\n    'dz',\n    'earth',\n    'eat',\n    'ec',\n    'eco',\n    'edeka',\n    'edu',\n    'education',\n    'ee',\n    'eg',\n    'email',\n    'emerck',\n    'energy',\n    'engineer',\n    'engineering',\n    'enterprises',\n    'epson',\n    'equipment',\n    'er',\n    'ericsson',\n    'erni',\n    'es',\n    'esq',\n    'estate',\n    'et',\n    'etisalat',\n    'eu',\n    'eurovision',\n    'eus',\n    'events',\n    'exchange',\n    'expert',\n    'exposed',\n    'express',\n    'extraspace',\n    'fage',\n    'fail',\n    'fairwinds',\n    'faith',\n    'family',\n    'fan',\n    'fans',\n    'farm',\n    'farmers',\n    'fashion',\n    'fast',\n    'fedex',\n    'feedback',\n    'ferrari',\n    'ferrero',\n    'fi',\n    'fidelity',\n    'fido',\n    'film',\n    'final',\n    'finance',\n    'financial',\n    'fire',\n    'firestone',\n    'firmdale',\n    'fish',\n    'fishing',\n    'fit',\n    'fitness',\n    'fj',\n    'fk',\n    'flickr',\n    'flights',\n    'flir',\n    'florist',\n    'flowers',\n    'fly',\n    'fm',\n    'fo',\n    'foo',\n    'food',\n    'football',\n    'ford',\n    'forex',\n    'forsale',\n    'forum',\n    'foundation',\n    'fox',\n    'fr',\n    'free',\n    'fresenius',\n    'frl',\n    'frogans',\n    'frontdoor',\n    'frontier',\n    'ftr',\n    'fujitsu',\n    'fun',\n    'fund',\n    'furniture',\n    'futbol',\n    'fyi',\n    'ga',\n    'gal',\n    'gallery',\n    'gallo',\n    'gallup',\n    'game',\n    'games',\n    'gap',\n    'garden',\n    'gay',\n    'gb',\n    'gbiz',\n    'gd',\n    'gdn',\n    'ge',\n    'gea',\n    'gent',\n    'genting',\n    'george',\n    'gf',\n    'gg',\n    'ggee',\n    'gh',\n    'gi',\n    'gift',\n    'gifts',\n    'gives',\n    'giving',\n    'gl',\n    'glass',\n    'gle',\n    'global',\n    'globo',\n    'gm',\n    'gmail',\n    'gmbh',\n    'gmo',\n    'gmx',\n    'gn',\n    'godaddy',\n    'gold',\n    'goldpoint',\n    'golf',\n    'goo',\n    'goodyear',\n    'goog',\n    'google',\n    'gop',\n    'got',\n    'gov',\n    'gp',\n    'gq',\n    'gr',\n    'grainger',\n    'graphics',\n    'gratis',\n    'green',\n    'gripe',\n    'grocery',\n    'group',\n    'gs',\n    'gt',\n    'gu',\n    'guardian',\n    'gucci',\n    'guge',\n    'guide',\n    'guitars',\n    'guru',\n    'gw',\n    'gy',\n    'hair',\n    'hamburg',\n    'hangout',\n    'haus',\n    'hbo',\n    'hdfc',\n    'hdfcbank',\n    'health',\n    'healthcare',\n    'help',\n    'helsinki',\n    'here',\n    'hermes',\n    'hiphop',\n    'hisamitsu',\n    'hitachi',\n    'hiv',\n    'hk',\n    'hkt',\n    'hm',\n    'hn',\n    'hockey',\n    'holdings',\n    'holiday',\n    'homedepot',\n    'homegoods',\n    'homes',\n    'homesense',\n    'honda',\n    'horse',\n    'hospital',\n    'host',\n    'hosting',\n    'hot',\n    'hoteles',\n    'hotels',\n    'hotmail',\n    'house',\n    'how',\n    'hr',\n    'hsbc',\n    'ht',\n    'hu',\n    'hughes',\n    'hyatt',\n    'hyundai',\n    'ibm',\n    'icbc',\n    'ice',\n    'icu',\n    'id',\n    'ie',\n    'ieee',\n    'ifm',\n    'ikano',\n    'il',\n    'im',\n    'imamat',\n    'imdb',\n    'immo',\n    'immobilien',\n    'in',\n    'inc',\n    'industries',\n    'infiniti',\n    'info',\n    'ing',\n    'ink',\n    'institute',\n    'insurance',\n    'insure',\n    'int',\n    'international',\n    'intuit',\n    'investments',\n    'io',\n    'ipiranga',\n    'iq',\n    'ir',\n    'irish',\n    'is',\n    'ismaili',\n    'ist',\n    'istanbul',\n    'it',\n    'itau',\n    'itv',\n    'jaguar',\n    'java',\n    'jcb',\n    'je',\n    'jeep',\n    'jetzt',\n    'jewelry',\n    'jio',\n    'jll',\n    'jm',\n    'jmp',\n    'jnj',\n    'jo',\n    'jobs',\n    'joburg',\n    'jot',\n    'joy',\n    'jp',\n    'jpmorgan',\n    'jprs',\n    'juegos',\n    'juniper',\n    'kaufen',\n    'kddi',\n    'ke',\n    'kerryhotels',\n    'kerrylogistics',\n    'kerryproperties',\n    'kfh',\n    'kg',\n    'kh',\n    'ki',\n    'kia',\n    'kids',\n    'kim',\n    'kinder',\n    'kindle',\n    'kitchen',\n    'kiwi',\n    'km',\n    'kn',\n    'koeln',\n    'komatsu',\n    'kosher',\n    'kp',\n    'kpmg',\n    'kpn',\n    'kr',\n    'krd',\n    'kred',\n    'kuokgroup',\n    'kw',\n    'ky',\n    'kyoto',\n    'kz',\n    'la',\n    'lacaixa',\n    'lamborghini',\n    'lamer',\n    'lancaster',\n    'land',\n    'landrover',\n    'lanxess',\n    'lasalle',\n    'lat',\n    'latino',\n    'latrobe',\n    'law',\n    'lawyer',\n    'lb',\n    'lc',\n    'lds',\n    'lease',\n    'leclerc',\n    'lefrak',\n    'legal',\n    'lego',\n    'lexus',\n    'lgbt',\n    'li',\n    'lidl',\n    'life',\n    'lifeinsurance',\n    'lifestyle',\n    'lighting',\n    'like',\n    'lilly',\n    'limited',\n    'limo',\n    'lincoln',\n    'link',\n    'lipsy',\n    'live',\n    'living',\n    'lk',\n    'llc',\n    'llp',\n    'loan',\n    'loans',\n    'locker',\n    'locus',\n    'lol',\n    'london',\n    'lotte',\n    'lotto',\n    'love',\n    'lpl',\n    'lplfinancial',\n    'lr',\n    'ls',\n    'lt',\n    'ltd',\n    'ltda',\n    'lu',\n    'lundbeck',\n    'luxe',\n    'luxury',\n    'lv',\n    'ly',\n    'ma',\n    'madrid',\n    'maif',\n    'maison',\n    'makeup',\n    'man',\n    'management',\n    'mango',\n    'map',\n    'market',\n    'marketing',\n    'markets',\n    'marriott',\n    'marshalls',\n    'mattel',\n    'mba',\n    'mc',\n    'mckinsey',\n    'md',\n    'me',\n    'med',\n    'media',\n    'meet',\n    'melbourne',\n    'meme',\n    'memorial',\n    'men',\n    'menu',\n    'merckmsd',\n    'mg',\n    'mh',\n    'miami',\n    'microsoft',\n    'mil',\n    'mini',\n    'mint',\n    'mit',\n    'mitsubishi',\n    'mk',\n    'ml',\n    'mlb',\n    'mls',\n    'mm',\n    'mma',\n    'mn',\n    'mo',\n    'mobi',\n    'mobile',\n    'moda',\n    'moe',\n    'moi',\n    'mom',\n    'monash',\n    'money',\n    'monster',\n    'mormon',\n    'mortgage',\n    'moscow',\n    'moto',\n    'motorcycles',\n    'mov',\n    'movie',\n    'mp',\n    'mq',\n    'mr',\n    'ms',\n    'msd',\n    'mt',\n    'mtn',\n    'mtr',\n    'mu',\n    'museum',\n    'music',\n    'mutual',\n    'mv',\n    'mw',\n    'mx',\n    'my',\n    'mz',\n    'na',\n    'nab',\n    'nagoya',\n    'name',\n    'natura',\n    'navy',\n    'nba',\n    'nc',\n    'ne',\n    'nec',\n    'net',\n    'netbank',\n    'netflix',\n    'network',\n    'neustar',\n    'new',\n    'news',\n    'next',\n    'nextdirect',\n    'nexus',\n    'nf',\n    'nfl',\n    'ng',\n    'ngo',\n    'nhk',\n    'ni',\n    'nico',\n    'nike',\n    'nikon',\n    'ninja',\n    'nissan',\n    'nissay',\n    'nl',\n    'no',\n    'nokia',\n    'northwesternmutual',\n    'norton',\n    'now',\n    'nowruz',\n    'nowtv',\n    'np',\n    'nr',\n    'nra',\n    'nrw',\n    'ntt',\n    'nu',\n    'nyc',\n    'nz',\n    'obi',\n    'observer',\n    'office',\n    'okinawa',\n    'olayan',\n    'olayangroup',\n    'oldnavy',\n    'ollo',\n    'om',\n    'omega',\n    'one',\n    'ong',\n    'onl',\n    'online',\n    'ooo',\n    'open',\n    'oracle',\n    'orange',\n    'org',\n    'organic',\n    'origins',\n    'osaka',\n    'otsuka',\n    'ott',\n    'ovh',\n    'pa',\n    'page',\n    'panasonic',\n    'paris',\n    'pars',\n    'partners',\n    'parts',\n    'party',\n    'passagens',\n    'pay',\n    'pccw',\n    'pe',\n    'pet',\n    'pf',\n    'pfizer',\n    'pg',\n    'ph',\n    'pharmacy',\n    'phd',\n    'philips',\n    'phone',\n    'photo',\n    'photography',\n    'photos',\n    'physio',\n    'pics',\n    'pictet',\n    'pictures',\n    'pid',\n    'pin',\n    'ping',\n    'pink',\n    'pioneer',\n    'pizza',\n    'pk',\n    'pl',\n    'place',\n    'play',\n    'playstation',\n    'plumbing',\n    'plus',\n    'pm',\n    'pn',\n    'pnc',\n    'pohl',\n    'poker',\n    'politie',\n    'porn',\n    'post',\n    'pr',\n    'pramerica',\n    'praxi',\n    'press',\n    'prime',\n    'pro',\n    'prod',\n    'productions',\n    'prof',\n    'progressive',\n    'promo',\n    'properties',\n    'property',\n    'protection',\n    'pru',\n    'prudential',\n    'ps',\n    'pt',\n    'pub',\n    'pw',\n    'pwc',\n    'py',\n    'qa',\n    'qpon',\n    'quebec',\n    'quest',\n    'racing',\n    'radio',\n    're',\n    'read',\n    'realestate',\n    'realtor',\n    'realty',\n    'recipes',\n    'red',\n    'redstone',\n    'redumbrella',\n    'rehab',\n    'reise',\n    'reisen',\n    'reit',\n    'reliance',\n    'ren',\n    'rent',\n    'rentals',\n    'repair',\n    'report',\n    'republican',\n    'rest',\n    'restaurant',\n    'review',\n    'reviews',\n    'rexroth',\n    'rich',\n    'richardli',\n    'ricoh',\n    'ril',\n    'rio',\n    'rip',\n    'ro',\n    'rocher',\n    'rocks',\n    'rodeo',\n    'rogers',\n    'room',\n    'rs',\n    'rsvp',\n    'ru',\n    'rugby',\n    'ruhr',\n    'run',\n    'rw',\n    'rwe',\n    'ryukyu',\n    'sa',\n    'saarland',\n    'safe',\n    'safety',\n    'sakura',\n    'sale',\n    'salon',\n    'samsclub',\n    'samsung',\n    'sandvik',\n    'sandvikcoromant',\n    'sanofi',\n    'sap',\n    'sarl',\n    'sas',\n    'save',\n    'saxo',\n    'sb',\n    'sbi',\n    'sbs',\n    'sc',\n    'sca',\n    'scb',\n    'schaeffler',\n    'schmidt',\n    'scholarships',\n    'school',\n    'schule',\n    'schwarz',\n    'science',\n    'scot',\n    'sd',\n    'se',\n    'search',\n    'seat',\n    'secure',\n    'security',\n    'seek',\n    'select',\n    'sener',\n    'services',\n    'seven',\n    'sew',\n    'sex',\n    'sexy',\n    'sfr',\n    'sg',\n    'sh',\n    'shangrila',\n    'sharp',\n    'shaw',\n    'shell',\n    'shia',\n    'shiksha',\n    'shoes',\n    'shop',\n    'shopping',\n    'shouji',\n    'show',\n    'showtime',\n    'si',\n    'silk',\n    'sina',\n    'singles',\n    'site',\n    'sj',\n    'sk',\n    'ski',\n    'skin',\n    'sky',\n    'skype',\n    'sl',\n    'sling',\n    'sm',\n    'smart',\n    'smile',\n    'sn',\n    'sncf',\n    'so',\n    'soccer',\n    'social',\n    'softbank',\n    'software',\n    'sohu',\n    'solar',\n    'solutions',\n    'song',\n    'sony',\n    'soy',\n    'spa',\n    'space',\n    'sport',\n    'spot',\n    'sr',\n    'srl',\n    'ss',\n    'st',\n    'stada',\n    'staples',\n    'star',\n    'statebank',\n    'statefarm',\n    'stc',\n    'stcgroup',\n    'stockholm',\n    'storage',\n    'store',\n    'stream',\n    'studio',\n    'study',\n    'style',\n    'su',\n    'sucks',\n    'supplies',\n    'supply',\n    'support',\n    'surf',\n    'surgery',\n    'suzuki',\n    'sv',\n    'swatch',\n    'swiss',\n    'sx',\n    'sy',\n    'sydney',\n    'systems',\n    'sz',\n    'tab',\n    'taipei',\n    'talk',\n    'taobao',\n    'target',\n    'tatamotors',\n    'tatar',\n    'tattoo',\n    'tax',\n    'taxi',\n    'tc',\n    'tci',\n    'td',\n    'tdk',\n    'team',\n    'tech',\n    'technology',\n    'tel',\n    'temasek',\n    'tennis',\n    'teva',\n    'tf',\n    'tg',\n    'th',\n    'thd',\n    'theater',\n    'theatre',\n    'tiaa',\n    'tickets',\n    'tienda',\n    'tiffany',\n    'tips',\n    'tires',\n    'tirol',\n    'tj',\n    'tjmaxx',\n    'tjx',\n    'tk',\n    'tkmaxx',\n    'tl',\n    'tm',\n    'tmall',\n    'tn',\n    'to',\n    'today',\n    'tokyo',\n    'tools',\n    'top',\n    'toray',\n    'toshiba',\n    'total',\n    'tours',\n    'town',\n    'toyota',\n    'toys',\n    'tr',\n    'trade',\n    'trading',\n    'training',\n    'travel',\n    'travelers',\n    'travelersinsurance',\n    'trust',\n    'trv',\n    'tt',\n    'tube',\n    'tui',\n    'tunes',\n    'tushu',\n    'tv',\n    'tvs',\n    'tw',\n    'tz',\n    'ua',\n    'ubank',\n    'ubs',\n    'ug',\n    'uk',\n    'unicom',\n    'university',\n    'uno',\n    'uol',\n    'ups',\n    'us',\n    'uy',\n    'uz',\n    'va',\n    'vacations',\n    'vana',\n    'vanguard',\n    'vc',\n    've',\n    'vegas',\n    'ventures',\n    'verisign',\n    'versicherung',\n    'vet',\n    'vg',\n    'vi',\n    'viajes',\n    'video',\n    'vig',\n    'viking',\n    'villas',\n    'vin',\n    'vip',\n    'virgin',\n    'visa',\n    'vision',\n    'viva',\n    'vivo',\n    'vlaanderen',\n    'vn',\n    'vodka',\n    'volkswagen',\n    'volvo',\n    'vote',\n    'voting',\n    'voto',\n    'voyage',\n    'vu',\n    'vuelos',\n    'wales',\n    'walmart',\n    'walter',\n    'wang',\n    'wanggou',\n    'watch',\n    'watches',\n    'weather',\n    'weatherchannel',\n    'webcam',\n    'weber',\n    'website',\n    'wed',\n    'wedding',\n    'weibo',\n    'weir',\n    'wf',\n    'whoswho',\n    'wien',\n    'wiki',\n    'williamhill',\n    'win',\n    'windows',\n    'wine',\n    'winners',\n    'wme',\n    'wolterskluwer',\n    'woodside',\n    'work',\n    'works',\n    'world',\n    'wow',\n    'ws',\n    'wtc',\n    'wtf',\n    'xbox',\n    'xerox',\n    'xfinity',\n    'xihuan',\n    'xin',\n    'कॉम',\n    'セール',\n    '佛山',\n    'ಭಾರತ',\n    '慈善',\n    '集团',\n    '在线',\n    '한국',\n    'ଭାରତ',\n    '点看',\n    'คอม',\n    'ভাৰত',\n    'ভারত',\n    '八卦',\n    'ישראל',\n    'موقع',\n    'বাংলা',\n    '公益',\n    '公司',\n    '香格里拉',\n    '网站',\n    '移动',\n    '我爱你',\n    'москва',\n    'қаз',\n    'католик',\n    'онлайн',\n    'сайт',\n    '联通',\n    'срб',\n    'бг',\n    'бел',\n    'קום',\n    '时尚',\n    '微博',\n    '淡马锡',\n    'ファッション',\n    'орг',\n    'नेट',\n    'ストア',\n    'アマゾン',\n    '삼성',\n    'சிங்கப்பூர்',\n    '商标',\n    '商店',\n    '商城',\n    'дети',\n    'мкд',\n    'ею',\n    'ポイント',\n    '新闻',\n    '家電',\n    'كوم',\n    '中文网',\n    '中信',\n    '中国',\n    '中國',\n    '娱乐',\n    '谷歌',\n    'భారత్',\n    'ලංකා',\n    '電訊盈科',\n    '购物',\n    'クラウド',\n    'ભારત',\n    '通販',\n    'भारतम्',\n    'भारत',\n    'भारोत',\n    '网店',\n    'संगठन',\n    '餐厅',\n    '网络',\n    'ком',\n    'укр',\n    '香港',\n    '亚马逊',\n    '食品',\n    '飞利浦',\n    '台湾',\n    '台灣',\n    '手机',\n    'мон',\n    'الجزائر',\n    'عمان',\n    'ارامكو',\n    'ایران',\n    'العليان',\n    'اتصالات',\n    'امارات',\n    'بازار',\n    'موريتانيا',\n    'پاکستان',\n    'الاردن',\n    'بارت',\n    'بھارت',\n    'المغرب',\n    'ابوظبي',\n    'البحرين',\n    'السعودية',\n    'ڀارت',\n    'كاثوليك',\n    'سودان',\n    'همراه',\n    'عراق',\n    'مليسيا',\n    '澳門',\n    '닷컴',\n    '政府',\n    'شبكة',\n    'بيتك',\n    'عرب',\n    'გე',\n    '机构',\n    '组织机构',\n    '健康',\n    'ไทย',\n    'سورية',\n    '招聘',\n    'рус',\n    'рф',\n    'تونس',\n    '大拿',\n    'ລາວ',\n    'みんな',\n    'グーグル',\n    'ευ',\n    'ελ',\n    '世界',\n    '書籍',\n    'ഭാരതം',\n    'ਭਾਰਤ',\n    '网址',\n    '닷넷',\n    'コム',\n    '天主教',\n    '游戏',\n    'vermögensberater',\n    'vermögensberatung',\n    '企业',\n    '信息',\n    '嘉里大酒店',\n    '嘉里',\n    'مصر',\n    'قطر',\n    '广东',\n    'இலங்கை',\n    'இந்தியா',\n    'հայ',\n    '新加坡',\n    'فلسطين',\n    '政务',\n    'xxx',\n    'xyz',\n    'yachts',\n    'yahoo',\n    'yamaxun',\n    'yandex',\n    'ye',\n    'yodobashi',\n    'yoga',\n    'yokohama',\n    'you',\n    'youtube',\n    'yt',\n    'yun',\n    'za',\n    'zappos',\n    'zara',\n    'zero',\n    'zip',\n    'zm',\n    'zone',\n    'zuerich',\n    'zw',\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/global-tld-list@0.0.1139/node_modules/global-tld-list/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/loglevel@1.8.1/node_modules/loglevel/lib/loglevel.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/loglevel@1.8.1/node_modules/loglevel/lib/loglevel.js ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/loglevel@1.8.1/node_modules/loglevel/lib/loglevel.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/build/polyfills/process.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/build/polyfills/process.js ***!
  \************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! next/dist/compiled/process */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjAuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9wcm9jZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxxQ0FBcUMscUJBQU0saUZBQWlGLHFCQUFNLGtFQUFrRSxxQkFBTSxXQUFXLG1CQUFPLENBQUMseUtBQTRCOztBQUV6UCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4wLjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC9wb2x5ZmlsbHMvcHJvY2Vzcy5qcz82YTE1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9nbG9iYWxfcHJvY2VzcywgX2dsb2JhbF9wcm9jZXNzMTtcbm1vZHVsZS5leHBvcnRzID0gKChfZ2xvYmFsX3Byb2Nlc3MgPSBnbG9iYWwucHJvY2VzcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9nbG9iYWxfcHJvY2Vzcy5lbnYpICYmIHR5cGVvZiAoKF9nbG9iYWxfcHJvY2VzczEgPSBnbG9iYWwucHJvY2VzcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9nbG9iYWxfcHJvY2VzczEuZW52KSA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbC5wcm9jZXNzIDogcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9wcm9jZXNzXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9jZXNzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fnayanprasad%2FDocuments%2FWedD%2FMake-A-Million%2FVideo%2Fsrc%2Fapp%2Froom%2Fpage.jsx&server=false!":
/*!****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fnayanprasad%2FDocuments%2FWedD%2FMake-A-Million%2FVideo%2Fsrc%2Fapp%2Froom%2Fpage.jsx&server=false! ***!
  \****************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/room/page.jsx */ \"(app-pages-browser)/./src/app/room/page.jsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjAuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTJGaG9tZSUyRm5heWFucHJhc2FkJTJGRG9jdW1lbnRzJTJGV2VkRCUyRk1ha2UtQS1NaWxsaW9uJTJGVmlkZW8lMkZzcmMlMkZhcHAlMkZyb29tJTJGcGFnZS5qc3gmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvP2VkZGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvaG9tZS9uYXlhbnByYXNhZC9Eb2N1bWVudHMvV2VkRC9NYWtlLUEtTWlsbGlvbi9WaWRlby9zcmMvYXBwL3Jvb20vcGFnZS5qc3hcIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fnayanprasad%2FDocuments%2FWedD%2FMake-A-Million%2FVideo%2Fsrc%2Fapp%2Froom%2Fpage.jsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@livekit+components-styles@1.0.6/node_modules/@livekit/components-styles/dist/general/index.css":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-styles@1.0.6/node_modules/@livekit/components-styles/dist/general/index.css ***!
  \****************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"2fa876db8a3b\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXN0eWxlc0AxLjAuNi9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1zdHlsZXMvZGlzdC9nZW5lcmFsL2luZGV4LmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtc3R5bGVzQDEuMC42L25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXN0eWxlcy9kaXN0L2dlbmVyYWwvaW5kZXguY3NzPzgyYzQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIyZmE4NzZkYjhhM2JcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@livekit+components-styles@1.0.6/node_modules/@livekit/components-styles/dist/general/index.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/room/page.jsx":
/*!*******************************!*\
  !*** ./src/app/room/page.jsx ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Page; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _livekit_components_styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @livekit/components-styles */ \"(app-pages-browser)/./node_modules/.pnpm/@livekit+components-styles@1.0.6/node_modules/@livekit/components-styles/dist/general/index.css\");\n/* harmony import */ var _livekit_components_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @livekit/components-react */ \"(app-pages-browser)/./node_modules/.pnpm/@livekit+components-react@1.3.0_livekit-client@1.14.4_react-dom@18.0.0_react@18.0.0/node_modules/@livekit/components-react/dist/index.mjs\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! livekit-client */ \"(app-pages-browser)/./node_modules/.pnpm/livekit-client@1.14.4/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nfunction Page() {\n    _s();\n    // TODO: get user input for room and name\n    const room = \"quickstart-room\";\n    const name = \"quickstart-user\";\n    const [token, setToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        (async ()=>{\n            try {\n                const resp = await fetch(\"/api/get-participant-token?room=\".concat(room, \"&username=\").concat(name));\n                const data = await resp.json();\n                setToken(data.token);\n            } catch (e) {\n                console.error(e);\n            }\n        })();\n    }, []);\n    if (token === \"\") {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            children: \"Getting token...\"\n        }, void 0, false, {\n            fileName: \"/home/nayanprasad/Documents/WedD/Make-A-Million/Video/src/app/room/page.jsx\",\n            lineNumber: 28,\n            columnNumber: 16\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_livekit_components_react__WEBPACK_IMPORTED_MODULE_4__.LiveKitRoom, {\n        video: true,\n        audio: true,\n        token: token,\n        connectOptions: {\n            autoSubscribe: false\n        },\n        serverUrl: \"wss://make-a-million-je59k1qf.livekit.cloud\",\n        // Use the default LiveKit theme for nice styles.\n        \"data-lk-theme\": \"default\",\n        style: {\n            height: \"100dvh\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MyVideoConference, {}, void 0, false, {\n                fileName: \"/home/nayanprasad/Documents/WedD/Make-A-Million/Video/src/app/room/page.jsx\",\n                lineNumber: 42,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_livekit_components_react__WEBPACK_IMPORTED_MODULE_4__.RoomAudioRenderer, {}, void 0, false, {\n                fileName: \"/home/nayanprasad/Documents/WedD/Make-A-Million/Video/src/app/room/page.jsx\",\n                lineNumber: 44,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_livekit_components_react__WEBPACK_IMPORTED_MODULE_4__.ControlBar, {}, void 0, false, {\n                fileName: \"/home/nayanprasad/Documents/WedD/Make-A-Million/Video/src/app/room/page.jsx\",\n                lineNumber: 47,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/nayanprasad/Documents/WedD/Make-A-Million/Video/src/app/room/page.jsx\",\n        lineNumber: 31,\n        columnNumber: 13\n    }, this);\n}\n_s(Page, \"uRWVyxPfKU3Lv5uAeNftFtP/ZvU=\");\n_c = Page;\nfunction MyVideoConference() {\n    _s1();\n    // `useTracks` returns all camera and screen share tracks. If a user\n    // joins without a published camera track, a placeholder track is returned.\n    const tracks = (0,_livekit_components_react__WEBPACK_IMPORTED_MODULE_4__.useTracks)([\n        {\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Camera,\n            withPlaceholder: true\n        },\n        {\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.ScreenShare,\n            withPlaceholder: false\n        }\n    ], {\n        onlySubscribed: false\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_livekit_components_react__WEBPACK_IMPORTED_MODULE_4__.GridLayout, {\n        tracks: tracks,\n        style: {\n            height: \"calc(100vh - var(--lk-control-bar-height))\"\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_livekit_components_react__WEBPACK_IMPORTED_MODULE_4__.ParticipantTile, {}, void 0, false, {\n            fileName: \"/home/nayanprasad/Documents/WedD/Make-A-Million/Video/src/app/room/page.jsx\",\n            lineNumber: 61,\n            columnNumber: 9\n        }, this)\n    }, void 0, false, {\n        fileName: \"/home/nayanprasad/Documents/WedD/Make-A-Million/Video/src/app/room/page.jsx\",\n        lineNumber: 58,\n        columnNumber: 13\n    }, this);\n}\n_s1(MyVideoConference, \"pwju/lw1kcn6ALccmwSqaM8mllg=\", false, function() {\n    return [\n        _livekit_components_react__WEBPACK_IMPORTED_MODULE_4__.useTracks\n    ];\n});\n_c1 = MyVideoConference;\nvar _c, _c1;\n$RefreshReg$(_c, \"Page\");\n$RefreshReg$(_c1, \"MyVideoConference\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvcm9vbS9wYWdlLmpzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDMEM7QUFDTjtBQUdEO0FBQ0U7QUFFdEIsU0FBU1U7O0lBQ3BCLHlDQUF5QztJQUN6QyxNQUFNQyxPQUFPO0lBQ2IsTUFBTUMsT0FBTztJQUNiLE1BQU0sQ0FBQ0MsT0FBT0MsU0FBUyxHQUFHYiwrQ0FBUUEsQ0FBQztJQUVuQ0QsZ0RBQVNBLENBQUM7UUFDTDtZQUNHLElBQUk7Z0JBQ0EsTUFBTWUsT0FBTyxNQUFNQyxNQUFNLG1DQUFvREosT0FBakJELE1BQUssY0FBaUIsT0FBTEM7Z0JBQzdFLE1BQU1LLE9BQU8sTUFBTUYsS0FBS0csSUFBSTtnQkFDNUJKLFNBQVNHLEtBQUtKLEtBQUs7WUFDdkIsRUFBRSxPQUFPTSxHQUFHO2dCQUNSQyxRQUFRQyxLQUFLLENBQUNGO1lBQ2xCO1FBQ0o7SUFDSixHQUFHLEVBQUU7SUFFTCxJQUFJTixVQUFVLElBQUk7UUFDZCxxQkFBTyw4REFBQ1M7c0JBQUk7Ozs7OztJQUNoQjtJQUVBLHFCQUFRLDhEQUFDcEIsa0VBQVdBO1FBQ2hCcUIsT0FBTztRQUNQQyxPQUFPO1FBQ1BYLE9BQU9BO1FBQ1BZLGdCQUFnQjtZQUFDQyxlQUFlO1FBQUs7UUFDckNDLFdBQVdDLDZDQUFtQztRQUM5QyxpREFBaUQ7UUFDakRHLGlCQUFjO1FBQ2RDLE9BQU87WUFBQ0MsUUFBUTtRQUFROzswQkFHeEIsOERBQUNDOzs7OzswQkFFRCw4REFBQzVCLHdFQUFpQkE7Ozs7OzBCQUdsQiw4REFBQ0MsaUVBQVVBOzs7Ozs7Ozs7OztBQUVuQjtHQXhDd0JHO0tBQUFBO0FBMEN4QixTQUFTd0I7O0lBQ0wsb0VBQW9FO0lBQ3BFLDJFQUEyRTtJQUMzRSxNQUFNQyxTQUFTM0Isb0VBQVNBLENBQUM7UUFBQztZQUFDNEIsUUFBUTNCLGlEQUFLQSxDQUFDNEIsTUFBTSxDQUFDQyxNQUFNO1lBQUVDLGlCQUFpQjtRQUFJO1FBQUc7WUFDNUVILFFBQVEzQixpREFBS0EsQ0FBQzRCLE1BQU0sQ0FBQ0csV0FBVztZQUNoQ0QsaUJBQWlCO1FBQ3JCO0tBQUcsRUFBRTtRQUFDRSxnQkFBZ0I7SUFBSztJQUMzQixxQkFBUSw4REFBQ3JDLGlFQUFVQTtRQUFDK0IsUUFBUUE7UUFBUUgsT0FBTztZQUFDQyxRQUFRO1FBQTRDO2tCQUc1Riw0RUFBQzVCLHNFQUFlQTs7Ozs7Ozs7OztBQUV4QjtJQVpTNkI7O1FBR1UxQixnRUFBU0E7OztNQUhuQjBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvcm9vbS9wYWdlLmpzeD9mODg2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuaW1wb3J0IHt1c2VFZmZlY3QsIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJ0BsaXZla2l0L2NvbXBvbmVudHMtc3R5bGVzJztcbmltcG9ydCB7XG4gICAgTGl2ZUtpdFJvb20sIFZpZGVvQ29uZmVyZW5jZSwgR3JpZExheW91dCwgUGFydGljaXBhbnRUaWxlLCBSb29tQXVkaW9SZW5kZXJlciwgQ29udHJvbEJhciwgdXNlVHJhY2tzLFxufSBmcm9tICdAbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0JztcbmltcG9ydCB7VHJhY2t9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYWdlKCkge1xuICAgIC8vIFRPRE86IGdldCB1c2VyIGlucHV0IGZvciByb29tIGFuZCBuYW1lXG4gICAgY29uc3Qgcm9vbSA9IFwicXVpY2tzdGFydC1yb29tXCI7XG4gICAgY29uc3QgbmFtZSA9IFwicXVpY2tzdGFydC11c2VyXCI7XG4gICAgY29uc3QgW3Rva2VuLCBzZXRUb2tlbl0gPSB1c2VTdGF0ZShcIlwiKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBmZXRjaChgL2FwaS9nZXQtcGFydGljaXBhbnQtdG9rZW4/cm9vbT0ke3Jvb219JnVzZXJuYW1lPSR7bmFtZX1gKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcC5qc29uKCk7XG4gICAgICAgICAgICAgICAgc2V0VG9rZW4oZGF0YS50b2tlbik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICB9LCBbXSk7XG5cbiAgICBpZiAodG9rZW4gPT09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIDxkaXY+R2V0dGluZyB0b2tlbi4uLjwvZGl2PjtcbiAgICB9XG5cbiAgICByZXR1cm4gKDxMaXZlS2l0Um9vbVxuICAgICAgICB2aWRlbz17dHJ1ZX1cbiAgICAgICAgYXVkaW89e3RydWV9XG4gICAgICAgIHRva2VuPXt0b2tlbn1cbiAgICAgICAgY29ubmVjdE9wdGlvbnM9e3thdXRvU3Vic2NyaWJlOiBmYWxzZX19XG4gICAgICAgIHNlcnZlclVybD17cHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfTElWRUtJVF9VUkx9XG4gICAgICAgIC8vIFVzZSB0aGUgZGVmYXVsdCBMaXZlS2l0IHRoZW1lIGZvciBuaWNlIHN0eWxlcy5cbiAgICAgICAgZGF0YS1say10aGVtZT1cImRlZmF1bHRcIlxuICAgICAgICBzdHlsZT17e2hlaWdodDogJzEwMGR2aCd9fVxuICAgID5cbiAgICAgICAgey8qIFlvdXIgY3VzdG9tIGNvbXBvbmVudCB3aXRoIGJhc2ljIHZpZGVvIGNvbmZlcmVuY2luZyBmdW5jdGlvbmFsaXR5LiAqL31cbiAgICAgICAgPE15VmlkZW9Db25mZXJlbmNlLz5cbiAgICAgICAgey8qIFRoZSBSb29tQXVkaW9SZW5kZXJlciB0YWtlcyBjYXJlIG9mIHJvb20td2lkZSBhdWRpbyBmb3IgeW91LiAqL31cbiAgICAgICAgPFJvb21BdWRpb1JlbmRlcmVyLz5cbiAgICAgICAgey8qIENvbnRyb2xzIGZvciB0aGUgdXNlciB0byBzdGFydC9zdG9wIGF1ZGlvLCB2aWRlbywgYW5kIHNjcmVlblxuICAgICAgc2hhcmUgdHJhY2tzIGFuZCB0byBsZWF2ZSB0aGUgcm9vbS4gKi99XG4gICAgICAgIDxDb250cm9sQmFyLz5cbiAgICA8L0xpdmVLaXRSb29tPik7XG59XG5cbmZ1bmN0aW9uIE15VmlkZW9Db25mZXJlbmNlKCkge1xuICAgIC8vIGB1c2VUcmFja3NgIHJldHVybnMgYWxsIGNhbWVyYSBhbmQgc2NyZWVuIHNoYXJlIHRyYWNrcy4gSWYgYSB1c2VyXG4gICAgLy8gam9pbnMgd2l0aG91dCBhIHB1Ymxpc2hlZCBjYW1lcmEgdHJhY2ssIGEgcGxhY2Vob2xkZXIgdHJhY2sgaXMgcmV0dXJuZWQuXG4gICAgY29uc3QgdHJhY2tzID0gdXNlVHJhY2tzKFt7c291cmNlOiBUcmFjay5Tb3VyY2UuQ2FtZXJhLCB3aXRoUGxhY2Vob2xkZXI6IHRydWV9LCB7XG4gICAgICAgIHNvdXJjZTogVHJhY2suU291cmNlLlNjcmVlblNoYXJlLFxuICAgICAgICB3aXRoUGxhY2Vob2xkZXI6IGZhbHNlXG4gICAgfSxdLCB7b25seVN1YnNjcmliZWQ6IGZhbHNlfSwpO1xuICAgIHJldHVybiAoPEdyaWRMYXlvdXQgdHJhY2tzPXt0cmFja3N9IHN0eWxlPXt7aGVpZ2h0OiAnY2FsYygxMDB2aCAtIHZhcigtLWxrLWNvbnRyb2wtYmFyLWhlaWdodCkpJ319PlxuICAgICAgICB7LyogVGhlIEdyaWRMYXlvdXQgYWNjZXB0cyB6ZXJvIG9yIG9uZSBjaGlsZC4gVGhlIGNoaWxkIGlzIHVzZWRcbiAgICAgIGFzIGEgdGVtcGxhdGUgdG8gcmVuZGVyIGFsbCBwYXNzZWQgaW4gdHJhY2tzLiAqL31cbiAgICAgICAgPFBhcnRpY2lwYW50VGlsZS8+XG4gICAgPC9HcmlkTGF5b3V0Pik7XG59XG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJMaXZlS2l0Um9vbSIsIlZpZGVvQ29uZmVyZW5jZSIsIkdyaWRMYXlvdXQiLCJQYXJ0aWNpcGFudFRpbGUiLCJSb29tQXVkaW9SZW5kZXJlciIsIkNvbnRyb2xCYXIiLCJ1c2VUcmFja3MiLCJUcmFjayIsIlBhZ2UiLCJyb29tIiwibmFtZSIsInRva2VuIiwic2V0VG9rZW4iLCJyZXNwIiwiZmV0Y2giLCJkYXRhIiwianNvbiIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJkaXYiLCJ2aWRlbyIsImF1ZGlvIiwiY29ubmVjdE9wdGlvbnMiLCJhdXRvU3Vic2NyaWJlIiwic2VydmVyVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0xJVkVLSVRfVVJMIiwiZGF0YS1say10aGVtZSIsInN0eWxlIiwiaGVpZ2h0IiwiTXlWaWRlb0NvbmZlcmVuY2UiLCJ0cmFja3MiLCJzb3VyY2UiLCJTb3VyY2UiLCJDYW1lcmEiLCJ3aXRoUGxhY2Vob2xkZXIiLCJTY3JlZW5TaGFyZSIsIm9ubHlTdWJzY3JpYmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/room/page.jsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/process/browser.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/process/browser.js ***!
  \*************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjAuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxPQUFPLGdCQUFnQixtQkFBbUIsTUFBTSxNQUFNLDRCQUE0QixtREFBbUQsK0JBQStCLHFEQUFxRCxZQUFZLElBQUksbUNBQW1DLGFBQWEsS0FBSyxvQkFBb0IsU0FBUyxtQkFBbUIsSUFBSSxxQ0FBcUMsZUFBZSxLQUFLLHVCQUF1QixTQUFTLHVCQUF1QixJQUFJLHVCQUF1QixtQkFBbUIsdUJBQXVCLDJDQUEyQyxhQUFhLHVCQUF1QixJQUFJLGNBQWMsU0FBUyxJQUFJLHdCQUF3QixTQUFTLDBCQUEwQiw0QkFBNEIscUJBQXFCLHVCQUF1QixnREFBZ0QsZUFBZSx1QkFBdUIsSUFBSSxZQUFZLFNBQVMsSUFBSSxzQkFBc0IsU0FBUyx3QkFBd0IsU0FBUyxZQUFZLE1BQU0sU0FBUywyQkFBMkIsV0FBVyxPQUFPLFFBQVEsYUFBYSxjQUFjLEtBQUssS0FBSyxhQUFhLGNBQWMsc0JBQXNCLE1BQU0sT0FBTyxrQ0FBa0MsT0FBTyxlQUFlLFNBQVMsSUFBSSxLQUFLLGFBQWEsTUFBTSxZQUFZLEtBQUssV0FBVyxPQUFPLFFBQVEsbUJBQW1CLHVCQUF1QixvQ0FBb0MsdUJBQXVCLFlBQVksbUJBQW1CLEtBQUsscUJBQXFCLHNCQUFzQixxQkFBcUIseUJBQXlCLG1CQUFtQixXQUFXLGFBQWEsOEJBQThCLGlDQUFpQyxrQkFBa0IsZUFBZSxTQUFTLFVBQVUsYUFBYSxjQUFjLGlCQUFpQixVQUFVLG1CQUFtQixZQUFZLFdBQVcsc0JBQXNCLDBCQUEwQixZQUFZLHVCQUF1QiwyQkFBMkIsd0JBQXdCLFVBQVUsc0JBQXNCLHFEQUFxRCxpQkFBaUIsV0FBVyxvQkFBb0IsbURBQW1ELG1CQUFtQixZQUFZLFNBQVMsZ0NBQWdDLFdBQVcsa0JBQWtCLGlCQUFpQixZQUFZLFlBQVksV0FBVyxJQUFJLHNDQUFzQyxRQUFRLFFBQVEsaUJBQWlCLGlCQUFpQixtRUFBbUUsU0FBUyxLQUFLLCtCQUErQixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMC4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzcy9icm93c2VyLmpzPzIwNDMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7dmFyIGU9ezIyOTpmdW5jdGlvbihlKXt2YXIgdD1lLmV4cG9ydHM9e307dmFyIHI7dmFyIG47ZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX0oZnVuY3Rpb24oKXt0cnl7aWYodHlwZW9mIHNldFRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe3I9c2V0VGltZW91dH1lbHNle3I9ZGVmYXVsdFNldFRpbW91dH19Y2F0Y2goZSl7cj1kZWZhdWx0U2V0VGltb3V0fXRyeXtpZih0eXBlb2YgY2xlYXJUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtuPWNsZWFyVGltZW91dH1lbHNle249ZGVmYXVsdENsZWFyVGltZW91dH19Y2F0Y2goZSl7bj1kZWZhdWx0Q2xlYXJUaW1lb3V0fX0pKCk7ZnVuY3Rpb24gcnVuVGltZW91dChlKXtpZihyPT09c2V0VGltZW91dCl7cmV0dXJuIHNldFRpbWVvdXQoZSwwKX1pZigocj09PWRlZmF1bHRTZXRUaW1vdXR8fCFyKSYmc2V0VGltZW91dCl7cj1zZXRUaW1lb3V0O3JldHVybiBzZXRUaW1lb3V0KGUsMCl9dHJ5e3JldHVybiByKGUsMCl9Y2F0Y2godCl7dHJ5e3JldHVybiByLmNhbGwobnVsbCxlLDApfWNhdGNoKHQpe3JldHVybiByLmNhbGwodGhpcyxlLDApfX19ZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KGUpe2lmKG49PT1jbGVhclRpbWVvdXQpe3JldHVybiBjbGVhclRpbWVvdXQoZSl9aWYoKG49PT1kZWZhdWx0Q2xlYXJUaW1lb3V0fHwhbikmJmNsZWFyVGltZW91dCl7bj1jbGVhclRpbWVvdXQ7cmV0dXJuIGNsZWFyVGltZW91dChlKX10cnl7cmV0dXJuIG4oZSl9Y2F0Y2godCl7dHJ5e3JldHVybiBuLmNhbGwobnVsbCxlKX1jYXRjaCh0KXtyZXR1cm4gbi5jYWxsKHRoaXMsZSl9fX12YXIgaT1bXTt2YXIgbz1mYWxzZTt2YXIgdTt2YXIgYT0tMTtmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKXtpZighb3x8IXUpe3JldHVybn1vPWZhbHNlO2lmKHUubGVuZ3RoKXtpPXUuY29uY2F0KGkpfWVsc2V7YT0tMX1pZihpLmxlbmd0aCl7ZHJhaW5RdWV1ZSgpfX1mdW5jdGlvbiBkcmFpblF1ZXVlKCl7aWYobyl7cmV0dXJufXZhciBlPXJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtvPXRydWU7dmFyIHQ9aS5sZW5ndGg7d2hpbGUodCl7dT1pO2k9W107d2hpbGUoKythPHQpe2lmKHUpe3VbYV0ucnVuKCl9fWE9LTE7dD1pLmxlbmd0aH11PW51bGw7bz1mYWxzZTtydW5DbGVhclRpbWVvdXQoZSl9dC5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpe2Zvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspe3Rbci0xXT1hcmd1bWVudHNbcl19fWkucHVzaChuZXcgSXRlbShlLHQpKTtpZihpLmxlbmd0aD09PTEmJiFvKXtydW5UaW1lb3V0KGRyYWluUXVldWUpfX07ZnVuY3Rpb24gSXRlbShlLHQpe3RoaXMuZnVuPWU7dGhpcy5hcnJheT10fUl0ZW0ucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9O3QudGl0bGU9XCJicm93c2VyXCI7dC5icm93c2VyPXRydWU7dC5lbnY9e307dC5hcmd2PVtdO3QudmVyc2lvbj1cIlwiO3QudmVyc2lvbnM9e307ZnVuY3Rpb24gbm9vcCgpe310Lm9uPW5vb3A7dC5hZGRMaXN0ZW5lcj1ub29wO3Qub25jZT1ub29wO3Qub2ZmPW5vb3A7dC5yZW1vdmVMaXN0ZW5lcj1ub29wO3QucmVtb3ZlQWxsTGlzdGVuZXJzPW5vb3A7dC5lbWl0PW5vb3A7dC5wcmVwZW5kTGlzdGVuZXI9bm9vcDt0LnByZXBlbmRPbmNlTGlzdGVuZXI9bm9vcDt0Lmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm5bXX07dC5iaW5kaW5nPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfTt0LmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifTt0LmNoZGlyPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX07dC51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX19O3ZhciB0PXt9O2Z1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18ocil7dmFyIG49dFtyXTtpZihuIT09dW5kZWZpbmVkKXtyZXR1cm4gbi5leHBvcnRzfXZhciBpPXRbcl09e2V4cG9ydHM6e319O3ZhciBvPXRydWU7dHJ5e2Vbcl0oaSxpLmV4cG9ydHMsX19uY2N3cGNrX3JlcXVpcmVfXyk7bz1mYWxzZX1maW5hbGx5e2lmKG8pZGVsZXRlIHRbcl19cmV0dXJuIGkuZXhwb3J0c31pZih0eXBlb2YgX19uY2N3cGNrX3JlcXVpcmVfXyE9PVwidW5kZWZpbmVkXCIpX19uY2N3cGNrX3JlcXVpcmVfXy5hYj1fX2Rpcm5hbWUrXCIvXCI7dmFyIHI9X19uY2N3cGNrX3JlcXVpcmVfXygyMjkpO21vZHVsZS5leHBvcnRzPXJ9KSgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*****************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe[prop-missing]\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      } // TODO(luna): This will currently only throw if the function component\n      // tries to access React/ReactDOM/props. We should probably make this throw\n      // in simple components too\n\n\n      var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n      // component, which we don't yet support. Attach a noop catch handler to\n      // silence the error.\n      // TODO: Implement component stacks for async client components?\n\n      if (maybePromise && typeof maybePromise.catch === 'function') {\n        maybePromise.catch(function () {});\n      }\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement$1(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement$1(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (hasOwnProperty.call(props, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(props).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV = jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \*******************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjAuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsMlBBQXNFO0FBQ3hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjAuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz8yOTE3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BehaviorSubject: function() { return /* binding */ BehaviorSubject; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subject */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subject.js\");\n\n\nvar BehaviorSubject = (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        var _this = _super.call(this) || this;\n        _this._value = _value;\n        return _this;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        !subscription.closed && subscriber.next(this._value);\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;\n        if (hasError) {\n            throw thrownError;\n        }\n        this._throwIfClosed();\n        return _value;\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, (this._value = value));\n    };\n    return BehaviorSubject;\n}(_Subject__WEBPACK_IMPORTED_MODULE_1__.Subject));\n\n//# sourceMappingURL=BehaviorSubject.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBQ0U7QUFDcEM7QUFDQSxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLENBQUMsNkNBQU87QUFDa0I7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL0JlaGF2aW9yU3ViamVjdC5qcz8wYmEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4vU3ViamVjdCc7XG52YXIgQmVoYXZpb3JTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQmVoYXZpb3JTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJlaGF2aW9yU3ViamVjdChfdmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3ZhbHVlID0gX3ZhbHVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF9zdXBlci5wcm90b3R5cGUuX3N1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICAhc3Vic2NyaXB0aW9uLmNsb3NlZCAmJiBzdWJzY3JpYmVyLm5leHQodGhpcy5fdmFsdWUpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaGFzRXJyb3IgPSBfYS5oYXNFcnJvciwgdGhyb3duRXJyb3IgPSBfYS50aHJvd25FcnJvciwgX3ZhbHVlID0gX2EuX3ZhbHVlO1xuICAgICAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IHRocm93bkVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5leHQuY2FsbCh0aGlzLCAodGhpcy5fdmFsdWUgPSB2YWx1ZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEJlaGF2aW9yU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CZWhhdmlvclN1YmplY3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/NotificationFactories.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/NotificationFactories.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COMPLETE_NOTIFICATION: function() { return /* binding */ COMPLETE_NOTIFICATION; },\n/* harmony export */   createNotification: function() { return /* binding */ createNotification; },\n/* harmony export */   errorNotification: function() { return /* binding */ errorNotification; },\n/* harmony export */   nextNotification: function() { return /* binding */ nextNotification; }\n/* harmony export */ });\nvar COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();\nfunction errorNotification(error) {\n    return createNotification('E', undefined, error);\n}\nfunction nextNotification(value) {\n    return createNotification('N', value, undefined);\n}\nfunction createNotification(kind, value, error) {\n    return {\n        kind: kind,\n        value: value,\n        error: error,\n    };\n}\n//# sourceMappingURL=NotificationFactories.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPLDJDQUEyQyx1REFBdUQ7QUFDbEc7QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvTm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzP2I2ZTciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBDT01QTEVURV9OT1RJRklDQVRJT04gPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdDJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpOyB9KSgpO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yTm90aWZpY2F0aW9uKGVycm9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignRScsIHVuZGVmaW5lZCwgZXJyb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5leHROb3RpZmljYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdOJywgdmFsdWUsIHVuZGVmaW5lZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKGtpbmQsIHZhbHVlLCBlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/NotificationFactories.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Observable.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Observable.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Observable: function() { return /* binding */ Observable; }\n/* harmony export */ });\n/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Subscriber */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subscriber.js\");\n/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Subscription */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subscription.js\");\n/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./symbol/observable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/symbol/observable.js\");\n/* harmony import */ var _util_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/pipe */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/pipe.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/config.js\");\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n/* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/errorContext */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/errorContext.js\");\n\n\n\n\n\n\n\nvar Observable = (function () {\n    function Observable(subscribe) {\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var _this = this;\n        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.SafeSubscriber(observerOrNext, error, complete);\n        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_1__.errorContext)(function () {\n            var _a = _this, operator = _a.operator, source = _a.source;\n            subscriber.add(operator\n                ?\n                    operator.call(subscriber, source)\n                : source\n                    ?\n                        _this._subscribe(subscriber)\n                    :\n                        _this._trySubscribe(subscriber));\n        });\n        return subscriber;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.error(err);\n        }\n    };\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var subscriber = new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.SafeSubscriber({\n                next: function (value) {\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscriber.unsubscribe();\n                    }\n                },\n                error: reject,\n                complete: resolve,\n            });\n            _this.subscribe(subscriber);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        var _a;\n        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n    };\n    Observable.prototype[_symbol_observable__WEBPACK_IMPORTED_MODULE_2__.observable] = function () {\n        return this;\n    };\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        return (0,_util_pipe__WEBPACK_IMPORTED_MODULE_3__.pipeFromArray)(operations)(this);\n    };\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\n\nfunction getPromiseCtor(promiseCtor) {\n    var _a;\n    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : _config__WEBPACK_IMPORTED_MODULE_4__.config.Promise) !== null && _a !== void 0 ? _a : Promise;\n}\nfunction isObserver(value) {\n    return value && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_5__.isFunction)(value.next) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_5__.isFunction)(value.error) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_5__.isFunction)(value.complete);\n}\nfunction isSubscriber(value) {\n    return (value && value instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber) || (isObserver(value) && (0,_Subscription__WEBPACK_IMPORTED_MODULE_6__.isSubscription)(value));\n}\n//# sourceMappingURL=Observable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTBEO0FBQ1Y7QUFDc0I7QUFDMUI7QUFDVjtBQUNhO0FBQ0k7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSx1REFBYztBQUMzRixRQUFRLGdFQUFZO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHVEQUFjO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDBEQUFpQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1QkFBdUI7QUFDaEQ7QUFDQTtBQUNBLGVBQWUseURBQWE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLHFCQUFxQixtQkFBbUIscUJBQXFCLGdCQUFnQix3QkFBd0I7QUFDaEosU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ3FCO0FBQ3RCO0FBQ0E7QUFDQSxnRkFBZ0YsMkNBQU07QUFDdEY7QUFDQTtBQUNBLG9CQUFvQiw0REFBVSxnQkFBZ0IsNERBQVUsaUJBQWlCLDREQUFVO0FBQ25GO0FBQ0E7QUFDQSxzQ0FBc0MsbURBQVUsMkJBQTJCLDZEQUFjO0FBQ3pGO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL09ic2VydmFibGUuanM/MWJhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTYWZlU3Vic2NyaWJlciwgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZXJyb3JDb250ZXh0IH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIG9ic2VydmFibGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGlzU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCkgPyBvYnNlcnZlck9yTmV4dCA6IG5ldyBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBvcGVyYXRvciA9IF9hLm9wZXJhdG9yLCBzb3VyY2UgPSBfYS5zb3VyY2U7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChvcGVyYXRvclxuICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyLCBzb3VyY2UpXG4gICAgICAgICAgICAgICAgOiBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmliZShzdWJzY3JpYmVyKVxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJ5U3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHNpbmspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChuZXh0LCBwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTYWZlU3Vic2NyaWJlcih7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlW1N5bWJvbF9vYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3BlcmF0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHZhbHVlID0geCk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuZnVuY3Rpb24gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IHByb21pc2VDdG9yICE9PSBudWxsICYmIHByb21pc2VDdG9yICE9PSB2b2lkIDAgPyBwcm9taXNlQ3RvciA6IGNvbmZpZy5Qcm9taXNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBQcm9taXNlO1xufVxuZnVuY3Rpb24gaXNPYnNlcnZlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLm5leHQpICYmIGlzRnVuY3Rpb24odmFsdWUuZXJyb3IpICYmIGlzRnVuY3Rpb24odmFsdWUuY29tcGxldGUpO1xufVxuZnVuY3Rpb24gaXNTdWJzY3JpYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHx8IChpc09ic2VydmVyKHZhbHVlKSAmJiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Observable.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Scheduler.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Scheduler.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Scheduler: function() { return /* binding */ Scheduler; }\n/* harmony export */ });\n/* harmony import */ var _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scheduler/dateTimestampProvider */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js\");\n\nvar Scheduler = (function () {\n    function Scheduler(schedulerActionCtor, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.schedulerActionCtor = schedulerActionCtor;\n        this.now = now;\n    }\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.schedulerActionCtor(this, work).schedule(state, delay);\n    };\n    Scheduler.now = _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_0__.dateTimestampProvider.now;\n    return Scheduler;\n}());\n\n//# sourceMappingURL=Scheduler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TY2hlZHVsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEU7QUFDMUU7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0Esb0JBQW9CLG1GQUFxQjtBQUN6QztBQUNBLENBQUM7QUFDb0I7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1NjaGVkdWxlci5qcz81YjJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRhdGVUaW1lc3RhbXBQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlcic7XG52YXIgU2NoZWR1bGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoc2NoZWR1bGVyQWN0aW9uQ3Rvciwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkgeyBub3cgPSBTY2hlZHVsZXIubm93OyB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3RvciA9IHNjaGVkdWxlckFjdGlvbkN0b3I7XG4gICAgICAgIHRoaXMubm93ID0gbm93O1xuICAgIH1cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHdvcmssIGRlbGF5LCBzdGF0ZSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLnNjaGVkdWxlckFjdGlvbkN0b3IodGhpcywgd29yaykuc2NoZWR1bGUoc3RhdGUsIGRlbGF5KTtcbiAgICB9O1xuICAgIFNjaGVkdWxlci5ub3cgPSBkYXRlVGltZXN0YW1wUHJvdmlkZXIubm93O1xuICAgIHJldHVybiBTY2hlZHVsZXI7XG59KCkpO1xuZXhwb3J0IHsgU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TY2hlZHVsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Scheduler.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subject.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subject.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnonymousSubject: function() { return /* binding */ AnonymousSubject; },\n/* harmony export */   Subject: function() { return /* binding */ Subject; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Observable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Subscription */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subscription.js\");\n/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js\");\n/* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/arrRemove */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/arrRemove.js\");\n/* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/errorContext */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/errorContext.js\");\n\n\n\n\n\n\nvar Subject = (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.closed = false;\n        _this.currentObservers = null;\n        _this.observers = [];\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype._throwIfClosed = function () {\n        if (this.closed) {\n            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__.ObjectUnsubscribedError();\n        }\n    };\n    Subject.prototype.next = function (value) {\n        var _this = this;\n        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_2__.errorContext)(function () {\n            var e_1, _a;\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                if (!_this.currentObservers) {\n                    _this.currentObservers = Array.from(_this.observers);\n                }\n                try {\n                    for (var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var observer = _c.value;\n                        observer.next(value);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        });\n    };\n    Subject.prototype.error = function (err) {\n        var _this = this;\n        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_2__.errorContext)(function () {\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                _this.hasError = _this.isStopped = true;\n                _this.thrownError = err;\n                var observers = _this.observers;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    };\n    Subject.prototype.complete = function () {\n        var _this = this;\n        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_2__.errorContext)(function () {\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                _this.isStopped = true;\n                var observers = _this.observers;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    };\n    Object.defineProperty(Subject.prototype, \"observed\", {\n        get: function () {\n            var _a;\n            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Subject.prototype._trySubscribe = function (subscriber) {\n        this._throwIfClosed();\n        return _super.prototype._trySubscribe.call(this, subscriber);\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    };\n    Subject.prototype._innerSubscribe = function (subscriber) {\n        var _this = this;\n        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;\n        if (hasError || isStopped) {\n            return _Subscription__WEBPACK_IMPORTED_MODULE_3__.EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new _Subscription__WEBPACK_IMPORTED_MODULE_3__.Subscription(function () {\n            _this.currentObservers = null;\n            (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_4__.arrRemove)(observers, subscriber);\n        });\n    };\n    Subject.prototype._checkFinalizedStatuses = function (subscriber) {\n        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new _Observable__WEBPACK_IMPORTED_MODULE_5__.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(_Observable__WEBPACK_IMPORTED_MODULE_5__.Observable));\n\nvar AnonymousSubject = (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : _Subscription__WEBPACK_IMPORTED_MODULE_3__.EMPTY_SUBSCRIPTION;\n    };\n    return AnonymousSubject;\n}(Subject));\n\n//# sourceMappingURL=Subject.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subject.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subscriber.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subscriber.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EMPTY_OBSERVER: function() { return /* binding */ EMPTY_OBSERVER; },\n/* harmony export */   SafeSubscriber: function() { return /* binding */ SafeSubscriber; },\n/* harmony export */   Subscriber: function() { return /* binding */ Subscriber; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subscription */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subscription.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/config.js\");\n/* harmony import */ var _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/reportUnhandledError */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js\");\n/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util/noop */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/noop.js\");\n/* harmony import */ var _NotificationFactories__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NotificationFactories */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/NotificationFactories.js\");\n/* harmony import */ var _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scheduler/timeoutProvider */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js\");\n/* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/errorContext */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/errorContext.js\");\n\n\n\n\n\n\n\n\n\nvar Subscriber = (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Subscriber, _super);\n    function Subscriber(destination) {\n        var _this = _super.call(this) || this;\n        _this.isStopped = false;\n        if (destination) {\n            _this.destination = destination;\n            if ((0,_Subscription__WEBPACK_IMPORTED_MODULE_1__.isSubscription)(destination)) {\n                destination.add(_this);\n            }\n        }\n        else {\n            _this.destination = EMPTY_OBSERVER;\n        }\n        return _this;\n    }\n    Subscriber.create = function (next, error, complete) {\n        return new SafeSubscriber(next, error, complete);\n    };\n    Subscriber.prototype.next = function (value) {\n        if (this.isStopped) {\n            handleStoppedNotification((0,_NotificationFactories__WEBPACK_IMPORTED_MODULE_2__.nextNotification)(value), this);\n        }\n        else {\n            this._next(value);\n        }\n    };\n    Subscriber.prototype.error = function (err) {\n        if (this.isStopped) {\n            handleStoppedNotification((0,_NotificationFactories__WEBPACK_IMPORTED_MODULE_2__.errorNotification)(err), this);\n        }\n        else {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function () {\n        if (this.isStopped) {\n            handleStoppedNotification(_NotificationFactories__WEBPACK_IMPORTED_MODULE_2__.COMPLETE_NOTIFICATION, this);\n        }\n        else {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.isStopped = true;\n            _super.prototype.unsubscribe.call(this);\n            this.destination = null;\n        }\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        try {\n            this.destination.error(err);\n        }\n        finally {\n            this.unsubscribe();\n        }\n    };\n    Subscriber.prototype._complete = function () {\n        try {\n            this.destination.complete();\n        }\n        finally {\n            this.unsubscribe();\n        }\n    };\n    return Subscriber;\n}(_Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription));\n\nvar _bind = Function.prototype.bind;\nfunction bind(fn, thisArg) {\n    return _bind.call(fn, thisArg);\n}\nvar ConsumerObserver = (function () {\n    function ConsumerObserver(partialObserver) {\n        this.partialObserver = partialObserver;\n    }\n    ConsumerObserver.prototype.next = function (value) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.next) {\n            try {\n                partialObserver.next(value);\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n    };\n    ConsumerObserver.prototype.error = function (err) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.error) {\n            try {\n                partialObserver.error(err);\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n        else {\n            handleUnhandledError(err);\n        }\n    };\n    ConsumerObserver.prototype.complete = function () {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.complete) {\n            try {\n                partialObserver.complete();\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n    };\n    return ConsumerObserver;\n}());\nvar SafeSubscriber = (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SafeSubscriber, _super);\n    function SafeSubscriber(observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        var partialObserver;\n        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_3__.isFunction)(observerOrNext) || !observerOrNext) {\n            partialObserver = {\n                next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),\n                error: error !== null && error !== void 0 ? error : undefined,\n                complete: complete !== null && complete !== void 0 ? complete : undefined,\n            };\n        }\n        else {\n            var context_1;\n            if (_this && _config__WEBPACK_IMPORTED_MODULE_4__.config.useDeprecatedNextContext) {\n                context_1 = Object.create(observerOrNext);\n                context_1.unsubscribe = function () { return _this.unsubscribe(); };\n                partialObserver = {\n                    next: observerOrNext.next && bind(observerOrNext.next, context_1),\n                    error: observerOrNext.error && bind(observerOrNext.error, context_1),\n                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),\n                };\n            }\n            else {\n                partialObserver = observerOrNext;\n            }\n        }\n        _this.destination = new ConsumerObserver(partialObserver);\n        return _this;\n    }\n    return SafeSubscriber;\n}(Subscriber));\n\nfunction handleUnhandledError(error) {\n    if (_config__WEBPACK_IMPORTED_MODULE_4__.config.useDeprecatedSynchronousErrorHandling) {\n        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_5__.captureError)(error);\n    }\n    else {\n        (0,_util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_6__.reportUnhandledError)(error);\n    }\n}\nfunction defaultErrorHandler(err) {\n    throw err;\n}\nfunction handleStoppedNotification(notification, subscriber) {\n    var onStoppedNotification = _config__WEBPACK_IMPORTED_MODULE_4__.config.onStoppedNotification;\n    onStoppedNotification && _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_7__.timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });\n}\nvar EMPTY_OBSERVER = {\n    closed: true,\n    next: _util_noop__WEBPACK_IMPORTED_MODULE_8__.noop,\n    error: defaultErrorHandler,\n    complete: _util_noop__WEBPACK_IMPORTED_MODULE_8__.noop,\n};\n//# sourceMappingURL=Subscriber.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subscriber.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subscription.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subscription.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EMPTY_SUBSCRIPTION: function() { return /* binding */ EMPTY_SUBSCRIPTION; },\n/* harmony export */   Subscription: function() { return /* binding */ Subscription; },\n/* harmony export */   isSubscription: function() { return /* binding */ isSubscription; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n/* harmony import */ var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/UnsubscriptionError */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js\");\n/* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/arrRemove */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/arrRemove.js\");\n\n\n\n\nvar Subscription = (function () {\n    function Subscription(initialTeardown) {\n        this.initialTeardown = initialTeardown;\n        this.closed = false;\n        this._parentage = null;\n        this._finalizers = null;\n    }\n    Subscription.prototype.unsubscribe = function () {\n        var e_1, _a, e_2, _b;\n        var errors;\n        if (!this.closed) {\n            this.closed = true;\n            var _parentage = this._parentage;\n            if (_parentage) {\n                this._parentage = null;\n                if (Array.isArray(_parentage)) {\n                    try {\n                        for (var _parentage_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {\n                            var parent_1 = _parentage_1_1.value;\n                            parent_1.remove(this);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                }\n                else {\n                    _parentage.remove(this);\n                }\n            }\n            var initialFinalizer = this.initialTeardown;\n            if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(initialFinalizer)) {\n                try {\n                    initialFinalizer();\n                }\n                catch (e) {\n                    errors = e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__.UnsubscriptionError ? e.errors : [e];\n                }\n            }\n            var _finalizers = this._finalizers;\n            if (_finalizers) {\n                this._finalizers = null;\n                try {\n                    for (var _finalizers_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {\n                        var finalizer = _finalizers_1_1.value;\n                        try {\n                            execFinalizer(finalizer);\n                        }\n                        catch (err) {\n                            errors = errors !== null && errors !== void 0 ? errors : [];\n                            if (err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__.UnsubscriptionError) {\n                                errors = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(errors)), (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(err.errors));\n                            }\n                            else {\n                                errors.push(err);\n                            }\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n            if (errors) {\n                throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__.UnsubscriptionError(errors);\n            }\n        }\n    };\n    Subscription.prototype.add = function (teardown) {\n        var _a;\n        if (teardown && teardown !== this) {\n            if (this.closed) {\n                execFinalizer(teardown);\n            }\n            else {\n                if (teardown instanceof Subscription) {\n                    if (teardown.closed || teardown._hasParent(this)) {\n                        return;\n                    }\n                    teardown._addParent(this);\n                }\n                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);\n            }\n        }\n    };\n    Subscription.prototype._hasParent = function (parent) {\n        var _parentage = this._parentage;\n        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _parentage = this._parentage;\n        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n    };\n    Subscription.prototype._removeParent = function (parent) {\n        var _parentage = this._parentage;\n        if (_parentage === parent) {\n            this._parentage = null;\n        }\n        else if (Array.isArray(_parentage)) {\n            (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_3__.arrRemove)(_parentage, parent);\n        }\n    };\n    Subscription.prototype.remove = function (teardown) {\n        var _finalizers = this._finalizers;\n        _finalizers && (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_3__.arrRemove)(_finalizers, teardown);\n        if (teardown instanceof Subscription) {\n            teardown._removeParent(this);\n        }\n    };\n    Subscription.EMPTY = (function () {\n        var empty = new Subscription();\n        empty.closed = true;\n        return empty;\n    })();\n    return Subscription;\n}());\n\nvar EMPTY_SUBSCRIPTION = Subscription.EMPTY;\nfunction isSubscription(value) {\n    return (value instanceof Subscription ||\n        (value && 'closed' in value && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value.remove) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value.add) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value.unsubscribe)));\n}\nfunction execFinalizer(finalizer) {\n    if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(finalizer)) {\n        finalizer();\n    }\n    else {\n        finalizer.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscription.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subscription.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/config.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/config.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: function() { return /* binding */ config; }\n/* harmony export */ });\nvar config = {\n    onUnhandledError: null,\n    onStoppedNotification: null,\n    Promise: undefined,\n    useDeprecatedSynchronousErrorHandling: false,\n    useDeprecatedNextContext: false,\n};\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL2NvbmZpZy5qcz84MTk3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIG9uVW5oYW5kbGVkRXJyb3I6IG51bGwsXG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uOiBudWxsLFxuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nOiBmYWxzZSxcbiAgICB1c2VEZXByZWNhdGVkTmV4dENvbnRleHQ6IGZhbHNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/config.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/concat.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/concat.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: function() { return /* binding */ concat; }\n/* harmony export */ });\n/* harmony import */ var _operators_concatAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operators/concatAll */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/concatAll.js\");\n/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/args */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/args.js\");\n/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./from */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n\n\n\nfunction concat() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return (0,_operators_concatAll__WEBPACK_IMPORTED_MODULE_0__.concatAll)()((0,_from__WEBPACK_IMPORTED_MODULE_1__.from)(args, (0,_util_args__WEBPACK_IMPORTED_MODULE_2__.popScheduler)(args)));\n}\n//# sourceMappingURL=concat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbmNhdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1EO0FBQ1A7QUFDZDtBQUN2QjtBQUNQO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0EsV0FBVywrREFBUyxHQUFHLDJDQUFJLE9BQU8sd0RBQVk7QUFDOUM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb25jYXQuanM/ODgyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25jYXRBbGwgfSBmcm9tICcuLi9vcGVyYXRvcnMvY29uY2F0QWxsJztcbmltcG9ydCB7IHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBjb25jYXRBbGwoKShmcm9tKGFyZ3MsIHBvcFNjaGVkdWxlcihhcmdzKSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/concat.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/from.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/from.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   from: function() { return /* binding */ from; }\n/* harmony export */ });\n/* harmony import */ var _scheduled_scheduled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduled/scheduled */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js\");\n/* harmony import */ var _innerFrom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./innerFrom */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js\");\n\n\nfunction from(input, scheduler) {\n    return scheduler ? (0,_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_0__.scheduled)(input, scheduler) : (0,_innerFrom__WEBPACK_IMPORTED_MODULE_1__.innerFrom)(input);\n}\n//# sourceMappingURL=from.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1EO0FBQ1g7QUFDakM7QUFDUCx1QkFBdUIsK0RBQVMscUJBQXFCLHFEQUFTO0FBQzlEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbS5qcz9hMGZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZWQnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi9pbm5lckZyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikgOiBpbm5lckZyb20oaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/from.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromEvent: function() { return /* binding */ fromEvent; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../observable/innerFrom */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js\");\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Observable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _operators_mergeMap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operators/mergeMap */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js\");\n/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isArrayLike */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js\");\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n/* harmony import */ var _util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/mapOneOrManyArgs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js\");\n\n\n\n\n\n\n\nvar nodeEventEmitterMethods = ['addListener', 'removeListener'];\nvar eventTargetMethods = ['addEventListener', 'removeEventListener'];\nvar jqueryMethods = ['on', 'off'];\nfunction fromEvent(target, eventName, options, resultSelector) {\n    if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe((0,_util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_1__.mapOneOrManyArgs)(resultSelector));\n    }\n    var _a = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__read)(isEventTarget(target)\n        ? eventTargetMethods.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [], 2), add = _a[0], remove = _a[1];\n    if (!add) {\n        if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_3__.isArrayLike)(target)) {\n            return (0,_operators_mergeMap__WEBPACK_IMPORTED_MODULE_4__.mergeMap)(function (subTarget) { return fromEvent(subTarget, eventName, options); })((0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_5__.innerFrom)(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new _Observable__WEBPACK_IMPORTED_MODULE_6__.Observable(function (subscriber) {\n        var handler = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return subscriber.next(1 < args.length ? args : args[0]);\n        };\n        add(handler);\n        return function () { return remove(handler); };\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };\n}\nfunction isNodeStyleEventEmitter(target) {\n    return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.addListener) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.on) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.off);\n}\nfunction isEventTarget(target) {\n    return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.addEventListener) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.removeEventListener);\n}\n//# sourceMappingURL=fromEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErQjtBQUNxQjtBQUNUO0FBQ007QUFDQztBQUNGO0FBQ1k7QUFDNUQ7QUFDQTtBQUNBO0FBQ087QUFDUCxRQUFRLDREQUFVO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELHdFQUFnQjtBQUMxRTtBQUNBLGFBQWEsNkNBQU07QUFDbkIseURBQXlELDRCQUE0Qiw0REFBNEQ7QUFDako7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDhEQUFXO0FBQ3ZCLG1CQUFtQiw2REFBUSx3QkFBd0Isa0RBQWtELEVBQUUsZ0VBQVM7QUFDaEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbURBQVU7QUFDekI7QUFDQTtBQUNBLDZCQUE2Qix1QkFBdUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QixLQUFLO0FBQ0w7QUFDQTtBQUNBLG1DQUFtQyw0QkFBNEI7QUFDL0Q7QUFDQTtBQUNBLFdBQVcsNERBQVUsd0JBQXdCLDREQUFVO0FBQ3ZEO0FBQ0E7QUFDQSxXQUFXLDREQUFVLGVBQWUsNERBQVU7QUFDOUM7QUFDQTtBQUNBLFdBQVcsNERBQVUsNkJBQTZCLDREQUFVO0FBQzVEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50LmpzPzc5ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19yZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJy4uL29wZXJhdG9ycy9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBtYXBPbmVPck1hbnlBcmdzIH0gZnJvbSAnLi4vdXRpbC9tYXBPbmVPck1hbnlBcmdzJztcbnZhciBub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyA9IFsnYWRkTGlzdGVuZXInLCAncmVtb3ZlTGlzdGVuZXInXTtcbnZhciBldmVudFRhcmdldE1ldGhvZHMgPSBbJ2FkZEV2ZW50TGlzdGVuZXInLCAncmVtb3ZlRXZlbnRMaXN0ZW5lciddO1xudmFyIGpxdWVyeU1ldGhvZHMgPSBbJ29uJywgJ29mZiddO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucywgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgICByZXN1bHRTZWxlY3RvciA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKS5waXBlKG1hcE9uZU9yTWFueUFyZ3MocmVzdWx0U2VsZWN0b3IpKTtcbiAgICB9XG4gICAgdmFyIF9hID0gX19yZWFkKGlzRXZlbnRUYXJnZXQodGFyZ2V0KVxuICAgICAgICA/IGV2ZW50VGFyZ2V0TWV0aG9kcy5tYXAoZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiB0YXJnZXRbbWV0aG9kTmFtZV0oZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTsgfTsgfSlcbiAgICAgICAgOlxuICAgICAgICAgICAgaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KVxuICAgICAgICAgICAgICAgID8gbm9kZUV2ZW50RW1pdHRlck1ldGhvZHMubWFwKHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICA6IGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICA/IGpxdWVyeU1ldGhvZHMubWFwKHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgOiBbXSwgMiksIGFkZCA9IF9hWzBdLCByZW1vdmUgPSBfYVsxXTtcbiAgICBpZiAoIWFkZCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2UodGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChzdWJUYXJnZXQpIHsgcmV0dXJuIGZyb21FdmVudChzdWJUYXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucyk7IH0pKGlubmVyRnJvbSh0YXJnZXQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWFkZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGV2ZW50IHRhcmdldCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlci5uZXh0KDEgPCBhcmdzLmxlbmd0aCA/IGFyZ3MgOiBhcmdzWzBdKTtcbiAgICAgICAgfTtcbiAgICAgICAgYWRkKGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKGhhbmRsZXIpOyB9O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiB0YXJnZXRbbWV0aG9kTmFtZV0oZXZlbnROYW1lLCBoYW5kbGVyKTsgfTsgfTtcbn1cbmZ1bmN0aW9uIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5hZGRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbih0YXJnZXQucmVtb3ZlTGlzdGVuZXIpO1xufVxuZnVuY3Rpb24gaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQub24pICYmIGlzRnVuY3Rpb24odGFyZ2V0Lm9mZik7XG59XG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromArrayLike: function() { return /* binding */ fromArrayLike; },\n/* harmony export */   fromAsyncIterable: function() { return /* binding */ fromAsyncIterable; },\n/* harmony export */   fromInteropObservable: function() { return /* binding */ fromInteropObservable; },\n/* harmony export */   fromIterable: function() { return /* binding */ fromIterable; },\n/* harmony export */   fromPromise: function() { return /* binding */ fromPromise; },\n/* harmony export */   fromReadableStreamLike: function() { return /* binding */ fromReadableStreamLike; },\n/* harmony export */   innerFrom: function() { return /* binding */ innerFrom; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArrayLike */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js\");\n/* harmony import */ var _util_isPromise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isPromise */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isPromise.js\");\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isInteropObservable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js\");\n/* harmony import */ var _util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isAsyncIterable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js\");\n/* harmony import */ var _util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/throwUnobservableError */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js\");\n/* harmony import */ var _util_isIterable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/isIterable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isIterable.js\");\n/* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/isReadableStreamLike */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js\");\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n/* harmony import */ var _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/reportUnhandledError */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js\");\n/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../symbol/observable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/symbol/observable.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nfunction innerFrom(input) {\n    if (input instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable) {\n        return input;\n    }\n    if (input != null) {\n        if ((0,_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_1__.isInteropObservable)(input)) {\n            return fromInteropObservable(input);\n        }\n        if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__.isArrayLike)(input)) {\n            return fromArrayLike(input);\n        }\n        if ((0,_util_isPromise__WEBPACK_IMPORTED_MODULE_3__.isPromise)(input)) {\n            return fromPromise(input);\n        }\n        if ((0,_util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_4__.isAsyncIterable)(input)) {\n            return fromAsyncIterable(input);\n        }\n        if ((0,_util_isIterable__WEBPACK_IMPORTED_MODULE_5__.isIterable)(input)) {\n            return fromIterable(input);\n        }\n        if ((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_6__.isReadableStreamLike)(input)) {\n            return fromReadableStreamLike(input);\n        }\n    }\n    throw (0,_util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_7__.createInvalidObservableTypeError)(input);\n}\nfunction fromInteropObservable(obj) {\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\n        var obs = obj[_symbol_observable__WEBPACK_IMPORTED_MODULE_8__.observable]();\n        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_9__.isFunction)(obs.subscribe)) {\n            return obs.subscribe(subscriber);\n        }\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    });\n}\nfunction fromArrayLike(array) {\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\n        for (var i = 0; i < array.length && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        subscriber.complete();\n    });\n}\nfunction fromPromise(promise) {\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\n        promise\n            .then(function (value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function (err) { return subscriber.error(err); })\n            .then(null, _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_10__.reportUnhandledError);\n    });\n}\nfunction fromIterable(iterable) {\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\n        var e_1, _a;\n        try {\n            for (var iterable_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__values)(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {\n                var value = iterable_1_1.value;\n                subscriber.next(value);\n                if (subscriber.closed) {\n                    return;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        subscriber.complete();\n    });\n}\nfunction fromAsyncIterable(asyncIterable) {\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\n        process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });\n    });\n}\nfunction fromReadableStreamLike(readableStream) {\n    return fromAsyncIterable((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_6__.readableStreamLikeToAsyncGenerator)(readableStream));\n}\nfunction process(asyncIterable, subscriber) {\n    var asyncIterable_1, asyncIterable_1_1;\n    var e_2, _a;\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__awaiter)(this, void 0, void 0, function () {\n        var value, e_2_1;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__generator)(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _b.trys.push([0, 5, 6, 11]);\n                    asyncIterable_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(asyncIterable);\n                    _b.label = 1;\n                case 1: return [4, asyncIterable_1.next()];\n                case 2:\n                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];\n                    value = asyncIterable_1_1.value;\n                    subscriber.next(value);\n                    if (subscriber.closed) {\n                        return [2];\n                    }\n                    _b.label = 3;\n                case 3: return [3, 1];\n                case 4: return [3, 11];\n                case 5:\n                    e_2_1 = _b.sent();\n                    e_2 = { error: e_2_1 };\n                    return [3, 11];\n                case 6:\n                    _b.trys.push([6, , 9, 10]);\n                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];\n                    return [4, _a.call(asyncIterable_1)];\n                case 7:\n                    _b.sent();\n                    _b.label = 8;\n                case 8: return [3, 10];\n                case 9:\n                    if (e_2) throw e_2.error;\n                    return [7];\n                case 10: return [7];\n                case 11:\n                    subscriber.complete();\n                    return [2];\n            }\n        });\n    });\n}\n//# sourceMappingURL=innerFrom.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/of.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/of.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   of: function() { return /* binding */ of; }\n/* harmony export */ });\n/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/args */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/args.js\");\n/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./from */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n\n\nfunction of() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__.popScheduler)(args);\n    return (0,_from__WEBPACK_IMPORTED_MODULE_1__.from)(args, scheduler);\n}\n//# sourceMappingURL=of.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL29mLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QztBQUNkO0FBQ3ZCO0FBQ1A7QUFDQSxxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7QUFDQSxvQkFBb0Isd0RBQVk7QUFDaEMsV0FBVywyQ0FBSTtBQUNmO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvb2YuanM/N2I2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwb3BTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2FyZ3MnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vZnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBwb3BTY2hlZHVsZXIoYXJncyk7XG4gICAgcmV0dXJuIGZyb20oYXJncywgc2NoZWR1bGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9mLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/of.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OperatorSubscriber: function() { return /* binding */ OperatorSubscriber; },\n/* harmony export */   createOperatorSubscriber: function() { return /* binding */ createOperatorSubscriber; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscriber */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subscriber.js\");\n\n\nfunction createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nvar OperatorSubscriber = (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(OperatorSubscriber, _super);\n    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        var _this = _super.call(this, destination) || this;\n        _this.onFinalize = onFinalize;\n        _this.shouldUnsubscribe = shouldUnsubscribe;\n        _this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : _super.prototype._next;\n        _this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : _super.prototype._error;\n        _this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : _super.prototype._complete;\n        return _this;\n    }\n    OperatorSubscriber.prototype.unsubscribe = function () {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            var closed_1 = this.closed;\n            _super.prototype.unsubscribe.call(this);\n            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    };\n    return OperatorSubscriber;\n}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__.Subscriber));\n\n//# sourceMappingURL=OperatorSubscriber.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0M7QUFDUztBQUNwQztBQUNQO0FBQ0E7QUFDQTtBQUNBLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLENBQUMsbURBQVU7QUFDa0I7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXIuanM/OTFmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSkge1xuICAgIHJldHVybiBuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpO1xufVxudmFyIE9wZXJhdG9yU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9wZXJhdG9yU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSwgc2hvdWxkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9uRmluYWxpemUgPSBvbkZpbmFsaXplO1xuICAgICAgICBfdGhpcy5zaG91bGRVbnN1YnNjcmliZSA9IHNob3VsZFVuc3Vic2NyaWJlO1xuICAgICAgICBfdGhpcy5fbmV4dCA9IG9uTmV4dFxuICAgICAgICAgICAgPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbk5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9uZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBvbkVycm9yXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2Vycm9yO1xuICAgICAgICBfdGhpcy5fY29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9wZXJhdG9yU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZFVuc3Vic2NyaWJlIHx8IHRoaXMuc2hvdWxkVW5zdWJzY3JpYmUoKSkge1xuICAgICAgICAgICAgdmFyIGNsb3NlZF8xID0gdGhpcy5jbG9zZWQ7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAhY2xvc2VkXzEgJiYgKChfYSA9IHRoaXMub25GaW5hbGl6ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gT3BlcmF0b3JTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wZXJhdG9yU3Vic2NyaWJlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/concatAll.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/concatAll.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concatAll: function() { return /* binding */ concatAll; }\n/* harmony export */ });\n/* harmony import */ var _mergeAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeAll */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js\");\n\nfunction concatAll() {\n    return (0,_mergeAll__WEBPACK_IMPORTED_MODULE_0__.mergeAll)(1);\n}\n//# sourceMappingURL=concatAll.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0QWxsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNDO0FBQy9CO0FBQ1AsV0FBVyxtREFBUTtBQUNuQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0QWxsLmpzP2U5NWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVyZ2VBbGwgfSBmcm9tICcuL21lcmdlQWxsJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRBbGwoKSB7XG4gICAgcmV0dXJuIG1lcmdlQWxsKDEpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0QWxsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/concatAll.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   distinctUntilChanged: function() { return /* binding */ distinctUntilChanged; }\n/* harmony export */ });\n/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/identity */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/identity.js\");\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\");\n\n\n\nfunction distinctUntilChanged(comparator, keySelector) {\n    if (keySelector === void 0) { keySelector = _util_identity__WEBPACK_IMPORTED_MODULE_0__.identity; }\n    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)(function (source, subscriber) {\n        var previousKey;\n        var first = true;\n        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, function (value) {\n            var currentKey = keySelector(value);\n            if (first || !comparator(previousKey, currentKey)) {\n                first = false;\n                previousKey = currentKey;\n                subscriber.next(value);\n            }\n        }));\n    });\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\n//# sourceMappingURL=distinctUntilChanged.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3RVbnRpbENoYW5nZWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNMO0FBQ3lCO0FBQ3pEO0FBQ1Asa0NBQWtDLGNBQWMsb0RBQVE7QUFDeEQ7QUFDQSxXQUFXLG1EQUFPO0FBQ2xCO0FBQ0E7QUFDQSx5QkFBeUIsNkVBQXdCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0VW50aWxDaGFuZ2VkLmpzP2NiOWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0VW50aWxDaGFuZ2VkKGNvbXBhcmF0b3IsIGtleVNlbGVjdG9yKSB7XG4gICAgaWYgKGtleVNlbGVjdG9yID09PSB2b2lkIDApIHsga2V5U2VsZWN0b3IgPSBpZGVudGl0eTsgfVxuICAgIGNvbXBhcmF0b3IgPSBjb21wYXJhdG9yICE9PSBudWxsICYmIGNvbXBhcmF0b3IgIT09IHZvaWQgMCA/IGNvbXBhcmF0b3IgOiBkZWZhdWx0Q29tcGFyZTtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBwcmV2aW91c0tleTtcbiAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEtleSA9IGtleVNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChmaXJzdCB8fCAhY29tcGFyYXRvcihwcmV2aW91c0tleSwgY3VycmVudEtleSkpIHtcbiAgICAgICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzS2V5ID0gY3VycmVudEtleTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q29tcGFyZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdFVudGlsQ2hhbmdlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/filter.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/filter.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filter: function() { return /* binding */ filter; }\n/* harmony export */ });\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\");\n\n\nfunction filter(predicate, thisArg) {\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (source, subscriber) {\n        var index = 0;\n        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));\n    });\n}\n//# sourceMappingURL=filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmlsdGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1QztBQUN5QjtBQUN6RDtBQUNQLFdBQVcsbURBQU87QUFDbEI7QUFDQSx5QkFBeUIsNkVBQXdCLGdDQUFnQywyRUFBMkU7QUFDNUosS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9maWx0ZXIuanM/YWZlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXIocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/filter.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/finalize.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/finalize.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   finalize: function() { return /* binding */ finalize; }\n/* harmony export */ });\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n\nfunction finalize(callback) {\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (source, subscriber) {\n        try {\n            source.subscribe(subscriber);\n        }\n        finally {\n            subscriber.add(callback);\n        }\n    });\n}\n//# sourceMappingURL=finalize.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmluYWxpemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUM7QUFDaEM7QUFDUCxXQUFXLG1EQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmluYWxpemUuanM/OWM4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmV4cG9ydCBmdW5jdGlvbiBmaW5hbGl6ZShjYWxsYmFjaykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmFsaXplLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/finalize.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/map.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/map.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   map: function() { return /* binding */ map; }\n/* harmony export */ });\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\");\n\n\nfunction map(project, thisArg) {\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (source, subscriber) {\n        var index = 0;\n        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, function (value) {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n//# sourceMappingURL=map.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1QztBQUN5QjtBQUN6RDtBQUNQLFdBQVcsbURBQU87QUFDbEI7QUFDQSx5QkFBeUIsNkVBQXdCO0FBQ2pEO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzPzVkNDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWFwKHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHByb2plY3QuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/map.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeAll: function() { return /* binding */ mergeAll; }\n/* harmony export */ });\n/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeMap */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js\");\n/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/identity.js\");\n\n\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Infinity; }\n    return (0,_mergeMap__WEBPACK_IMPORTED_MODULE_0__.mergeMap)(_util_identity__WEBPACK_IMPORTED_MODULE_1__.identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VBbGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXNDO0FBQ007QUFDckM7QUFDUCxpQ0FBaUM7QUFDakMsV0FBVyxtREFBUSxDQUFDLG9EQUFRO0FBQzVCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUFsbC5qcz84ZjI5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQWxsKGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiBtZXJnZU1hcChpZGVudGl0eSwgY29uY3VycmVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeInternals: function() { return /* binding */ mergeInternals; }\n/* harmony export */ });\n/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/innerFrom */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js\");\n/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/executeSchedule */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js\");\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\");\n\n\n\nfunction mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    var buffer = [];\n    var active = 0;\n    var index = 0;\n    var isComplete = false;\n    var checkComplete = function () {\n        if (isComplete && !buffer.length && !active) {\n            subscriber.complete();\n        }\n    };\n    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };\n    var doInnerSub = function (value) {\n        expand && subscriber.next(value);\n        active++;\n        var innerComplete = false;\n        (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__.innerFrom)(project(value, index++)).subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, function (innerValue) {\n            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n            if (expand) {\n                outerNext(innerValue);\n            }\n            else {\n                subscriber.next(innerValue);\n            }\n        }, function () {\n            innerComplete = true;\n        }, undefined, function () {\n            if (innerComplete) {\n                try {\n                    active--;\n                    var _loop_1 = function () {\n                        var bufferedValue = buffer.shift();\n                        if (innerSubScheduler) {\n                            (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__.executeSchedule)(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });\n                        }\n                        else {\n                            doInnerSub(bufferedValue);\n                        }\n                    };\n                    while (buffer.length && active < concurrent) {\n                        _loop_1();\n                    }\n                    checkComplete();\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }\n        }));\n    };\n    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, outerNext, function () {\n        isComplete = true;\n        checkComplete();\n    }));\n    return function () {\n        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n    };\n}\n//# sourceMappingURL=mergeInternals.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VJbnRlcm5hbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRDtBQUNNO0FBQ007QUFDekQ7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdFQUFTLG9DQUFvQyw2RUFBd0I7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHNFQUFlLDhDQUE4QyxtQ0FBbUM7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHFCQUFxQiw2RUFBd0I7QUFDN0M7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VJbnRlcm5hbHMuanM/N2M1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50LCBvbkJlZm9yZU5leHQsIGV4cGFuZCwgaW5uZXJTdWJTY2hlZHVsZXIsIGFkZGl0aW9uYWxGaW5hbGl6ZXIpIHtcbiAgICB2YXIgYnVmZmVyID0gW107XG4gICAgdmFyIGFjdGl2ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvdXRlck5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIChhY3RpdmUgPCBjb25jdXJyZW50ID8gZG9Jbm5lclN1Yih2YWx1ZSkgOiBidWZmZXIucHVzaCh2YWx1ZSkpOyB9O1xuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBhY3RpdmUrKztcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgICAgICBvbkJlZm9yZU5leHQgPT09IG51bGwgfHwgb25CZWZvcmVOZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJlZm9yZU5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgb3V0ZXJOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbm5lckNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaW5uZXJDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS0tO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZFZhbHVlID0gYnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJTdWJTY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgaW5uZXJTdWJTY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggJiYgYWN0aXZlIDwgY29uY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvdXRlck5leHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gbnVsbCB8fCBhZGRpdGlvbmFsRmluYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhZGRpdGlvbmFsRmluYWxpemVyKCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeMap: function() { return /* binding */ mergeMap; }\n/* harmony export */ });\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/innerFrom */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js\");\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n/* harmony import */ var _mergeInternals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mergeInternals */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js\");\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n\n\n\n\n\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Infinity; }\n    if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(resultSelector)) {\n        return mergeMap(function (a, i) { return (0,_map__WEBPACK_IMPORTED_MODULE_1__.map)(function (b, ii) { return resultSelector(a, b, i, ii); })((0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__.innerFrom)(project(a, i))); }, concurrent);\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_3__.operate)(function (source, subscriber) { return (0,_mergeInternals__WEBPACK_IMPORTED_MODULE_4__.mergeInternals)(source, subscriber, project, concurrent); });\n}\n//# sourceMappingURL=mergeMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTRCO0FBQ3dCO0FBQ2I7QUFDVztBQUNGO0FBQ3pDO0FBQ1AsaUNBQWlDO0FBQ2pDLFFBQVEsNERBQVU7QUFDbEIsMENBQTBDLE9BQU8seUNBQUcsb0JBQW9CLHFDQUFxQyxFQUFFLGdFQUFTLG1CQUFtQjtBQUMzSTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbURBQU8saUNBQWlDLE9BQU8sK0RBQWMsNENBQTRDO0FBQ3BIO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcC5qcz8yNzQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgbWVyZ2VJbnRlcm5hbHMgfSBmcm9tICcuL21lcmdlSW50ZXJuYWxzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICBpZiAoaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikgeyByZXR1cm4gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   observeOn: function() { return /* binding */ observeOn; }\n/* harmony export */ });\n/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/executeSchedule */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js\");\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\");\n\n\n\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (source, subscriber) {\n        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, function (value) { return (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__.executeSchedule)(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__.executeSchedule)(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__.executeSchedule)(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));\n    });\n}\n//# sourceMappingURL=observeOn.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvb2JzZXJ2ZU9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMEQ7QUFDbkI7QUFDeUI7QUFDekQ7QUFDUCw0QkFBNEI7QUFDNUIsV0FBVyxtREFBTztBQUNsQix5QkFBeUIsNkVBQXdCLGdDQUFnQyxPQUFPLHNFQUFlLHNDQUFzQyxnQ0FBZ0MsV0FBVyxnQkFBZ0IsT0FBTyxzRUFBZSxzQ0FBc0MsK0JBQStCLFdBQVcsbUJBQW1CLE9BQU8sc0VBQWUsc0NBQXNDLCtCQUErQixXQUFXO0FBQ3ZhLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvb2JzZXJ2ZU9uLmpzPzZmMzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSwgZGVsYXkpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9LCBkZWxheSk7IH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVPbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/scan.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/scan.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scan: function() { return /* binding */ scan; }\n/* harmony export */ });\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n/* harmony import */ var _scanInternals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scanInternals */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js\");\n\n\nfunction scan(accumulator, seed) {\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((0,_scanInternals__WEBPACK_IMPORTED_MODULE_1__.scanInternals)(accumulator, seed, arguments.length >= 2, true));\n}\n//# sourceMappingURL=scan.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2Nhbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUM7QUFDUztBQUN6QztBQUNQLFdBQVcsbURBQU8sQ0FBQyw2REFBYTtBQUNoQztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2Nhbi5qcz84ZjMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgc2NhbkludGVybmFscyB9IGZyb20gJy4vc2NhbkludGVybmFscyc7XG5leHBvcnQgZnVuY3Rpb24gc2NhbihhY2N1bXVsYXRvciwgc2VlZCkge1xuICAgIHJldHVybiBvcGVyYXRlKHNjYW5JbnRlcm5hbHMoYWNjdW11bGF0b3IsIHNlZWQsIGFyZ3VtZW50cy5sZW5ndGggPj0gMiwgdHJ1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2Nhbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/scan.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scanInternals: function() { return /* binding */ scanInternals; }\n/* harmony export */ });\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OperatorSubscriber */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\");\n\nfunction scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {\n    return function (source, subscriber) {\n        var hasState = hasSeed;\n        var state = seed;\n        var index = 0;\n        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_0__.createOperatorSubscriber)(subscriber, function (value) {\n            var i = index++;\n            state = hasState\n                ?\n                    accumulator(state, value, i)\n                :\n                    ((hasState = true), value);\n            emitOnNext && subscriber.next(state);\n        }, emitBeforeComplete &&\n            (function () {\n                hasState && subscriber.next(state);\n                subscriber.complete();\n            })));\n    };\n}\n//# sourceMappingURL=scanInternals.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2NhbkludGVybmFscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRTtBQUN6RDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDZFQUF3QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2NhbkludGVybmFscy5qcz9jYTcyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBzY2FuSW50ZXJuYWxzKGFjY3VtdWxhdG9yLCBzZWVkLCBoYXNTZWVkLCBlbWl0T25OZXh0LCBlbWl0QmVmb3JlQ29tcGxldGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFzU3RhdGUgPSBoYXNTZWVkO1xuICAgICAgICB2YXIgc3RhdGUgPSBzZWVkO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gaW5kZXgrKztcbiAgICAgICAgICAgIHN0YXRlID0gaGFzU3RhdGVcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yKHN0YXRlLCB2YWx1ZSwgaSlcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICgoaGFzU3RhdGUgPSB0cnVlKSwgdmFsdWUpO1xuICAgICAgICAgICAgZW1pdE9uTmV4dCAmJiBzdWJzY3JpYmVyLm5leHQoc3RhdGUpO1xuICAgICAgICB9LCBlbWl0QmVmb3JlQ29tcGxldGUgJiZcbiAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaGFzU3RhdGUgJiYgc3Vic2NyaWJlci5uZXh0KHN0YXRlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KSkpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2FuSW50ZXJuYWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   skipUntil: function() { return /* binding */ skipUntil; }\n/* harmony export */ });\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\");\n/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../observable/innerFrom */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js\");\n/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/noop */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/noop.js\");\n\n\n\n\nfunction skipUntil(notifier) {\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (source, subscriber) {\n        var taking = false;\n        var skipSubscriber = (0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, function () {\n            skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();\n            taking = true;\n        }, _util_noop__WEBPACK_IMPORTED_MODULE_2__.noop);\n        (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_3__.innerFrom)(notifier).subscribe(skipSubscriber);\n        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, function (value) { return taking && subscriber.next(value); }));\n    });\n}\n//# sourceMappingURL=skipUntil.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFVudGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXVDO0FBQ3lCO0FBQ1o7QUFDaEI7QUFDN0I7QUFDUCxXQUFXLG1EQUFPO0FBQ2xCO0FBQ0EsNkJBQTZCLDZFQUF3QjtBQUNyRDtBQUNBO0FBQ0EsU0FBUyxFQUFFLDRDQUFJO0FBQ2YsUUFBUSxnRUFBUztBQUNqQix5QkFBeUIsNkVBQXdCLGdDQUFnQywwQ0FBMEM7QUFDM0gsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9za2lwVW50aWwuanM/OWQwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlsL25vb3AnO1xuZXhwb3J0IGZ1bmN0aW9uIHNraXBVbnRpbChub3RpZmllcikge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHRha2luZyA9IGZhbHNlO1xuICAgICAgICB2YXIgc2tpcFN1YnNjcmliZXIgPSBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2tpcFN1YnNjcmliZXIgPT09IG51bGwgfHwgc2tpcFN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNraXBTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0YWtpbmcgPSB0cnVlO1xuICAgICAgICB9LCBub29wKTtcbiAgICAgICAgaW5uZXJGcm9tKG5vdGlmaWVyKS5zdWJzY3JpYmUoc2tpcFN1YnNjcmliZXIpO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRha2luZyAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1za2lwVW50aWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/startWith.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/startWith.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startWith: function() { return /* binding */ startWith; }\n/* harmony export */ });\n/* harmony import */ var _observable_concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/concat */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/concat.js\");\n/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/args */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/args.js\");\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n\n\n\nfunction startWith() {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        values[_i] = arguments[_i];\n    }\n    var scheduler = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__.popScheduler)(values);\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)(function (source, subscriber) {\n        (scheduler ? (0,_observable_concat__WEBPACK_IMPORTED_MODULE_2__.concat)(values, source, scheduler) : (0,_observable_concat__WEBPACK_IMPORTED_MODULE_2__.concat)(values, source)).subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=startWith.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3RhcnRXaXRoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEM7QUFDRjtBQUNMO0FBQ2hDO0FBQ1A7QUFDQSxxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7QUFDQSxvQkFBb0Isd0RBQVk7QUFDaEMsV0FBVyxtREFBTztBQUNsQixxQkFBcUIsMERBQU0sOEJBQThCLDBEQUFNO0FBQy9ELEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3RhcnRXaXRoLmpzPzQwOWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uY2F0IH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9jb25jYXQnO1xuaW1wb3J0IHsgcG9wU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9hcmdzJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0V2l0aCgpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFsdWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBwb3BTY2hlZHVsZXIodmFsdWVzKTtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIChzY2hlZHVsZXIgPyBjb25jYXQodmFsdWVzLCBzb3VyY2UsIHNjaGVkdWxlcikgOiBjb25jYXQodmFsdWVzLCBzb3VyY2UpKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGFydFdpdGguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/startWith.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   subscribeOn: function() { return /* binding */ subscribeOn; }\n/* harmony export */ });\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (source, subscriber) {\n        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));\n    });\n}\n//# sourceMappingURL=subscribeOn.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUM7QUFDaEM7QUFDUCw0QkFBNEI7QUFDNUIsV0FBVyxtREFBTztBQUNsQix3REFBd0Qsc0NBQXNDO0FBQzlGLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24uanM/MzRiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTsgfSwgZGVsYXkpKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/switchMap.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/switchMap.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   switchMap: function() { return /* binding */ switchMap; }\n/* harmony export */ });\n/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/innerFrom */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js\");\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\");\n\n\n\nfunction switchMap(project, resultSelector) {\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (source, subscriber) {\n        var innerSubscriber = null;\n        var index = 0;\n        var isComplete = false;\n        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };\n        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, function (value) {\n            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n            var innerIndex = 0;\n            var outerIndex = index++;\n            (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__.innerFrom)(project(value, outerIndex)).subscribe((innerSubscriber = (0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {\n                innerSubscriber = null;\n                checkComplete();\n            })));\n        }, function () {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n//# sourceMappingURL=switchMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0Q7QUFDYjtBQUN5QjtBQUN6RDtBQUNQLFdBQVcsbURBQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDLHlCQUF5Qiw2RUFBd0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnRUFBUywwREFBMEQsNkVBQXdCLHFDQUFxQyxvSEFBb0g7QUFDaFE7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaE1hcC5qcz9mOWI0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHN3aXRjaE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNDb21wbGV0ZSAmJiAhaW5uZXJTdWJzY3JpYmVyICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpbm5lclN1YnNjcmliZXIgPT09IG51bGwgfHwgaW5uZXJTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbm5lclN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHZhciBpbm5lckluZGV4ID0gMDtcbiAgICAgICAgICAgIHZhciBvdXRlckluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgICAgIGlubmVyRnJvbShwcm9qZWN0KHZhbHVlLCBvdXRlckluZGV4KSkuc3Vic2NyaWJlKChpbm5lclN1YnNjcmliZXIgPSBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKGlubmVyVmFsdWUpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dChyZXN1bHRTZWxlY3RvciA/IHJlc3VsdFNlbGVjdG9yKHZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KyspIDogaW5uZXJWYWx1ZSk7IH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbm5lclN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hNYXAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/switchMap.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   takeUntil: function() { return /* binding */ takeUntil; }\n/* harmony export */ });\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\");\n/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observable/innerFrom */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js\");\n/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/noop */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/noop.js\");\n\n\n\n\nfunction takeUntil(notifier) {\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (source, subscriber) {\n        (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_1__.innerFrom)(notifier).subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, function () { return subscriber.complete(); }, _util_noop__WEBPACK_IMPORTED_MODULE_3__.noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=takeUntil.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVVudGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXVDO0FBQ3lCO0FBQ1o7QUFDaEI7QUFDN0I7QUFDUCxXQUFXLG1EQUFPO0FBQ2xCLFFBQVEsZ0VBQVMscUJBQXFCLDZFQUF3QiwyQkFBMkIsK0JBQStCLEVBQUUsNENBQUk7QUFDOUg7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VVbnRpbC5qcz8wMDE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWwvbm9vcCc7XG5leHBvcnQgZnVuY3Rpb24gdGFrZVVudGlsKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBpbm5lckZyb20obm90aWZpZXIpLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9LCBub29wKSk7XG4gICAgICAgICFzdWJzY3JpYmVyLmNsb3NlZCAmJiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZVVudGlsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/timeout.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/timeout.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TimeoutError: function() { return /* binding */ TimeoutError; },\n/* harmony export */   timeout: function() { return /* binding */ timeout; }\n/* harmony export */ });\n/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scheduler/async */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/async.js\");\n/* harmony import */ var _util_isDate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isDate */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isDate.js\");\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/lift */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\");\n/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../observable/innerFrom */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js\");\n/* harmony import */ var _util_createErrorClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/createErrorClass */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js\");\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./OperatorSubscriber */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\");\n/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/executeSchedule */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js\");\n\n\n\n\n\n\n\nvar TimeoutError = (0,_util_createErrorClass__WEBPACK_IMPORTED_MODULE_0__.createErrorClass)(function (_super) {\n    return function TimeoutErrorImpl(info) {\n        if (info === void 0) { info = null; }\n        _super(this);\n        this.message = 'Timeout has occurred';\n        this.name = 'TimeoutError';\n        this.info = info;\n    };\n});\nfunction timeout(config, schedulerArg) {\n    var _a = ((0,_util_isDate__WEBPACK_IMPORTED_MODULE_1__.isValidDate)(config) ? { first: config } : typeof config === 'number' ? { each: config } : config), first = _a.first, each = _a.each, _b = _a.with, _with = _b === void 0 ? timeoutErrorFactory : _b, _c = _a.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : _scheduler_async__WEBPACK_IMPORTED_MODULE_2__.asyncScheduler : _c, _d = _a.meta, meta = _d === void 0 ? null : _d;\n    if (first == null && each == null) {\n        throw new TypeError('No timeout provided.');\n    }\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_3__.operate)(function (source, subscriber) {\n        var originalSourceSubscription;\n        var timerSubscription;\n        var lastValue = null;\n        var seen = 0;\n        var startTimer = function (delay) {\n            timerSubscription = (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_4__.executeSchedule)(subscriber, scheduler, function () {\n                try {\n                    originalSourceSubscription.unsubscribe();\n                    (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_5__.innerFrom)(_with({\n                        meta: meta,\n                        lastValue: lastValue,\n                        seen: seen,\n                    })).subscribe(subscriber);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }, delay);\n        };\n        originalSourceSubscription = source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_6__.createOperatorSubscriber)(subscriber, function (value) {\n            timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();\n            seen++;\n            subscriber.next((lastValue = value));\n            each > 0 && startTimer(each);\n        }, undefined, undefined, function () {\n            if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {\n                timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();\n            }\n            lastValue = null;\n        }));\n        !seen && startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler.now()) : each);\n    });\n}\nfunction timeoutErrorFactory(info) {\n    throw new TimeoutError(info);\n}\n//# sourceMappingURL=timeout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZW91dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBb0Q7QUFDUDtBQUNOO0FBQ2E7QUFDUTtBQUNJO0FBQ047QUFDbkQsbUJBQW1CLHdFQUFnQjtBQUMxQztBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNNO0FBQ1AsY0FBYyx5REFBVyxhQUFhLGdCQUFnQixpQ0FBaUMsZUFBZSw4TkFBOE4sNERBQWM7QUFDbFY7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtREFBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHNFQUFlO0FBQy9DO0FBQ0E7QUFDQSxvQkFBb0IsZ0VBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esc0RBQXNELDZFQUF3QjtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZW91dC5qcz9mYTg1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGlzVmFsaWREYXRlIH0gZnJvbSAnLi4vdXRpbC9pc0RhdGUnO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi4vdXRpbC9jcmVhdGVFcnJvckNsYXNzJztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCB2YXIgVGltZW91dEVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIFRpbWVvdXRFcnJvckltcGwoaW5mbykge1xuICAgICAgICBpZiAoaW5mbyA9PT0gdm9pZCAwKSB7IGluZm8gPSBudWxsOyB9XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1RpbWVvdXQgaGFzIG9jY3VycmVkJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1RpbWVvdXRFcnJvcic7XG4gICAgICAgIHRoaXMuaW5mbyA9IGluZm87XG4gICAgfTtcbn0pO1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXQoY29uZmlnLCBzY2hlZHVsZXJBcmcpIHtcbiAgICB2YXIgX2EgPSAoaXNWYWxpZERhdGUoY29uZmlnKSA/IHsgZmlyc3Q6IGNvbmZpZyB9IDogdHlwZW9mIGNvbmZpZyA9PT0gJ251bWJlcicgPyB7IGVhY2g6IGNvbmZpZyB9IDogY29uZmlnKSwgZmlyc3QgPSBfYS5maXJzdCwgZWFjaCA9IF9hLmVhY2gsIF9iID0gX2Eud2l0aCwgX3dpdGggPSBfYiA9PT0gdm9pZCAwID8gdGltZW91dEVycm9yRmFjdG9yeSA6IF9iLCBfYyA9IF9hLnNjaGVkdWxlciwgc2NoZWR1bGVyID0gX2MgPT09IHZvaWQgMCA/IHNjaGVkdWxlckFyZyAhPT0gbnVsbCAmJiBzY2hlZHVsZXJBcmcgIT09IHZvaWQgMCA/IHNjaGVkdWxlckFyZyA6IGFzeW5jU2NoZWR1bGVyIDogX2MsIF9kID0gX2EubWV0YSwgbWV0YSA9IF9kID09PSB2b2lkIDAgPyBudWxsIDogX2Q7XG4gICAgaWYgKGZpcnN0ID09IG51bGwgJiYgZWFjaCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIHRpbWVvdXQgcHJvdmlkZWQuJyk7XG4gICAgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsU291cmNlU3Vic2NyaXB0aW9uO1xuICAgICAgICB2YXIgdGltZXJTdWJzY3JpcHRpb247XG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICB2YXIgc2VlbiA9IDA7XG4gICAgICAgIHZhciBzdGFydFRpbWVyID0gZnVuY3Rpb24gKGRlbGF5KSB7XG4gICAgICAgICAgICB0aW1lclN1YnNjcmlwdGlvbiA9IGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFNvdXJjZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICBpbm5lckZyb20oX3dpdGgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YTogbWV0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RWYWx1ZTogbGFzdFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vlbjogc2VlbixcbiAgICAgICAgICAgICAgICAgICAgfSkpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICB9O1xuICAgICAgICBvcmlnaW5hbFNvdXJjZVN1YnNjcmlwdGlvbiA9IHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGltZXJTdWJzY3JpcHRpb24gPT09IG51bGwgfHwgdGltZXJTdWJzY3JpcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRpbWVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBzZWVuKys7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoKGxhc3RWYWx1ZSA9IHZhbHVlKSk7XG4gICAgICAgICAgICBlYWNoID4gMCAmJiBzdGFydFRpbWVyKGVhY2gpO1xuICAgICAgICB9LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCEodGltZXJTdWJzY3JpcHRpb24gPT09IG51bGwgfHwgdGltZXJTdWJzY3JpcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRpbWVyU3Vic2NyaXB0aW9uLmNsb3NlZCkpIHtcbiAgICAgICAgICAgICAgICB0aW1lclN1YnNjcmlwdGlvbiA9PT0gbnVsbCB8fCB0aW1lclN1YnNjcmlwdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGltZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIH0pKTtcbiAgICAgICAgIXNlZW4gJiYgc3RhcnRUaW1lcihmaXJzdCAhPSBudWxsID8gKHR5cGVvZiBmaXJzdCA9PT0gJ251bWJlcicgPyBmaXJzdCA6ICtmaXJzdCAtIHNjaGVkdWxlci5ub3coKSkgOiBlYWNoKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRpbWVvdXRFcnJvckZhY3RvcnkoaW5mbykge1xuICAgIHRocm93IG5ldyBUaW1lb3V0RXJyb3IoaW5mbyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/timeout.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scheduleArray: function() { return /* binding */ scheduleArray; }\n/* harmony export */ });\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n\nfunction scheduleArray(input, scheduler) {\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\n        var i = 0;\n        return scheduler.schedule(function () {\n            if (i === input.length) {\n                subscriber.complete();\n            }\n            else {\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    this.schedule();\n                }\n            }\n        });\n    });\n}\n//# sourceMappingURL=scheduleArray.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyQztBQUNwQztBQUNQLGVBQWUsbURBQVU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXkuanM/NzJhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlucHV0W2krK10pO1xuICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFycmF5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js ***!
  \***************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scheduleAsyncIterable: function() { return /* binding */ scheduleAsyncIterable; }\n/* harmony export */ });\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/executeSchedule */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js\");\n\n\nfunction scheduleAsyncIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\n        (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__.executeSchedule)(subscriber, scheduler, function () {\n            var iterator = input[Symbol.asyncIterator]();\n            (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__.executeSchedule)(subscriber, scheduler, function () {\n                iterator.next().then(function (result) {\n                    if (result.done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(result.value);\n                    }\n                });\n            }, 0, true);\n        });\n    });\n}\n//# sourceMappingURL=scheduleAsyncIterable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQztBQUNlO0FBQ25EO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtREFBVTtBQUN6QixRQUFRLHNFQUFlO0FBQ3ZCO0FBQ0EsWUFBWSxzRUFBZTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzP2FlMTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFpbnB1dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0ZXJhYmxlIGNhbm5vdCBiZSBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5uZXh0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDAsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXN5bmNJdGVyYWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scheduleIterable: function() { return /* binding */ scheduleIterable; }\n/* harmony export */ });\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../symbol/iterator */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/symbol/iterator.js\");\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/executeSchedule */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js\");\n\n\n\n\nfunction scheduleIterable(input, scheduler) {\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\n        var iterator;\n        (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__.executeSchedule)(subscriber, scheduler, function () {\n            iterator = input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__.iterator]();\n            (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__.executeSchedule)(subscriber, scheduler, function () {\n                var _a;\n                var value;\n                var done;\n                try {\n                    (_a = iterator.next(), value = _a.value, done = _a.done);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                }\n            }, 0, true);\n        });\n        return function () { return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_3__.isFunction)(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };\n    });\n}\n//# sourceMappingURL=scheduleIterable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVJdGVyYWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyQztBQUNzQjtBQUNqQjtBQUNVO0FBQ25EO0FBQ1AsZUFBZSxtREFBVTtBQUN6QjtBQUNBLFFBQVEsc0VBQWU7QUFDdkIsNkJBQTZCLHNEQUFlO0FBQzVDLFlBQVksc0VBQWU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULDZCQUE2QixPQUFPLDREQUFVO0FBQzlDLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVJdGVyYWJsZS5qcz9mZWU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yO1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBkb25lO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IGl0ZXJhdG9yLm5leHQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDAsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzRnVuY3Rpb24oaXRlcmF0b3IgPT09IG51bGwgfHwgaXRlcmF0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGl0ZXJhdG9yLnJldHVybikgJiYgaXRlcmF0b3IucmV0dXJuKCk7IH07XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUl0ZXJhYmxlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scheduleObservable: function() { return /* binding */ scheduleObservable; }\n/* harmony export */ });\n/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/innerFrom */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js\");\n/* harmony import */ var _operators_observeOn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/observeOn */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js\");\n/* harmony import */ var _operators_subscribeOn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operators/subscribeOn */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js\");\n\n\n\nfunction scheduleObservable(input, scheduler) {\n    return (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__.innerFrom)(input).pipe((0,_operators_subscribeOn__WEBPACK_IMPORTED_MODULE_1__.subscribeOn)(scheduler), (0,_operators_observeOn__WEBPACK_IMPORTED_MODULE_2__.observeOn)(scheduler));\n}\n//# sourceMappingURL=scheduleObservable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVPYnNlcnZhYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0Q7QUFDRDtBQUNJO0FBQ2hEO0FBQ1AsV0FBVyxnRUFBUyxhQUFhLG1FQUFXLGFBQWEsK0RBQVM7QUFDbEU7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcz9iYjk3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9ic2VydmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9vYnNlcnZlT24nO1xuaW1wb3J0IHsgc3Vic2NyaWJlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvc3Vic2NyaWJlT24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT24oc2NoZWR1bGVyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZU9ic2VydmFibGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   schedulePromise: function() { return /* binding */ schedulePromise; }\n/* harmony export */ });\n/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/innerFrom */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js\");\n/* harmony import */ var _operators_observeOn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/observeOn */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js\");\n/* harmony import */ var _operators_subscribeOn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operators/subscribeOn */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js\");\n\n\n\nfunction schedulePromise(input, scheduler) {\n    return (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__.innerFrom)(input).pipe((0,_operators_subscribeOn__WEBPACK_IMPORTED_MODULE_1__.subscribeOn)(scheduler), (0,_operators_observeOn__WEBPACK_IMPORTED_MODULE_2__.observeOn)(scheduler));\n}\n//# sourceMappingURL=schedulePromise.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVQcm9taXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0Q7QUFDRDtBQUNJO0FBQ2hEO0FBQ1AsV0FBVyxnRUFBUyxhQUFhLG1FQUFXLGFBQWEsK0RBQVM7QUFDbEU7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUHJvbWlzZS5qcz83NTc4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9ic2VydmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9vYnNlcnZlT24nO1xuaW1wb3J0IHsgc3Vic2NyaWJlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvc3Vic2NyaWJlT24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT24oc2NoZWR1bGVyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVByb21pc2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js ***!
  \********************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scheduleReadableStreamLike: function() { return /* binding */ scheduleReadableStreamLike; }\n/* harmony export */ });\n/* harmony import */ var _scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scheduleAsyncIterable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js\");\n/* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isReadableStreamLike */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js\");\n\n\nfunction scheduleReadableStreamLike(input, scheduler) {\n    return (0,_scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_0__.scheduleAsyncIterable)((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_1__.readableStreamLikeToAsyncGenerator)(input), scheduler);\n}\n//# sourceMappingURL=scheduleReadableStreamLike.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdFO0FBQ2tCO0FBQzNFO0FBQ1AsV0FBVyw2RUFBcUIsQ0FBQyw4RkFBa0M7QUFDbkU7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzPzlhMmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NoZWR1bGVBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUFzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IoaW5wdXQpLCBzY2hlZHVsZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scheduled: function() { return /* binding */ scheduled; }\n/* harmony export */ });\n/* harmony import */ var _scheduleObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scheduleObservable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js\");\n/* harmony import */ var _schedulePromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./schedulePromise */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js\");\n/* harmony import */ var _scheduleArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scheduleArray */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js\");\n/* harmony import */ var _scheduleIterable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./scheduleIterable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js\");\n/* harmony import */ var _scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scheduleAsyncIterable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js\");\n/* harmony import */ var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isInteropObservable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js\");\n/* harmony import */ var _util_isPromise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isPromise */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isPromise.js\");\n/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArrayLike */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js\");\n/* harmony import */ var _util_isIterable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/isIterable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isIterable.js\");\n/* harmony import */ var _util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/isAsyncIterable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js\");\n/* harmony import */ var _util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../util/throwUnobservableError */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js\");\n/* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/isReadableStreamLike */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js\");\n/* harmony import */ var _scheduleReadableStreamLike__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./scheduleReadableStreamLike */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction scheduled(input, scheduler) {\n    if (input != null) {\n        if ((0,_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_0__.isInteropObservable)(input)) {\n            return (0,_scheduleObservable__WEBPACK_IMPORTED_MODULE_1__.scheduleObservable)(input, scheduler);\n        }\n        if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__.isArrayLike)(input)) {\n            return (0,_scheduleArray__WEBPACK_IMPORTED_MODULE_3__.scheduleArray)(input, scheduler);\n        }\n        if ((0,_util_isPromise__WEBPACK_IMPORTED_MODULE_4__.isPromise)(input)) {\n            return (0,_schedulePromise__WEBPACK_IMPORTED_MODULE_5__.schedulePromise)(input, scheduler);\n        }\n        if ((0,_util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_6__.isAsyncIterable)(input)) {\n            return (0,_scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_7__.scheduleAsyncIterable)(input, scheduler);\n        }\n        if ((0,_util_isIterable__WEBPACK_IMPORTED_MODULE_8__.isIterable)(input)) {\n            return (0,_scheduleIterable__WEBPACK_IMPORTED_MODULE_9__.scheduleIterable)(input, scheduler);\n        }\n        if ((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_10__.isReadableStreamLike)(input)) {\n            return (0,_scheduleReadableStreamLike__WEBPACK_IMPORTED_MODULE_11__.scheduleReadableStreamLike)(input, scheduler);\n        }\n    }\n    throw (0,_util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_12__.createInvalidObservableTypeError)(input);\n}\n//# sourceMappingURL=scheduled.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBEO0FBQ047QUFDSjtBQUNNO0FBQ1U7QUFDRTtBQUNwQjtBQUNJO0FBQ0Y7QUFDVTtBQUN3QjtBQUNkO0FBQ007QUFDbkU7QUFDUDtBQUNBLFlBQVksOEVBQW1CO0FBQy9CLG1CQUFtQix1RUFBa0I7QUFDckM7QUFDQSxZQUFZLDhEQUFXO0FBQ3ZCLG1CQUFtQiw2REFBYTtBQUNoQztBQUNBLFlBQVksMERBQVM7QUFDckIsbUJBQW1CLGlFQUFlO0FBQ2xDO0FBQ0EsWUFBWSxzRUFBZTtBQUMzQixtQkFBbUIsNkVBQXFCO0FBQ3hDO0FBQ0EsWUFBWSw0REFBVTtBQUN0QixtQkFBbUIsbUVBQWdCO0FBQ25DO0FBQ0EsWUFBWSxpRkFBb0I7QUFDaEMsbUJBQW1CLHdGQUEwQjtBQUM3QztBQUNBO0FBQ0EsVUFBVSwrRkFBZ0M7QUFDMUM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcz9mOTU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjaGVkdWxlT2JzZXJ2YWJsZSB9IGZyb20gJy4vc2NoZWR1bGVPYnNlcnZhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlUHJvbWlzZSB9IGZyb20gJy4vc2NoZWR1bGVQcm9taXNlJztcbmltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuL3NjaGVkdWxlQXJyYXknO1xuaW1wb3J0IHsgc2NoZWR1bGVJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVJdGVyYWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc0ludGVyb3BPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIH0gZnJvbSAnLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSB9IGZyb20gJy4vc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/Action.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/Action.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Action: function() { return /* binding */ Action; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subscription.js\");\n\n\nvar Action = (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Action, _super);\n    function Action(scheduler, work) {\n        return _super.call(this) || this;\n    }\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(_Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription));\n\n//# sourceMappingURL=Action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrQztBQUNhO0FBQy9DO0FBQ0EsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyx1REFBWTtBQUNJO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzPzg0YzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xudmFyIEFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gQWN0aW9uO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IEFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/Action.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncAction: function() { return /* binding */ AsyncAction; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Action */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/Action.js\");\n/* harmony import */ var _intervalProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intervalProvider */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js\");\n/* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/arrRemove */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/arrRemove.js\");\n\n\n\n\nvar AsyncAction = (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.pending = false;\n        return _this;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        var _a;\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return _intervalProvider__WEBPACK_IMPORTED_MODULE_1__.intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (delay != null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        if (id != null) {\n            _intervalProvider__WEBPACK_IMPORTED_MODULE_1__.intervalProvider.clearInterval(id);\n        }\n        return undefined;\n    };\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, _delay) {\n        var errored = false;\n        var errorValue;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = e ? e : new Error('Scheduled action threw falsy error');\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            var _a = this, id = _a.id, scheduler = _a.scheduler;\n            var actions = scheduler.actions;\n            this.work = this.state = this.scheduler = null;\n            this.pending = false;\n            (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_2__.arrRemove)(actions, this);\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, null);\n            }\n            this.delay = null;\n            _super.prototype.unsubscribe.call(this);\n        }\n    };\n    return AsyncAction;\n}(_Action__WEBPACK_IMPORTED_MODULE_3__.Action));\n\n//# sourceMappingURL=AsyncAction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNBY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBa0M7QUFDQTtBQUNvQjtBQUNSO0FBQzlDO0FBQ0EsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsZUFBZSwrREFBZ0I7QUFDL0I7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0RBQWdCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwREFBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLDJDQUFNO0FBQ2U7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY0FjdGlvbi5qcz83ODM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi9BY3Rpb24nO1xuaW1wb3J0IHsgaW50ZXJ2YWxQcm92aWRlciB9IGZyb20gJy4vaW50ZXJ2YWxQcm92aWRlcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuLi91dGlsL2FyclJlbW92ZSc7XG52YXIgQXN5bmNBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY0FjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY0FjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICBfdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5pZDtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQoc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5pZCA9IChfYSA9IHRoaXMuaWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMucmVxdWVzdEFzeW5jSWQoc2NoZWR1bGVyLCB0aGlzLmlkLCBkZWxheSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgX2lkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIGludGVydmFsUHJvdmlkZXIuc2V0SW50ZXJ2YWwoc2NoZWR1bGVyLmZsdXNoLmJpbmQoc2NoZWR1bGVyLCB0aGlzKSwgZGVsYXkpO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkID0gZnVuY3Rpb24gKF9zY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKGRlbGF5ICE9IG51bGwgJiYgdGhpcy5kZWxheSA9PT0gZGVsYXkgJiYgdGhpcy5wZW5kaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnRlcnZhbFByb3ZpZGVyLmNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdleGVjdXRpbmcgYSBjYW5jZWxsZWQgYWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMuX2V4ZWN1dGUoc3RhdGUsIGRlbGF5KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZW5kaW5nID09PSBmYWxzZSAmJiB0aGlzLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHRoaXMuc2NoZWR1bGVyLCB0aGlzLmlkLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLl9leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBfZGVsYXkpIHtcbiAgICAgICAgdmFyIGVycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yVmFsdWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndvcmsoc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGVycm9yVmFsdWUgPSBlID8gZSA6IG5ldyBFcnJvcignU2NoZWR1bGVkIGFjdGlvbiB0aHJldyBmYWxzeSBlcnJvcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcmVkKSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JWYWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBpZCA9IF9hLmlkLCBzY2hlZHVsZXIgPSBfYS5zY2hlZHVsZXI7XG4gICAgICAgICAgICB2YXIgYWN0aW9ucyA9IHNjaGVkdWxlci5hY3Rpb25zO1xuICAgICAgICAgICAgdGhpcy53b3JrID0gdGhpcy5zdGF0ZSA9IHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgYXJyUmVtb3ZlKGFjdGlvbnMsIHRoaXMpO1xuICAgICAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVsYXkgPSBudWxsO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNBY3Rpb247XG59KEFjdGlvbikpO1xuZXhwb3J0IHsgQXN5bmNBY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jQWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncScheduler: function() { return /* binding */ AsyncScheduler; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _Scheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Scheduler */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Scheduler.js\");\n\n\nvar AsyncScheduler = (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AsyncScheduler, _super);\n    function AsyncScheduler(SchedulerAction, now) {\n        if (now === void 0) { now = _Scheduler__WEBPACK_IMPORTED_MODULE_1__.Scheduler.now; }\n        var _this = _super.call(this, SchedulerAction, now) || this;\n        _this.actions = [];\n        _this._active = false;\n        return _this;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this._active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this._active = true;\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions.shift()));\n        this._active = false;\n        if (error) {\n            while ((action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(_Scheduler__WEBPACK_IMPORTED_MODULE_1__.Scheduler));\n\n//# sourceMappingURL=AsyncScheduler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBQ087QUFDekM7QUFDQSxJQUFJLGdEQUFTO0FBQ2I7QUFDQSw4QkFBOEIsTUFBTSxpREFBUztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyxpREFBUztBQUNlO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanM/OTk5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFNjaGVkdWxlciB9IGZyb20gJy4uL1NjaGVkdWxlcic7XG52YXIgQXN5bmNTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY1NjaGVkdWxlcihTY2hlZHVsZXJBY3Rpb24sIG5vdykge1xuICAgICAgICBpZiAobm93ID09PSB2b2lkIDApIHsgbm93ID0gU2NoZWR1bGVyLm5vdzsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBTY2hlZHVsZXJBY3Rpb24sIG5vdykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWN0aW9ucyA9IFtdO1xuICAgICAgICBfdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY1NjaGVkdWxlcjtcbn0oU2NoZWR1bGVyKSk7XG5leHBvcnQgeyBBc3luY1NjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNTY2hlZHVsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/async.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/async.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   async: function() { return /* binding */ async; },\n/* harmony export */   asyncScheduler: function() { return /* binding */ asyncScheduler; }\n/* harmony export */ });\n/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncAction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js\");\n/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncScheduler */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js\");\n\n\nvar asyncScheduler = new _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__.AsyncScheduler(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__.AsyncAction);\nvar async = asyncScheduler;\n//# sourceMappingURL=async.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvYXN5bmMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNNO0FBQzNDLHlCQUF5QiwyREFBYyxDQUFDLHFEQUFXO0FBQ25EO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9hc3luYy5qcz81ZWIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xuZXhwb3J0IHZhciBhc3luY1NjaGVkdWxlciA9IG5ldyBBc3luY1NjaGVkdWxlcihBc3luY0FjdGlvbik7XG5leHBvcnQgdmFyIGFzeW5jID0gYXN5bmNTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/async.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js ***!
  \***************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dateTimestampProvider: function() { return /* binding */ dateTimestampProvider; }\n/* harmony export */ });\nvar dateTimestampProvider = {\n    now: function () {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n//# sourceMappingURL=dateTimestampProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmpzP2YzNmIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBkYXRlVGltZXN0YW1wUHJvdmlkZXIgPSB7XG4gICAgbm93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmRlbGVnYXRlIHx8IERhdGUpLm5vdygpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intervalProvider: function() { return /* binding */ intervalProvider; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n\nvar intervalProvider = {\n    setInterval: function (handler, timeout) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var delegate = intervalProvider.delegate;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {\n            return delegate.setInterval.apply(delegate, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([handler, timeout], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(args)));\n        }\n        return setInterval.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([handler, timeout], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(args)));\n    },\n    clearInterval: function (handle) {\n        var delegate = intervalProvider.delegate;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);\n    },\n    delegate: undefined,\n};\n//# sourceMappingURL=intervalProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvaW50ZXJ2YWxQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4QztBQUN2QztBQUNQO0FBQ0E7QUFDQSx5QkFBeUIsdUJBQXVCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELG9EQUFhLHFCQUFxQiw2Q0FBTTtBQUNoRztBQUNBLHlDQUF5QyxvREFBYSxxQkFBcUIsNkNBQU07QUFDakYsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9pbnRlcnZhbFByb3ZpZGVyLmpzPzYxZGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIGludGVydmFsUHJvdmlkZXIgPSB7XG4gICAgc2V0SW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGludGVydmFsUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0SW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRJbnRlcnZhbC5hcHBseShkZWxlZ2F0ZSwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRJbnRlcnZhbC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFySW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFySW50ZXJ2YWwpIHx8IGNsZWFySW50ZXJ2YWwpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVydmFsUHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   timeoutProvider: function() { return /* binding */ timeoutProvider; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n\nvar timeoutProvider = {\n    setTimeout: function (handler, timeout) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var delegate = timeoutProvider.delegate;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {\n            return delegate.setTimeout.apply(delegate, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([handler, timeout], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(args)));\n        }\n        return setTimeout.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([handler, timeout], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(args)));\n    },\n    clearTimeout: function (handle) {\n        var delegate = timeoutProvider.delegate;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);\n    },\n    delegate: undefined,\n};\n//# sourceMappingURL=timeoutProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThDO0FBQ3ZDO0FBQ1A7QUFDQTtBQUNBLHlCQUF5Qix1QkFBdUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsb0RBQWEscUJBQXFCLDZDQUFNO0FBQy9GO0FBQ0Esd0NBQXdDLG9EQUFhLHFCQUFxQiw2Q0FBTTtBQUNoRixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcz9jODVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciB0aW1lb3V0UHJvdmlkZXIgPSB7XG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldFRpbWVvdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRUaW1lb3V0LmFwcGx5KGRlbGVnYXRlLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBjbGVhclRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2xlYXJUaW1lb3V0KSB8fCBjbGVhclRpbWVvdXQpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXRQcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/symbol/iterator.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/symbol/iterator.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSymbolIterator: function() { return /* binding */ getSymbolIterator; },\n/* harmony export */   iterator: function() { return /* binding */ iterator; }\n/* harmony export */ });\nfunction getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nvar iterator = getSymbolIterator();\n//# sourceMappingURL=iterator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvaXRlcmF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvaXRlcmF0b3IuanM/YzI2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xufVxuZXhwb3J0IHZhciBpdGVyYXRvciA9IGdldFN5bWJvbEl0ZXJhdG9yKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/symbol/iterator.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/symbol/observable.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/symbol/observable.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   observable: function() { return /* binding */ observable; }\n/* harmony export */ });\nvar observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();\n//# sourceMappingURL=observable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sZ0NBQWdDLCtFQUErRTtBQUN0SCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGUuanM/YmRhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUpIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/symbol/observable.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectUnsubscribedError: function() { return /* binding */ ObjectUnsubscribedError; }\n/* harmony export */ });\n/* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createErrorClass */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js\");\n\nvar ObjectUnsubscribedError = (0,_createErrorClass__WEBPACK_IMPORTED_MODULE_0__.createErrorClass)(function (_super) {\n    return function ObjectUnsubscribedErrorImpl() {\n        _super(this);\n        this.name = 'ObjectUnsubscribedError';\n        this.message = 'object unsubscribed';\n    };\n});\n//# sourceMappingURL=ObjectUnsubscribedError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNEO0FBQy9DLDhCQUE4QixtRUFBZ0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcz8zZDhlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUVycm9yQ2xhc3MgfSBmcm9tICcuL2NyZWF0ZUVycm9yQ2xhc3MnO1xuZXhwb3J0IHZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGwoKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ29iamVjdCB1bnN1YnNjcmliZWQnO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnsubscriptionError: function() { return /* binding */ UnsubscriptionError; }\n/* harmony export */ });\n/* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createErrorClass */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js\");\n\nvar UnsubscriptionError = (0,_createErrorClass__WEBPACK_IMPORTED_MODULE_0__.createErrorClass)(function (_super) {\n    return function UnsubscriptionErrorImpl(errors) {\n        _super(this);\n        this.message = errors\n            ? errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ')\n            : '';\n        this.name = 'UnsubscriptionError';\n        this.errors = errors;\n    };\n});\n//# sourceMappingURL=UnsubscriptionError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0Q7QUFDL0MsMEJBQTBCLG1FQUFnQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQSwyR0FBMkcsdUNBQXVDO0FBQ2xKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanM/ZGExZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnNcbiAgICAgICAgICAgID8gZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJylcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/args.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/args.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   popNumber: function() { return /* binding */ popNumber; },\n/* harmony export */   popResultSelector: function() { return /* binding */ popResultSelector; },\n/* harmony export */   popScheduler: function() { return /* binding */ popScheduler; }\n/* harmony export */ });\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n/* harmony import */ var _isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isScheduler */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isScheduler.js\");\n\n\nfunction last(arr) {\n    return arr[arr.length - 1];\n}\nfunction popResultSelector(args) {\n    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(last(args)) ? args.pop() : undefined;\n}\nfunction popScheduler(args) {\n    return (0,_isScheduler__WEBPACK_IMPORTED_MODULE_1__.isScheduler)(last(args)) ? args.pop() : undefined;\n}\nfunction popNumber(args, defaultValue) {\n    return typeof last(args) === 'number' ? args.pop() : defaultValue;\n}\n//# sourceMappingURL=args.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMEM7QUFDRTtBQUM1QztBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsdURBQVU7QUFDckI7QUFDTztBQUNQLFdBQVcseURBQVc7QUFDdEI7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcmdzLmpzPzVmZGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4vaXNTY2hlZHVsZXInO1xuZnVuY3Rpb24gbGFzdChhcnIpIHtcbiAgICByZXR1cm4gYXJyW2Fyci5sZW5ndGggLSAxXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BSZXN1bHRTZWxlY3RvcihhcmdzKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24obGFzdChhcmdzKSkgPyBhcmdzLnBvcCgpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcFNjaGVkdWxlcihhcmdzKSB7XG4gICAgcmV0dXJuIGlzU2NoZWR1bGVyKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BOdW1iZXIoYXJncywgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBsYXN0KGFyZ3MpID09PSAnbnVtYmVyJyA/IGFyZ3MucG9wKCkgOiBkZWZhdWx0VmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmdzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/args.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/arrRemove.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/arrRemove.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrRemove: function() { return /* binding */ arrRemove; }\n/* harmony export */ });\nfunction arrRemove(arr, item) {\n    if (arr) {\n        var index = arr.indexOf(item);\n        0 <= index && arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=arrRemove.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyclJlbW92ZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLmpzPzVkMzgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGFyclJlbW92ZShhcnIsIGl0ZW0pIHtcbiAgICBpZiAoYXJyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAwIDw9IGluZGV4ICYmIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyclJlbW92ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/arrRemove.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createErrorClass: function() { return /* binding */ createErrorClass; }\n/* harmony export */ });\nfunction createErrorClass(createImpl) {\n    var _super = function (instance) {\n        Error.call(instance);\n        instance.stack = new Error().stack;\n    };\n    var ctorFunc = createImpl(_super);\n    ctorFunc.prototype = Object.create(Error.prototype);\n    ctorFunc.prototype.constructor = ctorFunc;\n    return ctorFunc;\n}\n//# sourceMappingURL=createErrorClass.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2NyZWF0ZUVycm9yQ2xhc3MuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY3JlYXRlRXJyb3JDbGFzcy5qcz85YTNkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvckNsYXNzKGNyZWF0ZUltcGwpIHtcbiAgICB2YXIgX3N1cGVyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIEVycm9yLmNhbGwoaW5zdGFuY2UpO1xuICAgICAgICBpbnN0YW5jZS5zdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIH07XG4gICAgdmFyIGN0b3JGdW5jID0gY3JlYXRlSW1wbChfc3VwZXIpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yRnVuYztcbiAgICByZXR1cm4gY3RvckZ1bmM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVFcnJvckNsYXNzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/errorContext.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/errorContext.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   captureError: function() { return /* binding */ captureError; },\n/* harmony export */   errorContext: function() { return /* binding */ errorContext; }\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/config.js\");\n\nvar context = null;\nfunction errorContext(cb) {\n    if (_config__WEBPACK_IMPORTED_MODULE_0__.config.useDeprecatedSynchronousErrorHandling) {\n        var isRoot = !context;\n        if (isRoot) {\n            context = { errorThrown: false, error: null };\n        }\n        cb();\n        if (isRoot) {\n            var _a = context, errorThrown = _a.errorThrown, error = _a.error;\n            context = null;\n            if (errorThrown) {\n                throw error;\n            }\n        }\n    }\n    else {\n        cb();\n    }\n}\nfunction captureError(err) {\n    if (_config__WEBPACK_IMPORTED_MODULE_0__.config.useDeprecatedSynchronousErrorHandling && context) {\n        context.errorThrown = true;\n        context.error = err;\n    }\n}\n//# sourceMappingURL=errorContext.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2Vycm9yQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDbkM7QUFDTztBQUNQLFFBQVEsMkNBQU07QUFDZDtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFFBQVEsMkNBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2Vycm9yQ29udGV4dC5qcz82MDU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG52YXIgY29udGV4dCA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JDb250ZXh0KGNiKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIHZhciBpc1Jvb3QgPSAhY29udGV4dDtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgY29udGV4dCA9IHsgZXJyb3JUaHJvd246IGZhbHNlLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNiKCk7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGNvbnRleHQsIGVycm9yVGhyb3duID0gX2EuZXJyb3JUaHJvd24sIGVycm9yID0gX2EuZXJyb3I7XG4gICAgICAgICAgICBjb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYigpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXJyb3IoZXJyKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGNvbnRleHQuZXJyb3IgPSBlcnI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JDb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/errorContext.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeSchedule: function() { return /* binding */ executeSchedule; }\n/* harmony export */ });\nfunction executeSchedule(parentSubscription, scheduler, work, delay, repeat) {\n    if (delay === void 0) { delay = 0; }\n    if (repeat === void 0) { repeat = false; }\n    var scheduleSubscription = scheduler.schedule(function () {\n        work();\n        if (repeat) {\n            parentSubscription.add(this.schedule(null, delay));\n        }\n        else {\n            this.unsubscribe();\n        }\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) {\n        return scheduleSubscription;\n    }\n}\n//# sourceMappingURL=executeSchedule.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2V4ZWN1dGVTY2hlZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUCw0QkFBNEI7QUFDNUIsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2V4ZWN1dGVTY2hlZHVsZS5qcz9mYTg4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBleGVjdXRlU2NoZWR1bGUocGFyZW50U3Vic2NyaXB0aW9uLCBzY2hlZHVsZXIsIHdvcmssIGRlbGF5LCByZXBlYXQpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICBpZiAocmVwZWF0ID09PSB2b2lkIDApIHsgcmVwZWF0ID0gZmFsc2U7IH1cbiAgICB2YXIgc2NoZWR1bGVTdWJzY3JpcHRpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICB3b3JrKCk7XG4gICAgICAgIGlmIChyZXBlYXQpIHtcbiAgICAgICAgICAgIHBhcmVudFN1YnNjcmlwdGlvbi5hZGQodGhpcy5zY2hlZHVsZShudWxsLCBkZWxheSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfSwgZGVsYXkpO1xuICAgIHBhcmVudFN1YnNjcmlwdGlvbi5hZGQoc2NoZWR1bGVTdWJzY3JpcHRpb24pO1xuICAgIGlmICghcmVwZWF0KSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZVN1YnNjcmlwdGlvbjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGVjdXRlU2NoZWR1bGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/identity.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/identity.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   identity: function() { return /* binding */ identity; }\n/* harmony export */ });\nfunction identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pZGVudGl0eS5qcz9iZjY1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gICAgcmV0dXJuIHg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGVudGl0eS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/identity.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isArrayLike: function() { return /* binding */ isArrayLike; }\n/* harmony export */ });\nvar isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n//# sourceMappingURL=isArrayLike.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXlMaWtlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxrQ0FBa0Msc0VBQXNFO0FBQy9HIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXlMaWtlLmpzPzgxMzAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBpc0FycmF5TGlrZSA9IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nOyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXlMaWtlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAsyncIterable: function() { return /* binding */ isAsyncIterable; }\n/* harmony export */ });\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n\nfunction isAsyncIterable(obj) {\n    return Symbol.asyncIterator && (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);\n}\n//# sourceMappingURL=isAsyncIterable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXN5bmNJdGVyYWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUNuQztBQUNQLG1DQUFtQyx1REFBVTtBQUM3QztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXN5bmNJdGVyYWJsZS5qcz84MmU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmopIHtcbiAgICByZXR1cm4gU3ltYm9sLmFzeW5jSXRlcmF0b3IgJiYgaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXN5bmNJdGVyYWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isDate.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isDate.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidDate: function() { return /* binding */ isValidDate; }\n/* harmony export */ });\nfunction isValidDate(value) {\n    return value instanceof Date && !isNaN(value);\n}\n//# sourceMappingURL=isDate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNEYXRlLmpzPzRmYjEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWREYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4odmFsdWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNEYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isDate.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isFunction: function() { return /* binding */ isFunction; }\n/* harmony export */ });\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n//# sourceMappingURL=isFunction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanM/MmY4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isInteropObservable: function() { return /* binding */ isInteropObservable; }\n/* harmony export */ });\n/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../symbol/observable */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/symbol/observable.js\");\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n\n\nfunction isInteropObservable(input) {\n    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(input[_symbol_observable__WEBPACK_IMPORTED_MODULE_1__.observable]);\n}\n//# sourceMappingURL=isInteropObservable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVFO0FBQzdCO0FBQ25DO0FBQ1AsV0FBVyx1REFBVSxPQUFPLDBEQUFpQjtBQUM3QztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUuanM/Y2I5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0W1N5bWJvbF9vYnNlcnZhYmxlXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0ludGVyb3BPYnNlcnZhYmxlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isIterable.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isIterable.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isIterable: function() { return /* binding */ isIterable; }\n/* harmony export */ });\n/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../symbol/iterator */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/symbol/iterator.js\");\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n\n\nfunction isIterable(input) {\n    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(input === null || input === void 0 ? void 0 : input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator]);\n}\n//# sourceMappingURL=isIterable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSXRlcmFibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlFO0FBQ3ZCO0FBQ25DO0FBQ1AsV0FBVyx1REFBVSxxREFBcUQsc0RBQWU7QUFDekY7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0l0ZXJhYmxlLmpzPzc4NTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0l0ZXJhYmxlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isIterable.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isPromise.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isPromise.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPromise: function() { return /* binding */ isPromise; }\n/* harmony export */ });\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n\nfunction isPromise(value) {\n    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value === null || value === void 0 ? void 0 : value.then);\n}\n//# sourceMappingURL=isPromise.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUHJvbWlzZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUNuQztBQUNQLFdBQVcsdURBQVU7QUFDckI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1Byb21pc2UuanM/MTE5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vaXNGdW5jdGlvblwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS50aGVuKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUHJvbWlzZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isPromise.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isReadableStreamLike: function() { return /* binding */ isReadableStreamLike; },\n/* harmony export */   readableStreamLikeToAsyncGenerator: function() { return /* binding */ readableStreamLikeToAsyncGenerator; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n\n\nfunction readableStreamLikeToAsyncGenerator(readableStream) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__asyncGenerator)(this, arguments, function readableStreamLikeToAsyncGenerator_1() {\n        var reader, _a, value, done;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    reader = readableStream.getReader();\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, , 9, 10]);\n                    _b.label = 2;\n                case 2:\n                    if (false) {}\n                    return [4, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__await)(reader.read())];\n                case 3:\n                    _a = _b.sent(), value = _a.value, done = _a.done;\n                    if (!done) return [3, 5];\n                    return [4, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__await)(void 0)];\n                case 4: return [2, _b.sent()];\n                case 5: return [4, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__await)(value)];\n                case 6: return [4, _b.sent()];\n                case 7:\n                    _b.sent();\n                    return [3, 2];\n                case 8: return [3, 10];\n                case 9:\n                    reader.releaseLock();\n                    return [7];\n                case 10: return [2];\n            }\n        });\n    });\n}\nfunction isReadableStreamLike(obj) {\n    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(obj === null || obj === void 0 ? void 0 : obj.getReader);\n}\n//# sourceMappingURL=isReadableStreamLike.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0Q7QUFDckI7QUFDbkM7QUFDUCxXQUFXLHVEQUFnQjtBQUMzQjtBQUNBLGVBQWUsa0RBQVc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixLQUFLLEVBQUUsRUFBYztBQUM3QywrQkFBK0IsOENBQU87QUFDdEM7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDhDQUFPO0FBQ3RDO0FBQ0EsbUNBQW1DLDhDQUFPO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1AsV0FBVyx1REFBVTtBQUNyQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlLmpzP2E1ZjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3luY0dlbmVyYXRvciwgX19hd2FpdCwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcbiAgICAgICAgdmFyIHJlYWRlciwgX2EsIHZhbHVlLCBkb25lO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQodm9pZCAwKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmdldFJlYWRlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isScheduler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isScheduler.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isScheduler: function() { return /* binding */ isScheduler; }\n/* harmony export */ });\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n\nfunction isScheduler(value) {\n    return value && (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value.schedule);\n}\n//# sourceMappingURL=isScheduler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzU2NoZWR1bGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBQ25DO0FBQ1Asb0JBQW9CLHVEQUFVO0FBQzlCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNTY2hlZHVsZXIuanM/ZGNhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc1NjaGVkdWxlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnNjaGVkdWxlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isScheduler.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasLift: function() { return /* binding */ hasLift; },\n/* harmony export */   operate: function() { return /* binding */ operate; }\n/* harmony export */ });\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/isFunction.js\");\n\nfunction hasLift(source) {\n    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(source === null || source === void 0 ? void 0 : source.lift);\n}\nfunction operate(init) {\n    return function (source) {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n//# sourceMappingURL=lift.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2xpZnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTBDO0FBQ25DO0FBQ1AsV0FBVyx1REFBVTtBQUNyQjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbGlmdC5qcz8zNjkzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0xpZnQoc291cmNlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmxpZnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9wZXJhdGUoaW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNMaWZ0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChmdW5jdGlvbiAobGlmdGVkU291cmNlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQobGlmdGVkU291cmNlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxpZnQgdW5rbm93biBPYnNlcnZhYmxlIHR5cGUnKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlmdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/lift.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mapOneOrManyArgs: function() { return /* binding */ mapOneOrManyArgs; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operators/map */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n\n\nvar isArray = Array.isArray;\nfunction callOrApply(fn, args) {\n    return isArray(args) ? fn.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(args))) : fn(args);\n}\nfunction mapOneOrManyArgs(fn) {\n    return (0,_operators_map__WEBPACK_IMPORTED_MODULE_1__.map)(function (args) { return callOrApply(fn, args); });\n}\n//# sourceMappingURL=mapOneOrManyArgs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL21hcE9uZU9yTWFueUFyZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ1A7QUFDdkM7QUFDQTtBQUNBLDRDQUE0QyxvREFBYSxLQUFLLDZDQUFNO0FBQ3BFO0FBQ087QUFDUCxXQUFXLG1EQUFHLG1CQUFtQiwrQkFBK0I7QUFDaEU7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9tYXBPbmVPck1hbnlBcmdzLmpzPzIwYWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBtYXAgfSBmcm9tIFwiLi4vb3BlcmF0b3JzL21hcFwiO1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gY2FsbE9yQXBwbHkoZm4sIGFyZ3MpIHtcbiAgICByZXR1cm4gaXNBcnJheShhcmdzKSA/IGZuLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpKSkgOiBmbihhcmdzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXBPbmVPck1hbnlBcmdzKGZuKSB7XG4gICAgcmV0dXJuIG1hcChmdW5jdGlvbiAoYXJncykgeyByZXR1cm4gY2FsbE9yQXBwbHkoZm4sIGFyZ3MpOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcE9uZU9yTWFueUFyZ3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/noop.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/noop.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   noop: function() { return /* binding */ noop; }\n/* harmony export */ });\nfunction noop() { }\n//# sourceMappingURL=noop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL25vb3AuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcz9iY2QyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/noop.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/pipe.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/pipe.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pipe: function() { return /* binding */ pipe; },\n/* harmony export */   pipeFromArray: function() { return /* binding */ pipeFromArray; }\n/* harmony export */ });\n/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./identity */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/identity.js\");\n\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nfunction pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return _identity__WEBPACK_IMPORTED_MODULE_0__.identity;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXNDO0FBQy9CO0FBQ1A7QUFDQSxxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGVBQWUsK0NBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxrQkFBa0I7QUFDbEU7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanM/Y2UxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/pipe.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   reportUnhandledError: function() { return /* binding */ reportUnhandledError; }\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/config.js\");\n/* harmony import */ var _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/timeoutProvider */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js\");\n\n\nfunction reportUnhandledError(err) {\n    _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_0__.timeoutProvider.setTimeout(function () {\n        var onUnhandledError = _config__WEBPACK_IMPORTED_MODULE_1__.config.onUnhandledError;\n        if (onUnhandledError) {\n            onUnhandledError(err);\n        }\n        else {\n            throw err;\n        }\n    });\n}\n//# sourceMappingURL=reportUnhandledError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtQztBQUM0QjtBQUN4RDtBQUNQLElBQUksdUVBQWU7QUFDbkIsK0JBQStCLDJDQUFNO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yLmpzPzExYmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycikge1xuICAgIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWcub25VbmhhbmRsZWRFcnJvcjtcbiAgICAgICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createInvalidObservableTypeError: function() { return /* binding */ createInvalidObservableTypeError; }\n/* harmony export */ });\nfunction createInvalidObservableTypeError(input) {\n    return new TypeError(\"You provided \" + (input !== null && typeof input === 'object' ? 'an invalid object' : \"'\" + input + \"'\") + \" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.\");\n}\n//# sourceMappingURL=throwUnobservableError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3IuanM/NGRkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpIHtcbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBwcm92aWRlZCBcIiArIChpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgaW5wdXQgKyBcIidcIikgKyBcIiB3aGVyZSBhIHN0cmVhbSB3YXMgZXhwZWN0ZWQuIFlvdSBjYW4gcHJvdmlkZSBhbiBPYnNlcnZhYmxlLCBQcm9taXNlLCBSZWFkYWJsZVN0cmVhbSwgQXJyYXksIEFzeW5jSXRlcmFibGUsIG9yIEl0ZXJhYmxlLlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93VW5vYnNlcnZhYmxlRXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js ***!
  \***********************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBoolean: function() { return /* reexport safe */ _useBoolean_useBoolean__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; },\n/* harmony export */   useClickAnyWhere: function() { return /* reexport safe */ _useClickAnyWhere_useClickAnyWhere__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; },\n/* harmony export */   useCopyToClipboard: function() { return /* reexport safe */ _useCopyToClipboard_useCopyToClipboard__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; },\n/* harmony export */   useCountdown: function() { return /* reexport safe */ _useCountdown_useCountdown__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; },\n/* harmony export */   useCounter: function() { return /* reexport safe */ _useCounter_useCounter__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; },\n/* harmony export */   useDarkMode: function() { return /* reexport safe */ _useDarkMode_useDarkMode__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; },\n/* harmony export */   useDebounce: function() { return /* reexport safe */ _useDebounce_useDebounce__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; },\n/* harmony export */   useDocumentTitle: function() { return /* reexport safe */ _useDocumentTitle_useDocumentTitle__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; },\n/* harmony export */   useEffectOnce: function() { return /* reexport safe */ _useEffectOnce_useEffectOnce__WEBPACK_IMPORTED_MODULE_8__[\"default\"]; },\n/* harmony export */   useElementSize: function() { return /* reexport safe */ _useElementSize_useElementSize__WEBPACK_IMPORTED_MODULE_9__[\"default\"]; },\n/* harmony export */   useEventCallback: function() { return /* reexport safe */ _useEventCallback_useEventCallback__WEBPACK_IMPORTED_MODULE_10__[\"default\"]; },\n/* harmony export */   useEventListener: function() { return /* reexport safe */ _useEventListener_useEventListener__WEBPACK_IMPORTED_MODULE_11__[\"default\"]; },\n/* harmony export */   useFetch: function() { return /* reexport safe */ _useFetch_useFetch__WEBPACK_IMPORTED_MODULE_12__[\"default\"]; },\n/* harmony export */   useHover: function() { return /* reexport safe */ _useHover_useHover__WEBPACK_IMPORTED_MODULE_13__[\"default\"]; },\n/* harmony export */   useImageOnLoad: function() { return /* reexport safe */ _useImageOnLoad_useImageOnLoad__WEBPACK_IMPORTED_MODULE_14__[\"default\"]; },\n/* harmony export */   useIntersectionObserver: function() { return /* reexport safe */ _useIntersectionObserver_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_15__[\"default\"]; },\n/* harmony export */   useInterval: function() { return /* reexport safe */ _useInterval_useInterval__WEBPACK_IMPORTED_MODULE_16__[\"default\"]; },\n/* harmony export */   useIsClient: function() { return /* reexport safe */ _useIsClient_useIsClient__WEBPACK_IMPORTED_MODULE_17__[\"default\"]; },\n/* harmony export */   useIsFirstRender: function() { return /* reexport safe */ _useIsFirstRender_useIsFirstRender__WEBPACK_IMPORTED_MODULE_18__[\"default\"]; },\n/* harmony export */   useIsMounted: function() { return /* reexport safe */ _useIsMounted_useIsMounted__WEBPACK_IMPORTED_MODULE_19__[\"default\"]; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* reexport safe */ _useIsomorphicLayoutEffect_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_20__[\"default\"]; },\n/* harmony export */   useLocalStorage: function() { return /* reexport safe */ _useLocalStorage_useLocalStorage__WEBPACK_IMPORTED_MODULE_21__[\"default\"]; },\n/* harmony export */   useLockedBody: function() { return /* reexport safe */ _useLockedBody_useLockedBody__WEBPACK_IMPORTED_MODULE_22__[\"default\"]; },\n/* harmony export */   useMap: function() { return /* reexport safe */ _useMap_useMap__WEBPACK_IMPORTED_MODULE_23__[\"default\"]; },\n/* harmony export */   useMediaQuery: function() { return /* reexport safe */ _useMediaQuery_useMediaQuery__WEBPACK_IMPORTED_MODULE_24__[\"default\"]; },\n/* harmony export */   useOnClickOutside: function() { return /* reexport safe */ _useOnClickOutside_useOnClickOutside__WEBPACK_IMPORTED_MODULE_25__[\"default\"]; },\n/* harmony export */   useReadLocalStorage: function() { return /* reexport safe */ _useReadLocalStorage_useReadLocalStorage__WEBPACK_IMPORTED_MODULE_26__[\"default\"]; },\n/* harmony export */   useScreen: function() { return /* reexport safe */ _useScreen_useScreen__WEBPACK_IMPORTED_MODULE_27__[\"default\"]; },\n/* harmony export */   useScript: function() { return /* reexport safe */ _useScript_useScript__WEBPACK_IMPORTED_MODULE_28__[\"default\"]; },\n/* harmony export */   useSessionStorage: function() { return /* reexport safe */ _useSessionStorage_useSessionStorage__WEBPACK_IMPORTED_MODULE_29__[\"default\"]; },\n/* harmony export */   useSsr: function() { return /* reexport safe */ _useSsr_useSsr__WEBPACK_IMPORTED_MODULE_30__[\"default\"]; },\n/* harmony export */   useStep: function() { return /* reexport safe */ _useStep_useStep__WEBPACK_IMPORTED_MODULE_31__[\"default\"]; },\n/* harmony export */   useTernaryDarkMode: function() { return /* reexport safe */ _useTernaryDarkMode_useTernaryDarkMode__WEBPACK_IMPORTED_MODULE_32__[\"default\"]; },\n/* harmony export */   useTimeout: function() { return /* reexport safe */ _useTimeout_useTimeout__WEBPACK_IMPORTED_MODULE_33__[\"default\"]; },\n/* harmony export */   useToggle: function() { return /* reexport safe */ _useToggle_useToggle__WEBPACK_IMPORTED_MODULE_34__[\"default\"]; },\n/* harmony export */   useUpdateEffect: function() { return /* reexport safe */ _useUpdateEffect_useUpdateEffect__WEBPACK_IMPORTED_MODULE_35__[\"default\"]; },\n/* harmony export */   useWindowSize: function() { return /* reexport safe */ _useWindowSize_useWindowSize__WEBPACK_IMPORTED_MODULE_36__[\"default\"]; }\n/* harmony export */ });\n/* harmony import */ var _useBoolean_useBoolean__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useBoolean/useBoolean */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useBoolean/useBoolean.js\");\n/* harmony import */ var _useClickAnyWhere_useClickAnyWhere__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useClickAnyWhere/useClickAnyWhere */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useClickAnyWhere/useClickAnyWhere.js\");\n/* harmony import */ var _useCopyToClipboard_useCopyToClipboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useCopyToClipboard/useCopyToClipboard */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useCopyToClipboard/useCopyToClipboard.js\");\n/* harmony import */ var _useCountdown_useCountdown__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useCountdown/useCountdown */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useCountdown/useCountdown.js\");\n/* harmony import */ var _useCounter_useCounter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useCounter/useCounter */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useCounter/useCounter.js\");\n/* harmony import */ var _useDarkMode_useDarkMode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useDarkMode/useDarkMode */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useDarkMode/useDarkMode.js\");\n/* harmony import */ var _useDebounce_useDebounce__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useDebounce/useDebounce */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useDebounce/useDebounce.js\");\n/* harmony import */ var _useDocumentTitle_useDocumentTitle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useDocumentTitle/useDocumentTitle */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useDocumentTitle/useDocumentTitle.js\");\n/* harmony import */ var _useEffectOnce_useEffectOnce__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./useEffectOnce/useEffectOnce */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useEffectOnce/useEffectOnce.js\");\n/* harmony import */ var _useElementSize_useElementSize__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./useElementSize/useElementSize */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useElementSize/useElementSize.js\");\n/* harmony import */ var _useEventCallback_useEventCallback__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./useEventCallback/useEventCallback */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useEventCallback/useEventCallback.js\");\n/* harmony import */ var _useEventListener_useEventListener__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./useEventListener/useEventListener */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useEventListener/useEventListener.js\");\n/* harmony import */ var _useFetch_useFetch__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./useFetch/useFetch */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useFetch/useFetch.js\");\n/* harmony import */ var _useHover_useHover__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./useHover/useHover */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useHover/useHover.js\");\n/* harmony import */ var _useImageOnLoad_useImageOnLoad__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./useImageOnLoad/useImageOnLoad */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useImageOnLoad/useImageOnLoad.js\");\n/* harmony import */ var _useIntersectionObserver_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./useIntersectionObserver/useIntersectionObserver */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIntersectionObserver/useIntersectionObserver.js\");\n/* harmony import */ var _useInterval_useInterval__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./useInterval/useInterval */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useInterval/useInterval.js\");\n/* harmony import */ var _useIsClient_useIsClient__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./useIsClient/useIsClient */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsClient/useIsClient.js\");\n/* harmony import */ var _useIsFirstRender_useIsFirstRender__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./useIsFirstRender/useIsFirstRender */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsFirstRender/useIsFirstRender.js\");\n/* harmony import */ var _useIsMounted_useIsMounted__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./useIsMounted/useIsMounted */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsMounted/useIsMounted.js\");\n/* harmony import */ var _useIsomorphicLayoutEffect_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./useIsomorphicLayoutEffect/useIsomorphicLayoutEffect */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsomorphicLayoutEffect/useIsomorphicLayoutEffect.js\");\n/* harmony import */ var _useLocalStorage_useLocalStorage__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./useLocalStorage/useLocalStorage */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useLocalStorage/useLocalStorage.js\");\n/* harmony import */ var _useLockedBody_useLockedBody__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./useLockedBody/useLockedBody */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useLockedBody/useLockedBody.js\");\n/* harmony import */ var _useMap_useMap__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./useMap/useMap */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useMap/useMap.js\");\n/* harmony import */ var _useMediaQuery_useMediaQuery__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./useMediaQuery/useMediaQuery */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useMediaQuery/useMediaQuery.js\");\n/* harmony import */ var _useOnClickOutside_useOnClickOutside__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./useOnClickOutside/useOnClickOutside */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useOnClickOutside/useOnClickOutside.js\");\n/* harmony import */ var _useReadLocalStorage_useReadLocalStorage__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./useReadLocalStorage/useReadLocalStorage */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useReadLocalStorage/useReadLocalStorage.js\");\n/* harmony import */ var _useScreen_useScreen__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./useScreen/useScreen */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useScreen/useScreen.js\");\n/* harmony import */ var _useScript_useScript__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./useScript/useScript */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useScript/useScript.js\");\n/* harmony import */ var _useSessionStorage_useSessionStorage__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./useSessionStorage/useSessionStorage */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useSessionStorage/useSessionStorage.js\");\n/* harmony import */ var _useSsr_useSsr__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./useSsr/useSsr */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useSsr/useSsr.js\");\n/* harmony import */ var _useStep_useStep__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./useStep/useStep */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useStep/useStep.js\");\n/* harmony import */ var _useTernaryDarkMode_useTernaryDarkMode__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./useTernaryDarkMode/useTernaryDarkMode */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useTernaryDarkMode/useTernaryDarkMode.js\");\n/* harmony import */ var _useTimeout_useTimeout__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./useTimeout/useTimeout */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useTimeout/useTimeout.js\");\n/* harmony import */ var _useToggle_useToggle__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./useToggle/useToggle */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useToggle/useToggle.js\");\n/* harmony import */ var _useUpdateEffect_useUpdateEffect__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./useUpdateEffect/useUpdateEffect */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useUpdateEffect/useUpdateEffect.js\");\n/* harmony import */ var _useWindowSize_useWindowSize__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./useWindowSize/useWindowSize */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useWindowSize/useWindowSize.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBZ0U7QUFDeEI7QUFDMEM7QUFDOUI7QUFDb0M7QUFDaEM7QUFDYztBQUMxQjtBQUNvQjtBQUN4QjtBQUMyQjtBQUN6QjtBQUN5QjtBQUN6QjtBQUN3QztBQUM5QjtBQUNxQjtBQUMzQjtBQUM4QjtBQUM1QjtBQUNrQztBQUM5QjtBQUM4QjtBQUM5QjtBQUNNO0FBQ3RCO0FBQ3NCO0FBQ3RCO0FBQ3dDO0FBQzVCO0FBQ3VEO0FBQ3JDO0FBQ0M7QUFDekI7QUFDeUI7QUFDekI7QUFDd0M7QUFDOUI7QUFDa0I7QUFDMUI7QUFDaUU7QUFDdkM7QUFDUztBQUM3QjtBQUN1QjtBQUMzQjtBQUNNO0FBQ3BCO0FBQ3lDO0FBQzNCO0FBQ3VDO0FBQy9CO0FBQ3FDO0FBQ2pDO0FBQ0c7QUFDdkI7QUFDdUI7QUFDdkI7QUFDK0M7QUFDL0I7QUFDRjtBQUNwQjtBQUN1QjtBQUNyQjtBQUNzRDtBQUNoQztBQUNRO0FBQ3hCO0FBQ3FCO0FBQ3ZCO0FBQ3lDO0FBQzdCO0FBQ3VCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vaW5kZXguanM/ZTFiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IGFzIHVzZUJvb2xlYW4gfSBmcm9tICcuL3VzZUJvb2xlYW4vdXNlQm9vbGVhbic7XG5leHBvcnQgKiBmcm9tICcuL3VzZUJvb2xlYW4vdXNlQm9vbGVhbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUNsaWNrQW55V2hlcmUgfSBmcm9tICcuL3VzZUNsaWNrQW55V2hlcmUvdXNlQ2xpY2tBbnlXaGVyZSc7XG5leHBvcnQgKiBmcm9tICcuL3VzZUNsaWNrQW55V2hlcmUvdXNlQ2xpY2tBbnlXaGVyZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUNvcHlUb0NsaXBib2FyZCB9IGZyb20gJy4vdXNlQ29weVRvQ2xpcGJvYXJkL3VzZUNvcHlUb0NsaXBib2FyZCc7XG5leHBvcnQgKiBmcm9tICcuL3VzZUNvcHlUb0NsaXBib2FyZC91c2VDb3B5VG9DbGlwYm9hcmQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VDb3VudGRvd24gfSBmcm9tICcuL3VzZUNvdW50ZG93bi91c2VDb3VudGRvd24nO1xuZXhwb3J0ICogZnJvbSAnLi91c2VDb3VudGRvd24vdXNlQ291bnRkb3duJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlQ291bnRlciB9IGZyb20gJy4vdXNlQ291bnRlci91c2VDb3VudGVyJztcbmV4cG9ydCAqIGZyb20gJy4vdXNlQ291bnRlci91c2VDb3VudGVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlRGFya01vZGUgfSBmcm9tICcuL3VzZURhcmtNb2RlL3VzZURhcmtNb2RlJztcbmV4cG9ydCAqIGZyb20gJy4vdXNlRGFya01vZGUvdXNlRGFya01vZGUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VEZWJvdW5jZSB9IGZyb20gJy4vdXNlRGVib3VuY2UvdXNlRGVib3VuY2UnO1xuZXhwb3J0ICogZnJvbSAnLi91c2VEZWJvdW5jZS91c2VEZWJvdW5jZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZURvY3VtZW50VGl0bGUgfSBmcm9tICcuL3VzZURvY3VtZW50VGl0bGUvdXNlRG9jdW1lbnRUaXRsZSc7XG5leHBvcnQgKiBmcm9tICcuL3VzZURvY3VtZW50VGl0bGUvdXNlRG9jdW1lbnRUaXRsZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUVmZmVjdE9uY2UgfSBmcm9tICcuL3VzZUVmZmVjdE9uY2UvdXNlRWZmZWN0T25jZSc7XG5leHBvcnQgKiBmcm9tICcuL3VzZUVmZmVjdE9uY2UvdXNlRWZmZWN0T25jZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUVsZW1lbnRTaXplIH0gZnJvbSAnLi91c2VFbGVtZW50U2l6ZS91c2VFbGVtZW50U2l6ZSc7XG5leHBvcnQgKiBmcm9tICcuL3VzZUVsZW1lbnRTaXplL3VzZUVsZW1lbnRTaXplJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlRXZlbnRDYWxsYmFjayB9IGZyb20gJy4vdXNlRXZlbnRDYWxsYmFjay91c2VFdmVudENhbGxiYWNrJztcbmV4cG9ydCAqIGZyb20gJy4vdXNlRXZlbnRDYWxsYmFjay91c2VFdmVudENhbGxiYWNrJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlRXZlbnRMaXN0ZW5lciB9IGZyb20gJy4vdXNlRXZlbnRMaXN0ZW5lci91c2VFdmVudExpc3RlbmVyJztcbmV4cG9ydCAqIGZyb20gJy4vdXNlRXZlbnRMaXN0ZW5lci91c2VFdmVudExpc3RlbmVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlRmV0Y2ggfSBmcm9tICcuL3VzZUZldGNoL3VzZUZldGNoJztcbmV4cG9ydCAqIGZyb20gJy4vdXNlRmV0Y2gvdXNlRmV0Y2gnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VIb3ZlciB9IGZyb20gJy4vdXNlSG92ZXIvdXNlSG92ZXInO1xuZXhwb3J0ICogZnJvbSAnLi91c2VIb3Zlci91c2VIb3Zlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUltYWdlT25Mb2FkIH0gZnJvbSAnLi91c2VJbWFnZU9uTG9hZC91c2VJbWFnZU9uTG9hZCc7XG5leHBvcnQgKiBmcm9tICcuL3VzZUltYWdlT25Mb2FkL3VzZUltYWdlT25Mb2FkJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgfSBmcm9tICcuL3VzZUludGVyc2VjdGlvbk9ic2VydmVyL3VzZUludGVyc2VjdGlvbk9ic2VydmVyJztcbmV4cG9ydCAqIGZyb20gJy4vdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VJbnRlcnZhbCB9IGZyb20gJy4vdXNlSW50ZXJ2YWwvdXNlSW50ZXJ2YWwnO1xuZXhwb3J0ICogZnJvbSAnLi91c2VJbnRlcnZhbC91c2VJbnRlcnZhbCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUlzQ2xpZW50IH0gZnJvbSAnLi91c2VJc0NsaWVudC91c2VJc0NsaWVudCc7XG5leHBvcnQgKiBmcm9tICcuL3VzZUlzQ2xpZW50L3VzZUlzQ2xpZW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlSXNGaXJzdFJlbmRlciB9IGZyb20gJy4vdXNlSXNGaXJzdFJlbmRlci91c2VJc0ZpcnN0UmVuZGVyJztcbmV4cG9ydCAqIGZyb20gJy4vdXNlSXNGaXJzdFJlbmRlci91c2VJc0ZpcnN0UmVuZGVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlSXNNb3VudGVkIH0gZnJvbSAnLi91c2VJc01vdW50ZWQvdXNlSXNNb3VudGVkJztcbmV4cG9ydCAqIGZyb20gJy4vdXNlSXNNb3VudGVkL3VzZUlzTW91bnRlZCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5leHBvcnQgKiBmcm9tICcuL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUxvY2FsU3RvcmFnZSB9IGZyb20gJy4vdXNlTG9jYWxTdG9yYWdlL3VzZUxvY2FsU3RvcmFnZSc7XG5leHBvcnQgKiBmcm9tICcuL3VzZUxvY2FsU3RvcmFnZS91c2VMb2NhbFN0b3JhZ2UnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VMb2NrZWRCb2R5IH0gZnJvbSAnLi91c2VMb2NrZWRCb2R5L3VzZUxvY2tlZEJvZHknO1xuZXhwb3J0ICogZnJvbSAnLi91c2VMb2NrZWRCb2R5L3VzZUxvY2tlZEJvZHknO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VNYXAgfSBmcm9tICcuL3VzZU1hcC91c2VNYXAnO1xuZXhwb3J0ICogZnJvbSAnLi91c2VNYXAvdXNlTWFwJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4vdXNlTWVkaWFRdWVyeS91c2VNZWRpYVF1ZXJ5JztcbmV4cG9ydCAqIGZyb20gJy4vdXNlTWVkaWFRdWVyeS91c2VNZWRpYVF1ZXJ5JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlT25DbGlja091dHNpZGUgfSBmcm9tICcuL3VzZU9uQ2xpY2tPdXRzaWRlL3VzZU9uQ2xpY2tPdXRzaWRlJztcbmV4cG9ydCAqIGZyb20gJy4vdXNlT25DbGlja091dHNpZGUvdXNlT25DbGlja091dHNpZGUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VSZWFkTG9jYWxTdG9yYWdlIH0gZnJvbSAnLi91c2VSZWFkTG9jYWxTdG9yYWdlL3VzZVJlYWRMb2NhbFN0b3JhZ2UnO1xuZXhwb3J0ICogZnJvbSAnLi91c2VSZWFkTG9jYWxTdG9yYWdlL3VzZVJlYWRMb2NhbFN0b3JhZ2UnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VTY3JlZW4gfSBmcm9tICcuL3VzZVNjcmVlbi91c2VTY3JlZW4nO1xuZXhwb3J0ICogZnJvbSAnLi91c2VTY3JlZW4vdXNlU2NyZWVuJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlU2NyaXB0IH0gZnJvbSAnLi91c2VTY3JpcHQvdXNlU2NyaXB0JztcbmV4cG9ydCAqIGZyb20gJy4vdXNlU2NyaXB0L3VzZVNjcmlwdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZVNlc3Npb25TdG9yYWdlIH0gZnJvbSAnLi91c2VTZXNzaW9uU3RvcmFnZS91c2VTZXNzaW9uU3RvcmFnZSc7XG5leHBvcnQgKiBmcm9tICcuL3VzZVNlc3Npb25TdG9yYWdlL3VzZVNlc3Npb25TdG9yYWdlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlU3NyIH0gZnJvbSAnLi91c2VTc3IvdXNlU3NyJztcbmV4cG9ydCAqIGZyb20gJy4vdXNlU3NyL3VzZVNzcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZVN0ZXAgfSBmcm9tICcuL3VzZVN0ZXAvdXNlU3RlcCc7XG5leHBvcnQgKiBmcm9tICcuL3VzZVN0ZXAvdXNlU3RlcCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZVRlcm5hcnlEYXJrTW9kZSB9IGZyb20gJy4vdXNlVGVybmFyeURhcmtNb2RlL3VzZVRlcm5hcnlEYXJrTW9kZSc7XG5leHBvcnQgKiBmcm9tICcuL3VzZVRlcm5hcnlEYXJrTW9kZS91c2VUZXJuYXJ5RGFya01vZGUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VUaW1lb3V0IH0gZnJvbSAnLi91c2VUaW1lb3V0L3VzZVRpbWVvdXQnO1xuZXhwb3J0ICogZnJvbSAnLi91c2VUaW1lb3V0L3VzZVRpbWVvdXQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VUb2dnbGUgfSBmcm9tICcuL3VzZVRvZ2dsZS91c2VUb2dnbGUnO1xuZXhwb3J0ICogZnJvbSAnLi91c2VUb2dnbGUvdXNlVG9nZ2xlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlVXBkYXRlRWZmZWN0IH0gZnJvbSAnLi91c2VVcGRhdGVFZmZlY3QvdXNlVXBkYXRlRWZmZWN0JztcbmV4cG9ydCAqIGZyb20gJy4vdXNlVXBkYXRlRWZmZWN0L3VzZVVwZGF0ZUVmZmVjdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZVdpbmRvd1NpemUgfSBmcm9tICcuL3VzZVdpbmRvd1NpemUvdXNlV2luZG93U2l6ZSc7XG5leHBvcnQgKiBmcm9tICcuL3VzZVdpbmRvd1NpemUvdXNlV2luZG93U2l6ZSc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useBoolean/useBoolean.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useBoolean/useBoolean.js ***!
  \***************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useBoolean(defaultValue) {\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!!defaultValue);\n    const setTrue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => setValue(true), []);\n    const setFalse = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => setValue(false), []);\n    const toggle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => setValue(x => !x), []);\n    return { value, setValue, setTrue, setFalse, toggle };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useBoolean);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlQm9vbGVhbi91c2VCb29sZWFuLmpzIiwibWFwcGluZ3MiOiI7OztBQUE4QztBQUM5QztBQUNBLDhCQUE4QiwrQ0FBUTtBQUN0QyxvQkFBb0Isa0RBQVc7QUFDL0IscUJBQXFCLGtEQUFXO0FBQ2hDLG1CQUFtQixrREFBVztBQUM5QixhQUFhO0FBQ2I7QUFDQSwrREFBZSxVQUFVLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VCb29sZWFuL3VzZUJvb2xlYW4uanM/N2NiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5mdW5jdGlvbiB1c2VCb29sZWFuKGRlZmF1bHRWYWx1ZSkge1xuICAgIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUoISFkZWZhdWx0VmFsdWUpO1xuICAgIGNvbnN0IHNldFRydWUgPSB1c2VDYWxsYmFjaygoKSA9PiBzZXRWYWx1ZSh0cnVlKSwgW10pO1xuICAgIGNvbnN0IHNldEZhbHNlID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0VmFsdWUoZmFsc2UpLCBbXSk7XG4gICAgY29uc3QgdG9nZ2xlID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0VmFsdWUoeCA9PiAheCksIFtdKTtcbiAgICByZXR1cm4geyB2YWx1ZSwgc2V0VmFsdWUsIHNldFRydWUsIHNldEZhbHNlLCB0b2dnbGUgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZUJvb2xlYW47XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useBoolean/useBoolean.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useClickAnyWhere/useClickAnyWhere.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useClickAnyWhere/useClickAnyWhere.js ***!
  \***************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\nfunction useClickAnyWhere(handler) {\n    (0,___WEBPACK_IMPORTED_MODULE_0__.useEventListener)('click', event => {\n        handler(event);\n    });\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useClickAnyWhere);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlQ2xpY2tBbnlXaGVyZS91c2VDbGlja0FueVdoZXJlLmpzIiwibWFwcGluZ3MiOiI7O0FBQXNDO0FBQ3RDO0FBQ0EsSUFBSSxtREFBZ0I7QUFDcEI7QUFDQSxLQUFLO0FBQ0w7QUFDQSwrREFBZSxnQkFBZ0IsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdXNlaG9va3MtdHNAMi45LjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL3VzZWhvb2tzLXRzL2Rpc3QvZXNtL3VzZUNsaWNrQW55V2hlcmUvdXNlQ2xpY2tBbnlXaGVyZS5qcz84Mjk0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUV2ZW50TGlzdGVuZXIgfSBmcm9tICcuLic7XG5mdW5jdGlvbiB1c2VDbGlja0FueVdoZXJlKGhhbmRsZXIpIHtcbiAgICB1c2VFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgaGFuZGxlcihldmVudCk7XG4gICAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VDbGlja0FueVdoZXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useClickAnyWhere/useClickAnyWhere.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useCopyToClipboard/useCopyToClipboard.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useCopyToClipboard/useCopyToClipboard.js ***!
  \*******************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nfunction useCopyToClipboard() {\n    const [copiedText, setCopiedText] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const copy = (text) => __awaiter(this, void 0, void 0, function* () {\n        if (!(navigator === null || navigator === void 0 ? void 0 : navigator.clipboard)) {\n            console.warn('Clipboard not supported');\n            return false;\n        }\n        try {\n            yield navigator.clipboard.writeText(text);\n            setCopiedText(text);\n            return true;\n        }\n        catch (error) {\n            console.warn('Copy failed', error);\n            setCopiedText(null);\n            return false;\n        }\n    });\n    return [copiedText, copy];\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useCopyToClipboard);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlQ29weVRvQ2xpcGJvYXJkL3VzZUNvcHlUb0NsaXBib2FyZC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxpQkFBaUIsU0FBSSxJQUFJLFNBQUk7QUFDN0IsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDaUM7QUFDakM7QUFDQSx3Q0FBd0MsK0NBQVE7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwrREFBZSxrQkFBa0IsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdXNlaG9va3MtdHNAMi45LjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL3VzZWhvb2tzLXRzL2Rpc3QvZXNtL3VzZUNvcHlUb0NsaXBib2FyZC91c2VDb3B5VG9DbGlwYm9hcmQuanM/ODExMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuZnVuY3Rpb24gdXNlQ29weVRvQ2xpcGJvYXJkKCkge1xuICAgIGNvbnN0IFtjb3BpZWRUZXh0LCBzZXRDb3BpZWRUZXh0XSA9IHVzZVN0YXRlKG51bGwpO1xuICAgIGNvbnN0IGNvcHkgPSAodGV4dCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBpZiAoIShuYXZpZ2F0b3IgPT09IG51bGwgfHwgbmF2aWdhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuYXZpZ2F0b3IuY2xpcGJvYXJkKSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdDbGlwYm9hcmQgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB5aWVsZCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh0ZXh0KTtcbiAgICAgICAgICAgIHNldENvcGllZFRleHQodGV4dCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQ29weSBmYWlsZWQnLCBlcnJvcik7XG4gICAgICAgICAgICBzZXRDb3BpZWRUZXh0KG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb3BpZWRUZXh0LCBjb3B5XTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZUNvcHlUb0NsaXBib2FyZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useCopyToClipboard/useCopyToClipboard.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useCountdown/useCountdown.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useCountdown/useCountdown.js ***!
  \*******************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useCountdown(countdownOption) {\n    let isDeprecated = false;\n    let countStart, intervalMs, isIncrement, countStop;\n    if ('seconds' in countdownOption) {\n        console.warn('[useCountdown:DEPRECATED] new interface is already available (see https://usehooks-ts.com/react-hook/use-countdown), the old version will retire on usehooks-ts@3.');\n        isDeprecated = true;\n        countStart = countdownOption.seconds;\n        intervalMs = countdownOption.interval;\n        isIncrement = countdownOption.isIncrement;\n    }\n    else {\n        ;\n        ({ countStart, intervalMs, isIncrement, countStop } = countdownOption);\n    }\n    intervalMs = intervalMs !== null && intervalMs !== void 0 ? intervalMs : 1000;\n    isIncrement = isIncrement !== null && isIncrement !== void 0 ? isIncrement : false;\n    countStop = countStop !== null && countStop !== void 0 ? countStop : 0;\n    const { count, increment, decrement, reset: resetCounter, } = (0,___WEBPACK_IMPORTED_MODULE_1__.useCounter)(countStart);\n    const { value: isCountdownRunning, setTrue: startCountdown, setFalse: stopCountdown, } = (0,___WEBPACK_IMPORTED_MODULE_1__.useBoolean)(false);\n    const resetCountdown = () => {\n        stopCountdown();\n        resetCounter();\n    };\n    const countdownCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (count === countStop) {\n            stopCountdown();\n            return;\n        }\n        if (isIncrement) {\n            increment();\n        }\n        else {\n            decrement();\n        }\n    }, [count, countStop, decrement, increment, isIncrement, stopCountdown]);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useInterval)(countdownCallback, isCountdownRunning ? intervalMs : null);\n    return isDeprecated\n        ? [\n            count,\n            {\n                start: startCountdown,\n                stop: stopCountdown,\n                reset: resetCountdown,\n            },\n        ]\n        : [\n            count,\n            {\n                startCountdown,\n                stopCountdown,\n                resetCountdown,\n            },\n        ];\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useCountdown);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlQ291bnRkb3duL3VzZUNvdW50ZG93bi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQW9DO0FBQ3FCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaURBQWlEO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvREFBb0QsRUFBRSw2Q0FBVTtBQUM1RSxZQUFZLCtFQUErRSxFQUFFLDZDQUFVO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtEQUFXO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUksOENBQVc7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsK0RBQWUsWUFBWSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlQ291bnRkb3duL3VzZUNvdW50ZG93bi5qcz9hZGM4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQm9vbGVhbiwgdXNlQ291bnRlciwgdXNlSW50ZXJ2YWwgfSBmcm9tICcuLic7XG5mdW5jdGlvbiB1c2VDb3VudGRvd24oY291bnRkb3duT3B0aW9uKSB7XG4gICAgbGV0IGlzRGVwcmVjYXRlZCA9IGZhbHNlO1xuICAgIGxldCBjb3VudFN0YXJ0LCBpbnRlcnZhbE1zLCBpc0luY3JlbWVudCwgY291bnRTdG9wO1xuICAgIGlmICgnc2Vjb25kcycgaW4gY291bnRkb3duT3B0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignW3VzZUNvdW50ZG93bjpERVBSRUNBVEVEXSBuZXcgaW50ZXJmYWNlIGlzIGFscmVhZHkgYXZhaWxhYmxlIChzZWUgaHR0cHM6Ly91c2Vob29rcy10cy5jb20vcmVhY3QtaG9vay91c2UtY291bnRkb3duKSwgdGhlIG9sZCB2ZXJzaW9uIHdpbGwgcmV0aXJlIG9uIHVzZWhvb2tzLXRzQDMuJyk7XG4gICAgICAgIGlzRGVwcmVjYXRlZCA9IHRydWU7XG4gICAgICAgIGNvdW50U3RhcnQgPSBjb3VudGRvd25PcHRpb24uc2Vjb25kcztcbiAgICAgICAgaW50ZXJ2YWxNcyA9IGNvdW50ZG93bk9wdGlvbi5pbnRlcnZhbDtcbiAgICAgICAgaXNJbmNyZW1lbnQgPSBjb3VudGRvd25PcHRpb24uaXNJbmNyZW1lbnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICA7XG4gICAgICAgICh7IGNvdW50U3RhcnQsIGludGVydmFsTXMsIGlzSW5jcmVtZW50LCBjb3VudFN0b3AgfSA9IGNvdW50ZG93bk9wdGlvbik7XG4gICAgfVxuICAgIGludGVydmFsTXMgPSBpbnRlcnZhbE1zICE9PSBudWxsICYmIGludGVydmFsTXMgIT09IHZvaWQgMCA/IGludGVydmFsTXMgOiAxMDAwO1xuICAgIGlzSW5jcmVtZW50ID0gaXNJbmNyZW1lbnQgIT09IG51bGwgJiYgaXNJbmNyZW1lbnQgIT09IHZvaWQgMCA/IGlzSW5jcmVtZW50IDogZmFsc2U7XG4gICAgY291bnRTdG9wID0gY291bnRTdG9wICE9PSBudWxsICYmIGNvdW50U3RvcCAhPT0gdm9pZCAwID8gY291bnRTdG9wIDogMDtcbiAgICBjb25zdCB7IGNvdW50LCBpbmNyZW1lbnQsIGRlY3JlbWVudCwgcmVzZXQ6IHJlc2V0Q291bnRlciwgfSA9IHVzZUNvdW50ZXIoY291bnRTdGFydCk7XG4gICAgY29uc3QgeyB2YWx1ZTogaXNDb3VudGRvd25SdW5uaW5nLCBzZXRUcnVlOiBzdGFydENvdW50ZG93biwgc2V0RmFsc2U6IHN0b3BDb3VudGRvd24sIH0gPSB1c2VCb29sZWFuKGZhbHNlKTtcbiAgICBjb25zdCByZXNldENvdW50ZG93biA9ICgpID0+IHtcbiAgICAgICAgc3RvcENvdW50ZG93bigpO1xuICAgICAgICByZXNldENvdW50ZXIoKTtcbiAgICB9O1xuICAgIGNvbnN0IGNvdW50ZG93bkNhbGxiYWNrID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBpZiAoY291bnQgPT09IGNvdW50U3RvcCkge1xuICAgICAgICAgICAgc3RvcENvdW50ZG93bigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0luY3JlbWVudCkge1xuICAgICAgICAgICAgaW5jcmVtZW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWNyZW1lbnQoKTtcbiAgICAgICAgfVxuICAgIH0sIFtjb3VudCwgY291bnRTdG9wLCBkZWNyZW1lbnQsIGluY3JlbWVudCwgaXNJbmNyZW1lbnQsIHN0b3BDb3VudGRvd25dKTtcbiAgICB1c2VJbnRlcnZhbChjb3VudGRvd25DYWxsYmFjaywgaXNDb3VudGRvd25SdW5uaW5nID8gaW50ZXJ2YWxNcyA6IG51bGwpO1xuICAgIHJldHVybiBpc0RlcHJlY2F0ZWRcbiAgICAgICAgPyBbXG4gICAgICAgICAgICBjb3VudCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGFydDogc3RhcnRDb3VudGRvd24sXG4gICAgICAgICAgICAgICAgc3RvcDogc3RvcENvdW50ZG93bixcbiAgICAgICAgICAgICAgICByZXNldDogcmVzZXRDb3VudGRvd24sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdXG4gICAgICAgIDogW1xuICAgICAgICAgICAgY291bnQsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhcnRDb3VudGRvd24sXG4gICAgICAgICAgICAgICAgc3RvcENvdW50ZG93bixcbiAgICAgICAgICAgICAgICByZXNldENvdW50ZG93bixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG59XG5leHBvcnQgZGVmYXVsdCB1c2VDb3VudGRvd247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useCountdown/useCountdown.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useCounter/useCounter.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useCounter/useCounter.js ***!
  \***************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useCounter(initialValue) {\n    const [count, setCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialValue || 0);\n    const increment = () => setCount(x => x + 1);\n    const decrement = () => setCount(x => x - 1);\n    const reset = () => setCount(initialValue || 0);\n    return {\n        count,\n        increment,\n        decrement,\n        reset,\n        setCount,\n    };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useCounter);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlQ291bnRlci91c2VDb3VudGVyLmpzIiwibWFwcGluZ3MiOiI7OztBQUFpQztBQUNqQztBQUNBLDhCQUE4QiwrQ0FBUTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQWUsVUFBVSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlQ291bnRlci91c2VDb3VudGVyLmpzPzFiNGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5mdW5jdGlvbiB1c2VDb3VudGVyKGluaXRpYWxWYWx1ZSkge1xuICAgIGNvbnN0IFtjb3VudCwgc2V0Q291bnRdID0gdXNlU3RhdGUoaW5pdGlhbFZhbHVlIHx8IDApO1xuICAgIGNvbnN0IGluY3JlbWVudCA9ICgpID0+IHNldENvdW50KHggPT4geCArIDEpO1xuICAgIGNvbnN0IGRlY3JlbWVudCA9ICgpID0+IHNldENvdW50KHggPT4geCAtIDEpO1xuICAgIGNvbnN0IHJlc2V0ID0gKCkgPT4gc2V0Q291bnQoaW5pdGlhbFZhbHVlIHx8IDApO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvdW50LFxuICAgICAgICBpbmNyZW1lbnQsXG4gICAgICAgIGRlY3JlbWVudCxcbiAgICAgICAgcmVzZXQsXG4gICAgICAgIHNldENvdW50LFxuICAgIH07XG59XG5leHBvcnQgZGVmYXVsdCB1c2VDb3VudGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useCounter/useCounter.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useDarkMode/useDarkMode.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useDarkMode/useDarkMode.js ***!
  \*****************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\nfunction useDarkMode(defaultValue) {\n    var _a;\n    const isDarkOS = (0,___WEBPACK_IMPORTED_MODULE_0__.useMediaQuery)(COLOR_SCHEME_QUERY);\n    const [isDarkMode, setDarkMode] = (0,___WEBPACK_IMPORTED_MODULE_0__.useLocalStorage)('usehooks-ts-dark-mode', (_a = defaultValue !== null && defaultValue !== void 0 ? defaultValue : isDarkOS) !== null && _a !== void 0 ? _a : false);\n    (0,___WEBPACK_IMPORTED_MODULE_0__.useUpdateEffect)(() => {\n        setDarkMode(isDarkOS);\n    }, [isDarkOS]);\n    return {\n        isDarkMode,\n        toggle: () => setDarkMode(prev => !prev),\n        enable: () => setDarkMode(true),\n        disable: () => setDarkMode(false),\n    };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useDarkMode);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlRGFya01vZGUvdXNlRGFya01vZGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBcUU7QUFDckU7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGdEQUFhO0FBQ2xDLHNDQUFzQyxrREFBZTtBQUNyRCxJQUFJLGtEQUFlO0FBQ25CO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQWUsV0FBVyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlRGFya01vZGUvdXNlRGFya01vZGUuanM/ODM5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VMb2NhbFN0b3JhZ2UsIHVzZU1lZGlhUXVlcnksIHVzZVVwZGF0ZUVmZmVjdCB9IGZyb20gJy4uJztcbmNvbnN0IENPTE9SX1NDSEVNRV9RVUVSWSA9ICcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJztcbmZ1bmN0aW9uIHVzZURhcmtNb2RlKGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBpc0RhcmtPUyA9IHVzZU1lZGlhUXVlcnkoQ09MT1JfU0NIRU1FX1FVRVJZKTtcbiAgICBjb25zdCBbaXNEYXJrTW9kZSwgc2V0RGFya01vZGVdID0gdXNlTG9jYWxTdG9yYWdlKCd1c2Vob29rcy10cy1kYXJrLW1vZGUnLCAoX2EgPSBkZWZhdWx0VmFsdWUgIT09IG51bGwgJiYgZGVmYXVsdFZhbHVlICE9PSB2b2lkIDAgPyBkZWZhdWx0VmFsdWUgOiBpc0RhcmtPUykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2UpO1xuICAgIHVzZVVwZGF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldERhcmtNb2RlKGlzRGFya09TKTtcbiAgICB9LCBbaXNEYXJrT1NdKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBpc0RhcmtNb2RlLFxuICAgICAgICB0b2dnbGU6ICgpID0+IHNldERhcmtNb2RlKHByZXYgPT4gIXByZXYpLFxuICAgICAgICBlbmFibGU6ICgpID0+IHNldERhcmtNb2RlKHRydWUpLFxuICAgICAgICBkaXNhYmxlOiAoKSA9PiBzZXREYXJrTW9kZShmYWxzZSksXG4gICAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZURhcmtNb2RlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useDarkMode/useDarkMode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useDebounce/useDebounce.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useDebounce/useDebounce.js ***!
  \*****************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useDebounce(value, delay) {\n    const [debouncedValue, setDebouncedValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n        return () => {\n            clearTimeout(timer);\n        };\n    }, [value, delay]);\n    return debouncedValue;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useDebounce);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlRGVib3VuY2UvdXNlRGVib3VuY2UuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQTRDO0FBQzVDO0FBQ0EsZ0RBQWdELCtDQUFRO0FBQ3hELElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsK0RBQWUsV0FBVyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlRGVib3VuY2UvdXNlRGVib3VuY2UuanM/Y2Y4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuZnVuY3Rpb24gdXNlRGVib3VuY2UodmFsdWUsIGRlbGF5KSB7XG4gICAgY29uc3QgW2RlYm91bmNlZFZhbHVlLCBzZXREZWJvdW5jZWRWYWx1ZV0gPSB1c2VTdGF0ZSh2YWx1ZSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHNldERlYm91bmNlZFZhbHVlKHZhbHVlKSwgZGVsYXkgfHwgNTAwKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIH07XG4gICAgfSwgW3ZhbHVlLCBkZWxheV0pO1xuICAgIHJldHVybiBkZWJvdW5jZWRWYWx1ZTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZURlYm91bmNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useDebounce/useDebounce.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useDocumentTitle/useDocumentTitle.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useDocumentTitle/useDocumentTitle.js ***!
  \***************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\nfunction useDocumentTitle(title) {\n    (0,___WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(() => {\n        window.document.title = title;\n    }, [title]);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useDocumentTitle);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlRG9jdW1lbnRUaXRsZS91c2VEb2N1bWVudFRpdGxlLmpzIiwibWFwcGluZ3MiOiI7O0FBQStDO0FBQy9DO0FBQ0EsSUFBSSw0REFBeUI7QUFDN0I7QUFDQSxLQUFLO0FBQ0w7QUFDQSwrREFBZSxnQkFBZ0IsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdXNlaG9va3MtdHNAMi45LjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL3VzZWhvb2tzLXRzL2Rpc3QvZXNtL3VzZURvY3VtZW50VGl0bGUvdXNlRG9jdW1lbnRUaXRsZS5qcz8xOTExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLic7XG5mdW5jdGlvbiB1c2VEb2N1bWVudFRpdGxlKHRpdGxlKSB7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC50aXRsZSA9IHRpdGxlO1xuICAgIH0sIFt0aXRsZV0pO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlRG9jdW1lbnRUaXRsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useDocumentTitle/useDocumentTitle.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useEffectOnce/useEffectOnce.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useEffectOnce/useEffectOnce.js ***!
  \*********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useEffectOnce(effect) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(effect, []);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useEffectOnce);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlRWZmZWN0T25jZS91c2VFZmZlY3RPbmNlLmpzIiwibWFwcGluZ3MiOiI7OztBQUFrQztBQUNsQztBQUNBLElBQUksZ0RBQVM7QUFDYjtBQUNBLCtEQUFlLGFBQWEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdXNlaG9va3MtdHNAMi45LjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL3VzZWhvb2tzLXRzL2Rpc3QvZXNtL3VzZUVmZmVjdE9uY2UvdXNlRWZmZWN0T25jZS5qcz83YmJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmZ1bmN0aW9uIHVzZUVmZmVjdE9uY2UoZWZmZWN0KSB7XG4gICAgdXNlRWZmZWN0KGVmZmVjdCwgW10pO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlRWZmZWN0T25jZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useEffectOnce/useEffectOnce.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useElementSize/useElementSize.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useElementSize/useElementSize.js ***!
  \***********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useElementSize() {\n    const [ref, setRef] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [size, setSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        width: 0,\n        height: 0,\n    });\n    const handleSize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        setSize({\n            width: (ref === null || ref === void 0 ? void 0 : ref.offsetWidth) || 0,\n            height: (ref === null || ref === void 0 ? void 0 : ref.offsetHeight) || 0,\n        });\n    }, [ref === null || ref === void 0 ? void 0 : ref.offsetHeight, ref === null || ref === void 0 ? void 0 : ref.offsetWidth]);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useEventListener)('resize', handleSize);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useIsomorphicLayoutEffect)(() => {\n        handleSize();\n    }, [ref === null || ref === void 0 ? void 0 : ref.offsetHeight, ref === null || ref === void 0 ? void 0 : ref.offsetWidth]);\n    return [setRef, size];\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useElementSize);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlRWxlbWVudFNpemUvdXNlRWxlbWVudFNpemUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUE4QztBQUNtQjtBQUNqRTtBQUNBLDBCQUEwQiwrQ0FBUTtBQUNsQyw0QkFBNEIsK0NBQVE7QUFDcEM7QUFDQTtBQUNBLEtBQUs7QUFDTCx1QkFBdUIsa0RBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTCxJQUFJLG1EQUFnQjtBQUNwQixJQUFJLDREQUF5QjtBQUM3QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsK0RBQWUsY0FBYyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlRWxlbWVudFNpemUvdXNlRWxlbWVudFNpemUuanM/NjBiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VFdmVudExpc3RlbmVyLCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4nO1xuZnVuY3Rpb24gdXNlRWxlbWVudFNpemUoKSB7XG4gICAgY29uc3QgW3JlZiwgc2V0UmVmXSA9IHVzZVN0YXRlKG51bGwpO1xuICAgIGNvbnN0IFtzaXplLCBzZXRTaXplXSA9IHVzZVN0YXRlKHtcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMCxcbiAgICB9KTtcbiAgICBjb25zdCBoYW5kbGVTaXplID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBzZXRTaXplKHtcbiAgICAgICAgICAgIHdpZHRoOiAocmVmID09PSBudWxsIHx8IHJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVmLm9mZnNldFdpZHRoKSB8fCAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAocmVmID09PSBudWxsIHx8IHJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVmLm9mZnNldEhlaWdodCkgfHwgMCxcbiAgICAgICAgfSk7XG4gICAgfSwgW3JlZiA9PT0gbnVsbCB8fCByZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZi5vZmZzZXRIZWlnaHQsIHJlZiA9PT0gbnVsbCB8fCByZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZi5vZmZzZXRXaWR0aF0pO1xuICAgIHVzZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVNpemUpO1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBoYW5kbGVTaXplKCk7XG4gICAgfSwgW3JlZiA9PT0gbnVsbCB8fCByZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZi5vZmZzZXRIZWlnaHQsIHJlZiA9PT0gbnVsbCB8fCByZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZi5vZmZzZXRXaWR0aF0pO1xuICAgIHJldHVybiBbc2V0UmVmLCBzaXplXTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZUVsZW1lbnRTaXplO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useElementSize/useElementSize.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useEventCallback/useEventCallback.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useEventCallback/useEventCallback.js ***!
  \***************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ useEventCallback; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useEventCallback(fn) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(() => {\n        throw new Error('Cannot call an event handler while rendering.');\n    });\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useIsomorphicLayoutEffect)(() => {\n        ref.current = fn;\n    }, [fn]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((...args) => ref.current(...args), [ref]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlRXZlbnRDYWxsYmFjay91c2VFdmVudENhbGxiYWNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDRztBQUNoQztBQUNmLGdCQUFnQiw2Q0FBTTtBQUN0QjtBQUNBLEtBQUs7QUFDTCxJQUFJLDREQUF5QjtBQUM3QjtBQUNBLEtBQUs7QUFDTCxXQUFXLGtEQUFXO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlRXZlbnRDYWxsYmFjay91c2VFdmVudENhbGxiYWNrLmpzPzk2NWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VFdmVudENhbGxiYWNrKGZuKSB7XG4gICAgY29uc3QgcmVmID0gdXNlUmVmKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY2FsbCBhbiBldmVudCBoYW5kbGVyIHdoaWxlIHJlbmRlcmluZy4nKTtcbiAgICB9KTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBmbjtcbiAgICB9LCBbZm5dKTtcbiAgICByZXR1cm4gdXNlQ2FsbGJhY2soKC4uLmFyZ3MpID0+IHJlZi5jdXJyZW50KC4uLmFyZ3MpLCBbcmVmXSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useEventCallback/useEventCallback.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useEventListener/useEventListener.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useEventListener/useEventListener.js ***!
  \***************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useEventListener(eventName, handler, element, options) {\n    const savedHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(handler);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useIsomorphicLayoutEffect)(() => {\n        savedHandler.current = handler;\n    }, [handler]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        var _a;\n        const targetElement = (_a = element === null || element === void 0 ? void 0 : element.current) !== null && _a !== void 0 ? _a : window;\n        if (!(targetElement && targetElement.addEventListener))\n            return;\n        const listener = event => savedHandler.current(event);\n        targetElement.addEventListener(eventName, listener, options);\n        return () => {\n            targetElement.removeEventListener(eventName, listener, options);\n        };\n    }, [eventName, element, options]);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useEventListener);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlRXZlbnRMaXN0ZW5lci91c2VFdmVudExpc3RlbmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBMEM7QUFDSztBQUMvQztBQUNBLHlCQUF5Qiw2Q0FBTTtBQUMvQixJQUFJLDREQUF5QjtBQUM3QjtBQUNBLEtBQUs7QUFDTCxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsK0RBQWUsZ0JBQWdCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VFdmVudExpc3RlbmVyL3VzZUV2ZW50TGlzdGVuZXIuanM/ZTM4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLic7XG5mdW5jdGlvbiB1c2VFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHNhdmVkSGFuZGxlciA9IHVzZVJlZihoYW5kbGVyKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2F2ZWRIYW5kbGVyLmN1cnJlbnQgPSBoYW5kbGVyO1xuICAgIH0sIFtoYW5kbGVyXSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gKF9hID0gZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlbGVtZW50LmN1cnJlbnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHdpbmRvdztcbiAgICAgICAgaWYgKCEodGFyZ2V0RWxlbWVudCAmJiB0YXJnZXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBsaXN0ZW5lciA9IGV2ZW50ID0+IHNhdmVkSGFuZGxlci5jdXJyZW50KGV2ZW50KTtcbiAgICAgICAgdGFyZ2V0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdGFyZ2V0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgICAgICB9O1xuICAgIH0sIFtldmVudE5hbWUsIGVsZW1lbnQsIG9wdGlvbnNdKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZUV2ZW50TGlzdGVuZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useEventListener/useEventListener.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useFetch/useFetch.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useFetch/useFetch.js ***!
  \***********************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nfunction useFetch(url, options) {\n    const cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    const cancelRequest = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const initialState = {\n        error: undefined,\n        data: undefined,\n    };\n    const fetchReducer = (state, action) => {\n        switch (action.type) {\n            case 'loading':\n                return Object.assign({}, initialState);\n            case 'fetched':\n                return Object.assign(Object.assign({}, initialState), { data: action.payload });\n            case 'error':\n                return Object.assign(Object.assign({}, initialState), { error: action.payload });\n            default:\n                return state;\n        }\n    };\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(fetchReducer, initialState);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!url)\n            return;\n        cancelRequest.current = false;\n        const fetchData = () => __awaiter(this, void 0, void 0, function* () {\n            dispatch({ type: 'loading' });\n            if (cache.current[url]) {\n                dispatch({ type: 'fetched', payload: cache.current[url] });\n                return;\n            }\n            try {\n                const response = yield fetch(url, options);\n                if (!response.ok) {\n                    throw new Error(response.statusText);\n                }\n                const data = (yield response.json());\n                cache.current[url] = data;\n                if (cancelRequest.current)\n                    return;\n                dispatch({ type: 'fetched', payload: data });\n            }\n            catch (error) {\n                if (cancelRequest.current)\n                    return;\n                dispatch({ type: 'error', payload: error });\n            }\n        });\n        void fetchData();\n        return () => {\n            cancelRequest.current = true;\n        };\n    }, [url]);\n    return state;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useFetch);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlRmV0Y2gvdXNlRmV0Y2guanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUJBQWlCLFNBQUksSUFBSSxTQUFJO0FBQzdCLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ3NEO0FBQ3REO0FBQ0Esa0JBQWtCLDZDQUFNLEdBQUc7QUFDM0IsMEJBQTBCLDZDQUFNO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0EscURBQXFELG1CQUFtQixzQkFBc0I7QUFDOUY7QUFDQSxxREFBcUQsbUJBQW1CLHVCQUF1QjtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixpREFBVTtBQUN4QyxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUJBQWlCO0FBQ3hDO0FBQ0EsMkJBQTJCLDhDQUE4QztBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGdDQUFnQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwrQkFBK0I7QUFDMUQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLCtEQUFlLFFBQVEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdXNlaG9va3MtdHNAMi45LjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL3VzZWhvb2tzLXRzL2Rpc3QvZXNtL3VzZUZldGNoL3VzZUZldGNoLmpzPzNjYTIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZHVjZXIsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmZ1bmN0aW9uIHVzZUZldGNoKHVybCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGNhY2hlID0gdXNlUmVmKHt9KTtcbiAgICBjb25zdCBjYW5jZWxSZXF1ZXN0ID0gdXNlUmVmKGZhbHNlKTtcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gICAgICAgIGVycm9yOiB1bmRlZmluZWQsXG4gICAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgIGNvbnN0IGZldGNoUmVkdWNlciA9IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2xvYWRpbmcnOlxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsU3RhdGUpO1xuICAgICAgICAgICAgY2FzZSAnZmV0Y2hlZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaW5pdGlhbFN0YXRlKSwgeyBkYXRhOiBhY3Rpb24ucGF5bG9hZCB9KTtcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsU3RhdGUpLCB7IGVycm9yOiBhY3Rpb24ucGF5bG9hZCB9KTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IHVzZVJlZHVjZXIoZmV0Y2hSZWR1Y2VyLCBpbml0aWFsU3RhdGUpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghdXJsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYW5jZWxSZXF1ZXN0LmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgZmV0Y2hEYXRhID0gKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnbG9hZGluZycgfSk7XG4gICAgICAgICAgICBpZiAoY2FjaGUuY3VycmVudFt1cmxdKSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnZmV0Y2hlZCcsIHBheWxvYWQ6IGNhY2hlLmN1cnJlbnRbdXJsXSB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgZmV0Y2godXJsLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9ICh5aWVsZCByZXNwb25zZS5qc29uKCkpO1xuICAgICAgICAgICAgICAgIGNhY2hlLmN1cnJlbnRbdXJsXSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbFJlcXVlc3QuY3VycmVudClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ2ZldGNoZWQnLCBwYXlsb2FkOiBkYXRhIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbFJlcXVlc3QuY3VycmVudClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ2Vycm9yJywgcGF5bG9hZDogZXJyb3IgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB2b2lkIGZldGNoRGF0YSgpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY2FuY2VsUmVxdWVzdC5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICB9LCBbdXJsXSk7XG4gICAgcmV0dXJuIHN0YXRlO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlRmV0Y2g7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useFetch/useFetch.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useHover/useHover.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useHover/useHover.js ***!
  \***********************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useHover(elementRef) {\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const handleMouseEnter = () => setValue(true);\n    const handleMouseLeave = () => setValue(false);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useEventListener)('mouseenter', handleMouseEnter, elementRef);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useEventListener)('mouseleave', handleMouseLeave, elementRef);\n    return value;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useHover);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlSG92ZXIvdXNlSG92ZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFpQztBQUNLO0FBQ3RDO0FBQ0EsOEJBQThCLCtDQUFRO0FBQ3RDO0FBQ0E7QUFDQSxJQUFJLG1EQUFnQjtBQUNwQixJQUFJLG1EQUFnQjtBQUNwQjtBQUNBO0FBQ0EsK0RBQWUsUUFBUSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlSG92ZXIvdXNlSG92ZXIuanM/YWMyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUV2ZW50TGlzdGVuZXIgfSBmcm9tICcuLic7XG5mdW5jdGlvbiB1c2VIb3ZlcihlbGVtZW50UmVmKSB7XG4gICAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgaGFuZGxlTW91c2VFbnRlciA9ICgpID0+IHNldFZhbHVlKHRydWUpO1xuICAgIGNvbnN0IGhhbmRsZU1vdXNlTGVhdmUgPSAoKSA9PiBzZXRWYWx1ZShmYWxzZSk7XG4gICAgdXNlRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGhhbmRsZU1vdXNlRW50ZXIsIGVsZW1lbnRSZWYpO1xuICAgIHVzZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBoYW5kbGVNb3VzZUxlYXZlLCBlbGVtZW50UmVmKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VIb3ZlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useHover/useHover.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useImageOnLoad/useImageOnLoad.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useImageOnLoad/useImageOnLoad.js ***!
  \***********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useImageOnLoad() {\n    const [isLoaded, setIsLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const handleImageOnLoad = () => {\n        setIsLoaded(true);\n    };\n    const css = {\n        thumbnail: {\n            visibility: isLoaded ? 'hidden' : 'visible',\n            filter: 'blur(8px)',\n            transition: 'visibility 0ms ease-out 500ms',\n        },\n        fullSize: {\n            opacity: isLoaded ? 1 : 0,\n            transition: 'opacity 500ms ease-in 0ms',\n        },\n    };\n    return { handleImageOnLoad, css };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useImageOnLoad);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlSW1hZ2VPbkxvYWQvdXNlSW1hZ2VPbkxvYWQuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQWlDO0FBQ2pDO0FBQ0Esb0NBQW9DLCtDQUFRO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsK0RBQWUsY0FBYyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlSW1hZ2VPbkxvYWQvdXNlSW1hZ2VPbkxvYWQuanM/ODc2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmZ1bmN0aW9uIHVzZUltYWdlT25Mb2FkKCkge1xuICAgIGNvbnN0IFtpc0xvYWRlZCwgc2V0SXNMb2FkZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGhhbmRsZUltYWdlT25Mb2FkID0gKCkgPT4ge1xuICAgICAgICBzZXRJc0xvYWRlZCh0cnVlKTtcbiAgICB9O1xuICAgIGNvbnN0IGNzcyA9IHtcbiAgICAgICAgdGh1bWJuYWlsOiB7XG4gICAgICAgICAgICB2aXNpYmlsaXR5OiBpc0xvYWRlZCA/ICdoaWRkZW4nIDogJ3Zpc2libGUnLFxuICAgICAgICAgICAgZmlsdGVyOiAnYmx1cig4cHgpJyxcbiAgICAgICAgICAgIHRyYW5zaXRpb246ICd2aXNpYmlsaXR5IDBtcyBlYXNlLW91dCA1MDBtcycsXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bGxTaXplOiB7XG4gICAgICAgICAgICBvcGFjaXR5OiBpc0xvYWRlZCA/IDEgOiAwLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogJ29wYWNpdHkgNTAwbXMgZWFzZS1pbiAwbXMnLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIHsgaGFuZGxlSW1hZ2VPbkxvYWQsIGNzcyB9O1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlSW1hZ2VPbkxvYWQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useImageOnLoad/useImageOnLoad.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIntersectionObserver/useIntersectionObserver.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIntersectionObserver/useIntersectionObserver.js ***!
  \*****************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useIntersectionObserver(elementRef, { threshold = 0, root = null, rootMargin = '0%', freezeOnceVisible = false, }) {\n    const [entry, setEntry] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n    const frozen = (entry === null || entry === void 0 ? void 0 : entry.isIntersecting) && freezeOnceVisible;\n    const updateEntry = ([entry]) => {\n        setEntry(entry);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const node = elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n        const hasIOSupport = !!window.IntersectionObserver;\n        if (!hasIOSupport || frozen || !node)\n            return;\n        const observerParams = { threshold, root, rootMargin };\n        const observer = new IntersectionObserver(updateEntry, observerParams);\n        observer.observe(node);\n        return () => observer.disconnect();\n    }, [elementRef === null || elementRef === void 0 ? void 0 : elementRef.current, JSON.stringify(threshold), root, rootMargin, frozen]);\n    return entry;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useIntersectionObserver);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQTRDO0FBQzVDLCtDQUErQywyRUFBMkU7QUFDMUgsOEJBQThCLCtDQUFRO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsK0RBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VJbnRlcnNlY3Rpb25PYnNlcnZlci91c2VJbnRlcnNlY3Rpb25PYnNlcnZlci5qcz84ZjgwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5mdW5jdGlvbiB1c2VJbnRlcnNlY3Rpb25PYnNlcnZlcihlbGVtZW50UmVmLCB7IHRocmVzaG9sZCA9IDAsIHJvb3QgPSBudWxsLCByb290TWFyZ2luID0gJzAlJywgZnJlZXplT25jZVZpc2libGUgPSBmYWxzZSwgfSkge1xuICAgIGNvbnN0IFtlbnRyeSwgc2V0RW50cnldID0gdXNlU3RhdGUoKTtcbiAgICBjb25zdCBmcm96ZW4gPSAoZW50cnkgPT09IG51bGwgfHwgZW50cnkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVudHJ5LmlzSW50ZXJzZWN0aW5nKSAmJiBmcmVlemVPbmNlVmlzaWJsZTtcbiAgICBjb25zdCB1cGRhdGVFbnRyeSA9IChbZW50cnldKSA9PiB7XG4gICAgICAgIHNldEVudHJ5KGVudHJ5KTtcbiAgICB9O1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBlbGVtZW50UmVmID09PSBudWxsIHx8IGVsZW1lbnRSZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVsZW1lbnRSZWYuY3VycmVudDtcbiAgICAgICAgY29uc3QgaGFzSU9TdXBwb3J0ID0gISF3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XG4gICAgICAgIGlmICghaGFzSU9TdXBwb3J0IHx8IGZyb3plbiB8fCAhbm9kZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXJQYXJhbXMgPSB7IHRocmVzaG9sZCwgcm9vdCwgcm9vdE1hcmdpbiB9O1xuICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcih1cGRhdGVFbnRyeSwgb2JzZXJ2ZXJQYXJhbXMpO1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKG5vZGUpO1xuICAgICAgICByZXR1cm4gKCkgPT4gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0sIFtlbGVtZW50UmVmID09PSBudWxsIHx8IGVsZW1lbnRSZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVsZW1lbnRSZWYuY3VycmVudCwgSlNPTi5zdHJpbmdpZnkodGhyZXNob2xkKSwgcm9vdCwgcm9vdE1hcmdpbiwgZnJvemVuXSk7XG4gICAgcmV0dXJuIGVudHJ5O1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIntersectionObserver/useIntersectionObserver.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useInterval/useInterval.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useInterval/useInterval.js ***!
  \*****************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useInterval(callback, delay) {\n    const savedCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useIsomorphicLayoutEffect)(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!delay && delay !== 0) {\n            return;\n        }\n        const id = setInterval(() => savedCallback.current(), delay);\n        return () => clearInterval(id);\n    }, [delay]);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useInterval);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlSW50ZXJ2YWwvdXNlSW50ZXJ2YWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUEwQztBQUNLO0FBQy9DO0FBQ0EsMEJBQTBCLDZDQUFNO0FBQ2hDLElBQUksNERBQXlCO0FBQzdCO0FBQ0EsS0FBSztBQUNMLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsK0RBQWUsV0FBVyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlSW50ZXJ2YWwvdXNlSW50ZXJ2YWwuanM/ODFiOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLic7XG5mdW5jdGlvbiB1c2VJbnRlcnZhbChjYWxsYmFjaywgZGVsYXkpIHtcbiAgICBjb25zdCBzYXZlZENhbGxiYWNrID0gdXNlUmVmKGNhbGxiYWNrKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2F2ZWRDYWxsYmFjay5jdXJyZW50ID0gY2FsbGJhY2s7XG4gICAgfSwgW2NhbGxiYWNrXSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFkZWxheSAmJiBkZWxheSAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlkID0gc2V0SW50ZXJ2YWwoKCkgPT4gc2F2ZWRDYWxsYmFjay5jdXJyZW50KCksIGRlbGF5KTtcbiAgICAgICAgcmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgIH0sIFtkZWxheV0pO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlSW50ZXJ2YWw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useInterval/useInterval.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsClient/useIsClient.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsClient/useIsClient.js ***!
  \*****************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useIsClient() {\n    const [isClient, setClient] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        setClient(true);\n    }, []);\n    return isClient;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useIsClient);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlSXNDbGllbnQvdXNlSXNDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQTRDO0FBQzVDO0FBQ0Esa0NBQWtDLCtDQUFRO0FBQzFDLElBQUksZ0RBQVM7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsK0RBQWUsV0FBVyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlSXNDbGllbnQvdXNlSXNDbGllbnQuanM/ZjZiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuZnVuY3Rpb24gdXNlSXNDbGllbnQoKSB7XG4gICAgY29uc3QgW2lzQ2xpZW50LCBzZXRDbGllbnRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldENsaWVudCh0cnVlKTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGlzQ2xpZW50O1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlSXNDbGllbnQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsClient/useIsClient.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsFirstRender/useIsFirstRender.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsFirstRender/useIsFirstRender.js ***!
  \***************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useIsFirstRender() {\n    const isFirst = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    if (isFirst.current) {\n        isFirst.current = false;\n        return true;\n    }\n    return isFirst.current;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useIsFirstRender);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlSXNGaXJzdFJlbmRlci91c2VJc0ZpcnN0UmVuZGVyLmpzIiwibWFwcGluZ3MiOiI7OztBQUErQjtBQUMvQjtBQUNBLG9CQUFvQiw2Q0FBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBZSxnQkFBZ0IsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdXNlaG9va3MtdHNAMi45LjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL3VzZWhvb2tzLXRzL2Rpc3QvZXNtL3VzZUlzRmlyc3RSZW5kZXIvdXNlSXNGaXJzdFJlbmRlci5qcz8xYTExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmZ1bmN0aW9uIHVzZUlzRmlyc3RSZW5kZXIoKSB7XG4gICAgY29uc3QgaXNGaXJzdCA9IHVzZVJlZih0cnVlKTtcbiAgICBpZiAoaXNGaXJzdC5jdXJyZW50KSB7XG4gICAgICAgIGlzRmlyc3QuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRmlyc3QuY3VycmVudDtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZUlzRmlyc3RSZW5kZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsFirstRender/useIsFirstRender.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsMounted/useIsMounted.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsMounted/useIsMounted.js ***!
  \*******************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useIsMounted() {\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => isMounted.current, []);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useIsMounted);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlSXNNb3VudGVkL3VzZUlzTW91bnRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBdUQ7QUFDdkQ7QUFDQSxzQkFBc0IsNkNBQU07QUFDNUIsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFdBQVcsa0RBQVc7QUFDdEI7QUFDQSwrREFBZSxZQUFZLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VJc01vdW50ZWQvdXNlSXNNb3VudGVkLmpzP2I2NDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuZnVuY3Rpb24gdXNlSXNNb3VudGVkKCkge1xuICAgIGNvbnN0IGlzTW91bnRlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKCgpID0+IGlzTW91bnRlZC5jdXJyZW50LCBbXSk7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VJc01vdW50ZWQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsMounted/useIsMounted.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsomorphicLayoutEffect/useIsomorphicLayoutEffect.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsomorphicLayoutEffect/useIsomorphicLayoutEffect.js ***!
  \*********************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n/* harmony default export */ __webpack_exports__[\"default\"] = (useIsomorphicLayoutEffect);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwibWFwcGluZ3MiOiI7OztBQUFtRDtBQUNuRCxrRUFBa0Usa0RBQWUsR0FBRyw0Q0FBUztBQUM3RiwrREFBZSx5QkFBeUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdXNlaG9va3MtdHNAMi45LjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL3VzZWhvb2tzLXRzL2Rpc3QvZXNtL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcz85NWRjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuY29uc3QgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuZXhwb3J0IGRlZmF1bHQgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useIsomorphicLayoutEffect/useIsomorphicLayoutEffect.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useLocalStorage/useLocalStorage.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useLocalStorage/useLocalStorage.js ***!
  \*************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useLocalStorage(key, initialValue) {\n    const readValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (typeof window === 'undefined') {\n            return initialValue;\n        }\n        try {\n            const item = window.localStorage.getItem(key);\n            return item ? parseJSON(item) : initialValue;\n        }\n        catch (error) {\n            console.warn(`Error reading localStorage key “${key}”:`, error);\n            return initialValue;\n        }\n    }, [initialValue, key]);\n    const [storedValue, setStoredValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(readValue);\n    const setValue = (0,___WEBPACK_IMPORTED_MODULE_1__.useEventCallback)(value => {\n        if (typeof window === 'undefined') {\n            console.warn(`Tried setting localStorage key “${key}” even though environment is not a client`);\n        }\n        try {\n            const newValue = value instanceof Function ? value(storedValue) : value;\n            window.localStorage.setItem(key, JSON.stringify(newValue));\n            setStoredValue(newValue);\n            window.dispatchEvent(new Event('local-storage'));\n        }\n        catch (error) {\n            console.warn(`Error setting localStorage key “${key}”:`, error);\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        setStoredValue(readValue());\n    }, []);\n    const handleStorageChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event) => {\n        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {\n            return;\n        }\n        setStoredValue(readValue());\n    }, [key, readValue]);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useEventListener)('storage', handleStorageChange);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useEventListener)('local-storage', handleStorageChange);\n    return [storedValue, setValue];\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useLocalStorage);\nfunction parseJSON(value) {\n    try {\n        return value === 'undefined' ? undefined : JSON.parse(value !== null && value !== void 0 ? value : '');\n    }\n    catch (_a) {\n        console.log('parsing error on', { value });\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlTG9jYWxTdG9yYWdlL3VzZUxvY2FsU3RvcmFnZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQTBEO0FBQ0Y7QUFDeEQ7QUFDQSxzQkFBc0Isa0RBQVc7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxJQUFJO0FBQ2hFO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsMENBQTBDLCtDQUFRO0FBQ2xELHFCQUFxQixtREFBZ0I7QUFDckM7QUFDQSw0REFBNEQsSUFBSTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELElBQUk7QUFDaEU7QUFDQSxLQUFLO0FBQ0wsSUFBSSxnREFBUztBQUNiO0FBQ0EsS0FBSztBQUNMLGdDQUFnQyxrREFBVztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJLG1EQUFnQjtBQUNwQixJQUFJLG1EQUFnQjtBQUNwQjtBQUNBO0FBQ0EsK0RBQWUsZUFBZSxFQUFDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsT0FBTztBQUNqRDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VMb2NhbFN0b3JhZ2UvdXNlTG9jYWxTdG9yYWdlLmpzP2VmZTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlU3RhdGUsIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlRXZlbnRDYWxsYmFjaywgdXNlRXZlbnRMaXN0ZW5lciB9IGZyb20gJy4uJztcbmZ1bmN0aW9uIHVzZUxvY2FsU3RvcmFnZShrZXksIGluaXRpYWxWYWx1ZSkge1xuICAgIGNvbnN0IHJlYWRWYWx1ZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5pdGlhbFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICAgICAgICByZXR1cm4gaXRlbSA/IHBhcnNlSlNPTihpdGVtKSA6IGluaXRpYWxWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRXJyb3IgcmVhZGluZyBsb2NhbFN0b3JhZ2Uga2V5IOKAnCR7a2V5feKAnTpgLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gaW5pdGlhbFZhbHVlO1xuICAgICAgICB9XG4gICAgfSwgW2luaXRpYWxWYWx1ZSwga2V5XSk7XG4gICAgY29uc3QgW3N0b3JlZFZhbHVlLCBzZXRTdG9yZWRWYWx1ZV0gPSB1c2VTdGF0ZShyZWFkVmFsdWUpO1xuICAgIGNvbnN0IHNldFZhbHVlID0gdXNlRXZlbnRDYWxsYmFjayh2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBUcmllZCBzZXR0aW5nIGxvY2FsU3RvcmFnZSBrZXkg4oCcJHtrZXl94oCdIGV2ZW4gdGhvdWdoIGVudmlyb25tZW50IGlzIG5vdCBhIGNsaWVudGApO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24gPyB2YWx1ZShzdG9yZWRWYWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KG5ld1ZhbHVlKSk7XG4gICAgICAgICAgICBzZXRTdG9yZWRWYWx1ZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2xvY2FsLXN0b3JhZ2UnKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEVycm9yIHNldHRpbmcgbG9jYWxTdG9yYWdlIGtleSDigJwke2tleX3igJ06YCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0U3RvcmVkVmFsdWUocmVhZFZhbHVlKCkpO1xuICAgIH0sIFtdKTtcbiAgICBjb25zdCBoYW5kbGVTdG9yYWdlQ2hhbmdlID0gdXNlQ2FsbGJhY2soKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICgoZXZlbnQgPT09IG51bGwgfHwgZXZlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV2ZW50LmtleSkgJiYgZXZlbnQua2V5ICE9PSBrZXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXRTdG9yZWRWYWx1ZShyZWFkVmFsdWUoKSk7XG4gICAgfSwgW2tleSwgcmVhZFZhbHVlXSk7XG4gICAgdXNlRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIGhhbmRsZVN0b3JhZ2VDaGFuZ2UpO1xuICAgIHVzZUV2ZW50TGlzdGVuZXIoJ2xvY2FsLXN0b3JhZ2UnLCBoYW5kbGVTdG9yYWdlQ2hhbmdlKTtcbiAgICByZXR1cm4gW3N0b3JlZFZhbHVlLCBzZXRWYWx1ZV07XG59XG5leHBvcnQgZGVmYXVsdCB1c2VMb2NhbFN0b3JhZ2U7XG5mdW5jdGlvbiBwYXJzZUpTT04odmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSlNPTi5wYXJzZSh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiAnJyk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICBjb25zb2xlLmxvZygncGFyc2luZyBlcnJvciBvbicsIHsgdmFsdWUgfSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useLocalStorage/useLocalStorage.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useLockedBody/useLockedBody.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useLockedBody/useLockedBody.js ***!
  \*********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useLockedBody(initialLocked = false, rootId = '___gatsby') {\n    const [locked, setLocked] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialLocked);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useIsomorphicLayoutEffect)(() => {\n        if (!locked) {\n            return;\n        }\n        const originalOverflow = document.body.style.overflow;\n        const originalPaddingRight = document.body.style.paddingRight;\n        document.body.style.overflow = 'hidden';\n        const root = document.getElementById(rootId);\n        const scrollBarWidth = root ? root.offsetWidth - root.scrollWidth : 0;\n        if (scrollBarWidth) {\n            document.body.style.paddingRight = `${scrollBarWidth}px`;\n        }\n        return () => {\n            document.body.style.overflow = originalOverflow;\n            if (scrollBarWidth) {\n                document.body.style.paddingRight = originalPaddingRight;\n            }\n        };\n    }, [locked]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (locked !== initialLocked) {\n            setLocked(initialLocked);\n        }\n    }, [initialLocked]);\n    return [locked, setLocked];\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useLockedBody);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlTG9ja2VkQm9keS91c2VMb2NrZWRCb2R5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBNEM7QUFDRztBQUMvQztBQUNBLGdDQUFnQywrQ0FBUTtBQUN4QyxJQUFJLDREQUF5QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsZUFBZTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwrREFBZSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VMb2NrZWRCb2R5L3VzZUxvY2tlZEJvZHkuanM/NGNkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uJztcbmZ1bmN0aW9uIHVzZUxvY2tlZEJvZHkoaW5pdGlhbExvY2tlZCA9IGZhbHNlLCByb290SWQgPSAnX19fZ2F0c2J5Jykge1xuICAgIGNvbnN0IFtsb2NrZWQsIHNldExvY2tlZF0gPSB1c2VTdGF0ZShpbml0aWFsTG9ja2VkKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFsb2NrZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcmlnaW5hbE92ZXJmbG93ID0gZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdztcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxQYWRkaW5nUmlnaHQgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodDtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICBjb25zdCByb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocm9vdElkKTtcbiAgICAgICAgY29uc3Qgc2Nyb2xsQmFyV2lkdGggPSByb290ID8gcm9vdC5vZmZzZXRXaWR0aCAtIHJvb3Quc2Nyb2xsV2lkdGggOiAwO1xuICAgICAgICBpZiAoc2Nyb2xsQmFyV2lkdGgpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7c2Nyb2xsQmFyV2lkdGh9cHhgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gb3JpZ2luYWxPdmVyZmxvdztcbiAgICAgICAgICAgIGlmIChzY3JvbGxCYXJXaWR0aCkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gb3JpZ2luYWxQYWRkaW5nUmlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSwgW2xvY2tlZF0pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChsb2NrZWQgIT09IGluaXRpYWxMb2NrZWQpIHtcbiAgICAgICAgICAgIHNldExvY2tlZChpbml0aWFsTG9ja2VkKTtcbiAgICAgICAgfVxuICAgIH0sIFtpbml0aWFsTG9ja2VkXSk7XG4gICAgcmV0dXJuIFtsb2NrZWQsIHNldExvY2tlZF07XG59XG5leHBvcnQgZGVmYXVsdCB1c2VMb2NrZWRCb2R5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useLockedBody/useLockedBody.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useMap/useMap.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useMap/useMap.js ***!
  \*******************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useMap(initialState = new Map()) {\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(new Map(initialState));\n    const actions = {\n        set: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((key, value) => {\n            setMap(prev => {\n                const copy = new Map(prev);\n                copy.set(key, value);\n                return copy;\n            });\n        }, []),\n        setAll: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(entries => {\n            setMap(() => new Map(entries));\n        }, []),\n        remove: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(key => {\n            setMap(prev => {\n                const copy = new Map(prev);\n                copy.delete(key);\n                return copy;\n            });\n        }, []),\n        reset: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n            setMap(() => new Map());\n        }, []),\n    };\n    return [map, actions];\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useMap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlTWFwL3VzZU1hcC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBOEM7QUFDOUM7QUFDQSwwQkFBMEIsK0NBQVE7QUFDbEM7QUFDQSxhQUFhLGtEQUFXO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxnQkFBZ0Isa0RBQVc7QUFDM0I7QUFDQSxTQUFTO0FBQ1QsZ0JBQWdCLGtEQUFXO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxlQUFlLGtEQUFXO0FBQzFCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLCtEQUFlLE1BQU0sRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdXNlaG9va3MtdHNAMi45LjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL3VzZWhvb2tzLXRzL2Rpc3QvZXNtL3VzZU1hcC91c2VNYXAuanM/ZWFlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5mdW5jdGlvbiB1c2VNYXAoaW5pdGlhbFN0YXRlID0gbmV3IE1hcCgpKSB7XG4gICAgY29uc3QgW21hcCwgc2V0TWFwXSA9IHVzZVN0YXRlKG5ldyBNYXAoaW5pdGlhbFN0YXRlKSk7XG4gICAgY29uc3QgYWN0aW9ucyA9IHtcbiAgICAgICAgc2V0OiB1c2VDYWxsYmFjaygoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgc2V0TWFwKHByZXYgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvcHkgPSBuZXcgTWFwKHByZXYpO1xuICAgICAgICAgICAgICAgIGNvcHkuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIFtdKSxcbiAgICAgICAgc2V0QWxsOiB1c2VDYWxsYmFjayhlbnRyaWVzID0+IHtcbiAgICAgICAgICAgIHNldE1hcCgoKSA9PiBuZXcgTWFwKGVudHJpZXMpKTtcbiAgICAgICAgfSwgW10pLFxuICAgICAgICByZW1vdmU6IHVzZUNhbGxiYWNrKGtleSA9PiB7XG4gICAgICAgICAgICBzZXRNYXAocHJldiA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29weSA9IG5ldyBNYXAocHJldik7XG4gICAgICAgICAgICAgICAgY29weS5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29weTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBbXSksXG4gICAgICAgIHJlc2V0OiB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBzZXRNYXAoKCkgPT4gbmV3IE1hcCgpKTtcbiAgICAgICAgfSwgW10pLFxuICAgIH07XG4gICAgcmV0dXJuIFttYXAsIGFjdGlvbnNdO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlTWFwO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useMap/useMap.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useMediaQuery/useMediaQuery.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useMediaQuery/useMediaQuery.js ***!
  \*********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useMediaQuery(query) {\n    const getMatches = (query) => {\n        if (typeof window !== 'undefined') {\n            return window.matchMedia(query).matches;\n        }\n        return false;\n    };\n    const [matches, setMatches] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getMatches(query));\n    function handleChange() {\n        setMatches(getMatches(query));\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const matchMedia = window.matchMedia(query);\n        handleChange();\n        if (matchMedia.addListener) {\n            matchMedia.addListener(handleChange);\n        }\n        else {\n            matchMedia.addEventListener('change', handleChange);\n        }\n        return () => {\n            if (matchMedia.removeListener) {\n                matchMedia.removeListener(handleChange);\n            }\n            else {\n                matchMedia.removeEventListener('change', handleChange);\n            }\n        };\n    }, [query]);\n    return matches;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useMediaQuery);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlTWVkaWFRdWVyeS91c2VNZWRpYVF1ZXJ5LmpzIiwibWFwcGluZ3MiOiI7OztBQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQywrQ0FBUTtBQUMxQztBQUNBO0FBQ0E7QUFDQSxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLCtEQUFlLGFBQWEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdXNlaG9va3MtdHNAMi45LjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL3VzZWhvb2tzLXRzL2Rpc3QvZXNtL3VzZU1lZGlhUXVlcnkvdXNlTWVkaWFRdWVyeS5qcz8yYTE2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5mdW5jdGlvbiB1c2VNZWRpYVF1ZXJ5KHF1ZXJ5KSB7XG4gICAgY29uc3QgZ2V0TWF0Y2hlcyA9IChxdWVyeSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubWF0Y2hNZWRpYShxdWVyeSkubWF0Y2hlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBjb25zdCBbbWF0Y2hlcywgc2V0TWF0Y2hlc10gPSB1c2VTdGF0ZShnZXRNYXRjaGVzKHF1ZXJ5KSk7XG4gICAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKCkge1xuICAgICAgICBzZXRNYXRjaGVzKGdldE1hdGNoZXMocXVlcnkpKTtcbiAgICB9XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgbWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5KTtcbiAgICAgICAgaGFuZGxlQ2hhbmdlKCk7XG4gICAgICAgIGlmIChtYXRjaE1lZGlhLmFkZExpc3RlbmVyKSB7XG4gICAgICAgICAgICBtYXRjaE1lZGlhLmFkZExpc3RlbmVyKGhhbmRsZUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtYXRjaE1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGhhbmRsZUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGlmIChtYXRjaE1lZGlhLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hNZWRpYS5yZW1vdmVMaXN0ZW5lcihoYW5kbGVDaGFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hNZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBoYW5kbGVDaGFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sIFtxdWVyeV0pO1xuICAgIHJldHVybiBtYXRjaGVzO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlTWVkaWFRdWVyeTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useMediaQuery/useMediaQuery.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useOnClickOutside/useOnClickOutside.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useOnClickOutside/useOnClickOutside.js ***!
  \*****************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\nfunction useOnClickOutside(ref, handler, mouseEvent = 'mousedown') {\n    (0,___WEBPACK_IMPORTED_MODULE_0__.useEventListener)(mouseEvent, event => {\n        const el = ref === null || ref === void 0 ? void 0 : ref.current;\n        if (!el || el.contains(event.target)) {\n            return;\n        }\n        handler(event);\n    });\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useOnClickOutside);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlT25DbGlja091dHNpZGUvdXNlT25DbGlja091dHNpZGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBc0M7QUFDdEM7QUFDQSxJQUFJLG1EQUFnQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsK0RBQWUsaUJBQWlCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VPbkNsaWNrT3V0c2lkZS91c2VPbkNsaWNrT3V0c2lkZS5qcz81N2MyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUV2ZW50TGlzdGVuZXIgfSBmcm9tICcuLic7XG5mdW5jdGlvbiB1c2VPbkNsaWNrT3V0c2lkZShyZWYsIGhhbmRsZXIsIG1vdXNlRXZlbnQgPSAnbW91c2Vkb3duJykge1xuICAgIHVzZUV2ZW50TGlzdGVuZXIobW91c2VFdmVudCwgZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IHJlZiA9PT0gbnVsbCB8fCByZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZi5jdXJyZW50O1xuICAgICAgICBpZiAoIWVsIHx8IGVsLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVyKGV2ZW50KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZU9uQ2xpY2tPdXRzaWRlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useOnClickOutside/useOnClickOutside.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useReadLocalStorage/useReadLocalStorage.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useReadLocalStorage/useReadLocalStorage.js ***!
  \*********************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useReadLocalStorage(key) {\n    const readValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (typeof window === 'undefined') {\n            return null;\n        }\n        try {\n            const item = window.localStorage.getItem(key);\n            return item ? JSON.parse(item) : null;\n        }\n        catch (error) {\n            console.warn(`Error reading localStorage key “${key}”:`, error);\n            return null;\n        }\n    }, [key]);\n    const [storedValue, setStoredValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(readValue);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        setStoredValue(readValue());\n    }, []);\n    const handleStorageChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event) => {\n        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {\n            return;\n        }\n        setStoredValue(readValue());\n    }, [key, readValue]);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useEventListener)('storage', handleStorageChange);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useEventListener)('local-storage', handleStorageChange);\n    return storedValue;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useReadLocalStorage);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlUmVhZExvY2FsU3RvcmFnZS91c2VSZWFkTG9jYWxTdG9yYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBeUQ7QUFDbkI7QUFDdEM7QUFDQSxzQkFBc0Isa0RBQVc7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxJQUFJO0FBQ2hFO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsMENBQTBDLCtDQUFRO0FBQ2xELElBQUksZ0RBQVM7QUFDYjtBQUNBLEtBQUs7QUFDTCxnQ0FBZ0Msa0RBQVc7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSSxtREFBZ0I7QUFDcEIsSUFBSSxtREFBZ0I7QUFDcEI7QUFDQTtBQUNBLCtEQUFlLG1CQUFtQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlUmVhZExvY2FsU3RvcmFnZS91c2VSZWFkTG9jYWxTdG9yYWdlLmpzPzhhMDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VFdmVudExpc3RlbmVyIH0gZnJvbSAnLi4nO1xuZnVuY3Rpb24gdXNlUmVhZExvY2FsU3RvcmFnZShrZXkpIHtcbiAgICBjb25zdCByZWFkVmFsdWUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgICAgIHJldHVybiBpdGVtID8gSlNPTi5wYXJzZShpdGVtKSA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEVycm9yIHJlYWRpbmcgbG9jYWxTdG9yYWdlIGtleSDigJwke2tleX3igJ06YCwgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9LCBba2V5XSk7XG4gICAgY29uc3QgW3N0b3JlZFZhbHVlLCBzZXRTdG9yZWRWYWx1ZV0gPSB1c2VTdGF0ZShyZWFkVmFsdWUpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldFN0b3JlZFZhbHVlKHJlYWRWYWx1ZSgpKTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3QgaGFuZGxlU3RvcmFnZUNoYW5nZSA9IHVzZUNhbGxiYWNrKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoKGV2ZW50ID09PSBudWxsIHx8IGV2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBldmVudC5rZXkpICYmIGV2ZW50LmtleSAhPT0ga2V5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2V0U3RvcmVkVmFsdWUocmVhZFZhbHVlKCkpO1xuICAgIH0sIFtrZXksIHJlYWRWYWx1ZV0pO1xuICAgIHVzZUV2ZW50TGlzdGVuZXIoJ3N0b3JhZ2UnLCBoYW5kbGVTdG9yYWdlQ2hhbmdlKTtcbiAgICB1c2VFdmVudExpc3RlbmVyKCdsb2NhbC1zdG9yYWdlJywgaGFuZGxlU3RvcmFnZUNoYW5nZSk7XG4gICAgcmV0dXJuIHN0b3JlZFZhbHVlO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlUmVhZExvY2FsU3RvcmFnZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useReadLocalStorage/useReadLocalStorage.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useScreen/useScreen.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useScreen/useScreen.js ***!
  \*************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useScreen() {\n    const getScreen = () => {\n        if (typeof window !== 'undefined' && window.screen) {\n            return window.screen;\n        }\n        return undefined;\n    };\n    const [screen, setScreen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getScreen());\n    function handleSize() {\n        setScreen(getScreen());\n    }\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useEventListener)('resize', handleSize);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useIsomorphicLayoutEffect)(() => {\n        handleSize();\n    }, []);\n    return screen;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useScreen);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlU2NyZWVuL3VzZVNjcmVlbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWlDO0FBQ2dDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLCtDQUFRO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLElBQUksbURBQWdCO0FBQ3BCLElBQUksNERBQXlCO0FBQzdCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwrREFBZSxTQUFTLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VTY3JlZW4vdXNlU2NyZWVuLmpzPzI1MTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VFdmVudExpc3RlbmVyLCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4nO1xuZnVuY3Rpb24gdXNlU2NyZWVuKCkge1xuICAgIGNvbnN0IGdldFNjcmVlbiA9ICgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5zY3JlZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuc2NyZWVuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBjb25zdCBbc2NyZWVuLCBzZXRTY3JlZW5dID0gdXNlU3RhdGUoZ2V0U2NyZWVuKCkpO1xuICAgIGZ1bmN0aW9uIGhhbmRsZVNpemUoKSB7XG4gICAgICAgIHNldFNjcmVlbihnZXRTY3JlZW4oKSk7XG4gICAgfVxuICAgIHVzZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVNpemUpO1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBoYW5kbGVTaXplKCk7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBzY3JlZW47XG59XG5leHBvcnQgZGVmYXVsdCB1c2VTY3JlZW47XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useScreen/useScreen.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useScript/useScript.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useScript/useScript.js ***!
  \*************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nconst cachedScriptStatuses = {};\nfunction getScriptNode(src) {\n    const node = document.querySelector(`script[src=\"${src}\"]`);\n    const status = node === null || node === void 0 ? void 0 : node.getAttribute('data-status');\n    return {\n        node,\n        status,\n    };\n}\nfunction useScript(src, options) {\n    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => {\n        var _a;\n        if (!src || (options === null || options === void 0 ? void 0 : options.shouldPreventLoad)) {\n            return 'idle';\n        }\n        if (typeof window === 'undefined') {\n            return 'loading';\n        }\n        return (_a = cachedScriptStatuses[src]) !== null && _a !== void 0 ? _a : 'loading';\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        var _a, _b;\n        if (!src || (options === null || options === void 0 ? void 0 : options.shouldPreventLoad)) {\n            return;\n        }\n        const cachedScriptStatus = cachedScriptStatuses[src];\n        if (cachedScriptStatus === 'ready' || cachedScriptStatus === 'error') {\n            setStatus(cachedScriptStatus);\n            return;\n        }\n        const script = getScriptNode(src);\n        let scriptNode = script.node;\n        if (!scriptNode) {\n            scriptNode = document.createElement('script');\n            scriptNode.src = src;\n            scriptNode.async = true;\n            scriptNode.setAttribute('data-status', 'loading');\n            document.body.appendChild(scriptNode);\n            const setAttributeFromEvent = (event) => {\n                const scriptStatus = event.type === 'load' ? 'ready' : 'error';\n                scriptNode === null || scriptNode === void 0 ? void 0 : scriptNode.setAttribute('data-status', scriptStatus);\n            };\n            scriptNode.addEventListener('load', setAttributeFromEvent);\n            scriptNode.addEventListener('error', setAttributeFromEvent);\n        }\n        else {\n            setStatus((_b = (_a = script.status) !== null && _a !== void 0 ? _a : cachedScriptStatus) !== null && _b !== void 0 ? _b : 'loading');\n        }\n        const setStateFromEvent = (event) => {\n            const newStatus = event.type === 'load' ? 'ready' : 'error';\n            setStatus(newStatus);\n            cachedScriptStatuses[src] = newStatus;\n        };\n        scriptNode.addEventListener('load', setStateFromEvent);\n        scriptNode.addEventListener('error', setStateFromEvent);\n        return () => {\n            if (scriptNode) {\n                scriptNode.removeEventListener('load', setStateFromEvent);\n                scriptNode.removeEventListener('error', setStateFromEvent);\n            }\n            if (scriptNode && (options === null || options === void 0 ? void 0 : options.removeOnUnmount)) {\n                scriptNode.remove();\n            }\n        };\n    }, [src, options === null || options === void 0 ? void 0 : options.shouldPreventLoad, options === null || options === void 0 ? void 0 : options.removeOnUnmount]);\n    return status;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useScript);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlU2NyaXB0L3VzZVNjcmlwdC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBNEM7QUFDNUM7QUFDQTtBQUNBLHVEQUF1RCxJQUFJO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLCtDQUFRO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwrREFBZSxTQUFTLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VTY3JpcHQvdXNlU2NyaXB0LmpzP2NlOGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmNvbnN0IGNhY2hlZFNjcmlwdFN0YXR1c2VzID0ge307XG5mdW5jdGlvbiBnZXRTY3JpcHROb2RlKHNyYykge1xuICAgIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBzY3JpcHRbc3JjPVwiJHtzcmN9XCJdYCk7XG4gICAgY29uc3Qgc3RhdHVzID0gbm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1zdGF0dXMnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBub2RlLFxuICAgICAgICBzdGF0dXMsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHVzZVNjcmlwdChzcmMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBbc3RhdHVzLCBzZXRTdGF0dXNdID0gdXNlU3RhdGUoKCkgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghc3JjIHx8IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2hvdWxkUHJldmVudExvYWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2lkbGUnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuICdsb2FkaW5nJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKF9hID0gY2FjaGVkU2NyaXB0U3RhdHVzZXNbc3JjXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ2xvYWRpbmcnO1xuICAgIH0pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICghc3JjIHx8IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2hvdWxkUHJldmVudExvYWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FjaGVkU2NyaXB0U3RhdHVzID0gY2FjaGVkU2NyaXB0U3RhdHVzZXNbc3JjXTtcbiAgICAgICAgaWYgKGNhY2hlZFNjcmlwdFN0YXR1cyA9PT0gJ3JlYWR5JyB8fCBjYWNoZWRTY3JpcHRTdGF0dXMgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgIHNldFN0YXR1cyhjYWNoZWRTY3JpcHRTdGF0dXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IGdldFNjcmlwdE5vZGUoc3JjKTtcbiAgICAgICAgbGV0IHNjcmlwdE5vZGUgPSBzY3JpcHQubm9kZTtcbiAgICAgICAgaWYgKCFzY3JpcHROb2RlKSB7XG4gICAgICAgICAgICBzY3JpcHROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICBzY3JpcHROb2RlLnNyYyA9IHNyYztcbiAgICAgICAgICAgIHNjcmlwdE5vZGUuYXN5bmMgPSB0cnVlO1xuICAgICAgICAgICAgc2NyaXB0Tm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdHVzJywgJ2xvYWRpbmcnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0Tm9kZSk7XG4gICAgICAgICAgICBjb25zdCBzZXRBdHRyaWJ1dGVGcm9tRXZlbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHRTdGF0dXMgPSBldmVudC50eXBlID09PSAnbG9hZCcgPyAncmVhZHknIDogJ2Vycm9yJztcbiAgICAgICAgICAgICAgICBzY3JpcHROb2RlID09PSBudWxsIHx8IHNjcmlwdE5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjcmlwdE5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXR1cycsIHNjcmlwdFN0YXR1cyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2NyaXB0Tm9kZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgc2V0QXR0cmlidXRlRnJvbUV2ZW50KTtcbiAgICAgICAgICAgIHNjcmlwdE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBzZXRBdHRyaWJ1dGVGcm9tRXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0U3RhdHVzKChfYiA9IChfYSA9IHNjcmlwdC5zdGF0dXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGNhY2hlZFNjcmlwdFN0YXR1cykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJ2xvYWRpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZXRTdGF0ZUZyb21FdmVudCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3U3RhdHVzID0gZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ3JlYWR5JyA6ICdlcnJvcic7XG4gICAgICAgICAgICBzZXRTdGF0dXMobmV3U3RhdHVzKTtcbiAgICAgICAgICAgIGNhY2hlZFNjcmlwdFN0YXR1c2VzW3NyY10gPSBuZXdTdGF0dXM7XG4gICAgICAgIH07XG4gICAgICAgIHNjcmlwdE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHNldFN0YXRlRnJvbUV2ZW50KTtcbiAgICAgICAgc2NyaXB0Tm9kZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHNldFN0YXRlRnJvbUV2ZW50KTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGlmIChzY3JpcHROb2RlKSB7XG4gICAgICAgICAgICAgICAgc2NyaXB0Tm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgc2V0U3RhdGVGcm9tRXZlbnQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBzZXRTdGF0ZUZyb21FdmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2NyaXB0Tm9kZSAmJiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlbW92ZU9uVW5tb3VudCkpIHtcbiAgICAgICAgICAgICAgICBzY3JpcHROb2RlLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sIFtzcmMsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zaG91bGRQcmV2ZW50TG9hZCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlbW92ZU9uVW5tb3VudF0pO1xuICAgIHJldHVybiBzdGF0dXM7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VTY3JpcHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useScript/useScript.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useSessionStorage/useSessionStorage.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useSessionStorage/useSessionStorage.js ***!
  \*****************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useSessionStorage(key, initialValue) {\n    const readValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (typeof window === 'undefined') {\n            return initialValue;\n        }\n        try {\n            const item = window.sessionStorage.getItem(key);\n            return item ? parseJSON(item) : initialValue;\n        }\n        catch (error) {\n            console.warn(`Error reading sessionStorage key “${key}”:`, error);\n            return initialValue;\n        }\n    }, [initialValue, key]);\n    const [storedValue, setStoredValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(readValue);\n    const setValue = (0,___WEBPACK_IMPORTED_MODULE_1__.useEventCallback)(value => {\n        if (typeof window == 'undefined') {\n            console.warn(`Tried setting sessionStorage key “${key}” even though environment is not a client`);\n        }\n        try {\n            const newValue = value instanceof Function ? value(storedValue) : value;\n            window.sessionStorage.setItem(key, JSON.stringify(newValue));\n            setStoredValue(newValue);\n            window.dispatchEvent(new Event('session-storage'));\n        }\n        catch (error) {\n            console.warn(`Error setting sessionStorage key “${key}”:`, error);\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        setStoredValue(readValue());\n    }, []);\n    const handleStorageChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event) => {\n        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {\n            return;\n        }\n        setStoredValue(readValue());\n    }, [key, readValue]);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useEventListener)('storage', handleStorageChange);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useEventListener)('session-storage', handleStorageChange);\n    return [storedValue, setValue];\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useSessionStorage);\nfunction parseJSON(value) {\n    try {\n        return value === 'undefined' ? undefined : JSON.parse(value !== null && value !== void 0 ? value : '');\n    }\n    catch (_a) {\n        console.log('parsing error on', { value });\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlU2Vzc2lvblN0b3JhZ2UvdXNlU2Vzc2lvblN0b3JhZ2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUEwRDtBQUNGO0FBQ3hEO0FBQ0Esc0JBQXNCLGtEQUFXO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsSUFBSTtBQUNsRTtBQUNBO0FBQ0EsS0FBSztBQUNMLDBDQUEwQywrQ0FBUTtBQUNsRCxxQkFBcUIsbURBQWdCO0FBQ3JDO0FBQ0EsOERBQThELElBQUk7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxJQUFJO0FBQ2xFO0FBQ0EsS0FBSztBQUNMLElBQUksZ0RBQVM7QUFDYjtBQUNBLEtBQUs7QUFDTCxnQ0FBZ0Msa0RBQVc7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSSxtREFBZ0I7QUFDcEIsSUFBSSxtREFBZ0I7QUFDcEI7QUFDQTtBQUNBLCtEQUFlLGlCQUFpQixFQUFDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsT0FBTztBQUNqRDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VTZXNzaW9uU3RvcmFnZS91c2VTZXNzaW9uU3RvcmFnZS5qcz8yMjVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlLCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUV2ZW50Q2FsbGJhY2ssIHVzZUV2ZW50TGlzdGVuZXIgfSBmcm9tICcuLic7XG5mdW5jdGlvbiB1c2VTZXNzaW9uU3RvcmFnZShrZXksIGluaXRpYWxWYWx1ZSkge1xuICAgIGNvbnN0IHJlYWRWYWx1ZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5pdGlhbFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgICAgIHJldHVybiBpdGVtID8gcGFyc2VKU09OKGl0ZW0pIDogaW5pdGlhbFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBFcnJvciByZWFkaW5nIHNlc3Npb25TdG9yYWdlIGtleSDigJwke2tleX3igJ06YCwgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxWYWx1ZTtcbiAgICAgICAgfVxuICAgIH0sIFtpbml0aWFsVmFsdWUsIGtleV0pO1xuICAgIGNvbnN0IFtzdG9yZWRWYWx1ZSwgc2V0U3RvcmVkVmFsdWVdID0gdXNlU3RhdGUocmVhZFZhbHVlKTtcbiAgICBjb25zdCBzZXRWYWx1ZSA9IHVzZUV2ZW50Q2FsbGJhY2sodmFsdWUgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBUcmllZCBzZXR0aW5nIHNlc3Npb25TdG9yYWdlIGtleSDigJwke2tleX3igJ0gZXZlbiB0aG91Z2ggZW52aXJvbm1lbnQgaXMgbm90IGEgY2xpZW50YCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IHZhbHVlKHN0b3JlZFZhbHVlKSA6IHZhbHVlO1xuICAgICAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShuZXdWYWx1ZSkpO1xuICAgICAgICAgICAgc2V0U3RvcmVkVmFsdWUobmV3VmFsdWUpO1xuICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdzZXNzaW9uLXN0b3JhZ2UnKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEVycm9yIHNldHRpbmcgc2Vzc2lvblN0b3JhZ2Uga2V5IOKAnCR7a2V5feKAnTpgLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRTdG9yZWRWYWx1ZShyZWFkVmFsdWUoKSk7XG4gICAgfSwgW10pO1xuICAgIGNvbnN0IGhhbmRsZVN0b3JhZ2VDaGFuZ2UgPSB1c2VDYWxsYmFjaygoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKChldmVudCA9PT0gbnVsbCB8fCBldmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXZlbnQua2V5KSAmJiBldmVudC5rZXkgIT09IGtleSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNldFN0b3JlZFZhbHVlKHJlYWRWYWx1ZSgpKTtcbiAgICB9LCBba2V5LCByZWFkVmFsdWVdKTtcbiAgICB1c2VFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgaGFuZGxlU3RvcmFnZUNoYW5nZSk7XG4gICAgdXNlRXZlbnRMaXN0ZW5lcignc2Vzc2lvbi1zdG9yYWdlJywgaGFuZGxlU3RvcmFnZUNoYW5nZSk7XG4gICAgcmV0dXJuIFtzdG9yZWRWYWx1ZSwgc2V0VmFsdWVdO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlU2Vzc2lvblN0b3JhZ2U7XG5mdW5jdGlvbiBwYXJzZUpTT04odmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSlNPTi5wYXJzZSh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiAnJyk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICBjb25zb2xlLmxvZygncGFyc2luZyBlcnJvciBvbicsIHsgdmFsdWUgfSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useSessionStorage/useSessionStorage.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useSsr/useSsr.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useSsr/useSsr.js ***!
  \*******************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nfunction useSsr() {\n    const isDOM = typeof window !== 'undefined' &&\n        window.document &&\n        window.document.documentElement;\n    return {\n        isBrowser: isDOM,\n        isServer: !isDOM,\n    };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useSsr);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlU3NyL3VzZVNzci5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQWUsTUFBTSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlU3NyL3VzZVNzci5qcz82YjI2Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHVzZVNzcigpIHtcbiAgICBjb25zdCBpc0RPTSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5kb2N1bWVudCAmJlxuICAgICAgICB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHJldHVybiB7XG4gICAgICAgIGlzQnJvd3NlcjogaXNET00sXG4gICAgICAgIGlzU2VydmVyOiAhaXNET00sXG4gICAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVNzcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useSsr/useSsr.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useStep/useStep.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useStep/useStep.js ***!
  \*********************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useStep(maxStep) {\n    const [currentStep, setCurrentStep] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const canGoToNextStep = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => currentStep + 1 <= maxStep, [currentStep, maxStep]);\n    const canGoToPrevStep = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => currentStep - 1 >= 1, [currentStep]);\n    const setStep = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(step => {\n        const newStep = step instanceof Function ? step(currentStep) : step;\n        if (newStep >= 1 && newStep <= maxStep) {\n            setCurrentStep(newStep);\n            return;\n        }\n        throw new Error('Step not valid');\n    }, [maxStep, currentStep]);\n    const goToNextStep = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (canGoToNextStep) {\n            setCurrentStep(step => step + 1);\n        }\n    }, [canGoToNextStep]);\n    const goToPrevStep = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (canGoToPrevStep) {\n            setCurrentStep(step => step - 1);\n        }\n    }, [canGoToPrevStep]);\n    const reset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        setCurrentStep(1);\n    }, []);\n    return [\n        currentStep,\n        {\n            goToNextStep,\n            goToPrevStep,\n            canGoToNextStep,\n            canGoToPrevStep,\n            setStep,\n            reset,\n        },\n    ];\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useStep);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlU3RlcC91c2VTdGVwLmpzIiwibWFwcGluZ3MiOiI7OztBQUF1RDtBQUN2RDtBQUNBLDBDQUEwQywrQ0FBUTtBQUNsRCw0QkFBNEIsOENBQU87QUFDbkMsNEJBQTRCLDhDQUFPO0FBQ25DLG9CQUFvQixrREFBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wseUJBQXlCLGtEQUFXO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCx5QkFBeUIsa0RBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGtCQUFrQixrREFBVztBQUM3QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLCtEQUFlLE9BQU8sRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdXNlaG9va3MtdHNAMi45LjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL3VzZWhvb2tzLXRzL2Rpc3QvZXNtL3VzZVN0ZXAvdXNlU3RlcC5qcz8zZDBhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmZ1bmN0aW9uIHVzZVN0ZXAobWF4U3RlcCkge1xuICAgIGNvbnN0IFtjdXJyZW50U3RlcCwgc2V0Q3VycmVudFN0ZXBdID0gdXNlU3RhdGUoMSk7XG4gICAgY29uc3QgY2FuR29Ub05leHRTdGVwID0gdXNlTWVtbygoKSA9PiBjdXJyZW50U3RlcCArIDEgPD0gbWF4U3RlcCwgW2N1cnJlbnRTdGVwLCBtYXhTdGVwXSk7XG4gICAgY29uc3QgY2FuR29Ub1ByZXZTdGVwID0gdXNlTWVtbygoKSA9PiBjdXJyZW50U3RlcCAtIDEgPj0gMSwgW2N1cnJlbnRTdGVwXSk7XG4gICAgY29uc3Qgc2V0U3RlcCA9IHVzZUNhbGxiYWNrKHN0ZXAgPT4ge1xuICAgICAgICBjb25zdCBuZXdTdGVwID0gc3RlcCBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gc3RlcChjdXJyZW50U3RlcCkgOiBzdGVwO1xuICAgICAgICBpZiAobmV3U3RlcCA+PSAxICYmIG5ld1N0ZXAgPD0gbWF4U3RlcCkge1xuICAgICAgICAgICAgc2V0Q3VycmVudFN0ZXAobmV3U3RlcCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGVwIG5vdCB2YWxpZCcpO1xuICAgIH0sIFttYXhTdGVwLCBjdXJyZW50U3RlcF0pO1xuICAgIGNvbnN0IGdvVG9OZXh0U3RlcCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKGNhbkdvVG9OZXh0U3RlcCkge1xuICAgICAgICAgICAgc2V0Q3VycmVudFN0ZXAoc3RlcCA9PiBzdGVwICsgMSk7XG4gICAgICAgIH1cbiAgICB9LCBbY2FuR29Ub05leHRTdGVwXSk7XG4gICAgY29uc3QgZ29Ub1ByZXZTdGVwID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBpZiAoY2FuR29Ub1ByZXZTdGVwKSB7XG4gICAgICAgICAgICBzZXRDdXJyZW50U3RlcChzdGVwID0+IHN0ZXAgLSAxKTtcbiAgICAgICAgfVxuICAgIH0sIFtjYW5Hb1RvUHJldlN0ZXBdKTtcbiAgICBjb25zdCByZXNldCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgc2V0Q3VycmVudFN0ZXAoMSk7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBbXG4gICAgICAgIGN1cnJlbnRTdGVwLFxuICAgICAgICB7XG4gICAgICAgICAgICBnb1RvTmV4dFN0ZXAsXG4gICAgICAgICAgICBnb1RvUHJldlN0ZXAsXG4gICAgICAgICAgICBjYW5Hb1RvTmV4dFN0ZXAsXG4gICAgICAgICAgICBjYW5Hb1RvUHJldlN0ZXAsXG4gICAgICAgICAgICBzZXRTdGVwLFxuICAgICAgICAgICAgcmVzZXQsXG4gICAgICAgIH0sXG4gICAgXTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVN0ZXA7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useStep/useStep.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useTernaryDarkMode/useTernaryDarkMode.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useTernaryDarkMode/useTernaryDarkMode.js ***!
  \*******************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\nfunction useTernaryDarkMode() {\n    const isDarkOS = (0,___WEBPACK_IMPORTED_MODULE_1__.useMediaQuery)(COLOR_SCHEME_QUERY);\n    const [ternaryDarkMode, setTernaryDarkMode] = (0,___WEBPACK_IMPORTED_MODULE_1__.useLocalStorage)('usehooks-ts-ternary-dark-mode', 'system');\n    const [isDarkMode, setDarkMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(isDarkOS);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useUpdateEffect)(() => {\n        if (ternaryDarkMode === 'system') {\n            setDarkMode(isDarkOS);\n        }\n    }, [isDarkOS]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        switch (ternaryDarkMode) {\n            case 'light':\n                setDarkMode(false);\n                break;\n            case 'system':\n                setDarkMode(isDarkOS);\n                break;\n            case 'dark':\n                setDarkMode(true);\n                break;\n        }\n    }, [ternaryDarkMode, isDarkOS]);\n    function toggleTernaryDarkMode() {\n        const toggleDict = {\n            light: 'system',\n            system: 'dark',\n            dark: 'light',\n        };\n        setTernaryDarkMode(prevMode => toggleDict[prevMode]);\n    }\n    return {\n        isDarkMode,\n        ternaryDarkMode,\n        setTernaryDarkMode,\n        toggleTernaryDarkMode,\n    };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useTernaryDarkMode);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlVGVybmFyeURhcmtNb2RlL3VzZVRlcm5hcnlEYXJrTW9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQTRDO0FBQ3lCO0FBQ3JFO0FBQ0E7QUFDQSxxQkFBcUIsZ0RBQWE7QUFDbEMsa0RBQWtELGtEQUFlO0FBQ2pFLHNDQUFzQywrQ0FBUTtBQUM5QyxJQUFJLGtEQUFlO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBZSxrQkFBa0IsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdXNlaG9va3MtdHNAMi45LjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL3VzZWhvb2tzLXRzL2Rpc3QvZXNtL3VzZVRlcm5hcnlEYXJrTW9kZS91c2VUZXJuYXJ5RGFya01vZGUuanM/NjZlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlTG9jYWxTdG9yYWdlLCB1c2VNZWRpYVF1ZXJ5LCB1c2VVcGRhdGVFZmZlY3QgfSBmcm9tICcuLic7XG5jb25zdCBDT0xPUl9TQ0hFTUVfUVVFUlkgPSAnKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSc7XG5mdW5jdGlvbiB1c2VUZXJuYXJ5RGFya01vZGUoKSB7XG4gICAgY29uc3QgaXNEYXJrT1MgPSB1c2VNZWRpYVF1ZXJ5KENPTE9SX1NDSEVNRV9RVUVSWSk7XG4gICAgY29uc3QgW3Rlcm5hcnlEYXJrTW9kZSwgc2V0VGVybmFyeURhcmtNb2RlXSA9IHVzZUxvY2FsU3RvcmFnZSgndXNlaG9va3MtdHMtdGVybmFyeS1kYXJrLW1vZGUnLCAnc3lzdGVtJyk7XG4gICAgY29uc3QgW2lzRGFya01vZGUsIHNldERhcmtNb2RlXSA9IHVzZVN0YXRlKGlzRGFya09TKTtcbiAgICB1c2VVcGRhdGVFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAodGVybmFyeURhcmtNb2RlID09PSAnc3lzdGVtJykge1xuICAgICAgICAgICAgc2V0RGFya01vZGUoaXNEYXJrT1MpO1xuICAgICAgICB9XG4gICAgfSwgW2lzRGFya09TXSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc3dpdGNoICh0ZXJuYXJ5RGFya01vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2xpZ2h0JzpcbiAgICAgICAgICAgICAgICBzZXREYXJrTW9kZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzeXN0ZW0nOlxuICAgICAgICAgICAgICAgIHNldERhcmtNb2RlKGlzRGFya09TKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RhcmsnOlxuICAgICAgICAgICAgICAgIHNldERhcmtNb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSwgW3Rlcm5hcnlEYXJrTW9kZSwgaXNEYXJrT1NdKTtcbiAgICBmdW5jdGlvbiB0b2dnbGVUZXJuYXJ5RGFya01vZGUoKSB7XG4gICAgICAgIGNvbnN0IHRvZ2dsZURpY3QgPSB7XG4gICAgICAgICAgICBsaWdodDogJ3N5c3RlbScsXG4gICAgICAgICAgICBzeXN0ZW06ICdkYXJrJyxcbiAgICAgICAgICAgIGRhcms6ICdsaWdodCcsXG4gICAgICAgIH07XG4gICAgICAgIHNldFRlcm5hcnlEYXJrTW9kZShwcmV2TW9kZSA9PiB0b2dnbGVEaWN0W3ByZXZNb2RlXSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGlzRGFya01vZGUsXG4gICAgICAgIHRlcm5hcnlEYXJrTW9kZSxcbiAgICAgICAgc2V0VGVybmFyeURhcmtNb2RlLFxuICAgICAgICB0b2dnbGVUZXJuYXJ5RGFya01vZGUsXG4gICAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVRlcm5hcnlEYXJrTW9kZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useTernaryDarkMode/useTernaryDarkMode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useTimeout/useTimeout.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useTimeout/useTimeout.js ***!
  \***************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useTimeout(callback, delay) {\n    const savedCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useIsomorphicLayoutEffect)(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!delay && delay !== 0) {\n            return;\n        }\n        const id = setTimeout(() => savedCallback.current(), delay);\n        return () => clearTimeout(id);\n    }, [delay]);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useTimeout);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlVGltZW91dC91c2VUaW1lb3V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBMEM7QUFDSztBQUMvQztBQUNBLDBCQUEwQiw2Q0FBTTtBQUNoQyxJQUFJLDREQUF5QjtBQUM3QjtBQUNBLEtBQUs7QUFDTCxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLCtEQUFlLFVBQVUsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdXNlaG9va3MtdHNAMi45LjFfcmVhY3QtZG9tQDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL3VzZWhvb2tzLXRzL2Rpc3QvZXNtL3VzZVRpbWVvdXQvdXNlVGltZW91dC5qcz9iMTM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uJztcbmZ1bmN0aW9uIHVzZVRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KSB7XG4gICAgY29uc3Qgc2F2ZWRDYWxsYmFjayA9IHVzZVJlZihjYWxsYmFjayk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNhdmVkQ2FsbGJhY2suY3VycmVudCA9IGNhbGxiYWNrO1xuICAgIH0sIFtjYWxsYmFja10pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghZGVsYXkgJiYgZGVsYXkgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpZCA9IHNldFRpbWVvdXQoKCkgPT4gc2F2ZWRDYWxsYmFjay5jdXJyZW50KCksIGRlbGF5KTtcbiAgICAgICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dChpZCk7XG4gICAgfSwgW2RlbGF5XSk7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VUaW1lb3V0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useTimeout/useTimeout.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useToggle/useToggle.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useToggle/useToggle.js ***!
  \*************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useToggle(defaultValue) {\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!!defaultValue);\n    const toggle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => setValue(x => !x), []);\n    return [value, toggle, setValue];\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useToggle);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlVG9nZ2xlL3VzZVRvZ2dsZS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBOEM7QUFDOUM7QUFDQSw4QkFBOEIsK0NBQVE7QUFDdEMsbUJBQW1CLGtEQUFXO0FBQzlCO0FBQ0E7QUFDQSwrREFBZSxTQUFTLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VUb2dnbGUvdXNlVG9nZ2xlLmpzPzYwNDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuZnVuY3Rpb24gdXNlVG9nZ2xlKGRlZmF1bHRWYWx1ZSkge1xuICAgIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUoISFkZWZhdWx0VmFsdWUpO1xuICAgIGNvbnN0IHRvZ2dsZSA9IHVzZUNhbGxiYWNrKCgpID0+IHNldFZhbHVlKHggPT4gIXgpLCBbXSk7XG4gICAgcmV0dXJuIFt2YWx1ZSwgdG9nZ2xlLCBzZXRWYWx1ZV07XG59XG5leHBvcnQgZGVmYXVsdCB1c2VUb2dnbGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useToggle/useToggle.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useUpdateEffect/useUpdateEffect.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useUpdateEffect/useUpdateEffect.js ***!
  \*************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useUpdateEffect(effect, deps) {\n    const isFirst = (0,___WEBPACK_IMPORTED_MODULE_1__.useIsFirstRender)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!isFirst) {\n            return effect();\n        }\n    }, deps);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useUpdateEffect);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlVXBkYXRlRWZmZWN0L3VzZVVwZGF0ZUVmZmVjdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWtDO0FBQ0k7QUFDdEM7QUFDQSxvQkFBb0IsbURBQWdCO0FBQ3BDLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSwrREFBZSxlQUFlLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VVcGRhdGVFZmZlY3QvdXNlVXBkYXRlRWZmZWN0LmpzPzRhYWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSXNGaXJzdFJlbmRlciB9IGZyb20gJy4uJztcbmZ1bmN0aW9uIHVzZVVwZGF0ZUVmZmVjdChlZmZlY3QsIGRlcHMpIHtcbiAgICBjb25zdCBpc0ZpcnN0ID0gdXNlSXNGaXJzdFJlbmRlcigpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghaXNGaXJzdCkge1xuICAgICAgICAgICAgcmV0dXJuIGVmZmVjdCgpO1xuICAgICAgICB9XG4gICAgfSwgZGVwcyk7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VVcGRhdGVFZmZlY3Q7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useUpdateEffect/useUpdateEffect.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useWindowSize/useWindowSize.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useWindowSize/useWindowSize.js ***!
  \*********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\n\n\nfunction useWindowSize() {\n    const [windowSize, setWindowSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        width: 0,\n        height: 0,\n    });\n    const handleSize = () => {\n        setWindowSize({\n            width: window.innerWidth,\n            height: window.innerHeight,\n        });\n    };\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useEventListener)('resize', handleSize);\n    (0,___WEBPACK_IMPORTED_MODULE_1__.useIsomorphicLayoutEffect)(() => {\n        handleSize();\n    }, []);\n    return windowSize;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useWindowSize);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91c2Vob29rcy10c0AyLjkuMV9yZWFjdC1kb21AMTguMC4wX3JlYWN0QDE4LjAuMC9ub2RlX21vZHVsZXMvdXNlaG9va3MtdHMvZGlzdC9lc20vdXNlV2luZG93U2l6ZS91c2VXaW5kb3dTaXplLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBaUM7QUFDZ0M7QUFDakU7QUFDQSx3Q0FBd0MsK0NBQVE7QUFDaEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLElBQUksbURBQWdCO0FBQ3BCLElBQUksNERBQXlCO0FBQzdCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwrREFBZSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VzZWhvb2tzLXRzQDIuOS4xX3JlYWN0LWRvbUAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy91c2Vob29rcy10cy9kaXN0L2VzbS91c2VXaW5kb3dTaXplL3VzZVdpbmRvd1NpemUuanM/MjNkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUV2ZW50TGlzdGVuZXIsIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLic7XG5mdW5jdGlvbiB1c2VXaW5kb3dTaXplKCkge1xuICAgIGNvbnN0IFt3aW5kb3dTaXplLCBzZXRXaW5kb3dTaXplXSA9IHVzZVN0YXRlKHtcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMCxcbiAgICB9KTtcbiAgICBjb25zdCBoYW5kbGVTaXplID0gKCkgPT4ge1xuICAgICAgICBzZXRXaW5kb3dTaXplKHtcbiAgICAgICAgICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHVzZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVNpemUpO1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBoYW5kbGVTaXplKCk7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiB3aW5kb3dTaXplO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlV2luZG93U2l6ZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/useWindowSize/useWindowSize.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@floating-ui+core@1.5.0/node_modules/@floating-ui/core/dist/floating-ui.core.mjs":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@floating-ui+core@1.5.0/node_modules/@floating-ui/core/dist/floating-ui.core.mjs ***!
  \*************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrow: function() { return /* binding */ arrow; },\n/* harmony export */   autoPlacement: function() { return /* binding */ autoPlacement; },\n/* harmony export */   computePosition: function() { return /* binding */ computePosition; },\n/* harmony export */   detectOverflow: function() { return /* binding */ detectOverflow; },\n/* harmony export */   flip: function() { return /* binding */ flip; },\n/* harmony export */   hide: function() { return /* binding */ hide; },\n/* harmony export */   inline: function() { return /* binding */ inline; },\n/* harmony export */   limitShift: function() { return /* binding */ limitShift; },\n/* harmony export */   offset: function() { return /* binding */ offset; },\n/* harmony export */   rectToClientRect: function() { return /* reexport safe */ _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect; },\n/* harmony export */   shift: function() { return /* binding */ shift; },\n/* harmony export */   size: function() { return /* binding */ size; }\n/* harmony export */ });\n/* harmony import */ var _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @floating-ui/utils */ \"(app-pages-browser)/./node_modules/.pnpm/@floating-ui+utils@0.1.6/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\");\n\n\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement);\n  const alignmentAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignmentAxis)(placement);\n  const alignLength = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAxisLength)(alignmentAxis);\n  const side = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch ((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\n  const paddingObject = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getPaddingObject)(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect)(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect)(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getPaddingObject)(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignmentAxis)(placement);\n    const length = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAxisLength)(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.clamp)(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement) === alignment), ...allowedPlacements.filter(placement => (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement) !== alignment)] : allowedPlacements.filter(placement => (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement) === alignment || (autoAlignment ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositeAlignmentPlacement)(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignmentSides)(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[(0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement);\n      const isBasePlacement = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [(0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositePlacement)(initialPlacement)] : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getExpandedPlacements)(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...(0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositeAxisPlacements)(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignmentSides)(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(...rects.map(rect => rect.left));\n  const minY = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(...rects.map(rect => rect.top));\n  const maxX = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(...rects.map(rect => rect.right));\n  const maxY = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect)(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect)(getBoundingRect(nativeClientRects));\n      const paddingObject = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getPaddingObject)(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if ((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement) === 'left';\n          const maxRight = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(...clientRects.map(rect => rect.right));\n          const minLeft = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement);\n  const alignment = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement);\n  const isVertical = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement));\n      const mainAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositeAxis)(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.clamp)(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.clamp)(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement);\n      const mainAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositeAxis)(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement);\n      const alignment = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement);\n      const isYAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.left, 0);\n        const xMax = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.right, 0);\n        const yMin = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.top, 0);\n        const yMax = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@floating-ui+core@1.5.0/node_modules/@floating-ui/core/dist/floating-ui.core.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@floating-ui+dom@1.5.3/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@floating-ui+dom@1.5.3/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrow: function() { return /* reexport safe */ _floating_ui_core__WEBPACK_IMPORTED_MODULE_0__.arrow; },\n/* harmony export */   autoPlacement: function() { return /* reexport safe */ _floating_ui_core__WEBPACK_IMPORTED_MODULE_0__.autoPlacement; },\n/* harmony export */   autoUpdate: function() { return /* binding */ autoUpdate; },\n/* harmony export */   computePosition: function() { return /* binding */ computePosition; },\n/* harmony export */   detectOverflow: function() { return /* reexport safe */ _floating_ui_core__WEBPACK_IMPORTED_MODULE_0__.detectOverflow; },\n/* harmony export */   flip: function() { return /* reexport safe */ _floating_ui_core__WEBPACK_IMPORTED_MODULE_0__.flip; },\n/* harmony export */   getOverflowAncestors: function() { return /* reexport safe */ _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getOverflowAncestors; },\n/* harmony export */   hide: function() { return /* reexport safe */ _floating_ui_core__WEBPACK_IMPORTED_MODULE_0__.hide; },\n/* harmony export */   inline: function() { return /* reexport safe */ _floating_ui_core__WEBPACK_IMPORTED_MODULE_0__.inline; },\n/* harmony export */   limitShift: function() { return /* reexport safe */ _floating_ui_core__WEBPACK_IMPORTED_MODULE_0__.limitShift; },\n/* harmony export */   offset: function() { return /* reexport safe */ _floating_ui_core__WEBPACK_IMPORTED_MODULE_0__.offset; },\n/* harmony export */   platform: function() { return /* binding */ platform; },\n/* harmony export */   shift: function() { return /* reexport safe */ _floating_ui_core__WEBPACK_IMPORTED_MODULE_0__.shift; },\n/* harmony export */   size: function() { return /* reexport safe */ _floating_ui_core__WEBPACK_IMPORTED_MODULE_0__.size; }\n/* harmony export */ });\n/* harmony import */ var _floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/utils */ \"(app-pages-browser)/./node_modules/.pnpm/@floating-ui+utils@0.1.6/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\");\n/* harmony import */ var _floating_ui_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @floating-ui/core */ \"(app-pages-browser)/./node_modules/.pnpm/@floating-ui+core@1.5.0/node_modules/@floating-ui/core/dist/floating-ui.core.mjs\");\n/* harmony import */ var _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @floating-ui/utils/dom */ \"(app-pages-browser)/./node_modules/.pnpm/@floating-ui+utils@0.1.6/node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs\");\n\n\n\n\n\n\nfunction getCssDimensions(element) {\n  const css = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getComputedStyle)(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.round)(width) !== offsetWidth || (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.round)(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isElement)(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(domElement)) {\n    return (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.createCoords)(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.round)(rect.width) : rect.width) / width;\n  let y = ($ ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.round)(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/(0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.createCoords)(0);\nfunction getVisualOffsets(element) {\n  const win = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getWindow)(element);\n  if (!(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isWebKit)() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getWindow)(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.createCoords)(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isElement)(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.createCoords)(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getWindow)(domElement);\n    const offsetWin = offsetParent && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isElement)(offsetParent) ? (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getWindow)(offsetParent) : offsetParent;\n    let currentIFrame = win.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== win) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getComputedStyle)(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentIFrame = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getWindow)(currentIFrame).frameElement;\n    }\n  }\n  return (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.rectToClientRect)({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent);\n  const documentElement = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getDocumentElement)(offsetParent);\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.createCoords)(1);\n  const offsets = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.createCoords)(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getNodeName)(offsetParent) !== 'body' || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isOverflowElement)(documentElement)) {\n      scroll = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getNodeScroll)(offsetParent);\n    }\n    if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getDocumentElement)(element)).left + (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getNodeScroll)(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getDocumentElement)(element);\n  const scroll = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getNodeScroll)(element);\n  const body = element.ownerDocument.body;\n  const width = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getComputedStyle)(body).direction === 'rtl') {\n    x += (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.max)(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getWindow)(element);\n  const html = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getDocumentElement)(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isWebKit)();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(element) ? getScale(element) : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.createCoords)(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getDocumentElement)(element));\n  } else if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isElement)(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.rectToClientRect)(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getParentNode)(element);\n  if (parentNode === stopNode || !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isElement)(parentNode) || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isLastTraversableNode)(parentNode)) {\n    return false;\n  }\n  return (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getComputedStyle)(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getOverflowAncestors)(element, [], false).filter(el => (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isElement)(el) && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getNodeName)(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getComputedStyle)(element).position === 'fixed';\n  let currentNode = elementIsFixed ? (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getParentNode)(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isElement)(currentNode) && !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isLastTraversableNode)(currentNode)) {\n    const computedStyle = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getComputedStyle)(currentNode);\n    const currentNodeIsContaining = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isContainingBlock)(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isOverflowElement)(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getParentNode)(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.max)(rect.top, accRect.top);\n    accRect.right = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.min)(rect.right, accRect.right);\n    accRect.bottom = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.min)(rect.bottom, accRect.bottom);\n    accRect.left = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.max)(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  return getCssDimensions(element);\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent);\n  const documentElement = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getDocumentElement)(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.createCoords)(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getNodeName)(offsetParent) !== 'body' || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isOverflowElement)(documentElement)) {\n      scroll = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getNodeScroll)(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(element) || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getComputedStyle)(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const window = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getWindow)(element);\n  if (!(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(element)) {\n    return window;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isTableElement)(offsetParent) && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getComputedStyle)(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getNodeName)(offsetParent) === 'html' || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getNodeName)(offsetParent) === 'body' && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getComputedStyle)(offsetParent).position === 'static' && !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isContainingBlock)(offsetParent))) {\n    return window;\n  }\n  return offsetParent || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getContainingBlock)(element) || window;\n}\n\nconst getElementRects = async function (_ref) {\n  let {\n    reference,\n    floating,\n    strategy\n  } = _ref;\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  return {\n    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...(await getDimensionsFn(floating))\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getComputedStyle)(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement: _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement: _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getDocumentElement)(element);\n  function cleanup() {\n    clearTimeout(timeoutId);\n    io && io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.floor)(top);\n    const insetRight = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.floor)(root.clientWidth - (left + width));\n    const insetBottom = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.floor)(root.clientHeight - (top + height));\n    const insetLeft = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.floor)(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.max)(0, (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_2__.min)(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getOverflowAncestors)(referenceEl) : []), ...(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_1__.getOverflowAncestors)(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          resizeObserver && resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo && cleanupIo();\n    resizeObserver && resizeObserver.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain CSS positioning\n * strategy.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return (0,_floating_ui_core__WEBPACK_IMPORTED_MODULE_0__.computePosition)(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@floating-ui+dom@1.5.3/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@floating-ui+utils@0.1.6/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@floating-ui+utils@0.1.6/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs ***!
  \****************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alignments: function() { return /* binding */ alignments; },\n/* harmony export */   clamp: function() { return /* binding */ clamp; },\n/* harmony export */   createCoords: function() { return /* binding */ createCoords; },\n/* harmony export */   evaluate: function() { return /* binding */ evaluate; },\n/* harmony export */   expandPaddingObject: function() { return /* binding */ expandPaddingObject; },\n/* harmony export */   floor: function() { return /* binding */ floor; },\n/* harmony export */   getAlignment: function() { return /* binding */ getAlignment; },\n/* harmony export */   getAlignmentAxis: function() { return /* binding */ getAlignmentAxis; },\n/* harmony export */   getAlignmentSides: function() { return /* binding */ getAlignmentSides; },\n/* harmony export */   getAxisLength: function() { return /* binding */ getAxisLength; },\n/* harmony export */   getExpandedPlacements: function() { return /* binding */ getExpandedPlacements; },\n/* harmony export */   getOppositeAlignmentPlacement: function() { return /* binding */ getOppositeAlignmentPlacement; },\n/* harmony export */   getOppositeAxis: function() { return /* binding */ getOppositeAxis; },\n/* harmony export */   getOppositeAxisPlacements: function() { return /* binding */ getOppositeAxisPlacements; },\n/* harmony export */   getOppositePlacement: function() { return /* binding */ getOppositePlacement; },\n/* harmony export */   getPaddingObject: function() { return /* binding */ getPaddingObject; },\n/* harmony export */   getSide: function() { return /* binding */ getSide; },\n/* harmony export */   getSideAxis: function() { return /* binding */ getSideAxis; },\n/* harmony export */   max: function() { return /* binding */ max; },\n/* harmony export */   min: function() { return /* binding */ min; },\n/* harmony export */   placements: function() { return /* binding */ placements; },\n/* harmony export */   rectToClientRect: function() { return /* binding */ rectToClientRect; },\n/* harmony export */   round: function() { return /* binding */ round; },\n/* harmony export */   sides: function() { return /* binding */ sides; }\n/* harmony export */ });\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AZmxvYXRpbmctdWkrdXRpbHNAMC4xLjYvbm9kZV9tb2R1bGVzL0BmbG9hdGluZy11aS91dGlscy9kaXN0L2Zsb2F0aW5nLXVpLnV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AZmxvYXRpbmctdWkrdXRpbHNAMC4xLjYvbm9kZV9tb2R1bGVzL0BmbG9hdGluZy11aS91dGlscy9kaXN0L2Zsb2F0aW5nLXVpLnV0aWxzLm1qcz84MmUwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNpZGVzID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXTtcbmNvbnN0IGFsaWdubWVudHMgPSBbJ3N0YXJ0JywgJ2VuZCddO1xuY29uc3QgcGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9zaWRlcy5yZWR1Y2UoKGFjYywgc2lkZSkgPT4gYWNjLmNvbmNhdChzaWRlLCBzaWRlICsgXCItXCIgKyBhbGlnbm1lbnRzWzBdLCBzaWRlICsgXCItXCIgKyBhbGlnbm1lbnRzWzFdKSwgW10pO1xuY29uc3QgbWluID0gTWF0aC5taW47XG5jb25zdCBtYXggPSBNYXRoLm1heDtcbmNvbnN0IHJvdW5kID0gTWF0aC5yb3VuZDtcbmNvbnN0IGZsb29yID0gTWF0aC5mbG9vcjtcbmNvbnN0IGNyZWF0ZUNvb3JkcyA9IHYgPT4gKHtcbiAgeDogdixcbiAgeTogdlxufSk7XG5jb25zdCBvcHBvc2l0ZVNpZGVNYXAgPSB7XG4gIGxlZnQ6ICdyaWdodCcsXG4gIHJpZ2h0OiAnbGVmdCcsXG4gIGJvdHRvbTogJ3RvcCcsXG4gIHRvcDogJ2JvdHRvbSdcbn07XG5jb25zdCBvcHBvc2l0ZUFsaWdubWVudE1hcCA9IHtcbiAgc3RhcnQ6ICdlbmQnLFxuICBlbmQ6ICdzdGFydCdcbn07XG5mdW5jdGlvbiBjbGFtcChzdGFydCwgdmFsdWUsIGVuZCkge1xuICByZXR1cm4gbWF4KHN0YXJ0LCBtaW4odmFsdWUsIGVuZCkpO1xufVxuZnVuY3Rpb24gZXZhbHVhdGUodmFsdWUsIHBhcmFtKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgPyB2YWx1ZShwYXJhbSkgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGdldFNpZGUocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn1cbmZ1bmN0aW9uIGdldEFsaWdubWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xufVxuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVBeGlzKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn1cbmZ1bmN0aW9uIGdldEF4aXNMZW5ndGgoYXhpcykge1xuICByZXR1cm4gYXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xufVxuZnVuY3Rpb24gZ2V0U2lkZUF4aXMocGxhY2VtZW50KSB7XG4gIHJldHVybiBbJ3RvcCcsICdib3R0b20nXS5pbmNsdWRlcyhnZXRTaWRlKHBsYWNlbWVudCkpID8gJ3knIDogJ3gnO1xufVxuZnVuY3Rpb24gZ2V0QWxpZ25tZW50QXhpcyhwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGdldE9wcG9zaXRlQXhpcyhnZXRTaWRlQXhpcyhwbGFjZW1lbnQpKTtcbn1cbmZ1bmN0aW9uIGdldEFsaWdubWVudFNpZGVzKHBsYWNlbWVudCwgcmVjdHMsIHJ0bCkge1xuICBpZiAocnRsID09PSB2b2lkIDApIHtcbiAgICBydGwgPSBmYWxzZTtcbiAgfVxuICBjb25zdCBhbGlnbm1lbnQgPSBnZXRBbGlnbm1lbnQocGxhY2VtZW50KTtcbiAgY29uc3QgYWxpZ25tZW50QXhpcyA9IGdldEFsaWdubWVudEF4aXMocGxhY2VtZW50KTtcbiAgY29uc3QgbGVuZ3RoID0gZ2V0QXhpc0xlbmd0aChhbGlnbm1lbnRBeGlzKTtcbiAgbGV0IG1haW5BbGlnbm1lbnRTaWRlID0gYWxpZ25tZW50QXhpcyA9PT0gJ3gnID8gYWxpZ25tZW50ID09PSAocnRsID8gJ2VuZCcgOiAnc3RhcnQnKSA/ICdyaWdodCcgOiAnbGVmdCcgOiBhbGlnbm1lbnQgPT09ICdzdGFydCcgPyAnYm90dG9tJyA6ICd0b3AnO1xuICBpZiAocmVjdHMucmVmZXJlbmNlW2xlbmd0aF0gPiByZWN0cy5mbG9hdGluZ1tsZW5ndGhdKSB7XG4gICAgbWFpbkFsaWdubWVudFNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluQWxpZ25tZW50U2lkZSk7XG4gIH1cbiAgcmV0dXJuIFttYWluQWxpZ25tZW50U2lkZSwgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpbkFsaWdubWVudFNpZGUpXTtcbn1cbmZ1bmN0aW9uIGdldEV4cGFuZGVkUGxhY2VtZW50cyhwbGFjZW1lbnQpIHtcbiAgY29uc3Qgb3Bwb3NpdGVQbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICByZXR1cm4gW2dldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KHBsYWNlbWVudCksIG9wcG9zaXRlUGxhY2VtZW50LCBnZXRPcHBvc2l0ZUFsaWdubWVudFBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCldO1xufVxuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVBbGlnbm1lbnRQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvc3RhcnR8ZW5kL2csIGFsaWdubWVudCA9PiBvcHBvc2l0ZUFsaWdubWVudE1hcFthbGlnbm1lbnRdKTtcbn1cbmZ1bmN0aW9uIGdldFNpZGVMaXN0KHNpZGUsIGlzU3RhcnQsIHJ0bCkge1xuICBjb25zdCBsciA9IFsnbGVmdCcsICdyaWdodCddO1xuICBjb25zdCBybCA9IFsncmlnaHQnLCAnbGVmdCddO1xuICBjb25zdCB0YiA9IFsndG9wJywgJ2JvdHRvbSddO1xuICBjb25zdCBidCA9IFsnYm90dG9tJywgJ3RvcCddO1xuICBzd2l0Y2ggKHNpZGUpIHtcbiAgICBjYXNlICd0b3AnOlxuICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICBpZiAocnRsKSByZXR1cm4gaXNTdGFydCA/IHJsIDogbHI7XG4gICAgICByZXR1cm4gaXNTdGFydCA/IGxyIDogcmw7XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgY2FzZSAncmlnaHQnOlxuICAgICAgcmV0dXJuIGlzU3RhcnQgPyB0YiA6IGJ0O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gW107XG4gIH1cbn1cbmZ1bmN0aW9uIGdldE9wcG9zaXRlQXhpc1BsYWNlbWVudHMocGxhY2VtZW50LCBmbGlwQWxpZ25tZW50LCBkaXJlY3Rpb24sIHJ0bCkge1xuICBjb25zdCBhbGlnbm1lbnQgPSBnZXRBbGlnbm1lbnQocGxhY2VtZW50KTtcbiAgbGV0IGxpc3QgPSBnZXRTaWRlTGlzdChnZXRTaWRlKHBsYWNlbWVudCksIGRpcmVjdGlvbiA9PT0gJ3N0YXJ0JywgcnRsKTtcbiAgaWYgKGFsaWdubWVudCkge1xuICAgIGxpc3QgPSBsaXN0Lm1hcChzaWRlID0+IHNpZGUgKyBcIi1cIiArIGFsaWdubWVudCk7XG4gICAgaWYgKGZsaXBBbGlnbm1lbnQpIHtcbiAgICAgIGxpc3QgPSBsaXN0LmNvbmNhdChsaXN0Lm1hcChnZXRPcHBvc2l0ZUFsaWdubWVudFBsYWNlbWVudCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbGlzdDtcbn1cbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBzaWRlID0+IG9wcG9zaXRlU2lkZU1hcFtzaWRlXSk7XG59XG5mdW5jdGlvbiBleHBhbmRQYWRkaW5nT2JqZWN0KHBhZGRpbmcpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgLi4ucGFkZGluZ1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0UGFkZGluZ09iamVjdChwYWRkaW5nKSB7XG4gIHJldHVybiB0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcicgPyBleHBhbmRQYWRkaW5nT2JqZWN0KHBhZGRpbmcpIDoge1xuICAgIHRvcDogcGFkZGluZyxcbiAgICByaWdodDogcGFkZGluZyxcbiAgICBib3R0b206IHBhZGRpbmcsXG4gICAgbGVmdDogcGFkZGluZ1xuICB9O1xufVxuZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0KSB7XG4gIHJldHVybiB7XG4gICAgLi4ucmVjdCxcbiAgICB0b3A6IHJlY3QueSxcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9O1xufVxuXG5leHBvcnQgeyBhbGlnbm1lbnRzLCBjbGFtcCwgY3JlYXRlQ29vcmRzLCBldmFsdWF0ZSwgZXhwYW5kUGFkZGluZ09iamVjdCwgZmxvb3IsIGdldEFsaWdubWVudCwgZ2V0QWxpZ25tZW50QXhpcywgZ2V0QWxpZ25tZW50U2lkZXMsIGdldEF4aXNMZW5ndGgsIGdldEV4cGFuZGVkUGxhY2VtZW50cywgZ2V0T3Bwb3NpdGVBbGlnbm1lbnRQbGFjZW1lbnQsIGdldE9wcG9zaXRlQXhpcywgZ2V0T3Bwb3NpdGVBeGlzUGxhY2VtZW50cywgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQsIGdldFBhZGRpbmdPYmplY3QsIGdldFNpZGUsIGdldFNpZGVBeGlzLCBtYXgsIG1pbiwgcGxhY2VtZW50cywgcmVjdFRvQ2xpZW50UmVjdCwgcm91bmQsIHNpZGVzIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@floating-ui+utils@0.1.6/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@floating-ui+utils@0.1.6/node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@floating-ui+utils@0.1.6/node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getComputedStyle: function() { return /* binding */ getComputedStyle; },\n/* harmony export */   getContainingBlock: function() { return /* binding */ getContainingBlock; },\n/* harmony export */   getDocumentElement: function() { return /* binding */ getDocumentElement; },\n/* harmony export */   getNearestOverflowAncestor: function() { return /* binding */ getNearestOverflowAncestor; },\n/* harmony export */   getNodeName: function() { return /* binding */ getNodeName; },\n/* harmony export */   getNodeScroll: function() { return /* binding */ getNodeScroll; },\n/* harmony export */   getOverflowAncestors: function() { return /* binding */ getOverflowAncestors; },\n/* harmony export */   getParentNode: function() { return /* binding */ getParentNode; },\n/* harmony export */   getWindow: function() { return /* binding */ getWindow; },\n/* harmony export */   isContainingBlock: function() { return /* binding */ isContainingBlock; },\n/* harmony export */   isElement: function() { return /* binding */ isElement; },\n/* harmony export */   isHTMLElement: function() { return /* binding */ isHTMLElement; },\n/* harmony export */   isLastTraversableNode: function() { return /* binding */ isLastTraversableNode; },\n/* harmony export */   isNode: function() { return /* binding */ isNode; },\n/* harmony export */   isOverflowElement: function() { return /* binding */ isOverflowElement; },\n/* harmony export */   isShadowRoot: function() { return /* binding */ isShadowRoot; },\n/* harmony export */   isTableElement: function() { return /* binding */ isTableElement; },\n/* harmony export */   isWebKit: function() { return /* binding */ isWebKit; }\n/* harmony export */ });\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  // Browsers without `ShadowRoot` support.\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n  const webkit = isWebKit();\n  const css = getComputedStyle(element);\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = getParentNode(currentNode);\n    }\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.pageXOffset,\n    scrollTop: element.pageYOffset\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@floating-ui+utils@0.1.6/node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@livekit+components-core@0.7.0_livekit-client@1.14.4/node_modules/@livekit/components-core/dist/index.mjs":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-core@0.7.0_livekit-client@1.14.4/node_modules/@livekit/components-core/dist/index.mjs ***!
  \**************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataTopic: function() { return /* binding */ DataTopic; },\n/* harmony export */   GRID_LAYOUTS: function() { return /* binding */ GRID_LAYOUTS; },\n/* harmony export */   PIN_DEFAULT_STATE: function() { return /* binding */ PIN_DEFAULT_STATE; },\n/* harmony export */   WIDGET_DEFAULT_STATE: function() { return /* binding */ WIDGET_DEFAULT_STATE; },\n/* harmony export */   activeSpeakerObserver: function() { return /* binding */ activeSpeakerObserver; },\n/* harmony export */   allParticipantEvents: function() { return /* binding */ allParticipantEvents; },\n/* harmony export */   allParticipantRoomEvents: function() { return /* binding */ allParticipantRoomEvents; },\n/* harmony export */   allRemoteParticipantEvents: function() { return /* binding */ allRemoteParticipantEvents; },\n/* harmony export */   allRemoteParticipantRoomEvents: function() { return /* binding */ allRemoteParticipantRoomEvents; },\n/* harmony export */   attachIfSubscribed: function() { return /* binding */ attachIfSubscribed; },\n/* harmony export */   computeMenuPosition: function() { return /* binding */ computeMenuPosition; },\n/* harmony export */   connectedParticipantObserver: function() { return /* binding */ connectedParticipantObserver; },\n/* harmony export */   connectedParticipantsObserver: function() { return /* binding */ connectedParticipantsObserver; },\n/* harmony export */   connectionStateObserver: function() { return /* binding */ connectionStateObserver; },\n/* harmony export */   createActiveDeviceObservable: function() { return /* binding */ createActiveDeviceObservable; },\n/* harmony export */   createConnectionQualityObserver: function() { return /* binding */ createConnectionQualityObserver; },\n/* harmony export */   createDataObserver: function() { return /* binding */ createDataObserver; },\n/* harmony export */   createDefaultGrammar: function() { return /* binding */ createDefaultGrammar; },\n/* harmony export */   createEmailRegExp: function() { return /* reexport safe */ email_regex__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; },\n/* harmony export */   createInteractingObservable: function() { return /* binding */ createInteractingObservable; },\n/* harmony export */   createIsSpeakingObserver: function() { return /* binding */ createIsSpeakingObserver; },\n/* harmony export */   createMediaDeviceObserver: function() { return /* binding */ createMediaDeviceObserver; },\n/* harmony export */   createTrackObserver: function() { return /* binding */ createTrackObserver; },\n/* harmony export */   createUrlRegExp: function() { return /* binding */ createUrlRegExp; },\n/* harmony export */   cssPrefix: function() { return /* binding */ cssPrefix; },\n/* harmony export */   encryptionStatusObservable: function() { return /* binding */ encryptionStatusObservable; },\n/* harmony export */   getScrollBarWidth: function() { return /* binding */ getScrollBarWidth; },\n/* harmony export */   getTrackByIdentifier: function() { return /* binding */ getTrackByIdentifier; },\n/* harmony export */   getTrackReferenceId: function() { return /* binding */ getTrackReferenceId; },\n/* harmony export */   getTrackReferenceSource: function() { return /* binding */ getTrackReferenceSource; },\n/* harmony export */   isEqualTrackRef: function() { return /* binding */ isEqualTrackRef; },\n/* harmony export */   isLocal: function() { return /* binding */ isLocal; },\n/* harmony export */   isMobileBrowser: function() { return /* binding */ isMobileBrowser; },\n/* harmony export */   isParticipantSourcePinned: function() { return /* binding */ isParticipantSourcePinned; },\n/* harmony export */   isParticipantTrackReferencePinned: function() { return /* binding */ isParticipantTrackReferencePinned; },\n/* harmony export */   isPlaceholderReplacement: function() { return /* binding */ isPlaceholderReplacement; },\n/* harmony export */   isRemote: function() { return /* binding */ isRemote; },\n/* harmony export */   isSourceWitOptions: function() { return /* binding */ isSourceWitOptions; },\n/* harmony export */   isSourcesWithOptions: function() { return /* binding */ isSourcesWithOptions; },\n/* harmony export */   isTrackReference: function() { return /* binding */ isTrackReference; },\n/* harmony export */   isTrackReferencePinned: function() { return /* binding */ isTrackReferencePinned; },\n/* harmony export */   isTrackReferencePlaceholder: function() { return /* binding */ isTrackReferencePlaceholder; },\n/* harmony export */   isWeb: function() { return /* binding */ isWeb; },\n/* harmony export */   log: function() { return /* binding */ log; },\n/* harmony export */   mutedObserver: function() { return /* binding */ mutedObserver; },\n/* harmony export */   observeParticipantEvents: function() { return /* binding */ observeParticipantEvents; },\n/* harmony export */   observeParticipantMedia: function() { return /* binding */ observeParticipantMedia; },\n/* harmony export */   observeRoomEvents: function() { return /* binding */ observeRoomEvents; },\n/* harmony export */   observeTrackEvents: function() { return /* binding */ observeTrackEvents; },\n/* harmony export */   participantEventSelector: function() { return /* binding */ participantEventSelector; },\n/* harmony export */   participantInfoObserver: function() { return /* binding */ participantInfoObserver; },\n/* harmony export */   participantPermissionObserver: function() { return /* binding */ participantPermissionObserver; },\n/* harmony export */   roomAudioPlaybackAllowedObservable: function() { return /* binding */ roomAudioPlaybackAllowedObservable; },\n/* harmony export */   roomEventSelector: function() { return /* binding */ roomEventSelector; },\n/* harmony export */   roomInfoObserver: function() { return /* binding */ roomInfoObserver; },\n/* harmony export */   roomObserver: function() { return /* binding */ roomObserver; },\n/* harmony export */   screenShareObserver: function() { return /* binding */ screenShareObserver; },\n/* harmony export */   selectGridLayout: function() { return /* binding */ selectGridLayout; },\n/* harmony export */   sendMessage: function() { return /* binding */ sendMessage; },\n/* harmony export */   setDifference: function() { return /* binding */ setDifference; },\n/* harmony export */   setLogLevel: function() { return /* binding */ setLogLevel; },\n/* harmony export */   setupChat: function() { return /* binding */ setupChat; },\n/* harmony export */   setupChatToggle: function() { return /* binding */ setupChatToggle; },\n/* harmony export */   setupClearPinButton: function() { return /* binding */ setupClearPinButton; },\n/* harmony export */   setupConnectionQualityIndicator: function() { return /* binding */ setupConnectionQualityIndicator; },\n/* harmony export */   setupDataMessageHandler: function() { return /* binding */ setupDataMessageHandler; },\n/* harmony export */   setupDeviceSelector: function() { return /* binding */ setupDeviceSelector; },\n/* harmony export */   setupDisconnectButton: function() { return /* binding */ setupDisconnectButton; },\n/* harmony export */   setupFocusToggle: function() { return /* binding */ setupFocusToggle; },\n/* harmony export */   setupLiveKitRoom: function() { return /* binding */ setupLiveKitRoom; },\n/* harmony export */   setupManualToggle: function() { return /* binding */ setupManualToggle; },\n/* harmony export */   setupMediaToggle: function() { return /* binding */ setupMediaToggle; },\n/* harmony export */   setupMediaTrack: function() { return /* binding */ setupMediaTrack; },\n/* harmony export */   setupParticipantName: function() { return /* binding */ setupParticipantName; },\n/* harmony export */   setupParticipantTile: function() { return /* binding */ setupParticipantTile; },\n/* harmony export */   setupStartAudio: function() { return /* binding */ setupStartAudio; },\n/* harmony export */   setupTrackMutedIndicator: function() { return /* binding */ setupTrackMutedIndicator; },\n/* harmony export */   sortParticipants: function() { return /* binding */ sortParticipants; },\n/* harmony export */   sortTrackReferences: function() { return /* binding */ sortTrackReferences; },\n/* harmony export */   supportsScreenSharing: function() { return /* binding */ supportsScreenSharing; },\n/* harmony export */   tokenize: function() { return /* binding */ tokenize; },\n/* harmony export */   trackObservable: function() { return /* binding */ trackObservable; },\n/* harmony export */   trackReferencesObservable: function() { return /* binding */ trackReferencesObservable; },\n/* harmony export */   updatePages: function() { return /* binding */ updatePages; },\n/* harmony export */   wasClickOutside: function() { return /* binding */ wasClickOutside; }\n/* harmony export */ });\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! livekit-client */ \"(app-pages-browser)/./node_modules/.pnpm/livekit-client@1.14.4/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var global_tld_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! global-tld-list */ \"(app-pages-browser)/./node_modules/.pnpm/global-tld-list@0.0.1139/node_modules/global-tld-list/dist/index.js\");\n/* harmony import */ var email_regex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! email-regex */ \"(app-pages-browser)/./node_modules/.pnpm/email-regex@5.0.0/node_modules/email-regex/index.js\");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @floating-ui/dom */ \"(app-pages-browser)/./node_modules/.pnpm/@floating-ui+dom@1.5.3/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @floating-ui/dom */ \"(app-pages-browser)/./node_modules/.pnpm/@floating-ui+core@1.5.0/node_modules/@floating-ui/core/dist/floating-ui.core.mjs\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! loglevel */ \"(app-pages-browser)/./node_modules/.pnpm/loglevel@1.8.1/node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/startWith.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/switchMap.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/finalize.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/concat.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/filter.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/scan.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/timeout.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! rxjs */ \"(app-pages-browser)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/constants.ts\nvar cssPrefix = \"lk\";\n\n// src/utils.ts\n\n\n// src/track-reference/track-reference.types.ts\nfunction isTrackReference(trackReference) {\n  if (typeof trackReference === \"undefined\") {\n    return false;\n  }\n  return isTrackReferenceSubscribed(trackReference) || isTrackReferencePublished(trackReference);\n}\nfunction isTrackReferenceSubscribed(trackReference) {\n  var _a;\n  if (!trackReference) {\n    return false;\n  }\n  return trackReference.hasOwnProperty(\"participant\") && trackReference.hasOwnProperty(\"source\") && trackReference.hasOwnProperty(\"track\") && typeof ((_a = trackReference.publication) == null ? void 0 : _a.track) !== \"undefined\";\n}\nfunction isTrackReferencePublished(trackReference) {\n  if (!trackReference) {\n    return false;\n  }\n  return trackReference.hasOwnProperty(\"participant\") && trackReference.hasOwnProperty(\"source\") && trackReference.hasOwnProperty(\"publication\") && typeof trackReference.publication !== \"undefined\";\n}\nfunction isTrackReferencePlaceholder(trackReference) {\n  if (!trackReference) {\n    return false;\n  }\n  return trackReference.hasOwnProperty(\"participant\") && trackReference.hasOwnProperty(\"source\") && typeof trackReference.publication === \"undefined\";\n}\n\n// src/track-reference/track-reference.utils.ts\nfunction getTrackReferenceId(trackReference) {\n  if (typeof trackReference === \"string\" || typeof trackReference === \"number\") {\n    return `${trackReference}`;\n  } else if (isTrackReferencePlaceholder(trackReference)) {\n    return `${trackReference.participant.identity}_${trackReference.source}_placeholder`;\n  } else if (isTrackReference(trackReference)) {\n    return `${trackReference.participant.identity}_${trackReference.publication.source}_${trackReference.publication.trackSid}`;\n  } else {\n    throw new Error(`Can't generate a id for the given track reference: ${trackReference}`);\n  }\n}\nfunction getTrackReferenceSource(trackReference) {\n  if (isTrackReference(trackReference)) {\n    return trackReference.publication.source;\n  } else {\n    return trackReference.source;\n  }\n}\nfunction isEqualTrackRef(a, b) {\n  if (a === void 0 || b === void 0) {\n    return false;\n  }\n  if (isTrackReference(a) && isTrackReference(b)) {\n    return a.publication.trackSid === b.publication.trackSid;\n  } else {\n    return getTrackReferenceId(a) === getTrackReferenceId(b);\n  }\n}\nfunction isTrackReferencePinned(trackReference, pinState) {\n  if (typeof pinState === \"undefined\") {\n    return false;\n  }\n  if (isTrackReference(trackReference)) {\n    return pinState.some(\n      (pinnedTrackReference) => pinnedTrackReference.participant.identity === trackReference.participant.identity && isTrackReference(pinnedTrackReference) && pinnedTrackReference.publication.trackSid === trackReference.publication.trackSid\n    );\n  } else if (isTrackReferencePlaceholder(trackReference)) {\n    return pinState.some(\n      (pinnedTrackReference) => pinnedTrackReference.participant.identity === trackReference.participant.identity && isTrackReferencePlaceholder(pinnedTrackReference) && pinnedTrackReference.source === trackReference.source\n    );\n  } else {\n    return false;\n  }\n}\nfunction isPlaceholderReplacement(currentTrackRef, nextTrackRef) {\n  return isTrackReferencePlaceholder(currentTrackRef) && isTrackReference(nextTrackRef) && nextTrackRef.participant.identity === currentTrackRef.participant.identity && nextTrackRef.source === currentTrackRef.source;\n}\n\n// src/utils.ts\nfunction isLocal(p) {\n  return p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant;\n}\nfunction isRemote(p) {\n  return p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.RemoteParticipant;\n}\nvar attachIfSubscribed = (publication, element) => {\n  if (!publication)\n    return;\n  const { isSubscribed, track } = publication;\n  if (element && track) {\n    if (isSubscribed) {\n      track.attach(element);\n    } else {\n      track.detach(element);\n    }\n  }\n};\nfunction isParticipantSourcePinned(participant, source, pinState) {\n  if (pinState === void 0) {\n    return false;\n  }\n  return pinState.some(\n    ({ source: pinnedSource, participant: pinnedParticipant }) => pinnedSource === source && pinnedParticipant.identity === participant.identity\n  );\n}\nfunction isParticipantTrackReferencePinned(trackRef, pinState) {\n  if (pinState === void 0) {\n    return false;\n  }\n  return pinState.some((pinnedTrackRef) => isEqualTrackRef(pinnedTrackRef, trackRef));\n}\nfunction getScrollBarWidth() {\n  const inner = document.createElement(\"p\");\n  inner.style.width = \"100%\";\n  inner.style.height = \"200px\";\n  const outer = document.createElement(\"div\");\n  outer.style.position = \"absolute\";\n  outer.style.top = \"0px\";\n  outer.style.left = \"0px\";\n  outer.style.visibility = \"hidden\";\n  outer.style.width = \"200px\";\n  outer.style.height = \"150px\";\n  outer.style.overflow = \"hidden\";\n  outer.appendChild(inner);\n  document.body.appendChild(outer);\n  const w1 = inner.offsetWidth;\n  outer.style.overflow = \"scroll\";\n  let w2 = inner.offsetWidth;\n  if (w1 === w2) {\n    w2 = outer.clientWidth;\n  }\n  document.body.removeChild(outer);\n  const scrollBarWidth = w1 - w2;\n  return scrollBarWidth;\n}\n\n// src/helper/detectMobileBrowser.ts\nfunction isWeb() {\n  return typeof document !== \"undefined\";\n}\nfunction isMobileBrowser() {\n  return isWeb() ? /Mobi/i.test(window.navigator.userAgent) : false;\n}\n\n// src/helper/urlRegex.ts\n\nvar createUrlRegExp = (options) => {\n  options = __spreadValues({\n    strict: true\n  }, options);\n  const protocol = `(?:(?:[a-z]+:)?//)${options.strict ? \"\" : \"?\"}`;\n  const auth = \"(?:\\\\S+(?::\\\\S*)?@)?\";\n  const ip = new RegExp(\n    \"(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}\",\n    \"g\"\n  ).source;\n  const host = \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\";\n  const domain = \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\";\n  const tld = `(?:\\\\.${options.strict ? \"(?:[a-z\\\\u00a1-\\\\uffff]{2,})\" : `(?:${global_tld_list__WEBPACK_IMPORTED_MODULE_1__.TLDs.sort((a, b) => b.length - a.length).join(\"|\")})`})\\\\.?`;\n  const port = \"(?::\\\\d{2,5})?\";\n  const path = '(?:[/?#][^\\\\s\"]*)?';\n  const regex = `(?:${protocol}|www\\\\.)${auth}(?:localhost|${ip}|${host}${domain}${tld})${port}${path}`;\n  return options.exact ? new RegExp(`(?:^${regex}$)`, \"i\") : new RegExp(regex, \"ig\");\n};\n\n// src/helper/emailRegex.ts\n\n\n// src/helper/floating-menu.ts\n\nfunction computeMenuPosition(button, menu) {\n  return __async(this, null, function* () {\n    const { x, y } = yield (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.computePosition)(button, menu, {\n      placement: \"top\",\n      middleware: [(0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_4__.offset)(6), (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_4__.flip)(), (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_4__.shift)({ padding: 5 })]\n    });\n    return { x, y };\n  });\n}\nfunction wasClickOutside(insideElement, event) {\n  const isOutside = !insideElement.contains(event.target);\n  return isOutside;\n}\n\n// src/helper/tokenizer.ts\nvar createDefaultGrammar = () => {\n  return {\n    email: (0,email_regex__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(),\n    url: createUrlRegExp({ strict: false })\n  };\n};\nfunction tokenize(input, grammar) {\n  const matches = Object.entries(grammar).map(\n    ([type, rx], weight) => Array.from(input.matchAll(rx)).map(({ index, 0: content }) => ({\n      type,\n      weight,\n      content,\n      index: index != null ? index : 0\n    }))\n  ).flat().sort((a, b) => {\n    const d = a.index - b.index;\n    return d !== 0 ? d : a.weight - b.weight;\n  }).filter(({ index }, i, arr) => {\n    if (i === 0)\n      return true;\n    const prev = arr[i - 1];\n    return prev.index + prev.content.length <= index;\n  });\n  const tokens = [];\n  let pos = 0;\n  for (const { type, content, index } of matches) {\n    if (index > pos)\n      tokens.push(input.substring(pos, index));\n    tokens.push({ type, content });\n    pos = index + content.length;\n  }\n  if (input.length > pos)\n    tokens.push(input.substring(pos));\n  return tokens;\n}\n\n// src/helper/eventGroups.ts\n\nvar allRemoteParticipantRoomEvents = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionQualityChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantPermissionsChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantMetadataChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackMuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnmuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackStreamStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionFailed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionPermissionChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged\n];\nvar allParticipantRoomEvents = [\n  ...allRemoteParticipantRoomEvents,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished\n];\nvar allRemoteParticipantEvents = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackStreamStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionFailed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionPermissionChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged\n];\nvar allParticipantEvents = [\n  ...allRemoteParticipantEvents,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n];\n\n// src/logger.ts\n\n\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_5__.getLogger(\"lk-components-js\");\nlog.setDefaultLevel(\"WARN\");\nfunction setLogLevel(level, options = {}) {\n  var _a;\n  log.setLevel(level);\n  (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogLevel)((_a = options.liveKitClientLogLevel) != null ? _a : level);\n}\n\n// src/helper/grid-layouts.ts\nvar GRID_LAYOUTS = [\n  {\n    columns: 1,\n    rows: 1,\n    name: \"1x1\",\n    minTiles: 1,\n    maxTiles: 1,\n    minWidth: 0,\n    minHeight: 0\n  },\n  {\n    columns: 1,\n    rows: 2,\n    name: \"1x2\",\n    minTiles: 2,\n    maxTiles: 2,\n    minWidth: 0,\n    minHeight: 0\n  },\n  {\n    columns: 2,\n    rows: 1,\n    name: \"2x1\",\n    minTiles: 2,\n    maxTiles: 2,\n    minWidth: 900,\n    minHeight: 0\n  },\n  {\n    columns: 2,\n    rows: 2,\n    name: \"2x2\",\n    minTiles: 3,\n    maxTiles: 4,\n    minWidth: 560,\n    minHeight: 0\n  },\n  {\n    columns: 3,\n    rows: 3,\n    name: \"3x3\",\n    minTiles: 5,\n    maxTiles: 9,\n    minWidth: 700,\n    minHeight: 0\n  },\n  {\n    columns: 4,\n    rows: 4,\n    name: \"4x4\",\n    minTiles: 10,\n    maxTiles: 16,\n    minWidth: 960,\n    minHeight: 0\n  },\n  {\n    columns: 5,\n    rows: 5,\n    name: \"5x5\",\n    minTiles: 17,\n    maxTiles: 25,\n    minWidth: 1100,\n    minHeight: 0\n  }\n];\nfunction selectGridLayout(layouts, participantCount, width, height) {\n  let currentLayoutIndex = 0;\n  let layout = layouts.find((layout_, index, allLayouts) => {\n    currentLayoutIndex = index;\n    const isBiggerLayoutAvailable = allLayouts.findIndex((l, i) => {\n      const layoutIsBiggerThanCurrent = i > index;\n      const layoutFitsSameAmountOfParticipants = l.maxTiles === layout_.maxTiles;\n      return layoutIsBiggerThanCurrent && layoutFitsSameAmountOfParticipants;\n    }) !== -1;\n    return layout_.maxTiles >= participantCount && !isBiggerLayoutAvailable;\n  });\n  if (layout === void 0) {\n    layout = layouts[layouts.length - 1];\n    if (layout) {\n      log.warn(\n        `No layout found for: participantCount: ${participantCount}, width/height: ${width}/${height} fallback to biggest available layout (${layout.name}).`\n      );\n    } else {\n      throw new Error(`No layout or fallback layout found.`);\n    }\n  }\n  if (width < layout.minWidth || height < layout.minHeight) {\n    if (currentLayoutIndex > 0) {\n      const smallerLayout = layouts[currentLayoutIndex - 1];\n      layout = selectGridLayout(\n        layouts.slice(0, currentLayoutIndex),\n        smallerLayout.maxTiles,\n        width,\n        height\n      );\n    }\n  }\n  return layout;\n}\n\n// src/helper/set-helper.ts\nfunction setDifference(setA, setB) {\n  const _difference = new Set(setA);\n  for (const elem of setB) {\n    _difference.delete(elem);\n  }\n  return _difference;\n}\n\n// src/helper/featureDetection.ts\nfunction supportsScreenSharing() {\n  return typeof navigator !== \"undefined\" && navigator.mediaDevices && !!navigator.mediaDevices.getDisplayMedia;\n}\n\n// src/types.ts\nvar PIN_DEFAULT_STATE = [];\nvar WIDGET_DEFAULT_STATE = { showChat: false, unreadMessages: 0 };\nfunction isSourceWitOptions(source) {\n  return typeof source === \"object\";\n}\nfunction isSourcesWithOptions(sources) {\n  return Array.isArray(sources) && sources.filter(isSourceWitOptions).length > 0;\n}\n\n// src/sorting/sort-track-bundles.ts\n\n\n// src/sorting/base-sort-functions.ts\n\nfunction sortParticipantsByAudioLevel(a, b) {\n  return b.audioLevel - a.audioLevel;\n}\nfunction sortParticipantsByIsSpeaking(a, b) {\n  if (a.isSpeaking === b.isSpeaking) {\n    return 0;\n  } else {\n    return a.isSpeaking ? -1 : 1;\n  }\n}\nfunction sortParticipantsByLastSpokenAT(a, b) {\n  var _a, _b, _c, _d;\n  if (a.lastSpokeAt !== void 0 || b.lastSpokeAt !== void 0) {\n    return ((_b = (_a = b.lastSpokeAt) == null ? void 0 : _a.getTime()) != null ? _b : 0) - ((_d = (_c = a.lastSpokeAt) == null ? void 0 : _c.getTime()) != null ? _d : 0);\n  } else {\n    return 0;\n  }\n}\nfunction sortParticipantsByJoinedAt(a, b) {\n  var _a, _b, _c, _d;\n  return ((_b = (_a = a.joinedAt) == null ? void 0 : _a.getTime()) != null ? _b : 0) - ((_d = (_c = b.joinedAt) == null ? void 0 : _c.getTime()) != null ? _d : 0);\n}\nfunction sortTrackReferencesByType(a, b) {\n  if (isTrackReference(a)) {\n    if (isTrackReference(b)) {\n      return 0;\n    } else {\n      return -1;\n    }\n  } else if (isTrackReference(b)) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\nfunction sortTrackRefsByIsCameraEnabled(a, b) {\n  const aVideo = a.participant.isCameraEnabled;\n  const bVideo = b.participant.isCameraEnabled;\n  if (aVideo !== bVideo) {\n    if (aVideo) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    return 0;\n  }\n}\n\n// src/sorting/sort-track-bundles.ts\nfunction sortTrackReferences(tracks) {\n  const localTracks = [];\n  const screenShareTracks = [];\n  const cameraTracks = [];\n  const undefinedTracks = [];\n  tracks.forEach((trackRef) => {\n    if (trackRef.participant.isLocal && trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera) {\n      localTracks.push(trackRef);\n    } else if (trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare) {\n      screenShareTracks.push(trackRef);\n    } else if (trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera) {\n      cameraTracks.push(trackRef);\n    } else {\n      undefinedTracks.push(trackRef);\n    }\n  });\n  const sortedScreenShareTracks = sortScreenShareTracks(screenShareTracks);\n  const sortedCameraTracks = sortCameraTracks(cameraTracks);\n  return [...localTracks, ...sortedScreenShareTracks, ...sortedCameraTracks, ...undefinedTracks];\n}\nfunction sortScreenShareTracks(screenShareTracks) {\n  const localScreenShares = [];\n  const remoteScreenShares = [];\n  screenShareTracks.forEach((trackRef) => {\n    if (trackRef.participant.isLocal) {\n      localScreenShares.push(trackRef);\n    } else {\n      remoteScreenShares.push(trackRef);\n    }\n  });\n  localScreenShares.sort((a, b) => sortParticipantsByJoinedAt(a.participant, b.participant));\n  remoteScreenShares.sort((a, b) => sortParticipantsByJoinedAt(a.participant, b.participant));\n  const sortedScreenShareTrackRefs = [...remoteScreenShares, ...localScreenShares];\n  return sortedScreenShareTrackRefs;\n}\nfunction sortCameraTracks(cameraTrackReferences) {\n  const localCameraTracks = [];\n  const remoteCameraTracks = [];\n  cameraTrackReferences.forEach((trackRef) => {\n    if (trackRef.participant.isLocal) {\n      localCameraTracks.push(trackRef);\n    } else {\n      remoteCameraTracks.push(trackRef);\n    }\n  });\n  remoteCameraTracks.sort((a, b) => {\n    if (a.participant.isSpeaking && b.participant.isSpeaking) {\n      return sortParticipantsByAudioLevel(a.participant, b.participant);\n    }\n    if (a.participant.isSpeaking !== b.participant.isSpeaking) {\n      return sortParticipantsByIsSpeaking(a.participant, b.participant);\n    }\n    if (a.participant.lastSpokeAt !== b.participant.lastSpokeAt) {\n      return sortParticipantsByLastSpokenAT(a.participant, b.participant);\n    }\n    if (isTrackReference(a) !== isTrackReference(b)) {\n      return sortTrackReferencesByType(a, b);\n    }\n    if (a.participant.isCameraEnabled !== b.participant.isCameraEnabled) {\n      return sortTrackRefsByIsCameraEnabled(a, b);\n    }\n    return sortParticipantsByJoinedAt(a.participant, b.participant);\n  });\n  return [...localCameraTracks, ...remoteCameraTracks];\n}\n\n// src/sorting/sort-participants.ts\n\nfunction sortParticipants(participants) {\n  const sortedParticipants = [...participants];\n  sortedParticipants.sort((a, b) => {\n    if (a.isSpeaking && b.isSpeaking) {\n      return sortParticipantsByAudioLevel(a, b);\n    }\n    if (a.isSpeaking !== b.isSpeaking) {\n      return sortParticipantsByIsSpeaking(a, b);\n    }\n    if (a.lastSpokeAt !== b.lastSpokeAt) {\n      return sortParticipantsByLastSpokenAT(a, b);\n    }\n    const aVideo = a.videoTracks.size > 0;\n    const bVideo = b.videoTracks.size > 0;\n    if (aVideo !== bVideo) {\n      if (aVideo) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n    return sortParticipantsByJoinedAt(a, b);\n  });\n  const localParticipant = sortedParticipants.find((p) => p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant);\n  if (localParticipant) {\n    const localIdx = sortedParticipants.indexOf(localParticipant);\n    if (localIdx >= 0) {\n      sortedParticipants.splice(localIdx, 1);\n      if (sortedParticipants.length > 0) {\n        sortedParticipants.splice(0, 0, localParticipant);\n      } else {\n        sortedParticipants.push(localParticipant);\n      }\n    }\n  }\n  return sortedParticipants;\n}\n\n// src/helper/array-helper.ts\nfunction chunk(input, size) {\n  return input.reduce((arr, item, idx) => {\n    return idx % size === 0 ? [...arr, [item]] : [...arr.slice(0, -1), [...arr.slice(-1)[0], item]];\n  }, []);\n}\nfunction zip(a1, a2) {\n  const resultLength = Math.max(a1.length, a2.length);\n  return new Array(resultLength).fill([]).map((_val, idx) => [a1[idx], a2[idx]]);\n}\nfunction differenceBy(a1, a2, by) {\n  return a1.filter((c) => !a2.map((v) => by(v)).includes(by(c)));\n}\n\n// src/track-reference/test-utils.ts\n\nfunction flatTrackReferenceArray(list) {\n  return list.map((item) => {\n    if (typeof item === \"string\" || typeof item === \"number\") {\n      return `${item}`;\n    } else {\n      return getTrackReferenceId(item);\n    }\n  });\n}\n\n// src/sorting/tile-array-update.ts\nfunction visualPageChange(state, next) {\n  return {\n    dropped: differenceBy(state, next, getTrackReferenceId),\n    added: differenceBy(next, state, getTrackReferenceId)\n  };\n}\nfunction listNeedsUpdating(changes) {\n  return changes.added.length !== 0 || changes.dropped.length !== 0;\n}\nfunction findIndex(trackReference, trackReferences) {\n  const indexToReplace = trackReferences.findIndex(\n    (trackReference_) => getTrackReferenceId(trackReference_) === getTrackReferenceId(trackReference)\n  );\n  if (indexToReplace === -1) {\n    throw new Error(\n      `Element not part of the array: ${getTrackReferenceId(\n        trackReference\n      )} not in ${flatTrackReferenceArray(trackReferences)}`\n    );\n  }\n  return indexToReplace;\n}\nfunction swapItems(moveForward, moveBack, trackReferences) {\n  const indexToReplace = findIndex(moveForward, trackReferences);\n  const indexReplaceWith = findIndex(moveBack, trackReferences);\n  trackReferences.splice(indexToReplace, 1, moveBack);\n  trackReferences.splice(indexReplaceWith, 1, moveForward);\n  return trackReferences;\n}\nfunction dropItem(itemToDrop, list) {\n  const indexOfElementToDrop = findIndex(itemToDrop, list);\n  list.splice(indexOfElementToDrop, 1);\n  return list;\n}\nfunction addItem(itemToAdd, list) {\n  return [...list, itemToAdd];\n}\nfunction divideIntoPages(list, maxElementsOnPage) {\n  const pages = chunk(list, maxElementsOnPage);\n  return pages;\n}\nfunction updatePages(currentList, nextList, maxItemsOnPage) {\n  let updatedList = refreshList(currentList, nextList);\n  if (updatedList.length < nextList.length) {\n    const addedItems = differenceBy(nextList, updatedList, getTrackReferenceId);\n    updatedList = [...updatedList, ...addedItems];\n  }\n  const currentPages = divideIntoPages(updatedList, maxItemsOnPage);\n  const nextPages = divideIntoPages(nextList, maxItemsOnPage);\n  zip(currentPages, nextPages).forEach(([currentPage, nextPage], pageIndex) => {\n    if (currentPage && nextPage) {\n      const updatedPage = divideIntoPages(updatedList, maxItemsOnPage)[pageIndex];\n      const changes = visualPageChange(updatedPage, nextPage);\n      if (listNeedsUpdating(changes)) {\n        log.debug(\n          `Detected visual changes on page: ${pageIndex}, current: ${flatTrackReferenceArray(\n            currentPage\n          )}, next: ${flatTrackReferenceArray(nextPage)}`,\n          { changes }\n        );\n        if (changes.added.length === changes.dropped.length) {\n          zip(changes.added, changes.dropped).forEach(([added, dropped]) => {\n            if (added && dropped) {\n              updatedList = swapItems(added, dropped, updatedList);\n            } else {\n              throw new Error(\n                `For a swap action we need a addition and a removal one is missing: ${added}, ${dropped}`\n              );\n            }\n          });\n        }\n        if (changes.added.length === 0 && changes.dropped.length > 0) {\n          changes.dropped.forEach((item) => {\n            updatedList = dropItem(item, updatedList);\n          });\n        }\n        if (changes.added.length > 0 && changes.dropped.length === 0) {\n          changes.added.forEach((item) => {\n            updatedList = addItem(item, updatedList);\n          });\n        }\n      }\n    }\n  });\n  if (updatedList.length > nextList.length) {\n    const missingItems = differenceBy(updatedList, nextList, getTrackReferenceId);\n    updatedList = updatedList.filter(\n      (item) => !missingItems.map(getTrackReferenceId).includes(getTrackReferenceId(item))\n    );\n  }\n  return updatedList;\n}\nfunction refreshList(currentList, nextList) {\n  return currentList.map((currentItem) => {\n    const updateForCurrentItem = nextList.find(\n      (newItem_) => (\n        // If the IDs match or ..\n        getTrackReferenceId(currentItem) === getTrackReferenceId(newItem_) || // ... if the current item is a placeholder and the new item is the track reference can replace it.\n        typeof currentItem !== \"number\" && isTrackReferencePlaceholder(currentItem) && isTrackReference(newItem_) && isPlaceholderReplacement(currentItem, newItem_)\n      )\n    );\n    return updateForCurrentItem != null ? updateForCurrentItem : currentItem;\n  });\n}\n\n// src/components/mediaToggle.ts\n\n\n\n// src/observables/participant.ts\n\n\n\n// src/observables/room.ts\n\n\nfunction observeRoomEvents(room, ...events) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Observable((subscribe) => {\n    const onRoomUpdate = () => {\n      subscribe.next(room);\n    };\n    events.forEach((evt) => {\n      room.on(evt, onRoomUpdate);\n    });\n    const unsubscribe = () => {\n      events.forEach((evt) => {\n        room.off(evt, onRoomUpdate);\n      });\n    };\n    return unsubscribe;\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(room));\n  return observable;\n}\nfunction roomEventSelector(room, event) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Observable((subscribe) => {\n    const update = (...params) => {\n      subscribe.next(params);\n    };\n    room.on(event, update);\n    const unsubscribe = () => {\n      room.off(event, update);\n    };\n    return unsubscribe;\n  });\n  return observable;\n}\nfunction roomObserver(room) {\n  const observable = observeRoomEvents(\n    room,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnsubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.AudioPlaybackStatusChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(room));\n  return observable;\n}\nfunction connectionStateObserver(room) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)(([connectionState]) => connectionState),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(room.state)\n  );\n}\nfunction screenShareObserver(room) {\n  let screenShareSubscriber;\n  const observers = [];\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Observable((subscriber) => {\n    screenShareSubscriber = subscriber;\n    return () => {\n      observers.forEach((observer) => {\n        observer.unsubscribe();\n      });\n    };\n  });\n  const screenShareTracks = [];\n  const handleSub = (publication, participant) => {\n    if (publication.source !== livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare && publication.source !== livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShareAudio) {\n      return;\n    }\n    let trackMap = screenShareTracks.find((tr) => tr.participant.identity === participant.identity);\n    const getScreenShareTracks = (participant2) => {\n      return participant2.getTracks().filter(\n        (track) => (track.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare || track.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShareAudio) && track.track\n      );\n    };\n    if (!trackMap) {\n      trackMap = {\n        participant,\n        tracks: getScreenShareTracks(participant)\n      };\n    } else {\n      const index = screenShareTracks.indexOf(trackMap);\n      screenShareTracks.splice(index, 1);\n      trackMap.tracks = getScreenShareTracks(participant);\n    }\n    if (trackMap.tracks.length > 0) {\n      screenShareTracks.push(trackMap);\n    }\n    screenShareSubscriber.next(screenShareTracks);\n  };\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed).subscribe(\n      ([, ...args]) => handleSub(...args)\n    )\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnsubscribed).subscribe(\n      ([, ...args]) => handleSub(...args)\n    )\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished).subscribe((args) => handleSub(...args))\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished).subscribe((args) => {\n      handleSub(...args);\n    })\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackMuted).subscribe((args) => {\n      handleSub(...args);\n    })\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnmuted).subscribe((args) => {\n      handleSub(...args);\n    })\n  );\n  setTimeout(() => {\n    for (const p of room.participants.values()) {\n      p.getTracks().forEach((track) => {\n        handleSub(track, p);\n      });\n    }\n  }, 1);\n  return observable;\n}\nfunction roomInfoObserver(room) {\n  const observer = observeRoomEvents(\n    room,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((r) => {\n      return { name: r.name, metadata: r.metadata };\n    })\n  );\n  return observer;\n}\nfunction activeSpeakerObserver(room) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)(([speakers]) => speakers)\n  );\n}\nfunction createMediaDeviceObserver(kind, requestPermissions = true) {\n  var _a;\n  const onDeviceChange = () => __async(this, null, function* () {\n    const newDevices = yield livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(kind, requestPermissions);\n    deviceSubject.next(newDevices);\n  });\n  const deviceSubject = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();\n  const observable = deviceSubject.pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.finalize)(() => {\n      var _a2;\n      (_a2 = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _a2.removeEventListener(\"devicechange\", onDeviceChange);\n    })\n  );\n  if (typeof window !== \"undefined\") {\n    if (!window.isSecureContext) {\n      throw new Error(\n        `Accessing media devices is available only in secure contexts (HTTPS and localhost), in some or all supporting browsers. See: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices`\n      );\n    }\n    (_a = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _a.addEventListener(\"devicechange\", onDeviceChange);\n  }\n  return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.concat)(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(kind, requestPermissions), observable);\n}\nfunction createDataObserver(room) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.DataReceived);\n}\nfunction roomAudioPlaybackAllowedObservable(room) {\n  const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.AudioPlaybackStatusChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((room2) => {\n      return { canPlayAudio: room2.canPlaybackAudio };\n    })\n  );\n  return observable;\n}\nfunction createActiveDeviceObservable(room, kind) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveDeviceChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(([kindOfDevice]) => kindOfDevice === kind),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)(([kind2, deviceId]) => {\n      log.debug(\"activeDeviceObservable | RoomEvent.ActiveDeviceChanged\", { kind: kind2, deviceId });\n      return deviceId;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(room.getActiveDevice(kind))\n  );\n}\nfunction encryptionStatusObservable(room, participant) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantEncryptionStatusChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(\n      ([, p]) => participant.identity === (p == null ? void 0 : p.identity) || !p && participant.identity === room.localParticipant.identity\n    ),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)(([encrypted]) => encrypted),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(\n      participant instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant ? participant.isE2EEEnabled : participant.isEncrypted\n    )\n  );\n}\n\n// src/components/mediaTrack.ts\n\n\n\n// src/styles-interface/class-prefixer.ts\nfunction prefixClass(unprefixedClassName) {\n  return `${cssPrefix}-${unprefixedClassName}`;\n}\n\n// src/components/mediaTrack.ts\nfunction setupMediaTrack(trackIdentifier) {\n  const initialPub = getTrackByIdentifier(trackIdentifier);\n  const trackObserver = observeParticipantMedia(trackIdentifier.participant).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)(() => {\n      return getTrackByIdentifier(trackIdentifier);\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(initialPub)\n  );\n  const className = prefixClass(\n    trackIdentifier.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera || trackIdentifier.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare ? \"participant-media-video\" : \"participant-media-audio\"\n  );\n  return { className, trackObserver };\n}\nfunction getTrackByIdentifier(options) {\n  if (isTrackReference(options)) {\n    return options.publication;\n  } else {\n    const { source, name, participant } = options;\n    if (source && name) {\n      return participant.getTracks().find((pub) => pub.source === source && pub.trackName === name);\n    } else if (name) {\n      return participant.getTrackByName(name);\n    } else if (source) {\n      return participant.getTrack(source);\n    } else {\n      throw new Error(\"At least one of source and name needs to be defined\");\n    }\n  }\n}\n\n// src/observables/participant.ts\nfunction observeParticipantEvents(participant, ...events) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Observable((subscribe) => {\n    const onParticipantUpdate = () => {\n      subscribe.next(participant);\n    };\n    events.forEach((evt) => {\n      participant.on(evt, onParticipantUpdate);\n    });\n    const unsubscribe = () => {\n      events.forEach((evt) => {\n        participant.off(evt, onParticipantUpdate);\n      });\n    };\n    return unsubscribe;\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(participant));\n  return observable;\n}\nfunction observeParticipantMedia(participant) {\n  const participantObserver = observeParticipantEvents(\n    participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged,\n    // ParticipantEvent.IsSpeakingChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.MediaDevicesError,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged\n    // ParticipantEvent.ConnectionQualityChanged,\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((p) => {\n      const { isMicrophoneEnabled, isCameraEnabled, isScreenShareEnabled } = p;\n      const microphoneTrack = p.getTrack(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone);\n      const cameraTrack = p.getTrack(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera);\n      const participantMedia = {\n        isCameraEnabled,\n        isMicrophoneEnabled,\n        isScreenShareEnabled,\n        cameraTrack,\n        microphoneTrack,\n        participant: p\n      };\n      return participantMedia;\n    })\n  );\n  return participantObserver;\n}\nfunction createTrackObserver(participant, options) {\n  return observeParticipantMedia(participant).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)(() => {\n      return { publication: getTrackByIdentifier(options) };\n    })\n  );\n}\nfunction participantInfoObserver(participant) {\n  const observer = observeParticipantEvents(\n    participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged\n    // ParticipantEvent.LocalTrackPublished,\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)(({ name, identity, metadata }) => {\n      return {\n        name,\n        identity,\n        metadata\n      };\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)({\n      name: participant.name,\n      identity: participant.identity,\n      metadata: participant.metadata\n    })\n  );\n  return observer;\n}\nfunction createConnectionQualityObserver(participant) {\n  const observer = participantEventSelector(\n    participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)(([quality]) => quality),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(participant.connectionQuality)\n  );\n  return observer;\n}\nfunction participantEventSelector(participant, event) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Observable((subscribe) => {\n    const update = (...params) => {\n      subscribe.next(params);\n    };\n    participant.on(event, update);\n    const unsubscribe = () => {\n      participant.off(event, update);\n    };\n    return unsubscribe;\n  });\n  return observable;\n}\nfunction mutedObserver(trackRef) {\n  var _a, _b, _c, _d;\n  return observeParticipantEvents(\n    trackRef.participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnsubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((participant) => {\n      var _a2, _b2;\n      const pub = (_a2 = trackRef.publication) != null ? _a2 : participant.getTrack(trackRef.source);\n      return (_b2 = pub == null ? void 0 : pub.isMuted) != null ? _b2 : true;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(\n      (_d = (_c = (_a = trackRef.publication) == null ? void 0 : _a.isMuted) != null ? _c : (_b = trackRef.participant.getTrack(trackRef.source)) == null ? void 0 : _b.isMuted) != null ? _d : true\n    )\n  );\n}\nfunction createIsSpeakingObserver(participant) {\n  return participantEventSelector(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)(([isSpeaking]) => isSpeaking)\n  );\n}\nfunction connectedParticipantsObserver(room, options = {}) {\n  var _a;\n  let subscriber;\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Observable((sub) => {\n    subscriber = sub;\n    return () => listener.unsubscribe();\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(Array.from(room.participants.values())));\n  const additionalRoomEvents = (_a = options.additionalRoomEvents) != null ? _a : allParticipantRoomEvents;\n  const roomEvents = Array.from(\n    /* @__PURE__ */ new Set([\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n      ...additionalRoomEvents\n    ])\n  );\n  const listener = observeRoomEvents(room, ...roomEvents).subscribe(\n    (r) => subscriber == null ? void 0 : subscriber.next(Array.from(r.participants.values()))\n  );\n  if (room.participants.size > 0) {\n    subscriber == null ? void 0 : subscriber.next(Array.from(room.participants.values()));\n  }\n  return observable;\n}\nfunction connectedParticipantObserver(room, identity, options = {}) {\n  var _a;\n  const additionalEvents = (_a = options.additionalEvents) != null ? _a : allParticipantEvents;\n  const observable = observeRoomEvents(\n    room,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.switchMap)((r) => {\n      const participant = r.getParticipantByIdentity(identity);\n      if (participant) {\n        return observeParticipantEvents(participant, ...additionalEvents);\n      } else {\n        return new rxjs__WEBPACK_IMPORTED_MODULE_6__.Observable((subscribe) => subscribe.next(void 0));\n      }\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(room.getParticipantByIdentity(identity))\n  );\n  return observable;\n}\nfunction participantPermissionObserver(participant) {\n  const observer = participantEventSelector(\n    participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)(() => participant.permissions),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(participant.permissions)\n  );\n  return observer;\n}\n\n// src/components/mediaToggle.ts\nfunction setupMediaToggle(source, room, options) {\n  const { localParticipant } = room;\n  const getSourceEnabled = (source2, localParticipant2) => {\n    let isEnabled = false;\n    switch (source2) {\n      case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n        isEnabled = localParticipant2.isCameraEnabled;\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n        isEnabled = localParticipant2.isMicrophoneEnabled;\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n        isEnabled = localParticipant2.isScreenShareEnabled;\n        break;\n      default:\n        break;\n    }\n    return isEnabled;\n  };\n  const enabledObserver = observeParticipantMedia(localParticipant).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((media) => {\n      return getSourceEnabled(source, media.participant);\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(getSourceEnabled(source, localParticipant))\n  );\n  const pendingSubject = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();\n  const toggle = (forceState, captureOptions) => __async(this, null, function* () {\n    try {\n      captureOptions != null ? captureOptions : captureOptions = options;\n      pendingSubject.next(true);\n      switch (source) {\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n          yield localParticipant.setCameraEnabled(\n            forceState != null ? forceState : !localParticipant.isCameraEnabled,\n            captureOptions\n          );\n          break;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n          yield localParticipant.setMicrophoneEnabled(\n            forceState != null ? forceState : !localParticipant.isMicrophoneEnabled,\n            captureOptions\n          );\n          break;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n          yield localParticipant.setScreenShareEnabled(\n            forceState != null ? forceState : !localParticipant.isScreenShareEnabled,\n            captureOptions\n          );\n          break;\n        default:\n          break;\n      }\n    } finally {\n      pendingSubject.next(false);\n    }\n  });\n  const className = prefixClass(\"button\");\n  return {\n    className,\n    toggle,\n    enabledObserver,\n    pendingObserver: pendingSubject.asObservable()\n  };\n}\nfunction setupManualToggle() {\n  let state = false;\n  const enabledSubject = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();\n  const pendingSubject = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();\n  const toggle = (forceState) => {\n    pendingSubject.next(true);\n    state = forceState != null ? forceState : !state;\n    enabledSubject.next(state);\n    pendingSubject.next(false);\n  };\n  const className = prefixClass(\"button\");\n  return {\n    className,\n    toggle,\n    enabledObserver: enabledSubject.asObservable(),\n    pendingObserver: pendingSubject.asObservable()\n  };\n}\n\n// src/components/mediaDeviceSelect.ts\n\n\nfunction setupDeviceSelector(kind, room, localTrack) {\n  const activeDeviceSubject = new rxjs__WEBPACK_IMPORTED_MODULE_14__.BehaviorSubject(void 0);\n  const activeDeviceObservable = room ? createActiveDeviceObservable(room, kind) : activeDeviceSubject.asObservable();\n  const setActiveMediaDevice = (_0, ..._1) => __async(this, [_0, ..._1], function* (id, options = {}) {\n    var _a, _b, _c;\n    if (room) {\n      log.debug(`Switching active device of kind \"${kind}\" with id ${id}.`);\n      yield room.switchActiveDevice(kind, id, options.exact);\n      const actualDeviceId = (_a = room.getActiveDevice(kind)) != null ? _a : id;\n      if (actualDeviceId !== id && id !== \"default\") {\n        log.info(\n          `We tried to select the device with id (${id}), but the browser decided to select the device with id (${actualDeviceId}) instead.`\n        );\n      }\n      let targetTrack = void 0;\n      if (kind === \"audioinput\")\n        targetTrack = (_b = room.localParticipant.getTrack(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone)) == null ? void 0 : _b.track;\n      else if (kind === \"videoinput\") {\n        targetTrack = (_c = room.localParticipant.getTrack(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera)) == null ? void 0 : _c.track;\n      }\n      const useDefault = id === \"default\" && !targetTrack || id === \"default\" && (targetTrack == null ? void 0 : targetTrack.mediaStreamTrack.label.startsWith(\"Default\"));\n      activeDeviceSubject.next(useDefault ? id : actualDeviceId);\n    } else if (localTrack) {\n      yield localTrack.setDeviceId(options.exact ? { exact: id } : id);\n      const actualId = yield localTrack.getDeviceId();\n      activeDeviceSubject.next(\n        id === \"default\" && localTrack.mediaStreamTrack.label.startsWith(\"Default\") ? id : actualId\n      );\n    } else if (activeDeviceSubject.value !== id) {\n      log.warn(\n        \"device switch skipped, please provide either a room or a local track to switch on. \"\n      );\n      activeDeviceSubject.next(id);\n    }\n  });\n  const className = prefixClass(\"media-device-select\");\n  return {\n    className,\n    activeDeviceObservable,\n    setActiveMediaDevice\n  };\n}\n\n// src/components/disconnectButton.ts\nfunction setupDisconnectButton(room) {\n  const disconnect = (stopTracks) => {\n    room.disconnect(stopTracks);\n  };\n  const className = prefixClass(\"disconnect-button\");\n  return { className, disconnect };\n}\n\n// src/components/connectionQualityIndicator.ts\nfunction setupConnectionQualityIndicator(participant) {\n  const className = prefixClass(\"connection-quality\");\n  const connectionQualityObserver = createConnectionQualityObserver(participant);\n  return { className, connectionQualityObserver };\n}\n\n// src/components/trackMutedIndicator.ts\n\nfunction setupTrackMutedIndicator(trackRef) {\n  let classForSource = \"track-muted-indicator-camera\";\n  switch (trackRef.source) {\n    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n      classForSource = \"track-muted-indicator-camera\";\n      break;\n    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n      classForSource = \"track-muted-indicator-microphone\";\n      break;\n    default:\n      break;\n  }\n  const className = prefixClass(classForSource);\n  const mediaMutedObserver = mutedObserver(trackRef);\n  return { className, mediaMutedObserver };\n}\n\n// src/components/participantName.ts\nfunction setupParticipantName(participant) {\n  const infoObserver = participantInfoObserver(participant);\n  return { className: \"lk-participant-name\", infoObserver };\n}\n\n// src/components/participantTile.ts\nfunction setupParticipantTile() {\n  const className = prefixClass(\"participant-tile\");\n  return {\n    className\n  };\n}\n\n// src/components/chat.ts\n\n\n\n// src/observables/dataChannel.ts\n\n\nvar DataTopic = {\n  CHAT: \"lk-chat-topic\"\n};\nfunction sendMessage(_0, _1, _2) {\n  return __async(this, arguments, function* (localParticipant, payload, topic, options = {}) {\n    const { kind, destination } = options;\n    yield localParticipant.publishData(payload, kind != null ? kind : livekit_client__WEBPACK_IMPORTED_MODULE_0__.DataPacket_Kind.RELIABLE, {\n      destination,\n      topic\n    });\n  });\n}\nfunction setupDataMessageHandler(room, topic, onMessage) {\n  const messageObservable = createDataObserver(room).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(([, , , messageTopic]) => topic === void 0 || messageTopic === topic),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)(([payload, participant, , messageTopic]) => {\n      const msg = {\n        payload,\n        topic: messageTopic,\n        from: participant\n      };\n      onMessage == null ? void 0 : onMessage(msg);\n      return msg;\n    })\n  );\n  let isSendingSubscriber;\n  const isSendingObservable = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Observable((subscriber) => {\n    isSendingSubscriber = subscriber;\n  });\n  const send = (_0, ..._1) => __async(this, [_0, ..._1], function* (payload, options = {}) {\n    isSendingSubscriber.next(true);\n    try {\n      yield sendMessage(room.localParticipant, payload, topic, options);\n    } finally {\n      isSendingSubscriber.next(false);\n    }\n  });\n  return { messageObservable, isSendingObservable, send };\n}\n\n// src/components/chat.ts\nvar encoder = new TextEncoder();\nvar decoder = new TextDecoder();\nvar encode = (message) => encoder.encode(JSON.stringify({ message: message.message, timestamp: message.timestamp }));\nvar decode = (message) => JSON.parse(decoder.decode(message));\nfunction setupChat(room, options) {\n  const onDestroyObservable = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();\n  const messageSubject = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();\n  const { messageObservable } = setupDataMessageHandler(room, DataTopic.CHAT);\n  messageObservable.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_15__.takeUntil)(onDestroyObservable)).subscribe(messageSubject);\n  const { messageDecoder, messageEncoder } = options != null ? options : {};\n  const finalMessageDecoder = messageDecoder != null ? messageDecoder : decode;\n  const messagesObservable = messageSubject.pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((msg) => {\n      const parsedMessage = finalMessageDecoder(msg.payload);\n      const newMessage = __spreadProps(__spreadValues({}, parsedMessage), { from: msg.from });\n      return newMessage;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.scan)((acc, value) => [...acc, value], []),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.takeUntil)(onDestroyObservable)\n  );\n  const isSending$ = new rxjs__WEBPACK_IMPORTED_MODULE_14__.BehaviorSubject(false);\n  const finalMessageEncoder = messageEncoder != null ? messageEncoder : encode;\n  const send = (message) => __async(this, null, function* () {\n    const timestamp = Date.now();\n    const encodedMsg = finalMessageEncoder({ message, timestamp });\n    isSending$.next(true);\n    try {\n      yield sendMessage(room.localParticipant, encodedMsg, DataTopic.CHAT, {\n        kind: livekit_client__WEBPACK_IMPORTED_MODULE_0__.DataPacket_Kind.RELIABLE\n      });\n      messageSubject.next({\n        payload: encodedMsg,\n        topic: DataTopic.CHAT,\n        from: room.localParticipant\n      });\n    } finally {\n      isSending$.next(false);\n    }\n  });\n  function destroy() {\n    onDestroyObservable.next();\n    onDestroyObservable.complete();\n  }\n  return { messageObservable: messagesObservable, isSendingObservable: isSending$, send, destroy };\n}\n\n// src/components/startAudio.ts\nfunction setupStartAudio() {\n  const handleStartAudioPlayback = (room) => __async(this, null, function* () {\n    log.info(\"Start Audio for room: \", room);\n    yield room.startAudio();\n  });\n  const className = prefixClass(\"start-audio-button\");\n  return { className, roomAudioPlaybackAllowedObservable, handleStartAudioPlayback };\n}\n\n// src/components/chatToggle.ts\nfunction setupChatToggle() {\n  const className = [prefixClass(\"button\"), prefixClass(\"chat-toggle\")].join(\" \");\n  return { className };\n}\n\n// src/components/focusToggle.ts\nfunction setupFocusToggle() {\n  const className = [prefixClass(\"button\"), prefixClass(\"focus-toggle-button\")].join(\" \");\n  return { className };\n}\n\n// src/components/clearPinButton.ts\nfunction setupClearPinButton() {\n  const className = \"lk-clear-pin-button lk-button\";\n  return { className };\n}\n\n// src/components/room.ts\nfunction setupLiveKitRoom() {\n  const className = \"lk-room-container\";\n  return { className };\n}\n\n// src/observables/track.ts\n\n\nfunction trackObservable(track) {\n  const trackObserver = observeTrackEvents(\n    track,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Muted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Unmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Subscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Unsubscribed\n  );\n  return trackObserver;\n}\nfunction observeTrackEvents(track, ...events) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Observable((subscribe) => {\n    const onTrackUpdate = () => {\n      subscribe.next(track);\n    };\n    events.forEach((evt) => {\n      track.on(evt, onTrackUpdate);\n    });\n    const unsubscribe = () => {\n      events.forEach((evt) => {\n        track.off(evt, onTrackUpdate);\n      });\n    };\n    return unsubscribe;\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(track));\n  return observable;\n}\nfunction getTrackReferences(room, sources, onlySubscribedTracks = true) {\n  const localParticipant = room.localParticipant;\n  const allParticipants = [localParticipant, ...Array.from(room.participants.values())];\n  const trackReferences = [];\n  allParticipants.forEach((participant) => {\n    sources.forEach((source) => {\n      const sourceReferences = Array.from(\n        participant.tracks.values()\n      ).filter(\n        (track) => track.source === source && // either return all or only the ones that are subscribed\n        (!onlySubscribedTracks || track.track)\n      ).map((track) => {\n        return {\n          participant,\n          publication: track,\n          source: track.source\n        };\n      });\n      trackReferences.push(...sourceReferences);\n    });\n  });\n  return { trackReferences, participants: allParticipants };\n}\nfunction trackReferencesObservable(room, sources, options) {\n  var _a, _b;\n  const additionalRoomEvents = (_a = options.additionalRoomEvents) != null ? _a : allParticipantRoomEvents;\n  const onlySubscribedTracks = (_b = options.onlySubscribed) != null ? _b : true;\n  const roomEvents = Array.from(\n    (/* @__PURE__ */ new Set([\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged,\n      ...additionalRoomEvents\n    ])).values()\n  );\n  const observable = observeRoomEvents(room, ...roomEvents).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((room2) => {\n      const data = getTrackReferences(room2, sources, onlySubscribedTracks);\n      log.debug(`TrackReference[] was updated. (length ${data.trackReferences.length})`, data);\n      return data;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.startWith)(getTrackReferences(room, sources, onlySubscribedTracks))\n  );\n  return observable;\n}\n\n// src/observables/dom-event.ts\n\nfunction createInteractingObservable(htmlElement, inactiveAfter = 1e3) {\n  if (htmlElement === null)\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_17__.of)(false);\n  const move$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_18__.fromEvent)(htmlElement, \"mousemove\", { passive: true }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)(() => true));\n  const moveAndStop$ = move$.pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_19__.timeout)({\n      each: inactiveAfter,\n      with: () => (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.concat)((0,rxjs__WEBPACK_IMPORTED_MODULE_17__.of)(false), moveAndStop$.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_20__.skipUntil)(move$)))\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_21__.distinctUntilChanged)()\n  );\n  return moveAndStop$;\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLWNvcmVAMC43LjBfbGl2ZWtpdC1jbGllbnRAMS4xNC40L25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsNkRBQTZEO0FBQzNJO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ3FFOztBQUVyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsZUFBZTtBQUM3QixJQUFJO0FBQ0osY0FBYyxvQ0FBb0MsR0FBRyxzQkFBc0I7QUFDM0UsSUFBSTtBQUNKLGNBQWMsb0NBQW9DLEdBQUcsa0NBQWtDLEdBQUcsb0NBQW9DO0FBQzlILElBQUk7QUFDSiwwRUFBMEUsZUFBZTtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQiw0REFBZ0I7QUFDdEM7QUFDQTtBQUNBLHNCQUFzQiw2REFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHNCQUFzQjtBQUNoQztBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxzREFBc0Q7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUN1QztBQUN2QztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsd0NBQXdDLDBCQUEwQjtBQUNsRTtBQUNBO0FBQ0EsaUdBQWlHLEVBQUU7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMENBQTBDLEdBQUcsV0FBVyxpREFBSSwrQ0FBK0MsR0FBRztBQUNySSx3QkFBd0IsSUFBSTtBQUM1QjtBQUNBLHNCQUFzQixTQUFTLFVBQVUsS0FBSyxlQUFlLEdBQUcsR0FBRyxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksR0FBRyxLQUFLLEVBQUUsS0FBSztBQUN0RywyQ0FBMkMsTUFBTTtBQUNqRDs7QUFFQTtBQUM0Qzs7QUFFNUM7QUFDd0U7QUFDeEU7QUFDQTtBQUNBLFlBQVksT0FBTyxRQUFRLGlFQUFlO0FBQzFDO0FBQ0EsbUJBQW1CLHdEQUFNLEtBQUssc0RBQUksSUFBSSx1REFBSyxHQUFHLFlBQVk7QUFDMUQsS0FBSztBQUNMLGFBQWE7QUFDYixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVEQUFpQjtBQUM1QiwyQkFBMkIsZUFBZTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxtQkFBbUI7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRyxZQUFZLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGVBQWUsdUJBQXVCO0FBQ3RDO0FBQ0E7QUFDQSxrQkFBa0IsZUFBZTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDNkQ7QUFDN0Q7QUFDQSxFQUFFLHFEQUFTO0FBQ1gsRUFBRSxxREFBUztBQUNYLEVBQUUscURBQVM7QUFDWCxFQUFFLHFEQUFTO0FBQ1gsRUFBRSxxREFBUztBQUNYLEVBQUUscURBQVM7QUFDWCxFQUFFLHFEQUFTO0FBQ1gsRUFBRSxxREFBUztBQUNYLEVBQUUscURBQVM7QUFDWCxFQUFFLHFEQUFTO0FBQ1gsRUFBRSxxREFBUztBQUNYLEVBQUUscURBQVM7QUFDWCxFQUFFLHFEQUFTO0FBQ1gsRUFBRSxxREFBUztBQUNYLEVBQUUscURBQVM7QUFDWCxFQUFFLHFEQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsRUFBRSxxREFBUztBQUNYLEVBQUUscURBQVM7QUFDWDtBQUNBO0FBQ0EsRUFBRSw0REFBZ0I7QUFDbEIsRUFBRSw0REFBZ0I7QUFDbEIsRUFBRSw0REFBZ0I7QUFDbEIsRUFBRSw0REFBZ0I7QUFDbEIsRUFBRSw0REFBZ0I7QUFDbEIsRUFBRSw0REFBZ0I7QUFDbEIsRUFBRSw0REFBZ0I7QUFDbEIsRUFBRSw0REFBZ0I7QUFDbEIsRUFBRSw0REFBZ0I7QUFDbEIsRUFBRSw0REFBZ0I7QUFDbEIsRUFBRSw0REFBZ0I7QUFDbEIsRUFBRSw0REFBZ0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsRUFBRSw0REFBZ0I7QUFDbEIsRUFBRSw0REFBZ0I7QUFDbEI7O0FBRUE7QUFDcUU7QUFDckM7QUFDaEMsVUFBVSwrQ0FBa0I7QUFDNUI7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBLEVBQUUsMkRBQW9CO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsaUJBQWlCLGtCQUFrQixNQUFNLEdBQUcsUUFBUSx3Q0FBd0MsWUFBWTtBQUMxSjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ2lEOztBQUVqRDtBQUN1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxpREFBTTtBQUNsRTtBQUNBLE1BQU0sNkJBQTZCLGlEQUFNO0FBQ3pDO0FBQ0EsTUFBTSw2QkFBNkIsaURBQU07QUFDekM7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDdUU7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCx1RUFBdUUsNERBQWlCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNnRjtBQUNoRjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsS0FBSztBQUNyQixNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBLFNBQVMsU0FBUyx5Q0FBeUM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsVUFBVSxhQUFhO0FBQ3JFO0FBQ0EsWUFBWSxVQUFVLGtDQUFrQztBQUN4RCxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLHNGQUFzRixNQUFNLElBQUksUUFBUTtBQUN4RztBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDaUQ7QUFDZ0M7O0FBRWpGO0FBQ2lIO0FBQ2Y7O0FBRWxHO0FBQ3FGO0FBQ2tDO0FBQ3ZIO0FBQ0EseUJBQXlCLDRDQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHLE9BQU8sK0NBQVM7QUFDbkI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDRDQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkscURBQVU7QUFDZCxJQUFJLHFEQUFVO0FBQ2QsSUFBSSxxREFBVTtBQUNkLElBQUkscURBQVU7QUFDZCxJQUFJLHFEQUFVO0FBQ2QsSUFBSSxxREFBVTtBQUNkLElBQUkscURBQVU7QUFDZCxJQUFJLHFEQUFVO0FBQ2QsSUFBSSxxREFBVTtBQUNkLFNBQVMsK0NBQVM7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHFEQUFVO0FBQzNDLElBQUkseUNBQUc7QUFDUCxJQUFJLCtDQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw0Q0FBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsK0JBQStCLGlEQUFNLDhDQUE4QyxpREFBTTtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGlEQUFNLHdDQUF3QyxpREFBTTtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixxREFBVTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixxREFBVTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixxREFBVTtBQUN0QztBQUNBO0FBQ0EsNEJBQTRCLHFEQUFVO0FBQ3RDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSw0QkFBNEIscURBQVU7QUFDdEM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDRCQUE0QixxREFBVTtBQUN0QztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHFEQUFVO0FBQ2QsSUFBSSxxREFBVTtBQUNkO0FBQ0EsSUFBSSx5Q0FBRztBQUNQLGVBQWU7QUFDZixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMscURBQVU7QUFDM0MsSUFBSSx5Q0FBRztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsZ0RBQUk7QUFDakM7QUFDQSxHQUFHO0FBQ0gsNEJBQTRCLHlDQUFPO0FBQ25DO0FBQ0EsSUFBSSwrQ0FBUTtBQUNaO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw2Q0FBTSxDQUFDLGdEQUFJO0FBQ3BCO0FBQ0E7QUFDQSxpQ0FBaUMscURBQVU7QUFDM0M7QUFDQTtBQUNBLDZDQUE2QyxxREFBVTtBQUN2RCxJQUFJLHlDQUFHO0FBQ1AsZUFBZTtBQUNmLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxxREFBVTtBQUMzQyxJQUFJLDZDQUFNO0FBQ1YsSUFBSSx5Q0FBRztBQUNQLDRFQUE0RSx1QkFBdUI7QUFDbkc7QUFDQSxLQUFLO0FBQ0wsSUFBSSwrQ0FBUztBQUNiO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxxREFBVTtBQUMzQyxJQUFJLDZDQUFNO0FBQ1Y7QUFDQTtBQUNBLElBQUkseUNBQUc7QUFDUCxJQUFJLCtDQUFTO0FBQ2IsNkJBQTZCLDREQUFpQjtBQUM5QztBQUNBO0FBQ0E7O0FBRUE7QUFDaUQ7QUFDVzs7QUFFNUQ7QUFDQTtBQUNBLFlBQVksVUFBVSxHQUFHLG9CQUFvQjtBQUM3Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkseUNBQUk7QUFDUjtBQUNBLEtBQUs7QUFDTCxJQUFJLCtDQUFVO0FBQ2Q7QUFDQTtBQUNBLCtCQUErQixpREFBTSw2Q0FBNkMsaURBQU07QUFDeEY7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osWUFBWSw0QkFBNEI7QUFDeEM7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUJBQXlCLDRDQUFXO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHLE9BQU8sK0NBQVU7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksNERBQWlCO0FBQ3JCLElBQUksNERBQWlCO0FBQ3JCLElBQUksNERBQWlCO0FBQ3JCO0FBQ0EsSUFBSSw0REFBaUI7QUFDckIsSUFBSSw0REFBaUI7QUFDckIsSUFBSSw0REFBaUI7QUFDckIsSUFBSSw0REFBaUI7QUFDckIsSUFBSSw0REFBaUI7QUFDckIsSUFBSSw0REFBaUI7QUFDckI7QUFDQTtBQUNBLElBQUkseUNBQUk7QUFDUixjQUFjLDZEQUE2RDtBQUMzRSx5Q0FBeUMsaURBQU07QUFDL0MscUNBQXFDLGlEQUFNO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSx5Q0FBSTtBQUNSLGVBQWU7QUFDZixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksNERBQWlCO0FBQ3JCO0FBQ0E7QUFDQSxJQUFJLHlDQUFJLElBQUksMEJBQTBCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSSwrQ0FBVTtBQUNkO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDREQUFpQjtBQUNyQjtBQUNBLElBQUkseUNBQUk7QUFDUixJQUFJLCtDQUFVO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNENBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDREQUFpQjtBQUNyQixJQUFJLDREQUFpQjtBQUNyQixJQUFJLDREQUFpQjtBQUNyQixJQUFJLDREQUFpQjtBQUNyQixJQUFJLDREQUFpQjtBQUNyQixJQUFJLDREQUFpQjtBQUNyQjtBQUNBLElBQUkseUNBQUk7QUFDUjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSSwrQ0FBVTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsNERBQWlCO0FBQ2hFLElBQUkseUNBQUk7QUFDUjtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQSx5QkFBeUIsNENBQVc7QUFDcEM7QUFDQTtBQUNBLEdBQUcsT0FBTywrQ0FBVTtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxNQUFNLHFEQUFVO0FBQ2hCLE1BQU0scURBQVU7QUFDaEIsTUFBTSxxREFBVTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxxREFBVTtBQUNkLElBQUkscURBQVU7QUFDZCxJQUFJLHFEQUFVO0FBQ2Q7QUFDQSxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLG1CQUFtQiw0Q0FBVztBQUM5QjtBQUNBLEtBQUs7QUFDTCxJQUFJLCtDQUFVO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSw0REFBaUI7QUFDckI7QUFDQSxJQUFJLHlDQUFJO0FBQ1IsSUFBSSwrQ0FBVTtBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxtQkFBbUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpREFBTTtBQUNqQjtBQUNBO0FBQ0EsV0FBVyxpREFBTTtBQUNqQjtBQUNBO0FBQ0EsV0FBVyxpREFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSx5Q0FBSTtBQUNSO0FBQ0EsS0FBSztBQUNMLElBQUksK0NBQVU7QUFDZDtBQUNBLDZCQUE2Qix5Q0FBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpREFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpREFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpREFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIseUNBQVE7QUFDckMsNkJBQTZCLHlDQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFHd0I7QUFDZTtBQUN2QztBQUNBLGtDQUFrQyxrREFBZTtBQUNqRDtBQUNBLG9HQUFvRztBQUNwRztBQUNBO0FBQ0Esb0RBQW9ELEtBQUssWUFBWSxHQUFHO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELEdBQUcsMkRBQTJELGVBQWU7QUFDakk7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsaURBQU07QUFDakU7QUFDQSwyREFBMkQsaURBQU07QUFDakU7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLHFEQUFxRCxZQUFZO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ2lEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLFNBQVMsaURBQU07QUFDZjtBQUNBO0FBQ0EsU0FBUyxpREFBTTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNxRTtBQUN5Qzs7QUFFOUc7QUFDaUQ7QUFDZ0M7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRkFBMkY7QUFDM0YsWUFBWSxvQkFBb0I7QUFDaEMsc0VBQXNFLDJEQUFlO0FBQ3JGO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLElBQUksNkNBQU87QUFDWCxJQUFJLHlDQUFJO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGtDQUFrQyw0Q0FBVztBQUM3QztBQUNBLEdBQUc7QUFDSCx5RkFBeUY7QUFDekY7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCx3REFBd0Q7QUFDbEg7QUFDQTtBQUNBLGtDQUFrQyx5Q0FBUTtBQUMxQyw2QkFBNkIseUNBQVE7QUFDckMsVUFBVSxvQkFBb0I7QUFDOUIseUJBQXlCLGdEQUFTO0FBQ2xDLFVBQVUsaUNBQWlDO0FBQzNDO0FBQ0E7QUFDQSxJQUFJLHlDQUFJO0FBQ1I7QUFDQSx3REFBd0Qsb0JBQW9CLGdCQUFnQjtBQUM1RjtBQUNBLEtBQUs7QUFDTCxJQUFJLDJDQUFJO0FBQ1IsSUFBSSxnREFBUztBQUNiO0FBQ0EseUJBQXlCLGtEQUFnQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsb0JBQW9CO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMkRBQWdCO0FBQzlCLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNxRTtBQUNrQjtBQUN2RjtBQUNBO0FBQ0E7QUFDQSxJQUFJLHNEQUFVO0FBQ2QsSUFBSSxzREFBVTtBQUNkLElBQUksc0RBQVU7QUFDZCxJQUFJLHNEQUFVO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNENBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUcsT0FBTywrQ0FBVTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxxREFBVTtBQUNoQixNQUFNLHFEQUFVO0FBQ2hCLE1BQU0scURBQVU7QUFDaEIsTUFBTSxxREFBVTtBQUNoQixNQUFNLHFEQUFVO0FBQ2hCLE1BQU0scURBQVU7QUFDaEIsTUFBTSxxREFBVTtBQUNoQixNQUFNLHFEQUFVO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSx5Q0FBSTtBQUNSO0FBQ0EseURBQXlELDRCQUE0QjtBQUNyRjtBQUNBLEtBQUs7QUFDTCxJQUFJLCtDQUFVO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQytHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLHlDQUFFO0FBQ2IsZ0JBQWdCLGdEQUFTLDZCQUE2QixlQUFlLE9BQU8seUNBQUk7QUFDaEY7QUFDQSxJQUFJLDhDQUFPO0FBQ1g7QUFDQSxrQkFBa0IsNkNBQU8sQ0FBQyx5Q0FBRSwyQkFBMkIsZ0RBQVM7QUFDaEUsS0FBSztBQUNMLElBQUksMkRBQW9CO0FBQ3hCO0FBQ0E7QUFDQTtBQXVGRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLWNvcmVAMC43LjBfbGl2ZWtpdC1jbGllbnRAMS4xNC40L25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUvZGlzdC9pbmRleC5tanM/NjdiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19zcHJlYWRQcm9wcyA9IChhLCBiKSA9PiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTtcbnZhciBfX2FzeW5jID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBmdWxmaWxsZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RlcCA9ICh4KSA9PiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xuICB9KTtcbn07XG5cbi8vIHNyYy9jb25zdGFudHMudHNcbnZhciBjc3NQcmVmaXggPSBcImxrXCI7XG5cbi8vIHNyYy91dGlscy50c1xuaW1wb3J0IHsgTG9jYWxQYXJ0aWNpcGFudCwgUmVtb3RlUGFydGljaXBhbnQgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcblxuLy8gc3JjL3RyYWNrLXJlZmVyZW5jZS90cmFjay1yZWZlcmVuY2UudHlwZXMudHNcbmZ1bmN0aW9uIGlzVHJhY2tSZWZlcmVuY2UodHJhY2tSZWZlcmVuY2UpIHtcbiAgaWYgKHR5cGVvZiB0cmFja1JlZmVyZW5jZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gaXNUcmFja1JlZmVyZW5jZVN1YnNjcmliZWQodHJhY2tSZWZlcmVuY2UpIHx8IGlzVHJhY2tSZWZlcmVuY2VQdWJsaXNoZWQodHJhY2tSZWZlcmVuY2UpO1xufVxuZnVuY3Rpb24gaXNUcmFja1JlZmVyZW5jZVN1YnNjcmliZWQodHJhY2tSZWZlcmVuY2UpIHtcbiAgdmFyIF9hO1xuICBpZiAoIXRyYWNrUmVmZXJlbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cmFja1JlZmVyZW5jZS5oYXNPd25Qcm9wZXJ0eShcInBhcnRpY2lwYW50XCIpICYmIHRyYWNrUmVmZXJlbmNlLmhhc093blByb3BlcnR5KFwic291cmNlXCIpICYmIHRyYWNrUmVmZXJlbmNlLmhhc093blByb3BlcnR5KFwidHJhY2tcIikgJiYgdHlwZW9mICgoX2EgPSB0cmFja1JlZmVyZW5jZS5wdWJsaWNhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnRyYWNrKSAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmZ1bmN0aW9uIGlzVHJhY2tSZWZlcmVuY2VQdWJsaXNoZWQodHJhY2tSZWZlcmVuY2UpIHtcbiAgaWYgKCF0cmFja1JlZmVyZW5jZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJhY2tSZWZlcmVuY2UuaGFzT3duUHJvcGVydHkoXCJwYXJ0aWNpcGFudFwiKSAmJiB0cmFja1JlZmVyZW5jZS5oYXNPd25Qcm9wZXJ0eShcInNvdXJjZVwiKSAmJiB0cmFja1JlZmVyZW5jZS5oYXNPd25Qcm9wZXJ0eShcInB1YmxpY2F0aW9uXCIpICYmIHR5cGVvZiB0cmFja1JlZmVyZW5jZS5wdWJsaWNhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmZ1bmN0aW9uIGlzVHJhY2tSZWZlcmVuY2VQbGFjZWhvbGRlcih0cmFja1JlZmVyZW5jZSkge1xuICBpZiAoIXRyYWNrUmVmZXJlbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cmFja1JlZmVyZW5jZS5oYXNPd25Qcm9wZXJ0eShcInBhcnRpY2lwYW50XCIpICYmIHRyYWNrUmVmZXJlbmNlLmhhc093blByb3BlcnR5KFwic291cmNlXCIpICYmIHR5cGVvZiB0cmFja1JlZmVyZW5jZS5wdWJsaWNhdGlvbiA9PT0gXCJ1bmRlZmluZWRcIjtcbn1cblxuLy8gc3JjL3RyYWNrLXJlZmVyZW5jZS90cmFjay1yZWZlcmVuY2UudXRpbHMudHNcbmZ1bmN0aW9uIGdldFRyYWNrUmVmZXJlbmNlSWQodHJhY2tSZWZlcmVuY2UpIHtcbiAgaWYgKHR5cGVvZiB0cmFja1JlZmVyZW5jZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdHJhY2tSZWZlcmVuY2UgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gYCR7dHJhY2tSZWZlcmVuY2V9YDtcbiAgfSBlbHNlIGlmIChpc1RyYWNrUmVmZXJlbmNlUGxhY2Vob2xkZXIodHJhY2tSZWZlcmVuY2UpKSB7XG4gICAgcmV0dXJuIGAke3RyYWNrUmVmZXJlbmNlLnBhcnRpY2lwYW50LmlkZW50aXR5fV8ke3RyYWNrUmVmZXJlbmNlLnNvdXJjZX1fcGxhY2Vob2xkZXJgO1xuICB9IGVsc2UgaWYgKGlzVHJhY2tSZWZlcmVuY2UodHJhY2tSZWZlcmVuY2UpKSB7XG4gICAgcmV0dXJuIGAke3RyYWNrUmVmZXJlbmNlLnBhcnRpY2lwYW50LmlkZW50aXR5fV8ke3RyYWNrUmVmZXJlbmNlLnB1YmxpY2F0aW9uLnNvdXJjZX1fJHt0cmFja1JlZmVyZW5jZS5wdWJsaWNhdGlvbi50cmFja1NpZH1gO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZ2VuZXJhdGUgYSBpZCBmb3IgdGhlIGdpdmVuIHRyYWNrIHJlZmVyZW5jZTogJHt0cmFja1JlZmVyZW5jZX1gKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0VHJhY2tSZWZlcmVuY2VTb3VyY2UodHJhY2tSZWZlcmVuY2UpIHtcbiAgaWYgKGlzVHJhY2tSZWZlcmVuY2UodHJhY2tSZWZlcmVuY2UpKSB7XG4gICAgcmV0dXJuIHRyYWNrUmVmZXJlbmNlLnB1YmxpY2F0aW9uLnNvdXJjZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJhY2tSZWZlcmVuY2Uuc291cmNlO1xuICB9XG59XG5mdW5jdGlvbiBpc0VxdWFsVHJhY2tSZWYoYSwgYikge1xuICBpZiAoYSA9PT0gdm9pZCAwIHx8IGIgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoaXNUcmFja1JlZmVyZW5jZShhKSAmJiBpc1RyYWNrUmVmZXJlbmNlKGIpKSB7XG4gICAgcmV0dXJuIGEucHVibGljYXRpb24udHJhY2tTaWQgPT09IGIucHVibGljYXRpb24udHJhY2tTaWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldFRyYWNrUmVmZXJlbmNlSWQoYSkgPT09IGdldFRyYWNrUmVmZXJlbmNlSWQoYik7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzVHJhY2tSZWZlcmVuY2VQaW5uZWQodHJhY2tSZWZlcmVuY2UsIHBpblN0YXRlKSB7XG4gIGlmICh0eXBlb2YgcGluU3RhdGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGlzVHJhY2tSZWZlcmVuY2UodHJhY2tSZWZlcmVuY2UpKSB7XG4gICAgcmV0dXJuIHBpblN0YXRlLnNvbWUoXG4gICAgICAocGlubmVkVHJhY2tSZWZlcmVuY2UpID0+IHBpbm5lZFRyYWNrUmVmZXJlbmNlLnBhcnRpY2lwYW50LmlkZW50aXR5ID09PSB0cmFja1JlZmVyZW5jZS5wYXJ0aWNpcGFudC5pZGVudGl0eSAmJiBpc1RyYWNrUmVmZXJlbmNlKHBpbm5lZFRyYWNrUmVmZXJlbmNlKSAmJiBwaW5uZWRUcmFja1JlZmVyZW5jZS5wdWJsaWNhdGlvbi50cmFja1NpZCA9PT0gdHJhY2tSZWZlcmVuY2UucHVibGljYXRpb24udHJhY2tTaWRcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzVHJhY2tSZWZlcmVuY2VQbGFjZWhvbGRlcih0cmFja1JlZmVyZW5jZSkpIHtcbiAgICByZXR1cm4gcGluU3RhdGUuc29tZShcbiAgICAgIChwaW5uZWRUcmFja1JlZmVyZW5jZSkgPT4gcGlubmVkVHJhY2tSZWZlcmVuY2UucGFydGljaXBhbnQuaWRlbnRpdHkgPT09IHRyYWNrUmVmZXJlbmNlLnBhcnRpY2lwYW50LmlkZW50aXR5ICYmIGlzVHJhY2tSZWZlcmVuY2VQbGFjZWhvbGRlcihwaW5uZWRUcmFja1JlZmVyZW5jZSkgJiYgcGlubmVkVHJhY2tSZWZlcmVuY2Uuc291cmNlID09PSB0cmFja1JlZmVyZW5jZS5zb3VyY2VcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuZnVuY3Rpb24gaXNQbGFjZWhvbGRlclJlcGxhY2VtZW50KGN1cnJlbnRUcmFja1JlZiwgbmV4dFRyYWNrUmVmKSB7XG4gIHJldHVybiBpc1RyYWNrUmVmZXJlbmNlUGxhY2Vob2xkZXIoY3VycmVudFRyYWNrUmVmKSAmJiBpc1RyYWNrUmVmZXJlbmNlKG5leHRUcmFja1JlZikgJiYgbmV4dFRyYWNrUmVmLnBhcnRpY2lwYW50LmlkZW50aXR5ID09PSBjdXJyZW50VHJhY2tSZWYucGFydGljaXBhbnQuaWRlbnRpdHkgJiYgbmV4dFRyYWNrUmVmLnNvdXJjZSA9PT0gY3VycmVudFRyYWNrUmVmLnNvdXJjZTtcbn1cblxuLy8gc3JjL3V0aWxzLnRzXG5mdW5jdGlvbiBpc0xvY2FsKHApIHtcbiAgcmV0dXJuIHAgaW5zdGFuY2VvZiBMb2NhbFBhcnRpY2lwYW50O1xufVxuZnVuY3Rpb24gaXNSZW1vdGUocCkge1xuICByZXR1cm4gcCBpbnN0YW5jZW9mIFJlbW90ZVBhcnRpY2lwYW50O1xufVxudmFyIGF0dGFjaElmU3Vic2NyaWJlZCA9IChwdWJsaWNhdGlvbiwgZWxlbWVudCkgPT4ge1xuICBpZiAoIXB1YmxpY2F0aW9uKVxuICAgIHJldHVybjtcbiAgY29uc3QgeyBpc1N1YnNjcmliZWQsIHRyYWNrIH0gPSBwdWJsaWNhdGlvbjtcbiAgaWYgKGVsZW1lbnQgJiYgdHJhY2spIHtcbiAgICBpZiAoaXNTdWJzY3JpYmVkKSB7XG4gICAgICB0cmFjay5hdHRhY2goZWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYWNrLmRldGFjaChlbGVtZW50KTtcbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBpc1BhcnRpY2lwYW50U291cmNlUGlubmVkKHBhcnRpY2lwYW50LCBzb3VyY2UsIHBpblN0YXRlKSB7XG4gIGlmIChwaW5TdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBwaW5TdGF0ZS5zb21lKFxuICAgICh7IHNvdXJjZTogcGlubmVkU291cmNlLCBwYXJ0aWNpcGFudDogcGlubmVkUGFydGljaXBhbnQgfSkgPT4gcGlubmVkU291cmNlID09PSBzb3VyY2UgJiYgcGlubmVkUGFydGljaXBhbnQuaWRlbnRpdHkgPT09IHBhcnRpY2lwYW50LmlkZW50aXR5XG4gICk7XG59XG5mdW5jdGlvbiBpc1BhcnRpY2lwYW50VHJhY2tSZWZlcmVuY2VQaW5uZWQodHJhY2tSZWYsIHBpblN0YXRlKSB7XG4gIGlmIChwaW5TdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBwaW5TdGF0ZS5zb21lKChwaW5uZWRUcmFja1JlZikgPT4gaXNFcXVhbFRyYWNrUmVmKHBpbm5lZFRyYWNrUmVmLCB0cmFja1JlZikpO1xufVxuZnVuY3Rpb24gZ2V0U2Nyb2xsQmFyV2lkdGgoKSB7XG4gIGNvbnN0IGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGlubmVyLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gIGlubmVyLnN0eWxlLmhlaWdodCA9IFwiMjAwcHhcIjtcbiAgY29uc3Qgb3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBvdXRlci5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgb3V0ZXIuc3R5bGUudG9wID0gXCIwcHhcIjtcbiAgb3V0ZXIuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gIG91dGVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICBvdXRlci5zdHlsZS53aWR0aCA9IFwiMjAwcHhcIjtcbiAgb3V0ZXIuc3R5bGUuaGVpZ2h0ID0gXCIxNTBweFwiO1xuICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gIG91dGVyLmFwcGVuZENoaWxkKGlubmVyKTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvdXRlcik7XG4gIGNvbnN0IHcxID0gaW5uZXIub2Zmc2V0V2lkdGg7XG4gIG91dGVyLnN0eWxlLm92ZXJmbG93ID0gXCJzY3JvbGxcIjtcbiAgbGV0IHcyID0gaW5uZXIub2Zmc2V0V2lkdGg7XG4gIGlmICh3MSA9PT0gdzIpIHtcbiAgICB3MiA9IG91dGVyLmNsaWVudFdpZHRoO1xuICB9XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3V0ZXIpO1xuICBjb25zdCBzY3JvbGxCYXJXaWR0aCA9IHcxIC0gdzI7XG4gIHJldHVybiBzY3JvbGxCYXJXaWR0aDtcbn1cblxuLy8gc3JjL2hlbHBlci9kZXRlY3RNb2JpbGVCcm93c2VyLnRzXG5mdW5jdGlvbiBpc1dlYigpIHtcbiAgcmV0dXJuIHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmZ1bmN0aW9uIGlzTW9iaWxlQnJvd3NlcigpIHtcbiAgcmV0dXJuIGlzV2ViKCkgPyAvTW9iaS9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpIDogZmFsc2U7XG59XG5cbi8vIHNyYy9oZWxwZXIvdXJsUmVnZXgudHNcbmltcG9ydCB7IFRMRHMgfSBmcm9tIFwiZ2xvYmFsLXRsZC1saXN0XCI7XG52YXIgY3JlYXRlVXJsUmVnRXhwID0gKG9wdGlvbnMpID0+IHtcbiAgb3B0aW9ucyA9IF9fc3ByZWFkVmFsdWVzKHtcbiAgICBzdHJpY3Q6IHRydWVcbiAgfSwgb3B0aW9ucyk7XG4gIGNvbnN0IHByb3RvY29sID0gYCg/Oig/OlthLXpdKzopPy8vKSR7b3B0aW9ucy5zdHJpY3QgPyBcIlwiIDogXCI/XCJ9YDtcbiAgY29uc3QgYXV0aCA9IFwiKD86XFxcXFMrKD86OlxcXFxTKik/QCk/XCI7XG4gIGNvbnN0IGlwID0gbmV3IFJlZ0V4cChcbiAgICBcIig/OjI1WzAtNV18MlswLTRdXFxcXGR8MVxcXFxkXFxcXGR8WzEtOV1cXFxcZHxcXFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxcXGR8MVxcXFxkXFxcXGR8WzEtOV1cXFxcZHxcXFxcZCkpezN9XCIsXG4gICAgXCJnXCJcbiAgKS5zb3VyY2U7XG4gIGNvbnN0IGhvc3QgPSBcIig/Oig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XVstX10qKSpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rKVwiO1xuICBjb25zdCBkb21haW4gPSBcIig/OlxcXFwuKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldLSopKlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSspKlwiO1xuICBjb25zdCB0bGQgPSBgKD86XFxcXC4ke29wdGlvbnMuc3RyaWN0ID8gXCIoPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZl17Mix9KVwiIDogYCg/OiR7VExEcy5zb3J0KChhLCBiKSA9PiBiLmxlbmd0aCAtIGEubGVuZ3RoKS5qb2luKFwifFwiKX0pYH0pXFxcXC4/YDtcbiAgY29uc3QgcG9ydCA9IFwiKD86OlxcXFxkezIsNX0pP1wiO1xuICBjb25zdCBwYXRoID0gJyg/OlsvPyNdW15cXFxcc1wiXSopPyc7XG4gIGNvbnN0IHJlZ2V4ID0gYCg/OiR7cHJvdG9jb2x9fHd3d1xcXFwuKSR7YXV0aH0oPzpsb2NhbGhvc3R8JHtpcH18JHtob3N0fSR7ZG9tYWlufSR7dGxkfSkke3BvcnR9JHtwYXRofWA7XG4gIHJldHVybiBvcHRpb25zLmV4YWN0ID8gbmV3IFJlZ0V4cChgKD86XiR7cmVnZXh9JClgLCBcImlcIikgOiBuZXcgUmVnRXhwKHJlZ2V4LCBcImlnXCIpO1xufTtcblxuLy8gc3JjL2hlbHBlci9lbWFpbFJlZ2V4LnRzXG5pbXBvcnQgY3JlYXRlRW1haWxSZWdFeHAgZnJvbSBcImVtYWlsLXJlZ2V4XCI7XG5cbi8vIHNyYy9oZWxwZXIvZmxvYXRpbmctbWVudS50c1xuaW1wb3J0IHsgY29tcHV0ZVBvc2l0aW9uLCBmbGlwLCBvZmZzZXQsIHNoaWZ0IH0gZnJvbSBcIkBmbG9hdGluZy11aS9kb21cIjtcbmZ1bmN0aW9uIGNvbXB1dGVNZW51UG9zaXRpb24oYnV0dG9uLCBtZW51KSB7XG4gIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY29uc3QgeyB4LCB5IH0gPSB5aWVsZCBjb21wdXRlUG9zaXRpb24oYnV0dG9uLCBtZW51LCB7XG4gICAgICBwbGFjZW1lbnQ6IFwidG9wXCIsXG4gICAgICBtaWRkbGV3YXJlOiBbb2Zmc2V0KDYpLCBmbGlwKCksIHNoaWZ0KHsgcGFkZGluZzogNSB9KV1cbiAgICB9KTtcbiAgICByZXR1cm4geyB4LCB5IH07XG4gIH0pO1xufVxuZnVuY3Rpb24gd2FzQ2xpY2tPdXRzaWRlKGluc2lkZUVsZW1lbnQsIGV2ZW50KSB7XG4gIGNvbnN0IGlzT3V0c2lkZSA9ICFpbnNpZGVFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCk7XG4gIHJldHVybiBpc091dHNpZGU7XG59XG5cbi8vIHNyYy9oZWxwZXIvdG9rZW5pemVyLnRzXG52YXIgY3JlYXRlRGVmYXVsdEdyYW1tYXIgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgZW1haWw6IGNyZWF0ZUVtYWlsUmVnRXhwKCksXG4gICAgdXJsOiBjcmVhdGVVcmxSZWdFeHAoeyBzdHJpY3Q6IGZhbHNlIH0pXG4gIH07XG59O1xuZnVuY3Rpb24gdG9rZW5pemUoaW5wdXQsIGdyYW1tYXIpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IE9iamVjdC5lbnRyaWVzKGdyYW1tYXIpLm1hcChcbiAgICAoW3R5cGUsIHJ4XSwgd2VpZ2h0KSA9PiBBcnJheS5mcm9tKGlucHV0Lm1hdGNoQWxsKHJ4KSkubWFwKCh7IGluZGV4LCAwOiBjb250ZW50IH0pID0+ICh7XG4gICAgICB0eXBlLFxuICAgICAgd2VpZ2h0LFxuICAgICAgY29udGVudCxcbiAgICAgIGluZGV4OiBpbmRleCAhPSBudWxsID8gaW5kZXggOiAwXG4gICAgfSkpXG4gICkuZmxhdCgpLnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCBkID0gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgcmV0dXJuIGQgIT09IDAgPyBkIDogYS53ZWlnaHQgLSBiLndlaWdodDtcbiAgfSkuZmlsdGVyKCh7IGluZGV4IH0sIGksIGFycikgPT4ge1xuICAgIGlmIChpID09PSAwKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgY29uc3QgcHJldiA9IGFycltpIC0gMV07XG4gICAgcmV0dXJuIHByZXYuaW5kZXggKyBwcmV2LmNvbnRlbnQubGVuZ3RoIDw9IGluZGV4O1xuICB9KTtcbiAgY29uc3QgdG9rZW5zID0gW107XG4gIGxldCBwb3MgPSAwO1xuICBmb3IgKGNvbnN0IHsgdHlwZSwgY29udGVudCwgaW5kZXggfSBvZiBtYXRjaGVzKSB7XG4gICAgaWYgKGluZGV4ID4gcG9zKVxuICAgICAgdG9rZW5zLnB1c2goaW5wdXQuc3Vic3RyaW5nKHBvcywgaW5kZXgpKTtcbiAgICB0b2tlbnMucHVzaCh7IHR5cGUsIGNvbnRlbnQgfSk7XG4gICAgcG9zID0gaW5kZXggKyBjb250ZW50Lmxlbmd0aDtcbiAgfVxuICBpZiAoaW5wdXQubGVuZ3RoID4gcG9zKVxuICAgIHRva2Vucy5wdXNoKGlucHV0LnN1YnN0cmluZyhwb3MpKTtcbiAgcmV0dXJuIHRva2Vucztcbn1cblxuLy8gc3JjL2hlbHBlci9ldmVudEdyb3Vwcy50c1xuaW1wb3J0IHsgUGFydGljaXBhbnRFdmVudCwgUm9vbUV2ZW50IH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG52YXIgYWxsUmVtb3RlUGFydGljaXBhbnRSb29tRXZlbnRzID0gW1xuICBSb29tRXZlbnQuQ29ubmVjdGlvblN0YXRlQ2hhbmdlZCxcbiAgUm9vbUV2ZW50LlJvb21NZXRhZGF0YUNoYW5nZWQsXG4gIFJvb21FdmVudC5BY3RpdmVTcGVha2Vyc0NoYW5nZWQsXG4gIFJvb21FdmVudC5Db25uZWN0aW9uUXVhbGl0eUNoYW5nZWQsXG4gIFJvb21FdmVudC5QYXJ0aWNpcGFudENvbm5lY3RlZCxcbiAgUm9vbUV2ZW50LlBhcnRpY2lwYW50RGlzY29ubmVjdGVkLFxuICBSb29tRXZlbnQuUGFydGljaXBhbnRQZXJtaXNzaW9uc0NoYW5nZWQsXG4gIFJvb21FdmVudC5QYXJ0aWNpcGFudE1ldGFkYXRhQ2hhbmdlZCxcbiAgUm9vbUV2ZW50LlRyYWNrTXV0ZWQsXG4gIFJvb21FdmVudC5UcmFja1VubXV0ZWQsXG4gIFJvb21FdmVudC5UcmFja1B1Ymxpc2hlZCxcbiAgUm9vbUV2ZW50LlRyYWNrVW5wdWJsaXNoZWQsXG4gIFJvb21FdmVudC5UcmFja1N0cmVhbVN0YXRlQ2hhbmdlZCxcbiAgUm9vbUV2ZW50LlRyYWNrU3Vic2NyaXB0aW9uRmFpbGVkLFxuICBSb29tRXZlbnQuVHJhY2tTdWJzY3JpcHRpb25QZXJtaXNzaW9uQ2hhbmdlZCxcbiAgUm9vbUV2ZW50LlRyYWNrU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZFxuXTtcbnZhciBhbGxQYXJ0aWNpcGFudFJvb21FdmVudHMgPSBbXG4gIC4uLmFsbFJlbW90ZVBhcnRpY2lwYW50Um9vbUV2ZW50cyxcbiAgUm9vbUV2ZW50LkxvY2FsVHJhY2tQdWJsaXNoZWQsXG4gIFJvb21FdmVudC5Mb2NhbFRyYWNrVW5wdWJsaXNoZWRcbl07XG52YXIgYWxsUmVtb3RlUGFydGljaXBhbnRFdmVudHMgPSBbXG4gIFBhcnRpY2lwYW50RXZlbnQuQ29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkLFxuICBQYXJ0aWNpcGFudEV2ZW50LklzU3BlYWtpbmdDaGFuZ2VkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlBhcnRpY2lwYW50TWV0YWRhdGFDaGFuZ2VkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlBhcnRpY2lwYW50UGVybWlzc2lvbnNDaGFuZ2VkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlRyYWNrTXV0ZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuVHJhY2tVbm11dGVkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlRyYWNrUHVibGlzaGVkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlRyYWNrVW5wdWJsaXNoZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuVHJhY2tTdHJlYW1TdGF0ZUNoYW5nZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuVHJhY2tTdWJzY3JpcHRpb25GYWlsZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuVHJhY2tTdWJzY3JpcHRpb25QZXJtaXNzaW9uQ2hhbmdlZCxcbiAgUGFydGljaXBhbnRFdmVudC5UcmFja1N1YnNjcmlwdGlvblN0YXR1c0NoYW5nZWRcbl07XG52YXIgYWxsUGFydGljaXBhbnRFdmVudHMgPSBbXG4gIC4uLmFsbFJlbW90ZVBhcnRpY2lwYW50RXZlbnRzLFxuICBQYXJ0aWNpcGFudEV2ZW50LkxvY2FsVHJhY2tQdWJsaXNoZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuTG9jYWxUcmFja1VucHVibGlzaGVkXG5dO1xuXG4vLyBzcmMvbG9nZ2VyLnRzXG5pbXBvcnQgeyBzZXRMb2dMZXZlbCBhcyBzZXRDbGllbnRTZGtMb2dMZXZlbCB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuaW1wb3J0IGxvZ2xldmVsIGZyb20gXCJsb2dsZXZlbFwiO1xudmFyIGxvZyA9IGxvZ2xldmVsLmdldExvZ2dlcihcImxrLWNvbXBvbmVudHMtanNcIik7XG5sb2cuc2V0RGVmYXVsdExldmVsKFwiV0FSTlwiKTtcbmZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsLCBvcHRpb25zID0ge30pIHtcbiAgdmFyIF9hO1xuICBsb2cuc2V0TGV2ZWwobGV2ZWwpO1xuICBzZXRDbGllbnRTZGtMb2dMZXZlbCgoX2EgPSBvcHRpb25zLmxpdmVLaXRDbGllbnRMb2dMZXZlbCkgIT0gbnVsbCA/IF9hIDogbGV2ZWwpO1xufVxuXG4vLyBzcmMvaGVscGVyL2dyaWQtbGF5b3V0cy50c1xudmFyIEdSSURfTEFZT1VUUyA9IFtcbiAge1xuICAgIGNvbHVtbnM6IDEsXG4gICAgcm93czogMSxcbiAgICBuYW1lOiBcIjF4MVwiLFxuICAgIG1pblRpbGVzOiAxLFxuICAgIG1heFRpbGVzOiAxLFxuICAgIG1pbldpZHRoOiAwLFxuICAgIG1pbkhlaWdodDogMFxuICB9LFxuICB7XG4gICAgY29sdW1uczogMSxcbiAgICByb3dzOiAyLFxuICAgIG5hbWU6IFwiMXgyXCIsXG4gICAgbWluVGlsZXM6IDIsXG4gICAgbWF4VGlsZXM6IDIsXG4gICAgbWluV2lkdGg6IDAsXG4gICAgbWluSGVpZ2h0OiAwXG4gIH0sXG4gIHtcbiAgICBjb2x1bW5zOiAyLFxuICAgIHJvd3M6IDEsXG4gICAgbmFtZTogXCIyeDFcIixcbiAgICBtaW5UaWxlczogMixcbiAgICBtYXhUaWxlczogMixcbiAgICBtaW5XaWR0aDogOTAwLFxuICAgIG1pbkhlaWdodDogMFxuICB9LFxuICB7XG4gICAgY29sdW1uczogMixcbiAgICByb3dzOiAyLFxuICAgIG5hbWU6IFwiMngyXCIsXG4gICAgbWluVGlsZXM6IDMsXG4gICAgbWF4VGlsZXM6IDQsXG4gICAgbWluV2lkdGg6IDU2MCxcbiAgICBtaW5IZWlnaHQ6IDBcbiAgfSxcbiAge1xuICAgIGNvbHVtbnM6IDMsXG4gICAgcm93czogMyxcbiAgICBuYW1lOiBcIjN4M1wiLFxuICAgIG1pblRpbGVzOiA1LFxuICAgIG1heFRpbGVzOiA5LFxuICAgIG1pbldpZHRoOiA3MDAsXG4gICAgbWluSGVpZ2h0OiAwXG4gIH0sXG4gIHtcbiAgICBjb2x1bW5zOiA0LFxuICAgIHJvd3M6IDQsXG4gICAgbmFtZTogXCI0eDRcIixcbiAgICBtaW5UaWxlczogMTAsXG4gICAgbWF4VGlsZXM6IDE2LFxuICAgIG1pbldpZHRoOiA5NjAsXG4gICAgbWluSGVpZ2h0OiAwXG4gIH0sXG4gIHtcbiAgICBjb2x1bW5zOiA1LFxuICAgIHJvd3M6IDUsXG4gICAgbmFtZTogXCI1eDVcIixcbiAgICBtaW5UaWxlczogMTcsXG4gICAgbWF4VGlsZXM6IDI1LFxuICAgIG1pbldpZHRoOiAxMTAwLFxuICAgIG1pbkhlaWdodDogMFxuICB9XG5dO1xuZnVuY3Rpb24gc2VsZWN0R3JpZExheW91dChsYXlvdXRzLCBwYXJ0aWNpcGFudENvdW50LCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGxldCBjdXJyZW50TGF5b3V0SW5kZXggPSAwO1xuICBsZXQgbGF5b3V0ID0gbGF5b3V0cy5maW5kKChsYXlvdXRfLCBpbmRleCwgYWxsTGF5b3V0cykgPT4ge1xuICAgIGN1cnJlbnRMYXlvdXRJbmRleCA9IGluZGV4O1xuICAgIGNvbnN0IGlzQmlnZ2VyTGF5b3V0QXZhaWxhYmxlID0gYWxsTGF5b3V0cy5maW5kSW5kZXgoKGwsIGkpID0+IHtcbiAgICAgIGNvbnN0IGxheW91dElzQmlnZ2VyVGhhbkN1cnJlbnQgPSBpID4gaW5kZXg7XG4gICAgICBjb25zdCBsYXlvdXRGaXRzU2FtZUFtb3VudE9mUGFydGljaXBhbnRzID0gbC5tYXhUaWxlcyA9PT0gbGF5b3V0Xy5tYXhUaWxlcztcbiAgICAgIHJldHVybiBsYXlvdXRJc0JpZ2dlclRoYW5DdXJyZW50ICYmIGxheW91dEZpdHNTYW1lQW1vdW50T2ZQYXJ0aWNpcGFudHM7XG4gICAgfSkgIT09IC0xO1xuICAgIHJldHVybiBsYXlvdXRfLm1heFRpbGVzID49IHBhcnRpY2lwYW50Q291bnQgJiYgIWlzQmlnZ2VyTGF5b3V0QXZhaWxhYmxlO1xuICB9KTtcbiAgaWYgKGxheW91dCA9PT0gdm9pZCAwKSB7XG4gICAgbGF5b3V0ID0gbGF5b3V0c1tsYXlvdXRzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXlvdXQpIHtcbiAgICAgIGxvZy53YXJuKFxuICAgICAgICBgTm8gbGF5b3V0IGZvdW5kIGZvcjogcGFydGljaXBhbnRDb3VudDogJHtwYXJ0aWNpcGFudENvdW50fSwgd2lkdGgvaGVpZ2h0OiAke3dpZHRofS8ke2hlaWdodH0gZmFsbGJhY2sgdG8gYmlnZ2VzdCBhdmFpbGFibGUgbGF5b3V0ICgke2xheW91dC5uYW1lfSkuYFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBsYXlvdXQgb3IgZmFsbGJhY2sgbGF5b3V0IGZvdW5kLmApO1xuICAgIH1cbiAgfVxuICBpZiAod2lkdGggPCBsYXlvdXQubWluV2lkdGggfHwgaGVpZ2h0IDwgbGF5b3V0Lm1pbkhlaWdodCkge1xuICAgIGlmIChjdXJyZW50TGF5b3V0SW5kZXggPiAwKSB7XG4gICAgICBjb25zdCBzbWFsbGVyTGF5b3V0ID0gbGF5b3V0c1tjdXJyZW50TGF5b3V0SW5kZXggLSAxXTtcbiAgICAgIGxheW91dCA9IHNlbGVjdEdyaWRMYXlvdXQoXG4gICAgICAgIGxheW91dHMuc2xpY2UoMCwgY3VycmVudExheW91dEluZGV4KSxcbiAgICAgICAgc21hbGxlckxheW91dC5tYXhUaWxlcyxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxheW91dDtcbn1cblxuLy8gc3JjL2hlbHBlci9zZXQtaGVscGVyLnRzXG5mdW5jdGlvbiBzZXREaWZmZXJlbmNlKHNldEEsIHNldEIpIHtcbiAgY29uc3QgX2RpZmZlcmVuY2UgPSBuZXcgU2V0KHNldEEpO1xuICBmb3IgKGNvbnN0IGVsZW0gb2Ygc2V0Qikge1xuICAgIF9kaWZmZXJlbmNlLmRlbGV0ZShlbGVtKTtcbiAgfVxuICByZXR1cm4gX2RpZmZlcmVuY2U7XG59XG5cbi8vIHNyYy9oZWxwZXIvZmVhdHVyZURldGVjdGlvbi50c1xuZnVuY3Rpb24gc3VwcG9ydHNTY3JlZW5TaGFyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmICEhbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWE7XG59XG5cbi8vIHNyYy90eXBlcy50c1xudmFyIFBJTl9ERUZBVUxUX1NUQVRFID0gW107XG52YXIgV0lER0VUX0RFRkFVTFRfU1RBVEUgPSB7IHNob3dDaGF0OiBmYWxzZSwgdW5yZWFkTWVzc2FnZXM6IDAgfTtcbmZ1bmN0aW9uIGlzU291cmNlV2l0T3B0aW9ucyhzb3VyY2UpIHtcbiAgcmV0dXJuIHR5cGVvZiBzb3VyY2UgPT09IFwib2JqZWN0XCI7XG59XG5mdW5jdGlvbiBpc1NvdXJjZXNXaXRoT3B0aW9ucyhzb3VyY2VzKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHNvdXJjZXMpICYmIHNvdXJjZXMuZmlsdGVyKGlzU291cmNlV2l0T3B0aW9ucykubGVuZ3RoID4gMDtcbn1cblxuLy8gc3JjL3NvcnRpbmcvc29ydC10cmFjay1idW5kbGVzLnRzXG5pbXBvcnQgeyBUcmFjayBhcyBUcmFjazIgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcblxuLy8gc3JjL3NvcnRpbmcvYmFzZS1zb3J0LWZ1bmN0aW9ucy50c1xuaW1wb3J0IHsgVHJhY2sgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmZ1bmN0aW9uIHNvcnRQYXJ0aWNpcGFudHNCeUF1ZGlvTGV2ZWwoYSwgYikge1xuICByZXR1cm4gYi5hdWRpb0xldmVsIC0gYS5hdWRpb0xldmVsO1xufVxuZnVuY3Rpb24gc29ydFBhcnRpY2lwYW50c0J5SXNTcGVha2luZyhhLCBiKSB7XG4gIGlmIChhLmlzU3BlYWtpbmcgPT09IGIuaXNTcGVha2luZykge1xuICAgIHJldHVybiAwO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhLmlzU3BlYWtpbmcgPyAtMSA6IDE7XG4gIH1cbn1cbmZ1bmN0aW9uIHNvcnRQYXJ0aWNpcGFudHNCeUxhc3RTcG9rZW5BVChhLCBiKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgaWYgKGEubGFzdFNwb2tlQXQgIT09IHZvaWQgMCB8fCBiLmxhc3RTcG9rZUF0ICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4gKChfYiA9IChfYSA9IGIubGFzdFNwb2tlQXQpID09IG51bGwgPyB2b2lkIDAgOiBfYS5nZXRUaW1lKCkpICE9IG51bGwgPyBfYiA6IDApIC0gKChfZCA9IChfYyA9IGEubGFzdFNwb2tlQXQpID09IG51bGwgPyB2b2lkIDAgOiBfYy5nZXRUaW1lKCkpICE9IG51bGwgPyBfZCA6IDApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5mdW5jdGlvbiBzb3J0UGFydGljaXBhbnRzQnlKb2luZWRBdChhLCBiKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgcmV0dXJuICgoX2IgPSAoX2EgPSBhLmpvaW5lZEF0KSA9PSBudWxsID8gdm9pZCAwIDogX2EuZ2V0VGltZSgpKSAhPSBudWxsID8gX2IgOiAwKSAtICgoX2QgPSAoX2MgPSBiLmpvaW5lZEF0KSA9PSBudWxsID8gdm9pZCAwIDogX2MuZ2V0VGltZSgpKSAhPSBudWxsID8gX2QgOiAwKTtcbn1cbmZ1bmN0aW9uIHNvcnRUcmFja1JlZmVyZW5jZXNCeVR5cGUoYSwgYikge1xuICBpZiAoaXNUcmFja1JlZmVyZW5jZShhKSkge1xuICAgIGlmIChpc1RyYWNrUmVmZXJlbmNlKGIpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1RyYWNrUmVmZXJlbmNlKGIpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cbmZ1bmN0aW9uIHNvcnRUcmFja1JlZnNCeUlzQ2FtZXJhRW5hYmxlZChhLCBiKSB7XG4gIGNvbnN0IGFWaWRlbyA9IGEucGFydGljaXBhbnQuaXNDYW1lcmFFbmFibGVkO1xuICBjb25zdCBiVmlkZW8gPSBiLnBhcnRpY2lwYW50LmlzQ2FtZXJhRW5hYmxlZDtcbiAgaWYgKGFWaWRlbyAhPT0gYlZpZGVvKSB7XG4gICAgaWYgKGFWaWRlbykge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuLy8gc3JjL3NvcnRpbmcvc29ydC10cmFjay1idW5kbGVzLnRzXG5mdW5jdGlvbiBzb3J0VHJhY2tSZWZlcmVuY2VzKHRyYWNrcykge1xuICBjb25zdCBsb2NhbFRyYWNrcyA9IFtdO1xuICBjb25zdCBzY3JlZW5TaGFyZVRyYWNrcyA9IFtdO1xuICBjb25zdCBjYW1lcmFUcmFja3MgPSBbXTtcbiAgY29uc3QgdW5kZWZpbmVkVHJhY2tzID0gW107XG4gIHRyYWNrcy5mb3JFYWNoKCh0cmFja1JlZikgPT4ge1xuICAgIGlmICh0cmFja1JlZi5wYXJ0aWNpcGFudC5pc0xvY2FsICYmIHRyYWNrUmVmLnNvdXJjZSA9PT0gVHJhY2syLlNvdXJjZS5DYW1lcmEpIHtcbiAgICAgIGxvY2FsVHJhY2tzLnB1c2godHJhY2tSZWYpO1xuICAgIH0gZWxzZSBpZiAodHJhY2tSZWYuc291cmNlID09PSBUcmFjazIuU291cmNlLlNjcmVlblNoYXJlKSB7XG4gICAgICBzY3JlZW5TaGFyZVRyYWNrcy5wdXNoKHRyYWNrUmVmKTtcbiAgICB9IGVsc2UgaWYgKHRyYWNrUmVmLnNvdXJjZSA9PT0gVHJhY2syLlNvdXJjZS5DYW1lcmEpIHtcbiAgICAgIGNhbWVyYVRyYWNrcy5wdXNoKHRyYWNrUmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdW5kZWZpbmVkVHJhY2tzLnB1c2godHJhY2tSZWYpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHNvcnRlZFNjcmVlblNoYXJlVHJhY2tzID0gc29ydFNjcmVlblNoYXJlVHJhY2tzKHNjcmVlblNoYXJlVHJhY2tzKTtcbiAgY29uc3Qgc29ydGVkQ2FtZXJhVHJhY2tzID0gc29ydENhbWVyYVRyYWNrcyhjYW1lcmFUcmFja3MpO1xuICByZXR1cm4gWy4uLmxvY2FsVHJhY2tzLCAuLi5zb3J0ZWRTY3JlZW5TaGFyZVRyYWNrcywgLi4uc29ydGVkQ2FtZXJhVHJhY2tzLCAuLi51bmRlZmluZWRUcmFja3NdO1xufVxuZnVuY3Rpb24gc29ydFNjcmVlblNoYXJlVHJhY2tzKHNjcmVlblNoYXJlVHJhY2tzKSB7XG4gIGNvbnN0IGxvY2FsU2NyZWVuU2hhcmVzID0gW107XG4gIGNvbnN0IHJlbW90ZVNjcmVlblNoYXJlcyA9IFtdO1xuICBzY3JlZW5TaGFyZVRyYWNrcy5mb3JFYWNoKCh0cmFja1JlZikgPT4ge1xuICAgIGlmICh0cmFja1JlZi5wYXJ0aWNpcGFudC5pc0xvY2FsKSB7XG4gICAgICBsb2NhbFNjcmVlblNoYXJlcy5wdXNoKHRyYWNrUmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3RlU2NyZWVuU2hhcmVzLnB1c2godHJhY2tSZWYpO1xuICAgIH1cbiAgfSk7XG4gIGxvY2FsU2NyZWVuU2hhcmVzLnNvcnQoKGEsIGIpID0+IHNvcnRQYXJ0aWNpcGFudHNCeUpvaW5lZEF0KGEucGFydGljaXBhbnQsIGIucGFydGljaXBhbnQpKTtcbiAgcmVtb3RlU2NyZWVuU2hhcmVzLnNvcnQoKGEsIGIpID0+IHNvcnRQYXJ0aWNpcGFudHNCeUpvaW5lZEF0KGEucGFydGljaXBhbnQsIGIucGFydGljaXBhbnQpKTtcbiAgY29uc3Qgc29ydGVkU2NyZWVuU2hhcmVUcmFja1JlZnMgPSBbLi4ucmVtb3RlU2NyZWVuU2hhcmVzLCAuLi5sb2NhbFNjcmVlblNoYXJlc107XG4gIHJldHVybiBzb3J0ZWRTY3JlZW5TaGFyZVRyYWNrUmVmcztcbn1cbmZ1bmN0aW9uIHNvcnRDYW1lcmFUcmFja3MoY2FtZXJhVHJhY2tSZWZlcmVuY2VzKSB7XG4gIGNvbnN0IGxvY2FsQ2FtZXJhVHJhY2tzID0gW107XG4gIGNvbnN0IHJlbW90ZUNhbWVyYVRyYWNrcyA9IFtdO1xuICBjYW1lcmFUcmFja1JlZmVyZW5jZXMuZm9yRWFjaCgodHJhY2tSZWYpID0+IHtcbiAgICBpZiAodHJhY2tSZWYucGFydGljaXBhbnQuaXNMb2NhbCkge1xuICAgICAgbG9jYWxDYW1lcmFUcmFja3MucHVzaCh0cmFja1JlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW90ZUNhbWVyYVRyYWNrcy5wdXNoKHRyYWNrUmVmKTtcbiAgICB9XG4gIH0pO1xuICByZW1vdGVDYW1lcmFUcmFja3Muc29ydCgoYSwgYikgPT4ge1xuICAgIGlmIChhLnBhcnRpY2lwYW50LmlzU3BlYWtpbmcgJiYgYi5wYXJ0aWNpcGFudC5pc1NwZWFraW5nKSB7XG4gICAgICByZXR1cm4gc29ydFBhcnRpY2lwYW50c0J5QXVkaW9MZXZlbChhLnBhcnRpY2lwYW50LCBiLnBhcnRpY2lwYW50KTtcbiAgICB9XG4gICAgaWYgKGEucGFydGljaXBhbnQuaXNTcGVha2luZyAhPT0gYi5wYXJ0aWNpcGFudC5pc1NwZWFraW5nKSB7XG4gICAgICByZXR1cm4gc29ydFBhcnRpY2lwYW50c0J5SXNTcGVha2luZyhhLnBhcnRpY2lwYW50LCBiLnBhcnRpY2lwYW50KTtcbiAgICB9XG4gICAgaWYgKGEucGFydGljaXBhbnQubGFzdFNwb2tlQXQgIT09IGIucGFydGljaXBhbnQubGFzdFNwb2tlQXQpIHtcbiAgICAgIHJldHVybiBzb3J0UGFydGljaXBhbnRzQnlMYXN0U3Bva2VuQVQoYS5wYXJ0aWNpcGFudCwgYi5wYXJ0aWNpcGFudCk7XG4gICAgfVxuICAgIGlmIChpc1RyYWNrUmVmZXJlbmNlKGEpICE9PSBpc1RyYWNrUmVmZXJlbmNlKGIpKSB7XG4gICAgICByZXR1cm4gc29ydFRyYWNrUmVmZXJlbmNlc0J5VHlwZShhLCBiKTtcbiAgICB9XG4gICAgaWYgKGEucGFydGljaXBhbnQuaXNDYW1lcmFFbmFibGVkICE9PSBiLnBhcnRpY2lwYW50LmlzQ2FtZXJhRW5hYmxlZCkge1xuICAgICAgcmV0dXJuIHNvcnRUcmFja1JlZnNCeUlzQ2FtZXJhRW5hYmxlZChhLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvcnRQYXJ0aWNpcGFudHNCeUpvaW5lZEF0KGEucGFydGljaXBhbnQsIGIucGFydGljaXBhbnQpO1xuICB9KTtcbiAgcmV0dXJuIFsuLi5sb2NhbENhbWVyYVRyYWNrcywgLi4ucmVtb3RlQ2FtZXJhVHJhY2tzXTtcbn1cblxuLy8gc3JjL3NvcnRpbmcvc29ydC1wYXJ0aWNpcGFudHMudHNcbmltcG9ydCB7IExvY2FsUGFydGljaXBhbnQgYXMgTG9jYWxQYXJ0aWNpcGFudDIgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmZ1bmN0aW9uIHNvcnRQYXJ0aWNpcGFudHMocGFydGljaXBhbnRzKSB7XG4gIGNvbnN0IHNvcnRlZFBhcnRpY2lwYW50cyA9IFsuLi5wYXJ0aWNpcGFudHNdO1xuICBzb3J0ZWRQYXJ0aWNpcGFudHMuc29ydCgoYSwgYikgPT4ge1xuICAgIGlmIChhLmlzU3BlYWtpbmcgJiYgYi5pc1NwZWFraW5nKSB7XG4gICAgICByZXR1cm4gc29ydFBhcnRpY2lwYW50c0J5QXVkaW9MZXZlbChhLCBiKTtcbiAgICB9XG4gICAgaWYgKGEuaXNTcGVha2luZyAhPT0gYi5pc1NwZWFraW5nKSB7XG4gICAgICByZXR1cm4gc29ydFBhcnRpY2lwYW50c0J5SXNTcGVha2luZyhhLCBiKTtcbiAgICB9XG4gICAgaWYgKGEubGFzdFNwb2tlQXQgIT09IGIubGFzdFNwb2tlQXQpIHtcbiAgICAgIHJldHVybiBzb3J0UGFydGljaXBhbnRzQnlMYXN0U3Bva2VuQVQoYSwgYik7XG4gICAgfVxuICAgIGNvbnN0IGFWaWRlbyA9IGEudmlkZW9UcmFja3Muc2l6ZSA+IDA7XG4gICAgY29uc3QgYlZpZGVvID0gYi52aWRlb1RyYWNrcy5zaXplID4gMDtcbiAgICBpZiAoYVZpZGVvICE9PSBiVmlkZW8pIHtcbiAgICAgIGlmIChhVmlkZW8pIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzb3J0UGFydGljaXBhbnRzQnlKb2luZWRBdChhLCBiKTtcbiAgfSk7XG4gIGNvbnN0IGxvY2FsUGFydGljaXBhbnQgPSBzb3J0ZWRQYXJ0aWNpcGFudHMuZmluZCgocCkgPT4gcCBpbnN0YW5jZW9mIExvY2FsUGFydGljaXBhbnQyKTtcbiAgaWYgKGxvY2FsUGFydGljaXBhbnQpIHtcbiAgICBjb25zdCBsb2NhbElkeCA9IHNvcnRlZFBhcnRpY2lwYW50cy5pbmRleE9mKGxvY2FsUGFydGljaXBhbnQpO1xuICAgIGlmIChsb2NhbElkeCA+PSAwKSB7XG4gICAgICBzb3J0ZWRQYXJ0aWNpcGFudHMuc3BsaWNlKGxvY2FsSWR4LCAxKTtcbiAgICAgIGlmIChzb3J0ZWRQYXJ0aWNpcGFudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBzb3J0ZWRQYXJ0aWNpcGFudHMuc3BsaWNlKDAsIDAsIGxvY2FsUGFydGljaXBhbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc29ydGVkUGFydGljaXBhbnRzLnB1c2gobG9jYWxQYXJ0aWNpcGFudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBzb3J0ZWRQYXJ0aWNpcGFudHM7XG59XG5cbi8vIHNyYy9oZWxwZXIvYXJyYXktaGVscGVyLnRzXG5mdW5jdGlvbiBjaHVuayhpbnB1dCwgc2l6ZSkge1xuICByZXR1cm4gaW5wdXQucmVkdWNlKChhcnIsIGl0ZW0sIGlkeCkgPT4ge1xuICAgIHJldHVybiBpZHggJSBzaXplID09PSAwID8gWy4uLmFyciwgW2l0ZW1dXSA6IFsuLi5hcnIuc2xpY2UoMCwgLTEpLCBbLi4uYXJyLnNsaWNlKC0xKVswXSwgaXRlbV1dO1xuICB9LCBbXSk7XG59XG5mdW5jdGlvbiB6aXAoYTEsIGEyKSB7XG4gIGNvbnN0IHJlc3VsdExlbmd0aCA9IE1hdGgubWF4KGExLmxlbmd0aCwgYTIubGVuZ3RoKTtcbiAgcmV0dXJuIG5ldyBBcnJheShyZXN1bHRMZW5ndGgpLmZpbGwoW10pLm1hcCgoX3ZhbCwgaWR4KSA9PiBbYTFbaWR4XSwgYTJbaWR4XV0pO1xufVxuZnVuY3Rpb24gZGlmZmVyZW5jZUJ5KGExLCBhMiwgYnkpIHtcbiAgcmV0dXJuIGExLmZpbHRlcigoYykgPT4gIWEyLm1hcCgodikgPT4gYnkodikpLmluY2x1ZGVzKGJ5KGMpKSk7XG59XG5cbi8vIHNyYy90cmFjay1yZWZlcmVuY2UvdGVzdC11dGlscy50c1xuaW1wb3J0IHsgUGFydGljaXBhbnQsIFRyYWNrIGFzIFRyYWNrMywgVHJhY2tQdWJsaWNhdGlvbiB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuZnVuY3Rpb24gZmxhdFRyYWNrUmVmZXJlbmNlQXJyYXkobGlzdCkge1xuICByZXR1cm4gbGlzdC5tYXAoKGl0ZW0pID0+IHtcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGl0ZW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiBgJHtpdGVtfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBnZXRUcmFja1JlZmVyZW5jZUlkKGl0ZW0pO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIHNyYy9zb3J0aW5nL3RpbGUtYXJyYXktdXBkYXRlLnRzXG5mdW5jdGlvbiB2aXN1YWxQYWdlQ2hhbmdlKHN0YXRlLCBuZXh0KSB7XG4gIHJldHVybiB7XG4gICAgZHJvcHBlZDogZGlmZmVyZW5jZUJ5KHN0YXRlLCBuZXh0LCBnZXRUcmFja1JlZmVyZW5jZUlkKSxcbiAgICBhZGRlZDogZGlmZmVyZW5jZUJ5KG5leHQsIHN0YXRlLCBnZXRUcmFja1JlZmVyZW5jZUlkKVxuICB9O1xufVxuZnVuY3Rpb24gbGlzdE5lZWRzVXBkYXRpbmcoY2hhbmdlcykge1xuICByZXR1cm4gY2hhbmdlcy5hZGRlZC5sZW5ndGggIT09IDAgfHwgY2hhbmdlcy5kcm9wcGVkLmxlbmd0aCAhPT0gMDtcbn1cbmZ1bmN0aW9uIGZpbmRJbmRleCh0cmFja1JlZmVyZW5jZSwgdHJhY2tSZWZlcmVuY2VzKSB7XG4gIGNvbnN0IGluZGV4VG9SZXBsYWNlID0gdHJhY2tSZWZlcmVuY2VzLmZpbmRJbmRleChcbiAgICAodHJhY2tSZWZlcmVuY2VfKSA9PiBnZXRUcmFja1JlZmVyZW5jZUlkKHRyYWNrUmVmZXJlbmNlXykgPT09IGdldFRyYWNrUmVmZXJlbmNlSWQodHJhY2tSZWZlcmVuY2UpXG4gICk7XG4gIGlmIChpbmRleFRvUmVwbGFjZSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRWxlbWVudCBub3QgcGFydCBvZiB0aGUgYXJyYXk6ICR7Z2V0VHJhY2tSZWZlcmVuY2VJZChcbiAgICAgICAgdHJhY2tSZWZlcmVuY2VcbiAgICAgICl9IG5vdCBpbiAke2ZsYXRUcmFja1JlZmVyZW5jZUFycmF5KHRyYWNrUmVmZXJlbmNlcyl9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGluZGV4VG9SZXBsYWNlO1xufVxuZnVuY3Rpb24gc3dhcEl0ZW1zKG1vdmVGb3J3YXJkLCBtb3ZlQmFjaywgdHJhY2tSZWZlcmVuY2VzKSB7XG4gIGNvbnN0IGluZGV4VG9SZXBsYWNlID0gZmluZEluZGV4KG1vdmVGb3J3YXJkLCB0cmFja1JlZmVyZW5jZXMpO1xuICBjb25zdCBpbmRleFJlcGxhY2VXaXRoID0gZmluZEluZGV4KG1vdmVCYWNrLCB0cmFja1JlZmVyZW5jZXMpO1xuICB0cmFja1JlZmVyZW5jZXMuc3BsaWNlKGluZGV4VG9SZXBsYWNlLCAxLCBtb3ZlQmFjayk7XG4gIHRyYWNrUmVmZXJlbmNlcy5zcGxpY2UoaW5kZXhSZXBsYWNlV2l0aCwgMSwgbW92ZUZvcndhcmQpO1xuICByZXR1cm4gdHJhY2tSZWZlcmVuY2VzO1xufVxuZnVuY3Rpb24gZHJvcEl0ZW0oaXRlbVRvRHJvcCwgbGlzdCkge1xuICBjb25zdCBpbmRleE9mRWxlbWVudFRvRHJvcCA9IGZpbmRJbmRleChpdGVtVG9Ecm9wLCBsaXN0KTtcbiAgbGlzdC5zcGxpY2UoaW5kZXhPZkVsZW1lbnRUb0Ryb3AsIDEpO1xuICByZXR1cm4gbGlzdDtcbn1cbmZ1bmN0aW9uIGFkZEl0ZW0oaXRlbVRvQWRkLCBsaXN0KSB7XG4gIHJldHVybiBbLi4ubGlzdCwgaXRlbVRvQWRkXTtcbn1cbmZ1bmN0aW9uIGRpdmlkZUludG9QYWdlcyhsaXN0LCBtYXhFbGVtZW50c09uUGFnZSkge1xuICBjb25zdCBwYWdlcyA9IGNodW5rKGxpc3QsIG1heEVsZW1lbnRzT25QYWdlKTtcbiAgcmV0dXJuIHBhZ2VzO1xufVxuZnVuY3Rpb24gdXBkYXRlUGFnZXMoY3VycmVudExpc3QsIG5leHRMaXN0LCBtYXhJdGVtc09uUGFnZSkge1xuICBsZXQgdXBkYXRlZExpc3QgPSByZWZyZXNoTGlzdChjdXJyZW50TGlzdCwgbmV4dExpc3QpO1xuICBpZiAodXBkYXRlZExpc3QubGVuZ3RoIDwgbmV4dExpc3QubGVuZ3RoKSB7XG4gICAgY29uc3QgYWRkZWRJdGVtcyA9IGRpZmZlcmVuY2VCeShuZXh0TGlzdCwgdXBkYXRlZExpc3QsIGdldFRyYWNrUmVmZXJlbmNlSWQpO1xuICAgIHVwZGF0ZWRMaXN0ID0gWy4uLnVwZGF0ZWRMaXN0LCAuLi5hZGRlZEl0ZW1zXTtcbiAgfVxuICBjb25zdCBjdXJyZW50UGFnZXMgPSBkaXZpZGVJbnRvUGFnZXModXBkYXRlZExpc3QsIG1heEl0ZW1zT25QYWdlKTtcbiAgY29uc3QgbmV4dFBhZ2VzID0gZGl2aWRlSW50b1BhZ2VzKG5leHRMaXN0LCBtYXhJdGVtc09uUGFnZSk7XG4gIHppcChjdXJyZW50UGFnZXMsIG5leHRQYWdlcykuZm9yRWFjaCgoW2N1cnJlbnRQYWdlLCBuZXh0UGFnZV0sIHBhZ2VJbmRleCkgPT4ge1xuICAgIGlmIChjdXJyZW50UGFnZSAmJiBuZXh0UGFnZSkge1xuICAgICAgY29uc3QgdXBkYXRlZFBhZ2UgPSBkaXZpZGVJbnRvUGFnZXModXBkYXRlZExpc3QsIG1heEl0ZW1zT25QYWdlKVtwYWdlSW5kZXhdO1xuICAgICAgY29uc3QgY2hhbmdlcyA9IHZpc3VhbFBhZ2VDaGFuZ2UodXBkYXRlZFBhZ2UsIG5leHRQYWdlKTtcbiAgICAgIGlmIChsaXN0TmVlZHNVcGRhdGluZyhjaGFuZ2VzKSkge1xuICAgICAgICBsb2cuZGVidWcoXG4gICAgICAgICAgYERldGVjdGVkIHZpc3VhbCBjaGFuZ2VzIG9uIHBhZ2U6ICR7cGFnZUluZGV4fSwgY3VycmVudDogJHtmbGF0VHJhY2tSZWZlcmVuY2VBcnJheShcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlXG4gICAgICAgICAgKX0sIG5leHQ6ICR7ZmxhdFRyYWNrUmVmZXJlbmNlQXJyYXkobmV4dFBhZ2UpfWAsXG4gICAgICAgICAgeyBjaGFuZ2VzIH1cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGNoYW5nZXMuYWRkZWQubGVuZ3RoID09PSBjaGFuZ2VzLmRyb3BwZWQubGVuZ3RoKSB7XG4gICAgICAgICAgemlwKGNoYW5nZXMuYWRkZWQsIGNoYW5nZXMuZHJvcHBlZCkuZm9yRWFjaCgoW2FkZGVkLCBkcm9wcGVkXSkgPT4ge1xuICAgICAgICAgICAgaWYgKGFkZGVkICYmIGRyb3BwZWQpIHtcbiAgICAgICAgICAgICAgdXBkYXRlZExpc3QgPSBzd2FwSXRlbXMoYWRkZWQsIGRyb3BwZWQsIHVwZGF0ZWRMaXN0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBgRm9yIGEgc3dhcCBhY3Rpb24gd2UgbmVlZCBhIGFkZGl0aW9uIGFuZCBhIHJlbW92YWwgb25lIGlzIG1pc3Npbmc6ICR7YWRkZWR9LCAke2Ryb3BwZWR9YFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFuZ2VzLmFkZGVkLmxlbmd0aCA9PT0gMCAmJiBjaGFuZ2VzLmRyb3BwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNoYW5nZXMuZHJvcHBlZC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICB1cGRhdGVkTGlzdCA9IGRyb3BJdGVtKGl0ZW0sIHVwZGF0ZWRMaXN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbmdlcy5hZGRlZC5sZW5ndGggPiAwICYmIGNoYW5nZXMuZHJvcHBlZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBjaGFuZ2VzLmFkZGVkLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIHVwZGF0ZWRMaXN0ID0gYWRkSXRlbShpdGVtLCB1cGRhdGVkTGlzdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBpZiAodXBkYXRlZExpc3QubGVuZ3RoID4gbmV4dExpc3QubGVuZ3RoKSB7XG4gICAgY29uc3QgbWlzc2luZ0l0ZW1zID0gZGlmZmVyZW5jZUJ5KHVwZGF0ZWRMaXN0LCBuZXh0TGlzdCwgZ2V0VHJhY2tSZWZlcmVuY2VJZCk7XG4gICAgdXBkYXRlZExpc3QgPSB1cGRhdGVkTGlzdC5maWx0ZXIoXG4gICAgICAoaXRlbSkgPT4gIW1pc3NpbmdJdGVtcy5tYXAoZ2V0VHJhY2tSZWZlcmVuY2VJZCkuaW5jbHVkZXMoZ2V0VHJhY2tSZWZlcmVuY2VJZChpdGVtKSlcbiAgICApO1xuICB9XG4gIHJldHVybiB1cGRhdGVkTGlzdDtcbn1cbmZ1bmN0aW9uIHJlZnJlc2hMaXN0KGN1cnJlbnRMaXN0LCBuZXh0TGlzdCkge1xuICByZXR1cm4gY3VycmVudExpc3QubWFwKChjdXJyZW50SXRlbSkgPT4ge1xuICAgIGNvbnN0IHVwZGF0ZUZvckN1cnJlbnRJdGVtID0gbmV4dExpc3QuZmluZChcbiAgICAgIChuZXdJdGVtXykgPT4gKFxuICAgICAgICAvLyBJZiB0aGUgSURzIG1hdGNoIG9yIC4uXG4gICAgICAgIGdldFRyYWNrUmVmZXJlbmNlSWQoY3VycmVudEl0ZW0pID09PSBnZXRUcmFja1JlZmVyZW5jZUlkKG5ld0l0ZW1fKSB8fCAvLyAuLi4gaWYgdGhlIGN1cnJlbnQgaXRlbSBpcyBhIHBsYWNlaG9sZGVyIGFuZCB0aGUgbmV3IGl0ZW0gaXMgdGhlIHRyYWNrIHJlZmVyZW5jZSBjYW4gcmVwbGFjZSBpdC5cbiAgICAgICAgdHlwZW9mIGN1cnJlbnRJdGVtICE9PSBcIm51bWJlclwiICYmIGlzVHJhY2tSZWZlcmVuY2VQbGFjZWhvbGRlcihjdXJyZW50SXRlbSkgJiYgaXNUcmFja1JlZmVyZW5jZShuZXdJdGVtXykgJiYgaXNQbGFjZWhvbGRlclJlcGxhY2VtZW50KGN1cnJlbnRJdGVtLCBuZXdJdGVtXylcbiAgICAgIClcbiAgICApO1xuICAgIHJldHVybiB1cGRhdGVGb3JDdXJyZW50SXRlbSAhPSBudWxsID8gdXBkYXRlRm9yQ3VycmVudEl0ZW0gOiBjdXJyZW50SXRlbTtcbiAgfSk7XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL21lZGlhVG9nZ2xlLnRzXG5pbXBvcnQgeyBUcmFjayBhcyBUcmFjazcgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmltcG9ydCB7IFN1YmplY3QgYXMgU3ViamVjdDIsIG1hcCBhcyBtYXA0LCBzdGFydFdpdGggYXMgc3RhcnRXaXRoNCB9IGZyb20gXCJyeGpzXCI7XG5cbi8vIHNyYy9vYnNlcnZhYmxlcy9wYXJ0aWNpcGFudC50c1xuaW1wb3J0IHsgUGFydGljaXBhbnRFdmVudCBhcyBQYXJ0aWNpcGFudEV2ZW50MiwgUm9vbUV2ZW50IGFzIFJvb21FdmVudDMsIFRyYWNrIGFzIFRyYWNrNiB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuaW1wb3J0IHsgbWFwIGFzIG1hcDMsIHN3aXRjaE1hcCwgT2JzZXJ2YWJsZSBhcyBPYnNlcnZhYmxlMiwgc3RhcnRXaXRoIGFzIHN0YXJ0V2l0aDMgfSBmcm9tIFwicnhqc1wiO1xuXG4vLyBzcmMvb2JzZXJ2YWJsZXMvcm9vbS50c1xuaW1wb3J0IHsgU3ViamVjdCwgbWFwLCBPYnNlcnZhYmxlLCBzdGFydFdpdGgsIGZpbmFsaXplLCBmaWx0ZXIsIGNvbmNhdCB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBMb2NhbFBhcnRpY2lwYW50IGFzIExvY2FsUGFydGljaXBhbnQzLCBSb29tLCBSb29tRXZlbnQgYXMgUm9vbUV2ZW50MiwgVHJhY2sgYXMgVHJhY2s0IH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5mdW5jdGlvbiBvYnNlcnZlUm9vbUV2ZW50cyhyb29tLCAuLi5ldmVudHMpIHtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKChzdWJzY3JpYmUpID0+IHtcbiAgICBjb25zdCBvblJvb21VcGRhdGUgPSAoKSA9PiB7XG4gICAgICBzdWJzY3JpYmUubmV4dChyb29tKTtcbiAgICB9O1xuICAgIGV2ZW50cy5mb3JFYWNoKChldnQpID0+IHtcbiAgICAgIHJvb20ub24oZXZ0LCBvblJvb21VcGRhdGUpO1xuICAgIH0pO1xuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgICAgZXZlbnRzLmZvckVhY2goKGV2dCkgPT4ge1xuICAgICAgICByb29tLm9mZihldnQsIG9uUm9vbVVwZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgfSkucGlwZShzdGFydFdpdGgocm9vbSkpO1xuICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cbmZ1bmN0aW9uIHJvb21FdmVudFNlbGVjdG9yKHJvb20sIGV2ZW50KSB7XG4gIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgoc3Vic2NyaWJlKSA9PiB7XG4gICAgY29uc3QgdXBkYXRlID0gKC4uLnBhcmFtcykgPT4ge1xuICAgICAgc3Vic2NyaWJlLm5leHQocGFyYW1zKTtcbiAgICB9O1xuICAgIHJvb20ub24oZXZlbnQsIHVwZGF0ZSk7XG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgICByb29tLm9mZihldmVudCwgdXBkYXRlKTtcbiAgICB9O1xuICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgfSk7XG4gIHJldHVybiBvYnNlcnZhYmxlO1xufVxuZnVuY3Rpb24gcm9vbU9ic2VydmVyKHJvb20pIHtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IG9ic2VydmVSb29tRXZlbnRzKFxuICAgIHJvb20sXG4gICAgUm9vbUV2ZW50Mi5QYXJ0aWNpcGFudENvbm5lY3RlZCxcbiAgICBSb29tRXZlbnQyLlBhcnRpY2lwYW50RGlzY29ubmVjdGVkLFxuICAgIFJvb21FdmVudDIuQWN0aXZlU3BlYWtlcnNDaGFuZ2VkLFxuICAgIFJvb21FdmVudDIuVHJhY2tTdWJzY3JpYmVkLFxuICAgIFJvb21FdmVudDIuVHJhY2tVbnN1YnNjcmliZWQsXG4gICAgUm9vbUV2ZW50Mi5Mb2NhbFRyYWNrUHVibGlzaGVkLFxuICAgIFJvb21FdmVudDIuTG9jYWxUcmFja1VucHVibGlzaGVkLFxuICAgIFJvb21FdmVudDIuQXVkaW9QbGF5YmFja1N0YXR1c0NoYW5nZWQsXG4gICAgUm9vbUV2ZW50Mi5Db25uZWN0aW9uU3RhdGVDaGFuZ2VkXG4gICkucGlwZShzdGFydFdpdGgocm9vbSkpO1xuICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cbmZ1bmN0aW9uIGNvbm5lY3Rpb25TdGF0ZU9ic2VydmVyKHJvb20pIHtcbiAgcmV0dXJuIHJvb21FdmVudFNlbGVjdG9yKHJvb20sIFJvb21FdmVudDIuQ29ubmVjdGlvblN0YXRlQ2hhbmdlZCkucGlwZShcbiAgICBtYXAoKFtjb25uZWN0aW9uU3RhdGVdKSA9PiBjb25uZWN0aW9uU3RhdGUpLFxuICAgIHN0YXJ0V2l0aChyb29tLnN0YXRlKVxuICApO1xufVxuZnVuY3Rpb24gc2NyZWVuU2hhcmVPYnNlcnZlcihyb29tKSB7XG4gIGxldCBzY3JlZW5TaGFyZVN1YnNjcmliZXI7XG4gIGNvbnN0IG9ic2VydmVycyA9IFtdO1xuICBjb25zdCBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKHN1YnNjcmliZXIpID0+IHtcbiAgICBzY3JlZW5TaGFyZVN1YnNjcmliZXIgPSBzdWJzY3JpYmVyO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBvYnNlcnZlcnMuZm9yRWFjaCgob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xuICBjb25zdCBzY3JlZW5TaGFyZVRyYWNrcyA9IFtdO1xuICBjb25zdCBoYW5kbGVTdWIgPSAocHVibGljYXRpb24sIHBhcnRpY2lwYW50KSA9PiB7XG4gICAgaWYgKHB1YmxpY2F0aW9uLnNvdXJjZSAhPT0gVHJhY2s0LlNvdXJjZS5TY3JlZW5TaGFyZSAmJiBwdWJsaWNhdGlvbi5zb3VyY2UgIT09IFRyYWNrNC5Tb3VyY2UuU2NyZWVuU2hhcmVBdWRpbykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdHJhY2tNYXAgPSBzY3JlZW5TaGFyZVRyYWNrcy5maW5kKCh0cikgPT4gdHIucGFydGljaXBhbnQuaWRlbnRpdHkgPT09IHBhcnRpY2lwYW50LmlkZW50aXR5KTtcbiAgICBjb25zdCBnZXRTY3JlZW5TaGFyZVRyYWNrcyA9IChwYXJ0aWNpcGFudDIpID0+IHtcbiAgICAgIHJldHVybiBwYXJ0aWNpcGFudDIuZ2V0VHJhY2tzKCkuZmlsdGVyKFxuICAgICAgICAodHJhY2spID0+ICh0cmFjay5zb3VyY2UgPT09IFRyYWNrNC5Tb3VyY2UuU2NyZWVuU2hhcmUgfHwgdHJhY2suc291cmNlID09PSBUcmFjazQuU291cmNlLlNjcmVlblNoYXJlQXVkaW8pICYmIHRyYWNrLnRyYWNrXG4gICAgICApO1xuICAgIH07XG4gICAgaWYgKCF0cmFja01hcCkge1xuICAgICAgdHJhY2tNYXAgPSB7XG4gICAgICAgIHBhcnRpY2lwYW50LFxuICAgICAgICB0cmFja3M6IGdldFNjcmVlblNoYXJlVHJhY2tzKHBhcnRpY2lwYW50KVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaW5kZXggPSBzY3JlZW5TaGFyZVRyYWNrcy5pbmRleE9mKHRyYWNrTWFwKTtcbiAgICAgIHNjcmVlblNoYXJlVHJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB0cmFja01hcC50cmFja3MgPSBnZXRTY3JlZW5TaGFyZVRyYWNrcyhwYXJ0aWNpcGFudCk7XG4gICAgfVxuICAgIGlmICh0cmFja01hcC50cmFja3MubGVuZ3RoID4gMCkge1xuICAgICAgc2NyZWVuU2hhcmVUcmFja3MucHVzaCh0cmFja01hcCk7XG4gICAgfVxuICAgIHNjcmVlblNoYXJlU3Vic2NyaWJlci5uZXh0KHNjcmVlblNoYXJlVHJhY2tzKTtcbiAgfTtcbiAgb2JzZXJ2ZXJzLnB1c2goXG4gICAgcm9vbUV2ZW50U2VsZWN0b3Iocm9vbSwgUm9vbUV2ZW50Mi5UcmFja1N1YnNjcmliZWQpLnN1YnNjcmliZShcbiAgICAgIChbLCAuLi5hcmdzXSkgPT4gaGFuZGxlU3ViKC4uLmFyZ3MpXG4gICAgKVxuICApO1xuICBvYnNlcnZlcnMucHVzaChcbiAgICByb29tRXZlbnRTZWxlY3Rvcihyb29tLCBSb29tRXZlbnQyLlRyYWNrVW5zdWJzY3JpYmVkKS5zdWJzY3JpYmUoXG4gICAgICAoWywgLi4uYXJnc10pID0+IGhhbmRsZVN1YiguLi5hcmdzKVxuICAgIClcbiAgKTtcbiAgb2JzZXJ2ZXJzLnB1c2goXG4gICAgcm9vbUV2ZW50U2VsZWN0b3Iocm9vbSwgUm9vbUV2ZW50Mi5Mb2NhbFRyYWNrUHVibGlzaGVkKS5zdWJzY3JpYmUoKGFyZ3MpID0+IGhhbmRsZVN1YiguLi5hcmdzKSlcbiAgKTtcbiAgb2JzZXJ2ZXJzLnB1c2goXG4gICAgcm9vbUV2ZW50U2VsZWN0b3Iocm9vbSwgUm9vbUV2ZW50Mi5Mb2NhbFRyYWNrVW5wdWJsaXNoZWQpLnN1YnNjcmliZSgoYXJncykgPT4ge1xuICAgICAgaGFuZGxlU3ViKC4uLmFyZ3MpO1xuICAgIH0pXG4gICk7XG4gIG9ic2VydmVycy5wdXNoKFxuICAgIHJvb21FdmVudFNlbGVjdG9yKHJvb20sIFJvb21FdmVudDIuVHJhY2tNdXRlZCkuc3Vic2NyaWJlKChhcmdzKSA9PiB7XG4gICAgICBoYW5kbGVTdWIoLi4uYXJncyk7XG4gICAgfSlcbiAgKTtcbiAgb2JzZXJ2ZXJzLnB1c2goXG4gICAgcm9vbUV2ZW50U2VsZWN0b3Iocm9vbSwgUm9vbUV2ZW50Mi5UcmFja1VubXV0ZWQpLnN1YnNjcmliZSgoYXJncykgPT4ge1xuICAgICAgaGFuZGxlU3ViKC4uLmFyZ3MpO1xuICAgIH0pXG4gICk7XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGZvciAoY29uc3QgcCBvZiByb29tLnBhcnRpY2lwYW50cy52YWx1ZXMoKSkge1xuICAgICAgcC5nZXRUcmFja3MoKS5mb3JFYWNoKCh0cmFjaykgPT4ge1xuICAgICAgICBoYW5kbGVTdWIodHJhY2ssIHApO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCAxKTtcbiAgcmV0dXJuIG9ic2VydmFibGU7XG59XG5mdW5jdGlvbiByb29tSW5mb09ic2VydmVyKHJvb20pIHtcbiAgY29uc3Qgb2JzZXJ2ZXIgPSBvYnNlcnZlUm9vbUV2ZW50cyhcbiAgICByb29tLFxuICAgIFJvb21FdmVudDIuUm9vbU1ldGFkYXRhQ2hhbmdlZCxcbiAgICBSb29tRXZlbnQyLkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWRcbiAgKS5waXBlKFxuICAgIG1hcCgocikgPT4ge1xuICAgICAgcmV0dXJuIHsgbmFtZTogci5uYW1lLCBtZXRhZGF0YTogci5tZXRhZGF0YSB9O1xuICAgIH0pXG4gICk7XG4gIHJldHVybiBvYnNlcnZlcjtcbn1cbmZ1bmN0aW9uIGFjdGl2ZVNwZWFrZXJPYnNlcnZlcihyb29tKSB7XG4gIHJldHVybiByb29tRXZlbnRTZWxlY3Rvcihyb29tLCBSb29tRXZlbnQyLkFjdGl2ZVNwZWFrZXJzQ2hhbmdlZCkucGlwZShcbiAgICBtYXAoKFtzcGVha2Vyc10pID0+IHNwZWFrZXJzKVxuICApO1xufVxuZnVuY3Rpb24gY3JlYXRlTWVkaWFEZXZpY2VPYnNlcnZlcihraW5kLCByZXF1ZXN0UGVybWlzc2lvbnMgPSB0cnVlKSB7XG4gIHZhciBfYTtcbiAgY29uc3Qgb25EZXZpY2VDaGFuZ2UgPSAoKSA9PiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY29uc3QgbmV3RGV2aWNlcyA9IHlpZWxkIFJvb20uZ2V0TG9jYWxEZXZpY2VzKGtpbmQsIHJlcXVlc3RQZXJtaXNzaW9ucyk7XG4gICAgZGV2aWNlU3ViamVjdC5uZXh0KG5ld0RldmljZXMpO1xuICB9KTtcbiAgY29uc3QgZGV2aWNlU3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XG4gIGNvbnN0IG9ic2VydmFibGUgPSBkZXZpY2VTdWJqZWN0LnBpcGUoXG4gICAgZmluYWxpemUoKCkgPT4ge1xuICAgICAgdmFyIF9hMjtcbiAgICAgIChfYTIgPSBuYXZpZ2F0b3IgPT0gbnVsbCA/IHZvaWQgMCA6IG5hdmlnYXRvci5tZWRpYURldmljZXMpID09IG51bGwgPyB2b2lkIDAgOiBfYTIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRldmljZWNoYW5nZVwiLCBvbkRldmljZUNoYW5nZSk7XG4gICAgfSlcbiAgKTtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBpZiAoIXdpbmRvdy5pc1NlY3VyZUNvbnRleHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEFjY2Vzc2luZyBtZWRpYSBkZXZpY2VzIGlzIGF2YWlsYWJsZSBvbmx5IGluIHNlY3VyZSBjb250ZXh0cyAoSFRUUFMgYW5kIGxvY2FsaG9zdCksIGluIHNvbWUgb3IgYWxsIHN1cHBvcnRpbmcgYnJvd3NlcnMuIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05hdmlnYXRvci9tZWRpYURldmljZXNgXG4gICAgICApO1xuICAgIH1cbiAgICAoX2EgPSBuYXZpZ2F0b3IgPT0gbnVsbCA/IHZvaWQgMCA6IG5hdmlnYXRvci5tZWRpYURldmljZXMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5hZGRFdmVudExpc3RlbmVyKFwiZGV2aWNlY2hhbmdlXCIsIG9uRGV2aWNlQ2hhbmdlKTtcbiAgfVxuICByZXR1cm4gY29uY2F0KFJvb20uZ2V0TG9jYWxEZXZpY2VzKGtpbmQsIHJlcXVlc3RQZXJtaXNzaW9ucyksIG9ic2VydmFibGUpO1xufVxuZnVuY3Rpb24gY3JlYXRlRGF0YU9ic2VydmVyKHJvb20pIHtcbiAgcmV0dXJuIHJvb21FdmVudFNlbGVjdG9yKHJvb20sIFJvb21FdmVudDIuRGF0YVJlY2VpdmVkKTtcbn1cbmZ1bmN0aW9uIHJvb21BdWRpb1BsYXliYWNrQWxsb3dlZE9ic2VydmFibGUocm9vbSkge1xuICBjb25zdCBvYnNlcnZhYmxlID0gb2JzZXJ2ZVJvb21FdmVudHMocm9vbSwgUm9vbUV2ZW50Mi5BdWRpb1BsYXliYWNrU3RhdHVzQ2hhbmdlZCkucGlwZShcbiAgICBtYXAoKHJvb20yKSA9PiB7XG4gICAgICByZXR1cm4geyBjYW5QbGF5QXVkaW86IHJvb20yLmNhblBsYXliYWNrQXVkaW8gfTtcbiAgICB9KVxuICApO1xuICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFjdGl2ZURldmljZU9ic2VydmFibGUocm9vbSwga2luZCkge1xuICByZXR1cm4gcm9vbUV2ZW50U2VsZWN0b3Iocm9vbSwgUm9vbUV2ZW50Mi5BY3RpdmVEZXZpY2VDaGFuZ2VkKS5waXBlKFxuICAgIGZpbHRlcigoW2tpbmRPZkRldmljZV0pID0+IGtpbmRPZkRldmljZSA9PT0ga2luZCksXG4gICAgbWFwKChba2luZDIsIGRldmljZUlkXSkgPT4ge1xuICAgICAgbG9nLmRlYnVnKFwiYWN0aXZlRGV2aWNlT2JzZXJ2YWJsZSB8IFJvb21FdmVudC5BY3RpdmVEZXZpY2VDaGFuZ2VkXCIsIHsga2luZDoga2luZDIsIGRldmljZUlkIH0pO1xuICAgICAgcmV0dXJuIGRldmljZUlkO1xuICAgIH0pLFxuICAgIHN0YXJ0V2l0aChyb29tLmdldEFjdGl2ZURldmljZShraW5kKSlcbiAgKTtcbn1cbmZ1bmN0aW9uIGVuY3J5cHRpb25TdGF0dXNPYnNlcnZhYmxlKHJvb20sIHBhcnRpY2lwYW50KSB7XG4gIHJldHVybiByb29tRXZlbnRTZWxlY3Rvcihyb29tLCBSb29tRXZlbnQyLlBhcnRpY2lwYW50RW5jcnlwdGlvblN0YXR1c0NoYW5nZWQpLnBpcGUoXG4gICAgZmlsdGVyKFxuICAgICAgKFssIHBdKSA9PiBwYXJ0aWNpcGFudC5pZGVudGl0eSA9PT0gKHAgPT0gbnVsbCA/IHZvaWQgMCA6IHAuaWRlbnRpdHkpIHx8ICFwICYmIHBhcnRpY2lwYW50LmlkZW50aXR5ID09PSByb29tLmxvY2FsUGFydGljaXBhbnQuaWRlbnRpdHlcbiAgICApLFxuICAgIG1hcCgoW2VuY3J5cHRlZF0pID0+IGVuY3J5cHRlZCksXG4gICAgc3RhcnRXaXRoKFxuICAgICAgcGFydGljaXBhbnQgaW5zdGFuY2VvZiBMb2NhbFBhcnRpY2lwYW50MyA/IHBhcnRpY2lwYW50LmlzRTJFRUVuYWJsZWQgOiBwYXJ0aWNpcGFudC5pc0VuY3J5cHRlZFxuICAgIClcbiAgKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvbWVkaWFUcmFjay50c1xuaW1wb3J0IHsgVHJhY2sgYXMgVHJhY2s1IH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5pbXBvcnQgeyBtYXAgYXMgbWFwMiwgc3RhcnRXaXRoIGFzIHN0YXJ0V2l0aDIgfSBmcm9tIFwicnhqc1wiO1xuXG4vLyBzcmMvc3R5bGVzLWludGVyZmFjZS9jbGFzcy1wcmVmaXhlci50c1xuZnVuY3Rpb24gcHJlZml4Q2xhc3ModW5wcmVmaXhlZENsYXNzTmFtZSkge1xuICByZXR1cm4gYCR7Y3NzUHJlZml4fS0ke3VucHJlZml4ZWRDbGFzc05hbWV9YDtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvbWVkaWFUcmFjay50c1xuZnVuY3Rpb24gc2V0dXBNZWRpYVRyYWNrKHRyYWNrSWRlbnRpZmllcikge1xuICBjb25zdCBpbml0aWFsUHViID0gZ2V0VHJhY2tCeUlkZW50aWZpZXIodHJhY2tJZGVudGlmaWVyKTtcbiAgY29uc3QgdHJhY2tPYnNlcnZlciA9IG9ic2VydmVQYXJ0aWNpcGFudE1lZGlhKHRyYWNrSWRlbnRpZmllci5wYXJ0aWNpcGFudCkucGlwZShcbiAgICBtYXAyKCgpID0+IHtcbiAgICAgIHJldHVybiBnZXRUcmFja0J5SWRlbnRpZmllcih0cmFja0lkZW50aWZpZXIpO1xuICAgIH0pLFxuICAgIHN0YXJ0V2l0aDIoaW5pdGlhbFB1YilcbiAgKTtcbiAgY29uc3QgY2xhc3NOYW1lID0gcHJlZml4Q2xhc3MoXG4gICAgdHJhY2tJZGVudGlmaWVyLnNvdXJjZSA9PT0gVHJhY2s1LlNvdXJjZS5DYW1lcmEgfHwgdHJhY2tJZGVudGlmaWVyLnNvdXJjZSA9PT0gVHJhY2s1LlNvdXJjZS5TY3JlZW5TaGFyZSA/IFwicGFydGljaXBhbnQtbWVkaWEtdmlkZW9cIiA6IFwicGFydGljaXBhbnQtbWVkaWEtYXVkaW9cIlxuICApO1xuICByZXR1cm4geyBjbGFzc05hbWUsIHRyYWNrT2JzZXJ2ZXIgfTtcbn1cbmZ1bmN0aW9uIGdldFRyYWNrQnlJZGVudGlmaWVyKG9wdGlvbnMpIHtcbiAgaWYgKGlzVHJhY2tSZWZlcmVuY2Uob3B0aW9ucykpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5wdWJsaWNhdGlvbjtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB7IHNvdXJjZSwgbmFtZSwgcGFydGljaXBhbnQgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHNvdXJjZSAmJiBuYW1lKSB7XG4gICAgICByZXR1cm4gcGFydGljaXBhbnQuZ2V0VHJhY2tzKCkuZmluZCgocHViKSA9PiBwdWIuc291cmNlID09PSBzb3VyY2UgJiYgcHViLnRyYWNrTmFtZSA9PT0gbmFtZSk7XG4gICAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gcGFydGljaXBhbnQuZ2V0VHJhY2tCeU5hbWUobmFtZSk7XG4gICAgfSBlbHNlIGlmIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBwYXJ0aWNpcGFudC5nZXRUcmFjayhzb3VyY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdCBsZWFzdCBvbmUgb2Ygc291cmNlIGFuZCBuYW1lIG5lZWRzIHRvIGJlIGRlZmluZWRcIik7XG4gICAgfVxuICB9XG59XG5cbi8vIHNyYy9vYnNlcnZhYmxlcy9wYXJ0aWNpcGFudC50c1xuZnVuY3Rpb24gb2JzZXJ2ZVBhcnRpY2lwYW50RXZlbnRzKHBhcnRpY2lwYW50LCAuLi5ldmVudHMpIHtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlMigoc3Vic2NyaWJlKSA9PiB7XG4gICAgY29uc3Qgb25QYXJ0aWNpcGFudFVwZGF0ZSA9ICgpID0+IHtcbiAgICAgIHN1YnNjcmliZS5uZXh0KHBhcnRpY2lwYW50KTtcbiAgICB9O1xuICAgIGV2ZW50cy5mb3JFYWNoKChldnQpID0+IHtcbiAgICAgIHBhcnRpY2lwYW50Lm9uKGV2dCwgb25QYXJ0aWNpcGFudFVwZGF0ZSk7XG4gICAgfSk7XG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgICBldmVudHMuZm9yRWFjaCgoZXZ0KSA9PiB7XG4gICAgICAgIHBhcnRpY2lwYW50Lm9mZihldnQsIG9uUGFydGljaXBhbnRVcGRhdGUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gIH0pLnBpcGUoc3RhcnRXaXRoMyhwYXJ0aWNpcGFudCkpO1xuICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cbmZ1bmN0aW9uIG9ic2VydmVQYXJ0aWNpcGFudE1lZGlhKHBhcnRpY2lwYW50KSB7XG4gIGNvbnN0IHBhcnRpY2lwYW50T2JzZXJ2ZXIgPSBvYnNlcnZlUGFydGljaXBhbnRFdmVudHMoXG4gICAgcGFydGljaXBhbnQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuVHJhY2tNdXRlZCxcbiAgICBQYXJ0aWNpcGFudEV2ZW50Mi5UcmFja1VubXV0ZWQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuUGFydGljaXBhbnRQZXJtaXNzaW9uc0NoYW5nZWQsXG4gICAgLy8gUGFydGljaXBhbnRFdmVudC5Jc1NwZWFraW5nQ2hhbmdlZCxcbiAgICBQYXJ0aWNpcGFudEV2ZW50Mi5UcmFja1B1Ymxpc2hlZCxcbiAgICBQYXJ0aWNpcGFudEV2ZW50Mi5UcmFja1VucHVibGlzaGVkLFxuICAgIFBhcnRpY2lwYW50RXZlbnQyLkxvY2FsVHJhY2tQdWJsaXNoZWQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuTG9jYWxUcmFja1VucHVibGlzaGVkLFxuICAgIFBhcnRpY2lwYW50RXZlbnQyLk1lZGlhRGV2aWNlc0Vycm9yLFxuICAgIFBhcnRpY2lwYW50RXZlbnQyLlRyYWNrU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZFxuICAgIC8vIFBhcnRpY2lwYW50RXZlbnQuQ29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkLFxuICApLnBpcGUoXG4gICAgbWFwMygocCkgPT4ge1xuICAgICAgY29uc3QgeyBpc01pY3JvcGhvbmVFbmFibGVkLCBpc0NhbWVyYUVuYWJsZWQsIGlzU2NyZWVuU2hhcmVFbmFibGVkIH0gPSBwO1xuICAgICAgY29uc3QgbWljcm9waG9uZVRyYWNrID0gcC5nZXRUcmFjayhUcmFjazYuU291cmNlLk1pY3JvcGhvbmUpO1xuICAgICAgY29uc3QgY2FtZXJhVHJhY2sgPSBwLmdldFRyYWNrKFRyYWNrNi5Tb3VyY2UuQ2FtZXJhKTtcbiAgICAgIGNvbnN0IHBhcnRpY2lwYW50TWVkaWEgPSB7XG4gICAgICAgIGlzQ2FtZXJhRW5hYmxlZCxcbiAgICAgICAgaXNNaWNyb3Bob25lRW5hYmxlZCxcbiAgICAgICAgaXNTY3JlZW5TaGFyZUVuYWJsZWQsXG4gICAgICAgIGNhbWVyYVRyYWNrLFxuICAgICAgICBtaWNyb3Bob25lVHJhY2ssXG4gICAgICAgIHBhcnRpY2lwYW50OiBwXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHBhcnRpY2lwYW50TWVkaWE7XG4gICAgfSlcbiAgKTtcbiAgcmV0dXJuIHBhcnRpY2lwYW50T2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVUcmFja09ic2VydmVyKHBhcnRpY2lwYW50LCBvcHRpb25zKSB7XG4gIHJldHVybiBvYnNlcnZlUGFydGljaXBhbnRNZWRpYShwYXJ0aWNpcGFudCkucGlwZShcbiAgICBtYXAzKCgpID0+IHtcbiAgICAgIHJldHVybiB7IHB1YmxpY2F0aW9uOiBnZXRUcmFja0J5SWRlbnRpZmllcihvcHRpb25zKSB9O1xuICAgIH0pXG4gICk7XG59XG5mdW5jdGlvbiBwYXJ0aWNpcGFudEluZm9PYnNlcnZlcihwYXJ0aWNpcGFudCkge1xuICBjb25zdCBvYnNlcnZlciA9IG9ic2VydmVQYXJ0aWNpcGFudEV2ZW50cyhcbiAgICBwYXJ0aWNpcGFudCxcbiAgICBQYXJ0aWNpcGFudEV2ZW50Mi5QYXJ0aWNpcGFudE1ldGFkYXRhQ2hhbmdlZFxuICAgIC8vIFBhcnRpY2lwYW50RXZlbnQuTG9jYWxUcmFja1B1Ymxpc2hlZCxcbiAgKS5waXBlKFxuICAgIG1hcDMoKHsgbmFtZSwgaWRlbnRpdHksIG1ldGFkYXRhIH0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGlkZW50aXR5LFxuICAgICAgICBtZXRhZGF0YVxuICAgICAgfTtcbiAgICB9KSxcbiAgICBzdGFydFdpdGgzKHtcbiAgICAgIG5hbWU6IHBhcnRpY2lwYW50Lm5hbWUsXG4gICAgICBpZGVudGl0eTogcGFydGljaXBhbnQuaWRlbnRpdHksXG4gICAgICBtZXRhZGF0YTogcGFydGljaXBhbnQubWV0YWRhdGFcbiAgICB9KVxuICApO1xuICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVDb25uZWN0aW9uUXVhbGl0eU9ic2VydmVyKHBhcnRpY2lwYW50KSB7XG4gIGNvbnN0IG9ic2VydmVyID0gcGFydGljaXBhbnRFdmVudFNlbGVjdG9yKFxuICAgIHBhcnRpY2lwYW50LFxuICAgIFBhcnRpY2lwYW50RXZlbnQyLkNvbm5lY3Rpb25RdWFsaXR5Q2hhbmdlZFxuICApLnBpcGUoXG4gICAgbWFwMygoW3F1YWxpdHldKSA9PiBxdWFsaXR5KSxcbiAgICBzdGFydFdpdGgzKHBhcnRpY2lwYW50LmNvbm5lY3Rpb25RdWFsaXR5KVxuICApO1xuICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiBwYXJ0aWNpcGFudEV2ZW50U2VsZWN0b3IocGFydGljaXBhbnQsIGV2ZW50KSB7XG4gIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTIoKHN1YnNjcmliZSkgPT4ge1xuICAgIGNvbnN0IHVwZGF0ZSA9ICguLi5wYXJhbXMpID0+IHtcbiAgICAgIHN1YnNjcmliZS5uZXh0KHBhcmFtcyk7XG4gICAgfTtcbiAgICBwYXJ0aWNpcGFudC5vbihldmVudCwgdXBkYXRlKTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICAgIHBhcnRpY2lwYW50Lm9mZihldmVudCwgdXBkYXRlKTtcbiAgICB9O1xuICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgfSk7XG4gIHJldHVybiBvYnNlcnZhYmxlO1xufVxuZnVuY3Rpb24gbXV0ZWRPYnNlcnZlcih0cmFja1JlZikge1xuICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gIHJldHVybiBvYnNlcnZlUGFydGljaXBhbnRFdmVudHMoXG4gICAgdHJhY2tSZWYucGFydGljaXBhbnQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuVHJhY2tNdXRlZCxcbiAgICBQYXJ0aWNpcGFudEV2ZW50Mi5UcmFja1VubXV0ZWQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuVHJhY2tTdWJzY3JpYmVkLFxuICAgIFBhcnRpY2lwYW50RXZlbnQyLlRyYWNrVW5zdWJzY3JpYmVkLFxuICAgIFBhcnRpY2lwYW50RXZlbnQyLkxvY2FsVHJhY2tQdWJsaXNoZWQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuTG9jYWxUcmFja1VucHVibGlzaGVkXG4gICkucGlwZShcbiAgICBtYXAzKChwYXJ0aWNpcGFudCkgPT4ge1xuICAgICAgdmFyIF9hMiwgX2IyO1xuICAgICAgY29uc3QgcHViID0gKF9hMiA9IHRyYWNrUmVmLnB1YmxpY2F0aW9uKSAhPSBudWxsID8gX2EyIDogcGFydGljaXBhbnQuZ2V0VHJhY2sodHJhY2tSZWYuc291cmNlKTtcbiAgICAgIHJldHVybiAoX2IyID0gcHViID09IG51bGwgPyB2b2lkIDAgOiBwdWIuaXNNdXRlZCkgIT0gbnVsbCA/IF9iMiA6IHRydWU7XG4gICAgfSksXG4gICAgc3RhcnRXaXRoMyhcbiAgICAgIChfZCA9IChfYyA9IChfYSA9IHRyYWNrUmVmLnB1YmxpY2F0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2EuaXNNdXRlZCkgIT0gbnVsbCA/IF9jIDogKF9iID0gdHJhY2tSZWYucGFydGljaXBhbnQuZ2V0VHJhY2sodHJhY2tSZWYuc291cmNlKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmlzTXV0ZWQpICE9IG51bGwgPyBfZCA6IHRydWVcbiAgICApXG4gICk7XG59XG5mdW5jdGlvbiBjcmVhdGVJc1NwZWFraW5nT2JzZXJ2ZXIocGFydGljaXBhbnQpIHtcbiAgcmV0dXJuIHBhcnRpY2lwYW50RXZlbnRTZWxlY3RvcihwYXJ0aWNpcGFudCwgUGFydGljaXBhbnRFdmVudDIuSXNTcGVha2luZ0NoYW5nZWQpLnBpcGUoXG4gICAgbWFwMygoW2lzU3BlYWtpbmddKSA9PiBpc1NwZWFraW5nKVxuICApO1xufVxuZnVuY3Rpb24gY29ubmVjdGVkUGFydGljaXBhbnRzT2JzZXJ2ZXIocm9vbSwgb3B0aW9ucyA9IHt9KSB7XG4gIHZhciBfYTtcbiAgbGV0IHN1YnNjcmliZXI7XG4gIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTIoKHN1YikgPT4ge1xuICAgIHN1YnNjcmliZXIgPSBzdWI7XG4gICAgcmV0dXJuICgpID0+IGxpc3RlbmVyLnVuc3Vic2NyaWJlKCk7XG4gIH0pLnBpcGUoc3RhcnRXaXRoMyhBcnJheS5mcm9tKHJvb20ucGFydGljaXBhbnRzLnZhbHVlcygpKSkpO1xuICBjb25zdCBhZGRpdGlvbmFsUm9vbUV2ZW50cyA9IChfYSA9IG9wdGlvbnMuYWRkaXRpb25hbFJvb21FdmVudHMpICE9IG51bGwgPyBfYSA6IGFsbFBhcnRpY2lwYW50Um9vbUV2ZW50cztcbiAgY29uc3Qgcm9vbUV2ZW50cyA9IEFycmF5LmZyb20oXG4gICAgLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICAgICAgUm9vbUV2ZW50My5QYXJ0aWNpcGFudENvbm5lY3RlZCxcbiAgICAgIFJvb21FdmVudDMuUGFydGljaXBhbnREaXNjb25uZWN0ZWQsXG4gICAgICBSb29tRXZlbnQzLkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWQsXG4gICAgICAuLi5hZGRpdGlvbmFsUm9vbUV2ZW50c1xuICAgIF0pXG4gICk7XG4gIGNvbnN0IGxpc3RlbmVyID0gb2JzZXJ2ZVJvb21FdmVudHMocm9vbSwgLi4ucm9vbUV2ZW50cykuc3Vic2NyaWJlKFxuICAgIChyKSA9PiBzdWJzY3JpYmVyID09IG51bGwgPyB2b2lkIDAgOiBzdWJzY3JpYmVyLm5leHQoQXJyYXkuZnJvbShyLnBhcnRpY2lwYW50cy52YWx1ZXMoKSkpXG4gICk7XG4gIGlmIChyb29tLnBhcnRpY2lwYW50cy5zaXplID4gMCkge1xuICAgIHN1YnNjcmliZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHN1YnNjcmliZXIubmV4dChBcnJheS5mcm9tKHJvb20ucGFydGljaXBhbnRzLnZhbHVlcygpKSk7XG4gIH1cbiAgcmV0dXJuIG9ic2VydmFibGU7XG59XG5mdW5jdGlvbiBjb25uZWN0ZWRQYXJ0aWNpcGFudE9ic2VydmVyKHJvb20sIGlkZW50aXR5LCBvcHRpb25zID0ge30pIHtcbiAgdmFyIF9hO1xuICBjb25zdCBhZGRpdGlvbmFsRXZlbnRzID0gKF9hID0gb3B0aW9ucy5hZGRpdGlvbmFsRXZlbnRzKSAhPSBudWxsID8gX2EgOiBhbGxQYXJ0aWNpcGFudEV2ZW50cztcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IG9ic2VydmVSb29tRXZlbnRzKFxuICAgIHJvb20sXG4gICAgUm9vbUV2ZW50My5QYXJ0aWNpcGFudENvbm5lY3RlZCxcbiAgICBSb29tRXZlbnQzLlBhcnRpY2lwYW50RGlzY29ubmVjdGVkLFxuICAgIFJvb21FdmVudDMuQ29ubmVjdGlvblN0YXRlQ2hhbmdlZFxuICApLnBpcGUoXG4gICAgc3dpdGNoTWFwKChyKSA9PiB7XG4gICAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHIuZ2V0UGFydGljaXBhbnRCeUlkZW50aXR5KGlkZW50aXR5KTtcbiAgICAgIGlmIChwYXJ0aWNpcGFudCkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZVBhcnRpY2lwYW50RXZlbnRzKHBhcnRpY2lwYW50LCAuLi5hZGRpdGlvbmFsRXZlbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTIoKHN1YnNjcmliZSkgPT4gc3Vic2NyaWJlLm5leHQodm9pZCAwKSk7XG4gICAgICB9XG4gICAgfSksXG4gICAgc3RhcnRXaXRoMyhyb29tLmdldFBhcnRpY2lwYW50QnlJZGVudGl0eShpZGVudGl0eSkpXG4gICk7XG4gIHJldHVybiBvYnNlcnZhYmxlO1xufVxuZnVuY3Rpb24gcGFydGljaXBhbnRQZXJtaXNzaW9uT2JzZXJ2ZXIocGFydGljaXBhbnQpIHtcbiAgY29uc3Qgb2JzZXJ2ZXIgPSBwYXJ0aWNpcGFudEV2ZW50U2VsZWN0b3IoXG4gICAgcGFydGljaXBhbnQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuUGFydGljaXBhbnRQZXJtaXNzaW9uc0NoYW5nZWRcbiAgKS5waXBlKFxuICAgIG1hcDMoKCkgPT4gcGFydGljaXBhbnQucGVybWlzc2lvbnMpLFxuICAgIHN0YXJ0V2l0aDMocGFydGljaXBhbnQucGVybWlzc2lvbnMpXG4gICk7XG4gIHJldHVybiBvYnNlcnZlcjtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvbWVkaWFUb2dnbGUudHNcbmZ1bmN0aW9uIHNldHVwTWVkaWFUb2dnbGUoc291cmNlLCByb29tLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgbG9jYWxQYXJ0aWNpcGFudCB9ID0gcm9vbTtcbiAgY29uc3QgZ2V0U291cmNlRW5hYmxlZCA9IChzb3VyY2UyLCBsb2NhbFBhcnRpY2lwYW50MikgPT4ge1xuICAgIGxldCBpc0VuYWJsZWQgPSBmYWxzZTtcbiAgICBzd2l0Y2ggKHNvdXJjZTIpIHtcbiAgICAgIGNhc2UgVHJhY2s3LlNvdXJjZS5DYW1lcmE6XG4gICAgICAgIGlzRW5hYmxlZCA9IGxvY2FsUGFydGljaXBhbnQyLmlzQ2FtZXJhRW5hYmxlZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRyYWNrNy5Tb3VyY2UuTWljcm9waG9uZTpcbiAgICAgICAgaXNFbmFibGVkID0gbG9jYWxQYXJ0aWNpcGFudDIuaXNNaWNyb3Bob25lRW5hYmxlZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRyYWNrNy5Tb3VyY2UuU2NyZWVuU2hhcmU6XG4gICAgICAgIGlzRW5hYmxlZCA9IGxvY2FsUGFydGljaXBhbnQyLmlzU2NyZWVuU2hhcmVFbmFibGVkO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gaXNFbmFibGVkO1xuICB9O1xuICBjb25zdCBlbmFibGVkT2JzZXJ2ZXIgPSBvYnNlcnZlUGFydGljaXBhbnRNZWRpYShsb2NhbFBhcnRpY2lwYW50KS5waXBlKFxuICAgIG1hcDQoKG1lZGlhKSA9PiB7XG4gICAgICByZXR1cm4gZ2V0U291cmNlRW5hYmxlZChzb3VyY2UsIG1lZGlhLnBhcnRpY2lwYW50KTtcbiAgICB9KSxcbiAgICBzdGFydFdpdGg0KGdldFNvdXJjZUVuYWJsZWQoc291cmNlLCBsb2NhbFBhcnRpY2lwYW50KSlcbiAgKTtcbiAgY29uc3QgcGVuZGluZ1N1YmplY3QgPSBuZXcgU3ViamVjdDIoKTtcbiAgY29uc3QgdG9nZ2xlID0gKGZvcmNlU3RhdGUsIGNhcHR1cmVPcHRpb25zKSA9PiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNhcHR1cmVPcHRpb25zICE9IG51bGwgPyBjYXB0dXJlT3B0aW9ucyA6IGNhcHR1cmVPcHRpb25zID0gb3B0aW9ucztcbiAgICAgIHBlbmRpbmdTdWJqZWN0Lm5leHQodHJ1ZSk7XG4gICAgICBzd2l0Y2ggKHNvdXJjZSkge1xuICAgICAgICBjYXNlIFRyYWNrNy5Tb3VyY2UuQ2FtZXJhOlxuICAgICAgICAgIHlpZWxkIGxvY2FsUGFydGljaXBhbnQuc2V0Q2FtZXJhRW5hYmxlZChcbiAgICAgICAgICAgIGZvcmNlU3RhdGUgIT0gbnVsbCA/IGZvcmNlU3RhdGUgOiAhbG9jYWxQYXJ0aWNpcGFudC5pc0NhbWVyYUVuYWJsZWQsXG4gICAgICAgICAgICBjYXB0dXJlT3B0aW9uc1xuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVHJhY2s3LlNvdXJjZS5NaWNyb3Bob25lOlxuICAgICAgICAgIHlpZWxkIGxvY2FsUGFydGljaXBhbnQuc2V0TWljcm9waG9uZUVuYWJsZWQoXG4gICAgICAgICAgICBmb3JjZVN0YXRlICE9IG51bGwgPyBmb3JjZVN0YXRlIDogIWxvY2FsUGFydGljaXBhbnQuaXNNaWNyb3Bob25lRW5hYmxlZCxcbiAgICAgICAgICAgIGNhcHR1cmVPcHRpb25zXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBUcmFjazcuU291cmNlLlNjcmVlblNoYXJlOlxuICAgICAgICAgIHlpZWxkIGxvY2FsUGFydGljaXBhbnQuc2V0U2NyZWVuU2hhcmVFbmFibGVkKFxuICAgICAgICAgICAgZm9yY2VTdGF0ZSAhPSBudWxsID8gZm9yY2VTdGF0ZSA6ICFsb2NhbFBhcnRpY2lwYW50LmlzU2NyZWVuU2hhcmVFbmFibGVkLFxuICAgICAgICAgICAgY2FwdHVyZU9wdGlvbnNcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBwZW5kaW5nU3ViamVjdC5uZXh0KGZhbHNlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBjbGFzc05hbWUgPSBwcmVmaXhDbGFzcyhcImJ1dHRvblwiKTtcbiAgcmV0dXJuIHtcbiAgICBjbGFzc05hbWUsXG4gICAgdG9nZ2xlLFxuICAgIGVuYWJsZWRPYnNlcnZlcixcbiAgICBwZW5kaW5nT2JzZXJ2ZXI6IHBlbmRpbmdTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpXG4gIH07XG59XG5mdW5jdGlvbiBzZXR1cE1hbnVhbFRvZ2dsZSgpIHtcbiAgbGV0IHN0YXRlID0gZmFsc2U7XG4gIGNvbnN0IGVuYWJsZWRTdWJqZWN0ID0gbmV3IFN1YmplY3QyKCk7XG4gIGNvbnN0IHBlbmRpbmdTdWJqZWN0ID0gbmV3IFN1YmplY3QyKCk7XG4gIGNvbnN0IHRvZ2dsZSA9IChmb3JjZVN0YXRlKSA9PiB7XG4gICAgcGVuZGluZ1N1YmplY3QubmV4dCh0cnVlKTtcbiAgICBzdGF0ZSA9IGZvcmNlU3RhdGUgIT0gbnVsbCA/IGZvcmNlU3RhdGUgOiAhc3RhdGU7XG4gICAgZW5hYmxlZFN1YmplY3QubmV4dChzdGF0ZSk7XG4gICAgcGVuZGluZ1N1YmplY3QubmV4dChmYWxzZSk7XG4gIH07XG4gIGNvbnN0IGNsYXNzTmFtZSA9IHByZWZpeENsYXNzKFwiYnV0dG9uXCIpO1xuICByZXR1cm4ge1xuICAgIGNsYXNzTmFtZSxcbiAgICB0b2dnbGUsXG4gICAgZW5hYmxlZE9ic2VydmVyOiBlbmFibGVkU3ViamVjdC5hc09ic2VydmFibGUoKSxcbiAgICBwZW5kaW5nT2JzZXJ2ZXI6IHBlbmRpbmdTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpXG4gIH07XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL21lZGlhRGV2aWNlU2VsZWN0LnRzXG5pbXBvcnQge1xuICBUcmFjayBhcyBUcmFjazhcbn0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xuZnVuY3Rpb24gc2V0dXBEZXZpY2VTZWxlY3RvcihraW5kLCByb29tLCBsb2NhbFRyYWNrKSB7XG4gIGNvbnN0IGFjdGl2ZURldmljZVN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHZvaWQgMCk7XG4gIGNvbnN0IGFjdGl2ZURldmljZU9ic2VydmFibGUgPSByb29tID8gY3JlYXRlQWN0aXZlRGV2aWNlT2JzZXJ2YWJsZShyb29tLCBraW5kKSA6IGFjdGl2ZURldmljZVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIGNvbnN0IHNldEFjdGl2ZU1lZGlhRGV2aWNlID0gKF8wLCAuLi5fMSkgPT4gX19hc3luYyh0aGlzLCBbXzAsIC4uLl8xXSwgZnVuY3Rpb24qIChpZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgaWYgKHJvb20pIHtcbiAgICAgIGxvZy5kZWJ1ZyhgU3dpdGNoaW5nIGFjdGl2ZSBkZXZpY2Ugb2Yga2luZCBcIiR7a2luZH1cIiB3aXRoIGlkICR7aWR9LmApO1xuICAgICAgeWllbGQgcm9vbS5zd2l0Y2hBY3RpdmVEZXZpY2Uoa2luZCwgaWQsIG9wdGlvbnMuZXhhY3QpO1xuICAgICAgY29uc3QgYWN0dWFsRGV2aWNlSWQgPSAoX2EgPSByb29tLmdldEFjdGl2ZURldmljZShraW5kKSkgIT0gbnVsbCA/IF9hIDogaWQ7XG4gICAgICBpZiAoYWN0dWFsRGV2aWNlSWQgIT09IGlkICYmIGlkICE9PSBcImRlZmF1bHRcIikge1xuICAgICAgICBsb2cuaW5mbyhcbiAgICAgICAgICBgV2UgdHJpZWQgdG8gc2VsZWN0IHRoZSBkZXZpY2Ugd2l0aCBpZCAoJHtpZH0pLCBidXQgdGhlIGJyb3dzZXIgZGVjaWRlZCB0byBzZWxlY3QgdGhlIGRldmljZSB3aXRoIGlkICgke2FjdHVhbERldmljZUlkfSkgaW5zdGVhZC5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBsZXQgdGFyZ2V0VHJhY2sgPSB2b2lkIDA7XG4gICAgICBpZiAoa2luZCA9PT0gXCJhdWRpb2lucHV0XCIpXG4gICAgICAgIHRhcmdldFRyYWNrID0gKF9iID0gcm9vbS5sb2NhbFBhcnRpY2lwYW50LmdldFRyYWNrKFRyYWNrOC5Tb3VyY2UuTWljcm9waG9uZSkpID09IG51bGwgPyB2b2lkIDAgOiBfYi50cmFjaztcbiAgICAgIGVsc2UgaWYgKGtpbmQgPT09IFwidmlkZW9pbnB1dFwiKSB7XG4gICAgICAgIHRhcmdldFRyYWNrID0gKF9jID0gcm9vbS5sb2NhbFBhcnRpY2lwYW50LmdldFRyYWNrKFRyYWNrOC5Tb3VyY2UuQ2FtZXJhKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLnRyYWNrO1xuICAgICAgfVxuICAgICAgY29uc3QgdXNlRGVmYXVsdCA9IGlkID09PSBcImRlZmF1bHRcIiAmJiAhdGFyZ2V0VHJhY2sgfHwgaWQgPT09IFwiZGVmYXVsdFwiICYmICh0YXJnZXRUcmFjayA9PSBudWxsID8gdm9pZCAwIDogdGFyZ2V0VHJhY2subWVkaWFTdHJlYW1UcmFjay5sYWJlbC5zdGFydHNXaXRoKFwiRGVmYXVsdFwiKSk7XG4gICAgICBhY3RpdmVEZXZpY2VTdWJqZWN0Lm5leHQodXNlRGVmYXVsdCA/IGlkIDogYWN0dWFsRGV2aWNlSWQpO1xuICAgIH0gZWxzZSBpZiAobG9jYWxUcmFjaykge1xuICAgICAgeWllbGQgbG9jYWxUcmFjay5zZXREZXZpY2VJZChvcHRpb25zLmV4YWN0ID8geyBleGFjdDogaWQgfSA6IGlkKTtcbiAgICAgIGNvbnN0IGFjdHVhbElkID0geWllbGQgbG9jYWxUcmFjay5nZXREZXZpY2VJZCgpO1xuICAgICAgYWN0aXZlRGV2aWNlU3ViamVjdC5uZXh0KFxuICAgICAgICBpZCA9PT0gXCJkZWZhdWx0XCIgJiYgbG9jYWxUcmFjay5tZWRpYVN0cmVhbVRyYWNrLmxhYmVsLnN0YXJ0c1dpdGgoXCJEZWZhdWx0XCIpID8gaWQgOiBhY3R1YWxJZFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGFjdGl2ZURldmljZVN1YmplY3QudmFsdWUgIT09IGlkKSB7XG4gICAgICBsb2cud2FybihcbiAgICAgICAgXCJkZXZpY2Ugc3dpdGNoIHNraXBwZWQsIHBsZWFzZSBwcm92aWRlIGVpdGhlciBhIHJvb20gb3IgYSBsb2NhbCB0cmFjayB0byBzd2l0Y2ggb24uIFwiXG4gICAgICApO1xuICAgICAgYWN0aXZlRGV2aWNlU3ViamVjdC5uZXh0KGlkKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBjbGFzc05hbWUgPSBwcmVmaXhDbGFzcyhcIm1lZGlhLWRldmljZS1zZWxlY3RcIik7XG4gIHJldHVybiB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGFjdGl2ZURldmljZU9ic2VydmFibGUsXG4gICAgc2V0QWN0aXZlTWVkaWFEZXZpY2VcbiAgfTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvZGlzY29ubmVjdEJ1dHRvbi50c1xuZnVuY3Rpb24gc2V0dXBEaXNjb25uZWN0QnV0dG9uKHJvb20pIHtcbiAgY29uc3QgZGlzY29ubmVjdCA9IChzdG9wVHJhY2tzKSA9PiB7XG4gICAgcm9vbS5kaXNjb25uZWN0KHN0b3BUcmFja3MpO1xuICB9O1xuICBjb25zdCBjbGFzc05hbWUgPSBwcmVmaXhDbGFzcyhcImRpc2Nvbm5lY3QtYnV0dG9uXCIpO1xuICByZXR1cm4geyBjbGFzc05hbWUsIGRpc2Nvbm5lY3QgfTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvY29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IudHNcbmZ1bmN0aW9uIHNldHVwQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IocGFydGljaXBhbnQpIHtcbiAgY29uc3QgY2xhc3NOYW1lID0gcHJlZml4Q2xhc3MoXCJjb25uZWN0aW9uLXF1YWxpdHlcIik7XG4gIGNvbnN0IGNvbm5lY3Rpb25RdWFsaXR5T2JzZXJ2ZXIgPSBjcmVhdGVDb25uZWN0aW9uUXVhbGl0eU9ic2VydmVyKHBhcnRpY2lwYW50KTtcbiAgcmV0dXJuIHsgY2xhc3NOYW1lLCBjb25uZWN0aW9uUXVhbGl0eU9ic2VydmVyIH07XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL3RyYWNrTXV0ZWRJbmRpY2F0b3IudHNcbmltcG9ydCB7IFRyYWNrIGFzIFRyYWNrOSB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuZnVuY3Rpb24gc2V0dXBUcmFja011dGVkSW5kaWNhdG9yKHRyYWNrUmVmKSB7XG4gIGxldCBjbGFzc0ZvclNvdXJjZSA9IFwidHJhY2stbXV0ZWQtaW5kaWNhdG9yLWNhbWVyYVwiO1xuICBzd2l0Y2ggKHRyYWNrUmVmLnNvdXJjZSkge1xuICAgIGNhc2UgVHJhY2s5LlNvdXJjZS5DYW1lcmE6XG4gICAgICBjbGFzc0ZvclNvdXJjZSA9IFwidHJhY2stbXV0ZWQtaW5kaWNhdG9yLWNhbWVyYVwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBUcmFjazkuU291cmNlLk1pY3JvcGhvbmU6XG4gICAgICBjbGFzc0ZvclNvdXJjZSA9IFwidHJhY2stbXV0ZWQtaW5kaWNhdG9yLW1pY3JvcGhvbmVcIjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuICBjb25zdCBjbGFzc05hbWUgPSBwcmVmaXhDbGFzcyhjbGFzc0ZvclNvdXJjZSk7XG4gIGNvbnN0IG1lZGlhTXV0ZWRPYnNlcnZlciA9IG11dGVkT2JzZXJ2ZXIodHJhY2tSZWYpO1xuICByZXR1cm4geyBjbGFzc05hbWUsIG1lZGlhTXV0ZWRPYnNlcnZlciB9O1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9wYXJ0aWNpcGFudE5hbWUudHNcbmZ1bmN0aW9uIHNldHVwUGFydGljaXBhbnROYW1lKHBhcnRpY2lwYW50KSB7XG4gIGNvbnN0IGluZm9PYnNlcnZlciA9IHBhcnRpY2lwYW50SW5mb09ic2VydmVyKHBhcnRpY2lwYW50KTtcbiAgcmV0dXJuIHsgY2xhc3NOYW1lOiBcImxrLXBhcnRpY2lwYW50LW5hbWVcIiwgaW5mb09ic2VydmVyIH07XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL3BhcnRpY2lwYW50VGlsZS50c1xuZnVuY3Rpb24gc2V0dXBQYXJ0aWNpcGFudFRpbGUoKSB7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IHByZWZpeENsYXNzKFwicGFydGljaXBhbnQtdGlsZVwiKTtcbiAgcmV0dXJuIHtcbiAgICBjbGFzc05hbWVcbiAgfTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvY2hhdC50c1xuaW1wb3J0IHsgRGF0YVBhY2tldF9LaW5kIGFzIERhdGFQYWNrZXRfS2luZDIgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCBhcyBCZWhhdmlvclN1YmplY3QyLCBTdWJqZWN0IGFzIFN1YmplY3QzLCBzY2FuLCBtYXAgYXMgbWFwNiwgdGFrZVVudGlsIH0gZnJvbSBcInJ4anNcIjtcblxuLy8gc3JjL29ic2VydmFibGVzL2RhdGFDaGFubmVsLnRzXG5pbXBvcnQgeyBEYXRhUGFja2V0X0tpbmQgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgYXMgT2JzZXJ2YWJsZTMsIGZpbHRlciBhcyBmaWx0ZXIyLCBtYXAgYXMgbWFwNSB9IGZyb20gXCJyeGpzXCI7XG52YXIgRGF0YVRvcGljID0ge1xuICBDSEFUOiBcImxrLWNoYXQtdG9waWNcIlxufTtcbmZ1bmN0aW9uIHNlbmRNZXNzYWdlKF8wLCBfMSwgXzIpIHtcbiAgcmV0dXJuIF9fYXN5bmModGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogKGxvY2FsUGFydGljaXBhbnQsIHBheWxvYWQsIHRvcGljLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGtpbmQsIGRlc3RpbmF0aW9uIH0gPSBvcHRpb25zO1xuICAgIHlpZWxkIGxvY2FsUGFydGljaXBhbnQucHVibGlzaERhdGEocGF5bG9hZCwga2luZCAhPSBudWxsID8ga2luZCA6IERhdGFQYWNrZXRfS2luZC5SRUxJQUJMRSwge1xuICAgICAgZGVzdGluYXRpb24sXG4gICAgICB0b3BpY1xuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHNldHVwRGF0YU1lc3NhZ2VIYW5kbGVyKHJvb20sIHRvcGljLCBvbk1lc3NhZ2UpIHtcbiAgY29uc3QgbWVzc2FnZU9ic2VydmFibGUgPSBjcmVhdGVEYXRhT2JzZXJ2ZXIocm9vbSkucGlwZShcbiAgICBmaWx0ZXIyKChbLCAsICwgbWVzc2FnZVRvcGljXSkgPT4gdG9waWMgPT09IHZvaWQgMCB8fCBtZXNzYWdlVG9waWMgPT09IHRvcGljKSxcbiAgICBtYXA1KChbcGF5bG9hZCwgcGFydGljaXBhbnQsICwgbWVzc2FnZVRvcGljXSkgPT4ge1xuICAgICAgY29uc3QgbXNnID0ge1xuICAgICAgICBwYXlsb2FkLFxuICAgICAgICB0b3BpYzogbWVzc2FnZVRvcGljLFxuICAgICAgICBmcm9tOiBwYXJ0aWNpcGFudFxuICAgICAgfTtcbiAgICAgIG9uTWVzc2FnZSA9PSBudWxsID8gdm9pZCAwIDogb25NZXNzYWdlKG1zZyk7XG4gICAgICByZXR1cm4gbXNnO1xuICAgIH0pXG4gICk7XG4gIGxldCBpc1NlbmRpbmdTdWJzY3JpYmVyO1xuICBjb25zdCBpc1NlbmRpbmdPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUzKChzdWJzY3JpYmVyKSA9PiB7XG4gICAgaXNTZW5kaW5nU3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gIH0pO1xuICBjb25zdCBzZW5kID0gKF8wLCAuLi5fMSkgPT4gX19hc3luYyh0aGlzLCBbXzAsIC4uLl8xXSwgZnVuY3Rpb24qIChwYXlsb2FkLCBvcHRpb25zID0ge30pIHtcbiAgICBpc1NlbmRpbmdTdWJzY3JpYmVyLm5leHQodHJ1ZSk7XG4gICAgdHJ5IHtcbiAgICAgIHlpZWxkIHNlbmRNZXNzYWdlKHJvb20ubG9jYWxQYXJ0aWNpcGFudCwgcGF5bG9hZCwgdG9waWMsIG9wdGlvbnMpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc1NlbmRpbmdTdWJzY3JpYmVyLm5leHQoZmFsc2UpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7IG1lc3NhZ2VPYnNlcnZhYmxlLCBpc1NlbmRpbmdPYnNlcnZhYmxlLCBzZW5kIH07XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL2NoYXQudHNcbnZhciBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG52YXIgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xudmFyIGVuY29kZSA9IChtZXNzYWdlKSA9PiBlbmNvZGVyLmVuY29kZShKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IG1lc3NhZ2UubWVzc2FnZSwgdGltZXN0YW1wOiBtZXNzYWdlLnRpbWVzdGFtcCB9KSk7XG52YXIgZGVjb2RlID0gKG1lc3NhZ2UpID0+IEpTT04ucGFyc2UoZGVjb2Rlci5kZWNvZGUobWVzc2FnZSkpO1xuZnVuY3Rpb24gc2V0dXBDaGF0KHJvb20sIG9wdGlvbnMpIHtcbiAgY29uc3Qgb25EZXN0cm95T2JzZXJ2YWJsZSA9IG5ldyBTdWJqZWN0MygpO1xuICBjb25zdCBtZXNzYWdlU3ViamVjdCA9IG5ldyBTdWJqZWN0MygpO1xuICBjb25zdCB7IG1lc3NhZ2VPYnNlcnZhYmxlIH0gPSBzZXR1cERhdGFNZXNzYWdlSGFuZGxlcihyb29tLCBEYXRhVG9waWMuQ0hBVCk7XG4gIG1lc3NhZ2VPYnNlcnZhYmxlLnBpcGUodGFrZVVudGlsKG9uRGVzdHJveU9ic2VydmFibGUpKS5zdWJzY3JpYmUobWVzc2FnZVN1YmplY3QpO1xuICBjb25zdCB7IG1lc3NhZ2VEZWNvZGVyLCBtZXNzYWdlRW5jb2RlciB9ID0gb3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucyA6IHt9O1xuICBjb25zdCBmaW5hbE1lc3NhZ2VEZWNvZGVyID0gbWVzc2FnZURlY29kZXIgIT0gbnVsbCA/IG1lc3NhZ2VEZWNvZGVyIDogZGVjb2RlO1xuICBjb25zdCBtZXNzYWdlc09ic2VydmFibGUgPSBtZXNzYWdlU3ViamVjdC5waXBlKFxuICAgIG1hcDYoKG1zZykgPT4ge1xuICAgICAgY29uc3QgcGFyc2VkTWVzc2FnZSA9IGZpbmFsTWVzc2FnZURlY29kZXIobXNnLnBheWxvYWQpO1xuICAgICAgY29uc3QgbmV3TWVzc2FnZSA9IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIHBhcnNlZE1lc3NhZ2UpLCB7IGZyb206IG1zZy5mcm9tIH0pO1xuICAgICAgcmV0dXJuIG5ld01lc3NhZ2U7XG4gICAgfSksXG4gICAgc2NhbigoYWNjLCB2YWx1ZSkgPT4gWy4uLmFjYywgdmFsdWVdLCBbXSksXG4gICAgdGFrZVVudGlsKG9uRGVzdHJveU9ic2VydmFibGUpXG4gICk7XG4gIGNvbnN0IGlzU2VuZGluZyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0MihmYWxzZSk7XG4gIGNvbnN0IGZpbmFsTWVzc2FnZUVuY29kZXIgPSBtZXNzYWdlRW5jb2RlciAhPSBudWxsID8gbWVzc2FnZUVuY29kZXIgOiBlbmNvZGU7XG4gIGNvbnN0IHNlbmQgPSAobWVzc2FnZSkgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgY29uc3QgZW5jb2RlZE1zZyA9IGZpbmFsTWVzc2FnZUVuY29kZXIoeyBtZXNzYWdlLCB0aW1lc3RhbXAgfSk7XG4gICAgaXNTZW5kaW5nJC5uZXh0KHRydWUpO1xuICAgIHRyeSB7XG4gICAgICB5aWVsZCBzZW5kTWVzc2FnZShyb29tLmxvY2FsUGFydGljaXBhbnQsIGVuY29kZWRNc2csIERhdGFUb3BpYy5DSEFULCB7XG4gICAgICAgIGtpbmQ6IERhdGFQYWNrZXRfS2luZDIuUkVMSUFCTEVcbiAgICAgIH0pO1xuICAgICAgbWVzc2FnZVN1YmplY3QubmV4dCh7XG4gICAgICAgIHBheWxvYWQ6IGVuY29kZWRNc2csXG4gICAgICAgIHRvcGljOiBEYXRhVG9waWMuQ0hBVCxcbiAgICAgICAgZnJvbTogcm9vbS5sb2NhbFBhcnRpY2lwYW50XG4gICAgICB9KTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNTZW5kaW5nJC5uZXh0KGZhbHNlKTtcbiAgICB9XG4gIH0pO1xuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIG9uRGVzdHJveU9ic2VydmFibGUubmV4dCgpO1xuICAgIG9uRGVzdHJveU9ic2VydmFibGUuY29tcGxldGUoKTtcbiAgfVxuICByZXR1cm4geyBtZXNzYWdlT2JzZXJ2YWJsZTogbWVzc2FnZXNPYnNlcnZhYmxlLCBpc1NlbmRpbmdPYnNlcnZhYmxlOiBpc1NlbmRpbmckLCBzZW5kLCBkZXN0cm95IH07XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL3N0YXJ0QXVkaW8udHNcbmZ1bmN0aW9uIHNldHVwU3RhcnRBdWRpbygpIHtcbiAgY29uc3QgaGFuZGxlU3RhcnRBdWRpb1BsYXliYWNrID0gKHJvb20pID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICBsb2cuaW5mbyhcIlN0YXJ0IEF1ZGlvIGZvciByb29tOiBcIiwgcm9vbSk7XG4gICAgeWllbGQgcm9vbS5zdGFydEF1ZGlvKCk7XG4gIH0pO1xuICBjb25zdCBjbGFzc05hbWUgPSBwcmVmaXhDbGFzcyhcInN0YXJ0LWF1ZGlvLWJ1dHRvblwiKTtcbiAgcmV0dXJuIHsgY2xhc3NOYW1lLCByb29tQXVkaW9QbGF5YmFja0FsbG93ZWRPYnNlcnZhYmxlLCBoYW5kbGVTdGFydEF1ZGlvUGxheWJhY2sgfTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvY2hhdFRvZ2dsZS50c1xuZnVuY3Rpb24gc2V0dXBDaGF0VG9nZ2xlKCkge1xuICBjb25zdCBjbGFzc05hbWUgPSBbcHJlZml4Q2xhc3MoXCJidXR0b25cIiksIHByZWZpeENsYXNzKFwiY2hhdC10b2dnbGVcIildLmpvaW4oXCIgXCIpO1xuICByZXR1cm4geyBjbGFzc05hbWUgfTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvZm9jdXNUb2dnbGUudHNcbmZ1bmN0aW9uIHNldHVwRm9jdXNUb2dnbGUoKSB7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IFtwcmVmaXhDbGFzcyhcImJ1dHRvblwiKSwgcHJlZml4Q2xhc3MoXCJmb2N1cy10b2dnbGUtYnV0dG9uXCIpXS5qb2luKFwiIFwiKTtcbiAgcmV0dXJuIHsgY2xhc3NOYW1lIH07XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL2NsZWFyUGluQnV0dG9uLnRzXG5mdW5jdGlvbiBzZXR1cENsZWFyUGluQnV0dG9uKCkge1xuICBjb25zdCBjbGFzc05hbWUgPSBcImxrLWNsZWFyLXBpbi1idXR0b24gbGstYnV0dG9uXCI7XG4gIHJldHVybiB7IGNsYXNzTmFtZSB9O1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9yb29tLnRzXG5mdW5jdGlvbiBzZXR1cExpdmVLaXRSb29tKCkge1xuICBjb25zdCBjbGFzc05hbWUgPSBcImxrLXJvb20tY29udGFpbmVyXCI7XG4gIHJldHVybiB7IGNsYXNzTmFtZSB9O1xufVxuXG4vLyBzcmMvb2JzZXJ2YWJsZXMvdHJhY2sudHNcbmltcG9ydCB7IFJvb21FdmVudCBhcyBSb29tRXZlbnQ0LCBUcmFja0V2ZW50IH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5pbXBvcnQgeyBtYXAgYXMgbWFwNywgT2JzZXJ2YWJsZSBhcyBPYnNlcnZhYmxlNCwgc3RhcnRXaXRoIGFzIHN0YXJ0V2l0aDUgfSBmcm9tIFwicnhqc1wiO1xuZnVuY3Rpb24gdHJhY2tPYnNlcnZhYmxlKHRyYWNrKSB7XG4gIGNvbnN0IHRyYWNrT2JzZXJ2ZXIgPSBvYnNlcnZlVHJhY2tFdmVudHMoXG4gICAgdHJhY2ssXG4gICAgVHJhY2tFdmVudC5NdXRlZCxcbiAgICBUcmFja0V2ZW50LlVubXV0ZWQsXG4gICAgVHJhY2tFdmVudC5TdWJzY3JpYmVkLFxuICAgIFRyYWNrRXZlbnQuVW5zdWJzY3JpYmVkXG4gICk7XG4gIHJldHVybiB0cmFja09ic2VydmVyO1xufVxuZnVuY3Rpb24gb2JzZXJ2ZVRyYWNrRXZlbnRzKHRyYWNrLCAuLi5ldmVudHMpIHtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlNCgoc3Vic2NyaWJlKSA9PiB7XG4gICAgY29uc3Qgb25UcmFja1VwZGF0ZSA9ICgpID0+IHtcbiAgICAgIHN1YnNjcmliZS5uZXh0KHRyYWNrKTtcbiAgICB9O1xuICAgIGV2ZW50cy5mb3JFYWNoKChldnQpID0+IHtcbiAgICAgIHRyYWNrLm9uKGV2dCwgb25UcmFja1VwZGF0ZSk7XG4gICAgfSk7XG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgICBldmVudHMuZm9yRWFjaCgoZXZ0KSA9PiB7XG4gICAgICAgIHRyYWNrLm9mZihldnQsIG9uVHJhY2tVcGRhdGUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gIH0pLnBpcGUoc3RhcnRXaXRoNSh0cmFjaykpO1xuICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cbmZ1bmN0aW9uIGdldFRyYWNrUmVmZXJlbmNlcyhyb29tLCBzb3VyY2VzLCBvbmx5U3Vic2NyaWJlZFRyYWNrcyA9IHRydWUpIHtcbiAgY29uc3QgbG9jYWxQYXJ0aWNpcGFudCA9IHJvb20ubG9jYWxQYXJ0aWNpcGFudDtcbiAgY29uc3QgYWxsUGFydGljaXBhbnRzID0gW2xvY2FsUGFydGljaXBhbnQsIC4uLkFycmF5LmZyb20ocm9vbS5wYXJ0aWNpcGFudHMudmFsdWVzKCkpXTtcbiAgY29uc3QgdHJhY2tSZWZlcmVuY2VzID0gW107XG4gIGFsbFBhcnRpY2lwYW50cy5mb3JFYWNoKChwYXJ0aWNpcGFudCkgPT4ge1xuICAgIHNvdXJjZXMuZm9yRWFjaCgoc291cmNlKSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2VSZWZlcmVuY2VzID0gQXJyYXkuZnJvbShcbiAgICAgICAgcGFydGljaXBhbnQudHJhY2tzLnZhbHVlcygpXG4gICAgICApLmZpbHRlcihcbiAgICAgICAgKHRyYWNrKSA9PiB0cmFjay5zb3VyY2UgPT09IHNvdXJjZSAmJiAvLyBlaXRoZXIgcmV0dXJuIGFsbCBvciBvbmx5IHRoZSBvbmVzIHRoYXQgYXJlIHN1YnNjcmliZWRcbiAgICAgICAgKCFvbmx5U3Vic2NyaWJlZFRyYWNrcyB8fCB0cmFjay50cmFjaylcbiAgICAgICkubWFwKCh0cmFjaykgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBhcnRpY2lwYW50LFxuICAgICAgICAgIHB1YmxpY2F0aW9uOiB0cmFjayxcbiAgICAgICAgICBzb3VyY2U6IHRyYWNrLnNvdXJjZVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICB0cmFja1JlZmVyZW5jZXMucHVzaCguLi5zb3VyY2VSZWZlcmVuY2VzKTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiB7IHRyYWNrUmVmZXJlbmNlcywgcGFydGljaXBhbnRzOiBhbGxQYXJ0aWNpcGFudHMgfTtcbn1cbmZ1bmN0aW9uIHRyYWNrUmVmZXJlbmNlc09ic2VydmFibGUocm9vbSwgc291cmNlcywgb3B0aW9ucykge1xuICB2YXIgX2EsIF9iO1xuICBjb25zdCBhZGRpdGlvbmFsUm9vbUV2ZW50cyA9IChfYSA9IG9wdGlvbnMuYWRkaXRpb25hbFJvb21FdmVudHMpICE9IG51bGwgPyBfYSA6IGFsbFBhcnRpY2lwYW50Um9vbUV2ZW50cztcbiAgY29uc3Qgb25seVN1YnNjcmliZWRUcmFja3MgPSAoX2IgPSBvcHRpb25zLm9ubHlTdWJzY3JpYmVkKSAhPSBudWxsID8gX2IgOiB0cnVlO1xuICBjb25zdCByb29tRXZlbnRzID0gQXJyYXkuZnJvbShcbiAgICAoLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICAgICAgUm9vbUV2ZW50NC5QYXJ0aWNpcGFudENvbm5lY3RlZCxcbiAgICAgIFJvb21FdmVudDQuUGFydGljaXBhbnREaXNjb25uZWN0ZWQsXG4gICAgICBSb29tRXZlbnQ0LkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWQsXG4gICAgICBSb29tRXZlbnQ0LkxvY2FsVHJhY2tQdWJsaXNoZWQsXG4gICAgICBSb29tRXZlbnQ0LkxvY2FsVHJhY2tVbnB1Ymxpc2hlZCxcbiAgICAgIFJvb21FdmVudDQuVHJhY2tQdWJsaXNoZWQsXG4gICAgICBSb29tRXZlbnQ0LlRyYWNrVW5wdWJsaXNoZWQsXG4gICAgICBSb29tRXZlbnQ0LlRyYWNrU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZCxcbiAgICAgIC4uLmFkZGl0aW9uYWxSb29tRXZlbnRzXG4gICAgXSkpLnZhbHVlcygpXG4gICk7XG4gIGNvbnN0IG9ic2VydmFibGUgPSBvYnNlcnZlUm9vbUV2ZW50cyhyb29tLCAuLi5yb29tRXZlbnRzKS5waXBlKFxuICAgIG1hcDcoKHJvb20yKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gZ2V0VHJhY2tSZWZlcmVuY2VzKHJvb20yLCBzb3VyY2VzLCBvbmx5U3Vic2NyaWJlZFRyYWNrcyk7XG4gICAgICBsb2cuZGVidWcoYFRyYWNrUmVmZXJlbmNlW10gd2FzIHVwZGF0ZWQuIChsZW5ndGggJHtkYXRhLnRyYWNrUmVmZXJlbmNlcy5sZW5ndGh9KWAsIGRhdGEpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSksXG4gICAgc3RhcnRXaXRoNShnZXRUcmFja1JlZmVyZW5jZXMocm9vbSwgc291cmNlcywgb25seVN1YnNjcmliZWRUcmFja3MpKVxuICApO1xuICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cblxuLy8gc3JjL29ic2VydmFibGVzL2RvbS1ldmVudC50c1xuaW1wb3J0IHsgY29uY2F0IGFzIGNvbmNhdDIsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBmcm9tRXZlbnQsIG1hcCBhcyBtYXA4LCBvZiwgc2tpcFVudGlsLCB0aW1lb3V0IH0gZnJvbSBcInJ4anNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUludGVyYWN0aW5nT2JzZXJ2YWJsZShodG1sRWxlbWVudCwgaW5hY3RpdmVBZnRlciA9IDFlMykge1xuICBpZiAoaHRtbEVsZW1lbnQgPT09IG51bGwpXG4gICAgcmV0dXJuIG9mKGZhbHNlKTtcbiAgY29uc3QgbW92ZSQgPSBmcm9tRXZlbnQoaHRtbEVsZW1lbnQsIFwibW91c2Vtb3ZlXCIsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKG1hcDgoKCkgPT4gdHJ1ZSkpO1xuICBjb25zdCBtb3ZlQW5kU3RvcCQgPSBtb3ZlJC5waXBlKFxuICAgIHRpbWVvdXQoe1xuICAgICAgZWFjaDogaW5hY3RpdmVBZnRlcixcbiAgICAgIHdpdGg6ICgpID0+IGNvbmNhdDIob2YoZmFsc2UpLCBtb3ZlQW5kU3RvcCQucGlwZShza2lwVW50aWwobW92ZSQpKSlcbiAgICB9KSxcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICk7XG4gIHJldHVybiBtb3ZlQW5kU3RvcCQ7XG59XG5leHBvcnQge1xuICBEYXRhVG9waWMsXG4gIEdSSURfTEFZT1VUUyxcbiAgUElOX0RFRkFVTFRfU1RBVEUsXG4gIFdJREdFVF9ERUZBVUxUX1NUQVRFLFxuICBhY3RpdmVTcGVha2VyT2JzZXJ2ZXIsXG4gIGFsbFBhcnRpY2lwYW50RXZlbnRzLFxuICBhbGxQYXJ0aWNpcGFudFJvb21FdmVudHMsXG4gIGFsbFJlbW90ZVBhcnRpY2lwYW50RXZlbnRzLFxuICBhbGxSZW1vdGVQYXJ0aWNpcGFudFJvb21FdmVudHMsXG4gIGF0dGFjaElmU3Vic2NyaWJlZCxcbiAgY29tcHV0ZU1lbnVQb3NpdGlvbixcbiAgY29ubmVjdGVkUGFydGljaXBhbnRPYnNlcnZlcixcbiAgY29ubmVjdGVkUGFydGljaXBhbnRzT2JzZXJ2ZXIsXG4gIGNvbm5lY3Rpb25TdGF0ZU9ic2VydmVyLFxuICBjcmVhdGVBY3RpdmVEZXZpY2VPYnNlcnZhYmxlLFxuICBjcmVhdGVDb25uZWN0aW9uUXVhbGl0eU9ic2VydmVyLFxuICBjcmVhdGVEYXRhT2JzZXJ2ZXIsXG4gIGNyZWF0ZURlZmF1bHRHcmFtbWFyLFxuICBjcmVhdGVFbWFpbFJlZ0V4cCxcbiAgY3JlYXRlSW50ZXJhY3RpbmdPYnNlcnZhYmxlLFxuICBjcmVhdGVJc1NwZWFraW5nT2JzZXJ2ZXIsXG4gIGNyZWF0ZU1lZGlhRGV2aWNlT2JzZXJ2ZXIsXG4gIGNyZWF0ZVRyYWNrT2JzZXJ2ZXIsXG4gIGNyZWF0ZVVybFJlZ0V4cCxcbiAgY3NzUHJlZml4LFxuICBlbmNyeXB0aW9uU3RhdHVzT2JzZXJ2YWJsZSxcbiAgZ2V0U2Nyb2xsQmFyV2lkdGgsXG4gIGdldFRyYWNrQnlJZGVudGlmaWVyLFxuICBnZXRUcmFja1JlZmVyZW5jZUlkLFxuICBnZXRUcmFja1JlZmVyZW5jZVNvdXJjZSxcbiAgaXNFcXVhbFRyYWNrUmVmLFxuICBpc0xvY2FsLFxuICBpc01vYmlsZUJyb3dzZXIsXG4gIGlzUGFydGljaXBhbnRTb3VyY2VQaW5uZWQsXG4gIGlzUGFydGljaXBhbnRUcmFja1JlZmVyZW5jZVBpbm5lZCxcbiAgaXNQbGFjZWhvbGRlclJlcGxhY2VtZW50LFxuICBpc1JlbW90ZSxcbiAgaXNTb3VyY2VXaXRPcHRpb25zLFxuICBpc1NvdXJjZXNXaXRoT3B0aW9ucyxcbiAgaXNUcmFja1JlZmVyZW5jZSxcbiAgaXNUcmFja1JlZmVyZW5jZVBpbm5lZCxcbiAgaXNUcmFja1JlZmVyZW5jZVBsYWNlaG9sZGVyLFxuICBpc1dlYixcbiAgbG9nLFxuICBtdXRlZE9ic2VydmVyLFxuICBvYnNlcnZlUGFydGljaXBhbnRFdmVudHMsXG4gIG9ic2VydmVQYXJ0aWNpcGFudE1lZGlhLFxuICBvYnNlcnZlUm9vbUV2ZW50cyxcbiAgb2JzZXJ2ZVRyYWNrRXZlbnRzLFxuICBwYXJ0aWNpcGFudEV2ZW50U2VsZWN0b3IsXG4gIHBhcnRpY2lwYW50SW5mb09ic2VydmVyLFxuICBwYXJ0aWNpcGFudFBlcm1pc3Npb25PYnNlcnZlcixcbiAgcm9vbUF1ZGlvUGxheWJhY2tBbGxvd2VkT2JzZXJ2YWJsZSxcbiAgcm9vbUV2ZW50U2VsZWN0b3IsXG4gIHJvb21JbmZvT2JzZXJ2ZXIsXG4gIHJvb21PYnNlcnZlcixcbiAgc2NyZWVuU2hhcmVPYnNlcnZlcixcbiAgc2VsZWN0R3JpZExheW91dCxcbiAgc2VuZE1lc3NhZ2UsXG4gIHNldERpZmZlcmVuY2UsXG4gIHNldExvZ0xldmVsLFxuICBzZXR1cENoYXQsXG4gIHNldHVwQ2hhdFRvZ2dsZSxcbiAgc2V0dXBDbGVhclBpbkJ1dHRvbixcbiAgc2V0dXBDb25uZWN0aW9uUXVhbGl0eUluZGljYXRvcixcbiAgc2V0dXBEYXRhTWVzc2FnZUhhbmRsZXIsXG4gIHNldHVwRGV2aWNlU2VsZWN0b3IsXG4gIHNldHVwRGlzY29ubmVjdEJ1dHRvbixcbiAgc2V0dXBGb2N1c1RvZ2dsZSxcbiAgc2V0dXBMaXZlS2l0Um9vbSxcbiAgc2V0dXBNYW51YWxUb2dnbGUsXG4gIHNldHVwTWVkaWFUb2dnbGUsXG4gIHNldHVwTWVkaWFUcmFjayxcbiAgc2V0dXBQYXJ0aWNpcGFudE5hbWUsXG4gIHNldHVwUGFydGljaXBhbnRUaWxlLFxuICBzZXR1cFN0YXJ0QXVkaW8sXG4gIHNldHVwVHJhY2tNdXRlZEluZGljYXRvcixcbiAgc29ydFBhcnRpY2lwYW50cyxcbiAgc29ydFRyYWNrUmVmZXJlbmNlcyxcbiAgc3VwcG9ydHNTY3JlZW5TaGFyaW5nLFxuICB0b2tlbml6ZSxcbiAgdHJhY2tPYnNlcnZhYmxlLFxuICB0cmFja1JlZmVyZW5jZXNPYnNlcnZhYmxlLFxuICB1cGRhdGVQYWdlcyxcbiAgd2FzQ2xpY2tPdXRzaWRlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@livekit+components-core@0.7.0_livekit-client@1.14.4/node_modules/@livekit/components-core/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@livekit+components-react@1.3.0_livekit-client@1.14.4_react-dom@18.0.0_react@18.0.0/node_modules/@livekit/components-react/dist/index.mjs":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@1.3.0_livekit-client@1.14.4_react-dom@18.0.0_react@18.0.0/node_modules/@livekit/components-react/dist/index.mjs ***!
  \**********************************************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioConference: function() { return /* binding */ AudioConference; },\n/* harmony export */   AudioTrack: function() { return /* binding */ AudioTrack; },\n/* harmony export */   AudioVisualizer: function() { return /* binding */ AudioVisualizer; },\n/* harmony export */   CarouselLayout: function() { return /* binding */ CarouselLayout; },\n/* harmony export */   CarouselView: function() { return /* binding */ CarouselView; },\n/* harmony export */   Chat: function() { return /* binding */ Chat; },\n/* harmony export */   ChatEntry: function() { return /* binding */ ChatEntry; },\n/* harmony export */   ChatToggle: function() { return /* binding */ ChatToggle; },\n/* harmony export */   ClearPinButton: function() { return /* binding */ ClearPinButton; },\n/* harmony export */   ConnectionQualityIndicator: function() { return /* binding */ ConnectionQualityIndicator; },\n/* harmony export */   ConnectionState: function() { return /* binding */ ConnectionState3; },\n/* harmony export */   ConnectionStateToast: function() { return /* binding */ ConnectionStateToast; },\n/* harmony export */   ControlBar: function() { return /* binding */ ControlBar; },\n/* harmony export */   DisconnectButton: function() { return /* binding */ DisconnectButton; },\n/* harmony export */   FocusLayout: function() { return /* binding */ FocusLayout; },\n/* harmony export */   FocusLayoutContainer: function() { return /* binding */ FocusLayoutContainer; },\n/* harmony export */   FocusToggle: function() { return /* binding */ FocusToggle; },\n/* harmony export */   GridLayout: function() { return /* binding */ GridLayout; },\n/* harmony export */   LKFeatureContext: function() { return /* binding */ LKFeatureContext; },\n/* harmony export */   LayoutContext: function() { return /* binding */ LayoutContext; },\n/* harmony export */   LayoutContextProvider: function() { return /* binding */ LayoutContextProvider; },\n/* harmony export */   LiveKitRoom: function() { return /* binding */ LiveKitRoom; },\n/* harmony export */   MediaDeviceMenu: function() { return /* binding */ MediaDeviceMenu; },\n/* harmony export */   MediaDeviceSelect: function() { return /* binding */ MediaDeviceSelect; },\n/* harmony export */   ParticipantAudioTile: function() { return /* binding */ ParticipantAudioTile; },\n/* harmony export */   ParticipantContext: function() { return /* binding */ ParticipantContext; },\n/* harmony export */   ParticipantContextIfNeeded: function() { return /* binding */ ParticipantContextIfNeeded; },\n/* harmony export */   ParticipantLoop: function() { return /* binding */ ParticipantLoop; },\n/* harmony export */   ParticipantName: function() { return /* binding */ ParticipantName; },\n/* harmony export */   ParticipantTile: function() { return /* binding */ ParticipantTile; },\n/* harmony export */   PreJoin: function() { return /* binding */ PreJoin; },\n/* harmony export */   RoomAudioRenderer: function() { return /* binding */ RoomAudioRenderer; },\n/* harmony export */   RoomContext: function() { return /* binding */ RoomContext; },\n/* harmony export */   RoomName: function() { return /* binding */ RoomName; },\n/* harmony export */   StartAudio: function() { return /* binding */ StartAudio; },\n/* harmony export */   Toast: function() { return /* binding */ Toast; },\n/* harmony export */   TrackContext: function() { return /* binding */ TrackContext; },\n/* harmony export */   TrackLoop: function() { return /* binding */ TrackLoop; },\n/* harmony export */   TrackMutedIndicator: function() { return /* binding */ TrackMutedIndicator; },\n/* harmony export */   TrackRefContext: function() { return /* binding */ TrackRefContext; },\n/* harmony export */   TrackToggle: function() { return /* binding */ TrackToggle; },\n/* harmony export */   VideoConference: function() { return /* binding */ VideoConference; },\n/* harmony export */   VideoTrack: function() { return /* binding */ VideoTrack; },\n/* harmony export */   formatChatMessageLinks: function() { return /* binding */ formatChatMessageLinks; },\n/* harmony export */   useAudioPlayback: function() { return /* binding */ useAudioPlayback; },\n/* harmony export */   useChat: function() { return /* binding */ useChat; },\n/* harmony export */   useChatToggle: function() { return /* binding */ useChatToggle; },\n/* harmony export */   useClearPinButton: function() { return /* binding */ useClearPinButton; },\n/* harmony export */   useConnectionQualityIndicator: function() { return /* binding */ useConnectionQualityIndicator; },\n/* harmony export */   useConnectionState: function() { return /* binding */ useConnectionState; },\n/* harmony export */   useCreateLayoutContext: function() { return /* binding */ useCreateLayoutContext; },\n/* harmony export */   useDataChannel: function() { return /* binding */ useDataChannel; },\n/* harmony export */   useDisconnectButton: function() { return /* binding */ useDisconnectButton; },\n/* harmony export */   useEnsureCreateLayoutContext: function() { return /* binding */ useEnsureCreateLayoutContext; },\n/* harmony export */   useEnsureLayoutContext: function() { return /* binding */ useEnsureLayoutContext; },\n/* harmony export */   useEnsureParticipant: function() { return /* binding */ useEnsureParticipant; },\n/* harmony export */   useEnsureRoom: function() { return /* binding */ useEnsureRoom; },\n/* harmony export */   useEnsureTrackRef: function() { return /* binding */ useEnsureTrackRef; },\n/* harmony export */   useEnsureTrackReference: function() { return /* binding */ useEnsureTrackReference; },\n/* harmony export */   useFacingMode: function() { return /* binding */ useFacingMode; },\n/* harmony export */   useFeatureContext: function() { return /* binding */ useFeatureContext; },\n/* harmony export */   useFocusToggle: function() { return /* binding */ useFocusToggle; },\n/* harmony export */   useGridLayout: function() { return /* binding */ useGridLayout; },\n/* harmony export */   useIsMuted: function() { return /* binding */ useIsMuted; },\n/* harmony export */   useIsSpeaking: function() { return /* binding */ useIsSpeaking; },\n/* harmony export */   useLayoutContext: function() { return /* binding */ useLayoutContext; },\n/* harmony export */   useLiveKitRoom: function() { return /* binding */ useLiveKitRoom; },\n/* harmony export */   useLocalParticipant: function() { return /* binding */ useLocalParticipant; },\n/* harmony export */   useLocalParticipantPermissions: function() { return /* binding */ useLocalParticipantPermissions; },\n/* harmony export */   useMaybeLayoutContext: function() { return /* binding */ useMaybeLayoutContext; },\n/* harmony export */   useMaybeParticipantContext: function() { return /* binding */ useMaybeParticipantContext; },\n/* harmony export */   useMaybeRoomContext: function() { return /* binding */ useMaybeRoomContext; },\n/* harmony export */   useMaybeTrackContext: function() { return /* binding */ useMaybeTrackContext; },\n/* harmony export */   useMaybeTrackRefContext: function() { return /* binding */ useMaybeTrackRefContext; },\n/* harmony export */   useMediaDeviceSelect: function() { return /* binding */ useMediaDeviceSelect; },\n/* harmony export */   useMediaDevices: function() { return /* binding */ useMediaDevices; },\n/* harmony export */   useMediaTrack: function() { return /* binding */ useMediaTrack; },\n/* harmony export */   useMediaTrackByName: function() { return /* binding */ useMediaTrackByName; },\n/* harmony export */   usePagination: function() { return /* binding */ usePagination; },\n/* harmony export */   useParticipantContext: function() { return /* binding */ useParticipantContext; },\n/* harmony export */   useParticipantInfo: function() { return /* binding */ useParticipantInfo; },\n/* harmony export */   useParticipantPermissions: function() { return /* binding */ useParticipantPermissions; },\n/* harmony export */   useParticipantTile: function() { return /* binding */ useParticipantTile; },\n/* harmony export */   useParticipants: function() { return /* binding */ useParticipants; },\n/* harmony export */   usePinnedTracks: function() { return /* binding */ usePinnedTracks; },\n/* harmony export */   usePreviewDevice: function() { return /* binding */ usePreviewDevice; },\n/* harmony export */   usePreviewTracks: function() { return /* binding */ usePreviewTracks; },\n/* harmony export */   useRemoteParticipant: function() { return /* binding */ useRemoteParticipant; },\n/* harmony export */   useRemoteParticipants: function() { return /* binding */ useRemoteParticipants; },\n/* harmony export */   useRoomContext: function() { return /* binding */ useRoomContext; },\n/* harmony export */   useRoomInfo: function() { return /* binding */ useRoomInfo; },\n/* harmony export */   useSortedParticipants: function() { return /* binding */ useSortedParticipants; },\n/* harmony export */   useSpeakingParticipants: function() { return /* binding */ useSpeakingParticipants; },\n/* harmony export */   useStartAudio: function() { return /* binding */ useStartAudio; },\n/* harmony export */   useSwipe: function() { return /* binding */ useSwipe; },\n/* harmony export */   useToken: function() { return /* binding */ useToken; },\n/* harmony export */   useTrack: function() { return /* binding */ useTrack; },\n/* harmony export */   useTrackByName: function() { return /* binding */ useTrackByName; },\n/* harmony export */   useTrackContext: function() { return /* binding */ useTrackContext; },\n/* harmony export */   useTrackMutedIndicator: function() { return /* binding */ useTrackMutedIndicator; },\n/* harmony export */   useTrackRefContext: function() { return /* binding */ useTrackRefContext; },\n/* harmony export */   useTrackToggle: function() { return /* binding */ useTrackToggle; },\n/* harmony export */   useTracks: function() { return /* binding */ useTracks; },\n/* harmony export */   useVisualStableUpdate: function() { return /* binding */ useVisualStableUpdate; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _react_hook_latest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-hook/latest */ \"(app-pages-browser)/./node_modules/.pnpm/@react-hook+latest@1.0.3_react@18.0.0/node_modules/@react-hook/latest/dist/module/index.js\");\n/* harmony import */ var _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @livekit/components-core */ \"(app-pages-browser)/./node_modules/.pnpm/@livekit+components-core@0.7.0_livekit-client@1.14.4/node_modules/@livekit/components-core/dist/index.mjs\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/.pnpm/clsx@2.0.0/node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! livekit-client */ \"(app-pages-browser)/./node_modules/.pnpm/livekit-client@1.14.4/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var usehooks_ts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! usehooks-ts */ \"(app-pages-browser)/./node_modules/.pnpm/usehooks-ts@2.9.1_react-dom@18.0.0_react@18.0.0/node_modules/usehooks-ts/dist/esm/index.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/components/controls/ClearPinButton.tsx\n\n\n// src/hooks/useAudioPlayback.ts\n\n\n// src/hooks/internal/useResizeObserver.ts\n\n\nfunction useResizeObserver(target, callback) {\n  const resizeObserver = getResizeObserver();\n  const storedCallback = (0,_react_hook_latest__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(callback);\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    let didUnsubscribe = false;\n    const targetEl = target.current;\n    if (!targetEl)\n      return;\n    function cb(entry, observer) {\n      if (didUnsubscribe)\n        return;\n      storedCallback.current(entry, observer);\n    }\n    resizeObserver == null ? void 0 : resizeObserver.subscribe(targetEl, cb);\n    return () => {\n      didUnsubscribe = true;\n      resizeObserver == null ? void 0 : resizeObserver.unsubscribe(targetEl, cb);\n    };\n  }, [target.current, resizeObserver, storedCallback]);\n  return resizeObserver == null ? void 0 : resizeObserver.observer;\n}\nfunction createResizeObserver() {\n  let ticking = false;\n  let allEntries = [];\n  const callbacks = /* @__PURE__ */ new Map();\n  if (typeof window === \"undefined\") {\n    return;\n  }\n  const observer = new ResizeObserver((entries, obs) => {\n    allEntries = allEntries.concat(entries);\n    if (!ticking) {\n      window.requestAnimationFrame(() => {\n        const triggered = /* @__PURE__ */ new Set();\n        for (let i = 0; i < allEntries.length; i++) {\n          if (triggered.has(allEntries[i].target))\n            continue;\n          triggered.add(allEntries[i].target);\n          const cbs = callbacks.get(allEntries[i].target);\n          cbs == null ? void 0 : cbs.forEach((cb) => cb(allEntries[i], obs));\n        }\n        allEntries = [];\n        ticking = false;\n      });\n    }\n    ticking = true;\n  });\n  return {\n    observer,\n    subscribe(target, callback) {\n      var _a;\n      observer.observe(target);\n      const cbs = (_a = callbacks.get(target)) != null ? _a : [];\n      cbs.push(callback);\n      callbacks.set(target, cbs);\n    },\n    unsubscribe(target, callback) {\n      var _a;\n      const cbs = (_a = callbacks.get(target)) != null ? _a : [];\n      if (cbs.length === 1) {\n        observer.unobserve(target);\n        callbacks.delete(target);\n        return;\n      }\n      const cbIndex = cbs.indexOf(callback);\n      if (cbIndex !== -1)\n        cbs.splice(cbIndex, 1);\n      callbacks.set(target, cbs);\n    }\n  };\n}\nvar _resizeObserver;\nvar getResizeObserver = () => !_resizeObserver ? _resizeObserver = createResizeObserver() : _resizeObserver;\nvar useSize = (target) => {\n  const [size, setSize] = react__WEBPACK_IMPORTED_MODULE_0__.useState({ width: 0, height: 0 });\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    if (target.current) {\n      const { width, height } = target.current.getBoundingClientRect();\n      setSize({ width, height });\n    }\n  }, [target.current]);\n  const resizeCallback = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (entry) => setSize(entry.contentRect),\n    []\n  );\n  useResizeObserver(target, resizeCallback);\n  return size;\n};\n\n// src/hooks/internal/useObservableState.ts\n\nfunction useObservableState(observable, startWith) {\n  const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(startWith);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (typeof window === \"undefined\" || !observable)\n      return;\n    const subscription = observable.subscribe(setState);\n    return () => subscription.unsubscribe();\n  }, [observable]);\n  return state;\n}\n\n// src/hooks/internal/useMediaQuery.ts\n\nfunction useMediaQuery(query) {\n  const getMatches = (query2) => {\n    if (typeof window !== \"undefined\") {\n      return window.matchMedia(query2).matches;\n    }\n    return false;\n  };\n  const [matches, setMatches] = react__WEBPACK_IMPORTED_MODULE_0__.useState(getMatches(query));\n  function handleChange() {\n    setMatches(getMatches(query));\n  }\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const matchMedia = window.matchMedia(query);\n    handleChange();\n    if (matchMedia.addListener) {\n      matchMedia.addListener(handleChange);\n    } else {\n      matchMedia.addEventListener(\"change\", handleChange);\n    }\n    return () => {\n      if (matchMedia.removeListener) {\n        matchMedia.removeListener(handleChange);\n      } else {\n        matchMedia.removeEventListener(\"change\", handleChange);\n      }\n    };\n  }, [query]);\n  return matches;\n}\n\n// src/hooks/useAudioPlayback.ts\n\n\n// src/context/layout-context.ts\n\n\n\n// src/context/chat-context.ts\nfunction chatReducer(state, action) {\n  if (action.msg === \"show_chat\") {\n    return __spreadProps(__spreadValues({}, state), { showChat: true, unreadMessages: 0 });\n  } else if (action.msg === \"hide_chat\") {\n    return __spreadProps(__spreadValues({}, state), { showChat: false });\n  } else if (action.msg === \"toggle_chat\") {\n    const newState = __spreadProps(__spreadValues({}, state), { showChat: !state.showChat });\n    if (newState.showChat === true) {\n      newState.unreadMessages = 0;\n    }\n    return newState;\n  } else if (action.msg === \"unread_msg\") {\n    return __spreadProps(__spreadValues({}, state), { unreadMessages: action.count });\n  } else {\n    return __spreadValues({}, state);\n  }\n}\n\n// src/context/pin-context.ts\nfunction pinReducer(state, action) {\n  if (action.msg === \"set_pin\") {\n    return [action.trackReference];\n  } else if (action.msg === \"clear_pin\") {\n    return [];\n  } else {\n    return __spreadValues({}, state);\n  }\n}\n\n// src/context/layout-context.ts\nvar LayoutContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useLayoutContext() {\n  const layoutContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LayoutContext);\n  if (!layoutContext) {\n    throw Error(\"Tried to access LayoutContext context outside a LayoutContextProvider provider.\");\n  }\n  return layoutContext;\n}\nfunction useEnsureLayoutContext(layoutContext) {\n  const layout = useMaybeLayoutContext();\n  layoutContext != null ? layoutContext : layoutContext = layout;\n  if (!layoutContext) {\n    throw Error(\"Tried to access LayoutContext context outside a LayoutContextProvider provider.\");\n  }\n  return layoutContext;\n}\nfunction useCreateLayoutContext() {\n  const [pinState, pinDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(pinReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.PIN_DEFAULT_STATE);\n  const [widgetState, widgetDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(chatReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.WIDGET_DEFAULT_STATE);\n  return {\n    pin: { dispatch: pinDispatch, state: pinState },\n    widget: { dispatch: widgetDispatch, state: widgetState }\n  };\n}\nfunction useEnsureCreateLayoutContext(layoutContext) {\n  const [pinState, pinDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(pinReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.PIN_DEFAULT_STATE);\n  const [widgetState, widgetDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(chatReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.WIDGET_DEFAULT_STATE);\n  return layoutContext != null ? layoutContext : {\n    pin: { dispatch: pinDispatch, state: pinState },\n    widget: { dispatch: widgetDispatch, state: widgetState }\n  };\n}\nfunction useMaybeLayoutContext() {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(LayoutContext);\n}\n\n// src/context/participant-context.ts\n\n\n// src/context/track-reference-context.ts\n\nvar TrackRefContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(\n  void 0\n);\nvar TrackContext = TrackRefContext;\nfunction useTrackContext() {\n  return useTrackRefContext();\n}\nfunction useTrackRefContext() {\n  const trackReference = react__WEBPACK_IMPORTED_MODULE_0__.useContext(TrackRefContext);\n  if (!trackReference) {\n    throw Error(\"tried to access track context outside of track context provider\");\n  }\n  return trackReference;\n}\nfunction useMaybeTrackContext() {\n  return useMaybeTrackRefContext();\n}\nfunction useMaybeTrackRefContext() {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(TrackRefContext);\n}\nfunction useEnsureTrackReference(track) {\n  return useEnsureTrackRef(track);\n}\nfunction useEnsureTrackRef(trackRef) {\n  const context = useMaybeTrackRefContext();\n  const ref = trackRef != null ? trackRef : context;\n  if (!ref) {\n    throw new Error(\n      \"No TrackRef, make sure you are inside a TrackRefContext or pass the TrackRef explicitly\"\n    );\n  }\n  return ref;\n}\n\n// src/context/participant-context.ts\nvar ParticipantContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useParticipantContext() {\n  const participant = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ParticipantContext);\n  if (!participant) {\n    throw Error(\"tried to access participant context outside of participant context provider\");\n  }\n  return participant;\n}\nfunction useMaybeParticipantContext() {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(ParticipantContext);\n}\nfunction useEnsureParticipant(participant) {\n  var _a;\n  const context = useMaybeParticipantContext();\n  const trackContext = useMaybeTrackRefContext();\n  const p = (_a = participant != null ? participant : context) != null ? _a : trackContext == null ? void 0 : trackContext.participant;\n  if (!p) {\n    throw new Error(\n      \"No participant provided, make sure you are inside a participant context or pass the participant explicitly\"\n    );\n  }\n  return p;\n}\n\n// src/context/room-context.ts\n\nvar RoomContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useRoomContext() {\n  const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(RoomContext);\n  if (!ctx) {\n    throw Error(\"tried to access room context outside of livekit room component\");\n  }\n  return ctx;\n}\nfunction useMaybeRoomContext() {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(RoomContext);\n}\nfunction useEnsureRoom(room) {\n  const context = useMaybeRoomContext();\n  const r = room != null ? room : context;\n  if (!r) {\n    throw new Error(\n      \"No room provided, make sure you are inside a Room context or pass the room explicitly\"\n    );\n  }\n  return r;\n}\n\n// src/context/feature-context.ts\n\nvar LKFeatureContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useFeatureContext(require2) {\n  const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LKFeatureContext);\n  if (require2 === true) {\n    if (ctx) {\n      return ctx;\n    } else {\n      throw Error(\"tried to access feature context, but none is present\");\n    }\n  }\n  return ctx;\n}\n\n// src/hooks/useAudioPlayback.ts\nfunction useAudioPlayback(room) {\n  const roomEnsured = useEnsureRoom(room);\n  const startAudio = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => __async(this, null, function* () {\n    yield roomEnsured.startAudio();\n  }), [roomEnsured]);\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.roomAudioPlaybackAllowedObservable)(roomEnsured),\n    [roomEnsured]\n  );\n  const { canPlayAudio } = useObservableState(observable, {\n    canPlayAudio: roomEnsured.canPlaybackAudio\n  });\n  return { canPlayAudio, startAudio };\n}\n\n// src/hooks/useClearPinButton.ts\n\n\n\n// src/mergeProps.ts\n\nfunction chain(...callbacks) {\n  return (...args) => {\n    for (const callback of callbacks) {\n      if (typeof callback === \"function\") {\n        callback(...args);\n      }\n    }\n  };\n}\nfunction mergeProps(...args) {\n  const result = __spreadValues({}, args[0]);\n  for (let i = 1; i < args.length; i++) {\n    const props = args[i];\n    for (const key in props) {\n      const a = result[key];\n      const b = props[key];\n      if (typeof a === \"function\" && typeof b === \"function\" && // This is a lot faster than a regex.\n      key[0] === \"o\" && key[1] === \"n\" && key.charCodeAt(2) >= /* 'A' */\n      65 && key.charCodeAt(2) <= /* 'Z' */\n      90) {\n        result[key] = chain(a, b);\n      } else if ((key === \"className\" || key === \"UNSAFE_className\") && typeof a === \"string\" && typeof b === \"string\") {\n        result[key] = (0,clsx__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(a, b);\n      } else {\n        result[key] = b !== void 0 ? b : a;\n      }\n    }\n  }\n  return result;\n}\n\n// src/hooks/useClearPinButton.ts\nfunction useClearPinButton(props) {\n  const { state, dispatch } = useLayoutContext().pin;\n  const buttonProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const { className } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupClearPinButton)();\n    const mergedProps = mergeProps(props, {\n      className,\n      disabled: !(state == null ? void 0 : state.length),\n      onClick: () => {\n        if (dispatch)\n          dispatch({ msg: \"clear_pin\" });\n      }\n    });\n    return mergedProps;\n  }, [props, dispatch, state]);\n  return { buttonProps };\n}\n\n// src/hooks/useConnectionQualityIndicator.ts\n\n\n\nfunction useConnectionQualityIndicator(options = {}) {\n  const p = useEnsureParticipant(options.participant);\n  const { className, connectionQualityObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupConnectionQualityIndicator)(p),\n    [p]\n  );\n  const quality = useObservableState(connectionQualityObserver, livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionQuality.Unknown);\n  return { className, quality };\n}\n\n// src/hooks/useConnectionStatus.ts\n\n\nfunction useConnectionState(room) {\n  const r = useEnsureRoom(room);\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.connectionStateObserver)(r), [r]);\n  const connectionState = useObservableState(observable, r.state);\n  return connectionState;\n}\n\n// src/hooks/useDataChannel.ts\n\n\nfunction useDataChannel(topicOrCallback, callback) {\n  const onMessage = typeof topicOrCallback === \"function\" ? topicOrCallback : callback;\n  const topic = typeof topicOrCallback === \"string\" ? topicOrCallback : void 0;\n  const room = useRoomContext();\n  const { send, messageObservable, isSendingObservable } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupDataMessageHandler)(room, topic, onMessage),\n    [room, topic, onMessage]\n  );\n  const message = useObservableState(messageObservable, void 0);\n  const isSending = useObservableState(isSendingObservable, false);\n  return {\n    message,\n    send,\n    isSending\n  };\n}\n\n// src/hooks/useDisconnectButton.ts\n\n\n\nfunction useDisconnectButton(props) {\n  const room = useRoomContext();\n  const connectionState = useConnectionState(room);\n  const buttonProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const { className, disconnect } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupDisconnectButton)(room);\n    const mergedProps = mergeProps(props, {\n      className,\n      onClick: () => {\n        var _a;\n        return disconnect((_a = props.stopTracks) != null ? _a : true);\n      },\n      disabled: connectionState === livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Disconnected\n    });\n    return mergedProps;\n  }, [room, props, connectionState]);\n  return { buttonProps };\n}\n\n// src/hooks/useFacingMode.ts\n\nfunction useFacingMode(trackReference) {\n  if (trackReference.publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.LocalTrackPublication) {\n    const localTrack = trackReference.publication.track;\n    if (localTrack) {\n      const { facingMode } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.facingModeFromLocalTrack)(localTrack);\n      return facingMode;\n    }\n  }\n  return \"undefined\";\n}\n\n// src/hooks/useFocusToggle.ts\n\n\nfunction useFocusToggle({ trackRef, trackSource, participant, props }) {\n  const p = useEnsureParticipant(participant);\n  if (!trackRef && !trackSource) {\n    throw new Error(\"trackRef or trackSource must be defined.\");\n  }\n  const layoutContext = useMaybeLayoutContext();\n  const { className } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupFocusToggle)(), []);\n  const inFocus = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (trackRef) {\n      return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReferencePinned)(trackRef, layoutContext == null ? void 0 : layoutContext.pin.state);\n    } else if (trackSource) {\n      const track = p.getTrack(trackSource);\n      if ((layoutContext == null ? void 0 : layoutContext.pin.state) && track) {\n        return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReferencePinned)(\n          { participant: p, source: trackSource, publication: track },\n          layoutContext.pin.state\n        );\n      } else {\n        return false;\n      }\n    } else {\n      throw new Error(\"trackRef or trackSource and participant must be defined.\");\n    }\n  }, [trackRef, layoutContext == null ? void 0 : layoutContext.pin.state, p, trackSource]);\n  const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => mergeProps(props, {\n      className,\n      onClick: (event) => {\n        var _a, _b, _c, _d, _e;\n        (_a = props.onClick) == null ? void 0 : _a.call(props, event);\n        if (trackRef && (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference)(trackRef)) {\n          if (inFocus) {\n            (_c = layoutContext == null ? void 0 : (_b = layoutContext.pin).dispatch) == null ? void 0 : _c.call(_b, {\n              msg: \"clear_pin\"\n            });\n          } else {\n            (_e = layoutContext == null ? void 0 : (_d = layoutContext.pin).dispatch) == null ? void 0 : _e.call(_d, {\n              msg: \"set_pin\",\n              trackReference: trackRef\n            });\n          }\n        } else if (trackSource) {\n          const track = p.getTrack(trackSource);\n          if ((layoutContext == null ? void 0 : layoutContext.pin.dispatch) && track) {\n            if (inFocus) {\n              layoutContext.pin.dispatch({\n                msg: \"clear_pin\"\n              });\n            } else {\n              layoutContext.pin.dispatch({\n                msg: \"set_pin\",\n                trackReference: {\n                  participant: p,\n                  publication: track,\n                  source: track.source\n                }\n              });\n            }\n          }\n        }\n      }\n    }),\n    [props, className, trackRef, trackSource, inFocus, layoutContext == null ? void 0 : layoutContext.pin, p]\n  );\n  return { mergedProps, inFocus };\n}\n\n// src/hooks/useGridLayout.ts\n\n\nfunction useGridLayout(gridElement, trackCount) {\n  const { width, height } = useSize(gridElement);\n  const layout = width > 0 && height > 0 ? (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.selectGridLayout)(_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.GRID_LAYOUTS, trackCount, width, height) : _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.GRID_LAYOUTS[0];\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (gridElement.current && layout) {\n      gridElement.current.style.setProperty(\"--lk-col-count\", layout == null ? void 0 : layout.columns.toString());\n      gridElement.current.style.setProperty(\"--lk-row-count\", layout == null ? void 0 : layout.rows.toString());\n    }\n  }, [gridElement, layout]);\n  return {\n    layout\n  };\n}\n\n// src/hooks/useIsMuted.ts\n\n\nfunction useIsMuted(sourceOrTrackRef, options = {}) {\n  var _a, _b;\n  const passedParticipant = typeof sourceOrTrackRef === \"string\" ? options.participant : sourceOrTrackRef.participant;\n  const p = useEnsureParticipant(passedParticipant);\n  const ref = typeof sourceOrTrackRef === \"string\" ? { participant: p, source: sourceOrTrackRef } : sourceOrTrackRef;\n  const [isMuted, setIsMuted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    !!(((_a = ref.publication) == null ? void 0 : _a.isMuted) || ((_b = p.getTrack(ref.source)) == null ? void 0 : _b.isMuted))\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const listener = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.mutedObserver)(ref).subscribe(setIsMuted);\n    return () => listener.unsubscribe();\n  }, [(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackReferenceId)(ref)]);\n  return isMuted;\n}\n\n// src/hooks/useIsSpeaking.ts\n\n\nfunction useIsSpeaking(participant) {\n  const p = useEnsureParticipant(participant);\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createIsSpeakingObserver)(p), [p]);\n  const isSpeaking = useObservableState(observable, p.isSpeaking);\n  return isSpeaking;\n}\n\n// src/hooks/useLiveKitRoom.ts\n\n\n\nvar defaultRoomProps = {\n  connect: true,\n  audio: false,\n  video: false\n};\nfunction useLiveKitRoom(props) {\n  const _a = __spreadValues(__spreadValues({}, defaultRoomProps), props), {\n    token,\n    serverUrl,\n    options,\n    room: passedRoom,\n    connectOptions,\n    connect,\n    audio,\n    video,\n    screen,\n    onConnected,\n    onDisconnected,\n    onError,\n    onMediaDeviceFailure,\n    simulateParticipants\n  } = _a, rest = __objRest(_a, [\n    \"token\",\n    \"serverUrl\",\n    \"options\",\n    \"room\",\n    \"connectOptions\",\n    \"connect\",\n    \"audio\",\n    \"video\",\n    \"screen\",\n    \"onConnected\",\n    \"onDisconnected\",\n    \"onError\",\n    \"onMediaDeviceFailure\",\n    \"simulateParticipants\"\n  ]);\n  if (options && passedRoom) {\n    _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(\n      \"when using a manually created room, the options object will be ignored. set the desired options directly when creating the room instead.\"\n    );\n  }\n  const [room, setRoom] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    setRoom(passedRoom != null ? passedRoom : new livekit_client__WEBPACK_IMPORTED_MODULE_4__.Room(options));\n  }, [passedRoom]);\n  const htmlProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const { className } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupLiveKitRoom)();\n    return mergeProps(rest, { className });\n  }, [rest]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!room)\n      return;\n    const onSignalConnected = () => {\n      const localP = room.localParticipant;\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"trying to publish local tracks\");\n      Promise.all([\n        localP.setMicrophoneEnabled(!!audio, typeof audio !== \"boolean\" ? audio : void 0),\n        localP.setCameraEnabled(!!video, typeof video !== \"boolean\" ? video : void 0),\n        localP.setScreenShareEnabled(!!screen, typeof screen !== \"boolean\" ? screen : void 0)\n      ]).catch((e) => {\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(e);\n        onError == null ? void 0 : onError(e);\n      });\n    };\n    const onMediaDeviceError = (e) => {\n      const mediaDeviceFailure = livekit_client__WEBPACK_IMPORTED_MODULE_4__.MediaDeviceFailure.getFailure(e);\n      onMediaDeviceFailure == null ? void 0 : onMediaDeviceFailure(mediaDeviceFailure);\n    };\n    room.on(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.SignalConnected, onSignalConnected);\n    room.on(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.MediaDevicesError, onMediaDeviceError);\n    return () => {\n      room.off(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.SignalConnected, onSignalConnected);\n      room.off(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.MediaDevicesError, onMediaDeviceError);\n    };\n  }, [room, audio, video, screen, onError]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!room)\n      return;\n    if (simulateParticipants) {\n      room.simulateParticipants({\n        participants: {\n          count: simulateParticipants\n        },\n        publish: {\n          audio: true,\n          useRealTracks: true\n        }\n      });\n      return;\n    }\n    if (!token) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"no token yet\");\n      return;\n    }\n    if (!serverUrl) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"no livekit url provided\");\n      onError == null ? void 0 : onError(Error(\"no livekit url provided\"));\n      return;\n    }\n    if (connect) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"connecting\");\n      room.connect(serverUrl, token, connectOptions).catch((e) => {\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(e);\n        onError == null ? void 0 : onError(e);\n      });\n    } else {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"disconnecting because connect is false\");\n      room.disconnect();\n    }\n  }, [\n    connect,\n    token,\n    JSON.stringify(connectOptions),\n    room,\n    onError,\n    serverUrl,\n    simulateParticipants\n  ]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!room)\n      return;\n    const connectionStateChangeListener = (state) => {\n      switch (state) {\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Disconnected:\n          if (onDisconnected)\n            onDisconnected();\n          break;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Connected:\n          if (onConnected)\n            onConnected();\n          break;\n        default:\n          break;\n      }\n    };\n    room.on(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.ConnectionStateChanged, connectionStateChangeListener);\n    return () => {\n      room.off(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.ConnectionStateChanged, connectionStateChangeListener);\n    };\n  }, [token, onConnected, onDisconnected, room]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!room)\n      return;\n    return () => {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.info(\"disconnecting on onmount\");\n      room.disconnect();\n    };\n  }, [room]);\n  return { room, htmlProps };\n}\n\n// src/hooks/useLocalParticipant.ts\n\n\nfunction useLocalParticipant(options = {}) {\n  const room = useEnsureRoom(options.room);\n  const [localParticipant, setLocalParticipant] = react__WEBPACK_IMPORTED_MODULE_0__.useState(room.localParticipant);\n  const [isMicrophoneEnabled, setIsMicrophoneEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    localParticipant.isMicrophoneEnabled\n  );\n  const [isCameraEnabled, setIsCameraEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    localParticipant.isMicrophoneEnabled\n  );\n  const [lastMicrophoneError, setLastMicrophoneError] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    localParticipant.lastMicrophoneError\n  );\n  const [lastCameraError, setLastCameraError] = react__WEBPACK_IMPORTED_MODULE_0__.useState(localParticipant.lastCameraError);\n  const [isScreenShareEnabled, setIsScreenShareEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    localParticipant.isMicrophoneEnabled\n  );\n  const [microphoneTrack, setMicrophoneTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    void 0\n  );\n  const [cameraTrack, setCameraTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n  const handleUpdate = (media) => {\n    setIsCameraEnabled(media.isCameraEnabled);\n    setIsMicrophoneEnabled(media.isMicrophoneEnabled);\n    setIsScreenShareEnabled(media.isScreenShareEnabled);\n    setCameraTrack(media.cameraTrack);\n    setMicrophoneTrack(media.microphoneTrack);\n    setLastMicrophoneError(media.participant.lastMicrophoneError);\n    setLastCameraError(media.participant.lastCameraError);\n    setLocalParticipant(media.participant);\n  };\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const listener = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.observeParticipantMedia)(localParticipant).subscribe(handleUpdate);\n    return () => listener.unsubscribe();\n  }, [localParticipant]);\n  return {\n    isMicrophoneEnabled,\n    isScreenShareEnabled,\n    isCameraEnabled,\n    microphoneTrack,\n    cameraTrack,\n    lastMicrophoneError,\n    lastCameraError,\n    localParticipant\n  };\n}\n\n// src/hooks/useLocalParticipantPermissions.ts\n\n\nfunction useLocalParticipantPermissions() {\n  const room = useRoomContext();\n  const permissionObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.participantPermissionObserver)(room.localParticipant),\n    [room]\n  );\n  const permissions = useObservableState(permissionObserver, room.localParticipant.permissions);\n  return permissions;\n}\n\n// src/hooks/useMediaDeviceSelect.ts\n\n\nfunction useMediaDeviceSelect({\n  kind,\n  room,\n  track,\n  requestPermissions\n}) {\n  const roomContext = useMaybeRoomContext();\n  const deviceObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createMediaDeviceObserver)(kind, requestPermissions),\n    [kind, requestPermissions]\n  );\n  const devices = useObservableState(deviceObserver, []);\n  const [currentDeviceId, setCurrentDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"\");\n  const { className, activeDeviceObservable, setActiveMediaDevice } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupDeviceSelector)(kind, room != null ? room : roomContext, track),\n    [kind, room, roomContext, track]\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const listener = activeDeviceObservable.subscribe((deviceId) => {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.info(\"setCurrentDeviceId\", deviceId);\n      if (deviceId)\n        setCurrentDeviceId(deviceId);\n    });\n    return () => {\n      listener == null ? void 0 : listener.unsubscribe();\n    };\n  }, [activeDeviceObservable]);\n  return { devices, className, activeDeviceId: currentDeviceId, setActiveMediaDevice };\n}\n\n// src/hooks/useMediaDevices.ts\n\n\nfunction useMediaDevices({ kind }) {\n  const deviceObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createMediaDeviceObserver)(kind), [kind]);\n  const devices = useObservableState(deviceObserver, []);\n  return devices;\n}\n\n// src/hooks/useMediaTrackBySourceOrName.ts\n\n\n\n\n// src/utils.ts\n\nfunction isProp(prop) {\n  return prop !== void 0;\n}\nfunction mergeProps2(...props) {\n  return mergeProps(...props.filter(isProp));\n}\nfunction cloneSingleChild(children, props, key) {\n  return react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, (child) => {\n    if (react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child) && react__WEBPACK_IMPORTED_MODULE_0__.Children.only(children)) {\n      return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, __spreadProps(__spreadValues({}, props), { key }));\n    }\n    return child;\n  });\n}\n\n// src/hooks/useMediaTrackBySourceOrName.ts\nfunction useMediaTrackBySourceOrName(observerOptions, options = {}) {\n  var _a;\n  const [publication, setPublication] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackByIdentifier)(observerOptions));\n  const [isMuted, setMuted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(publication == null ? void 0 : publication.isMuted);\n  const [isSubscribed, setSubscribed] = react__WEBPACK_IMPORTED_MODULE_0__.useState(publication == null ? void 0 : publication.isSubscribed);\n  const [track, setTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(publication == null ? void 0 : publication.track);\n  const [orientation, setOrientation] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"landscape\");\n  const previousElement = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  const { className, trackObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupMediaTrack)(observerOptions);\n  }, [\n    (_a = observerOptions.participant.sid) != null ? _a : observerOptions.participant.identity,\n    observerOptions.source,\n    (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference)(observerOptions) && observerOptions.publication.trackSid\n  ]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const subscription = trackObserver.subscribe((publication2) => {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"update track\", publication2);\n      setPublication(publication2);\n      setMuted(publication2 == null ? void 0 : publication2.isMuted);\n      setSubscribed(publication2 == null ? void 0 : publication2.isSubscribed);\n      setTrack(publication2 == null ? void 0 : publication2.track);\n    });\n    return () => subscription == null ? void 0 : subscription.unsubscribe();\n  }, [trackObserver]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a2, _b;\n    if (track) {\n      if (previousElement.current) {\n        track.detach(previousElement.current);\n      }\n      if (((_a2 = options.element) == null ? void 0 : _a2.current) && !((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isLocal)(observerOptions.participant) && (track == null ? void 0 : track.kind) === \"audio\")) {\n        track.attach(options.element.current);\n      }\n    }\n    previousElement.current = (_b = options.element) == null ? void 0 : _b.current;\n    return () => {\n      if (previousElement.current) {\n        track == null ? void 0 : track.detach(previousElement.current);\n      }\n    };\n  }, [track, options.element]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a2, _b;\n    if (typeof ((_a2 = publication == null ? void 0 : publication.dimensions) == null ? void 0 : _a2.width) === \"number\" && typeof ((_b = publication == null ? void 0 : publication.dimensions) == null ? void 0 : _b.height) === \"number\") {\n      const orientation_ = publication.dimensions.width > publication.dimensions.height ? \"landscape\" : \"portrait\";\n      setOrientation(orientation_);\n    }\n  }, [publication]);\n  return {\n    publication,\n    isMuted,\n    isSubscribed,\n    track,\n    elementProps: mergeProps2(options.props, __spreadValues({\n      className,\n      \"data-lk-local-participant\": observerOptions.participant.isLocal,\n      \"data-lk-source\": publication == null ? void 0 : publication.source\n    }, (publication == null ? void 0 : publication.kind) === \"video\" && { \"data-lk-orientation\": orientation }))\n  };\n}\n\n// src/hooks/useMediaTrack.ts\nfunction useMediaTrack(source, participant, options = {}) {\n  const p = useEnsureParticipant(participant);\n  return useMediaTrackBySourceOrName({ source, participant: p }, options);\n}\n\n// src/hooks/useMediaTrackByName.ts\nfunction useMediaTrackByName(name, participant, options = {}) {\n  const p = useEnsureParticipant(participant);\n  return useMediaTrackBySourceOrName({ name, participant: p }, options);\n}\n\n// src/hooks/usePagination.ts\n\n\n// src/hooks/useVisualStableUpdate.ts\n\n\nfunction useVisualStableUpdate(trackReferences, maxItemsOnPage, options = {}) {\n  const lastTrackRefs = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]);\n  const lastMaxItemsOnPage = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n  const layoutChanged = maxItemsOnPage !== lastMaxItemsOnPage.current;\n  const sortedTrackRefs = typeof options.customSortFunction === \"function\" ? options.customSortFunction(trackReferences) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.sortTrackReferences)(trackReferences);\n  let updatedTrackRefs = [...sortedTrackRefs];\n  if (layoutChanged === false) {\n    try {\n      updatedTrackRefs = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.updatePages)(lastTrackRefs.current, sortedTrackRefs, maxItemsOnPage);\n    } catch (error) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Error while running updatePages(): \", error);\n    }\n  }\n  if (layoutChanged) {\n    lastTrackRefs.current = sortedTrackRefs;\n  } else {\n    lastTrackRefs.current = updatedTrackRefs;\n  }\n  lastMaxItemsOnPage.current = maxItemsOnPage;\n  return updatedTrackRefs;\n}\n\n// src/hooks/usePagination.ts\nfunction usePagination(itemPerPage, trackReferences) {\n  const [currentPage, setCurrentPage] = react__WEBPACK_IMPORTED_MODULE_0__.useState(1);\n  const totalPageCount = Math.max(Math.ceil(trackReferences.length / itemPerPage), 1);\n  if (currentPage > totalPageCount) {\n    setCurrentPage(totalPageCount);\n  }\n  const lastItemIndex = currentPage * itemPerPage;\n  const firstItemIndex = lastItemIndex - itemPerPage;\n  const changePage = (direction) => {\n    setCurrentPage((state) => {\n      if (direction === \"next\") {\n        if (state === totalPageCount) {\n          return state;\n        }\n        return state + 1;\n      } else {\n        if (state === 1) {\n          return state;\n        }\n        return state - 1;\n      }\n    });\n  };\n  const goToPage = (num) => {\n    if (num > totalPageCount) {\n      setCurrentPage(totalPageCount);\n    } else if (num < 1) {\n      setCurrentPage(1);\n    } else {\n      setCurrentPage(num);\n    }\n  };\n  const updatedTrackReferences = useVisualStableUpdate(trackReferences, itemPerPage);\n  const tracksOnPage = updatedTrackReferences.slice(firstItemIndex, lastItemIndex);\n  return {\n    totalPageCount,\n    nextPage: () => changePage(\"next\"),\n    prevPage: () => changePage(\"previous\"),\n    setPage: goToPage,\n    firstItemIndex,\n    lastItemIndex,\n    tracks: tracksOnPage,\n    currentPage\n  };\n}\n\n// src/hooks/useParticipantInfo.ts\n\n\nfunction useParticipantInfo(props = {}) {\n  const p = useEnsureParticipant(props.participant);\n  const infoObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.participantInfoObserver)(p), [p]);\n  const { identity, name, metadata } = useObservableState(infoObserver, {\n    name: p.name,\n    identity: p.identity,\n    metadata: p.metadata\n  });\n  return { identity, name, metadata };\n}\n\n// src/hooks/useParticipantPermissions.ts\n\n\nfunction useParticipantPermissions(options = {}) {\n  const p = useEnsureParticipant(options.participant);\n  const permissionObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.participantPermissionObserver)(p), [p]);\n  const permissions = useObservableState(permissionObserver, p.permissions);\n  return permissions;\n}\n\n// src/hooks/useParticipantTile.ts\n\n\n\nfunction useParticipantTile({\n  trackRef,\n  participant,\n  source,\n  publication,\n  onParticipantClick,\n  disableSpeakingIndicator,\n  htmlProps\n}) {\n  const maybeTrackRef = useMaybeTrackRefContext();\n  const p = useEnsureParticipant(participant);\n  const trackReference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    var _a, _b, _c, _d, _e, _f;\n    const _source = (_b = (_a = trackRef == null ? void 0 : trackRef.source) != null ? _a : maybeTrackRef == null ? void 0 : maybeTrackRef.source) != null ? _b : source;\n    if (_source === void 0) {\n      throw new Error(\n        \"Missing track `source`, provided it via `trackRef`, `source` property or via `TrackRefContext`.\"\n      );\n    }\n    return {\n      participant: (_d = (_c = trackRef == null ? void 0 : trackRef.participant) != null ? _c : maybeTrackRef == null ? void 0 : maybeTrackRef.participant) != null ? _d : p,\n      publication: (_f = (_e = trackRef == null ? void 0 : trackRef.publication) != null ? _e : maybeTrackRef == null ? void 0 : maybeTrackRef.publication) != null ? _f : publication,\n      source: _source\n    };\n  }, [\n    trackRef == null ? void 0 : trackRef.participant,\n    trackRef == null ? void 0 : trackRef.source,\n    trackRef == null ? void 0 : trackRef.publication,\n    maybeTrackRef == null ? void 0 : maybeTrackRef.participant,\n    maybeTrackRef == null ? void 0 : maybeTrackRef.source,\n    maybeTrackRef == null ? void 0 : maybeTrackRef.publication,\n    p,\n    source,\n    publication\n  ]);\n  const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const { className } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupParticipantTile)();\n    return mergeProps(htmlProps, {\n      className,\n      onClick: (event) => {\n        var _a, _b;\n        (_a = htmlProps.onClick) == null ? void 0 : _a.call(htmlProps, event);\n        if (typeof onParticipantClick === \"function\") {\n          const track = (_b = trackReference.publication) != null ? _b : trackReference.participant.getTrack(trackReference.source);\n          onParticipantClick({ participant: trackReference.participant, track });\n        }\n      }\n    });\n  }, [\n    htmlProps,\n    onParticipantClick,\n    trackReference.publication,\n    trackReference.source,\n    trackReference.participant\n  ]);\n  const isVideoMuted = useIsMuted(livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera, { participant: trackReference.participant });\n  const isAudioMuted = useIsMuted(livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone, {\n    participant: trackReference.participant\n  });\n  const isSpeaking = useIsSpeaking(trackReference.participant);\n  const facingMode = useFacingMode(trackReference);\n  return {\n    elementProps: __spreadValues({\n      \"data-lk-audio-muted\": isAudioMuted,\n      \"data-lk-video-muted\": isVideoMuted,\n      \"data-lk-speaking\": disableSpeakingIndicator === true ? false : isSpeaking,\n      \"data-lk-local-participant\": trackReference.participant.isLocal,\n      \"data-lk-source\": trackReference.source,\n      \"data-lk-facing-mode\": facingMode\n    }, mergedProps)\n  };\n}\n\n// src/hooks/useRemoteParticipants.ts\n\n\nfunction useRemoteParticipants(options = {}) {\n  const room = useEnsureRoom(options.room);\n  const [participants, setParticipants] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const listener = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.connectedParticipantsObserver)(room, {\n      additionalRoomEvents: options.updateOnlyOn\n    }).subscribe(setParticipants);\n    return () => listener.unsubscribe();\n  }, [room, JSON.stringify(options.updateOnlyOn)]);\n  return participants;\n}\n\n// src/hooks/useParticipants.ts\nfunction useParticipants(options = {}) {\n  const remoteParticipants = useRemoteParticipants(options);\n  const { localParticipant } = useLocalParticipant(options);\n  return [localParticipant, ...remoteParticipants];\n}\n\n// src/hooks/usePinnedTracks.ts\n\nfunction usePinnedTracks(layoutContext) {\n  layoutContext = useEnsureLayoutContext(layoutContext);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if ((layoutContext == null ? void 0 : layoutContext.pin.state) !== void 0 && layoutContext.pin.state.length >= 1) {\n      return layoutContext.pin.state;\n    }\n    return [];\n  }, [layoutContext.pin.state]);\n}\n\n// src/hooks/useRemoteParticipant.ts\n\n\nfunction useRemoteParticipant(identity, options = {}) {\n  const room = useRoomContext();\n  const [updateOnlyOn] = react__WEBPACK_IMPORTED_MODULE_0__.useState(options.updateOnlyOn);\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.connectedParticipantObserver)(room, identity, { additionalEvents: updateOnlyOn }),\n    [room, identity, updateOnlyOn]\n  );\n  const participant = useObservableState(\n    observable,\n    room.getParticipantByIdentity(identity)\n  );\n  return participant;\n}\n\n// src/hooks/useRoomInfo.ts\n\n\nfunction useRoomInfo(options = {}) {\n  const room = useEnsureRoom(options.room);\n  const infoObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.roomInfoObserver)(room), [room]);\n  const { name, metadata } = useObservableState(infoObserver, {\n    name: room.name,\n    metadata: room.metadata\n  });\n  return { name, metadata };\n}\n\n// src/hooks/useSortedParticipants.ts\n\n\n\n// src/hooks/useSpeakingParticipants.ts\n\n\nfunction useSpeakingParticipants() {\n  const room = useRoomContext();\n  const speakerObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.activeSpeakerObserver)(room), [room]);\n  const activeSpeakers = useObservableState(speakerObserver, room.activeSpeakers);\n  return activeSpeakers;\n}\n\n// src/hooks/useSortedParticipants.ts\nfunction useSortedParticipants(participants) {\n  const [sortedParticipants, setSortedParticipants] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.sortParticipants)(participants)\n  );\n  const activeSpeakers = useSpeakingParticipants();\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    setSortedParticipants((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.sortParticipants)(participants));\n  }, [activeSpeakers, participants]);\n  return sortedParticipants;\n}\n\n// src/hooks/useStartAudio.ts\n\n\nfunction useStartAudio({ room, props }) {\n  const roomEnsured = useEnsureRoom(room);\n  const { className, roomAudioPlaybackAllowedObservable: roomAudioPlaybackAllowedObservable2, handleStartAudioPlayback } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupStartAudio)(),\n    []\n  );\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => roomAudioPlaybackAllowedObservable2(roomEnsured),\n    [roomEnsured, roomAudioPlaybackAllowedObservable2]\n  );\n  const { canPlayAudio } = useObservableState(observable, {\n    canPlayAudio: roomEnsured.canPlaybackAudio\n  });\n  const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => mergeProps(props, {\n      className,\n      onClick: () => {\n        handleStartAudioPlayback(roomEnsured);\n      },\n      style: { display: canPlayAudio ? \"none\" : \"block\" }\n    }),\n    [props, className, canPlayAudio, handleStartAudioPlayback, roomEnsured]\n  );\n  return { mergedProps, canPlayAudio };\n}\n\n// src/hooks/useSwipe.ts\n\nfunction useSwipe(element, options = {}) {\n  var _a;\n  const touchStart = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const touchEnd = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const minSwipeDistance = (_a = options.minSwipeDistance) != null ? _a : 50;\n  const onTouchStart = (event) => {\n    touchEnd.current = null;\n    touchStart.current = event.targetTouches[0].clientX;\n  };\n  const onTouchMove = (event) => {\n    touchEnd.current = event.targetTouches[0].clientX;\n  };\n  const onTouchEnd = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    if (!touchStart.current || !touchEnd.current) {\n      return;\n    }\n    const distance = touchStart.current - touchEnd.current;\n    const isLeftSwipe = distance > minSwipeDistance;\n    const isRightSwipe = distance < -minSwipeDistance;\n    if (isLeftSwipe && options.onLeftSwipe)\n      options.onLeftSwipe();\n    if (isRightSwipe && options.onRightSwipe)\n      options.onRightSwipe();\n  }, [minSwipeDistance, options]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const elementCopy = element.current;\n    if (elementCopy) {\n      elementCopy.addEventListener(\"touchstart\", onTouchStart, { passive: true });\n      elementCopy.addEventListener(\"touchmove\", onTouchMove, { passive: true });\n      elementCopy.addEventListener(\"touchend\", onTouchEnd, { passive: true });\n    }\n    return () => {\n      if (elementCopy) {\n        elementCopy.removeEventListener(\"touchstart\", onTouchStart);\n        elementCopy.removeEventListener(\"touchmove\", onTouchMove);\n        elementCopy.removeEventListener(\"touchend\", onTouchEnd);\n      }\n    };\n  }, [element, onTouchEnd]);\n}\n\n// src/hooks/useChatToggle.ts\n\n\nfunction useChatToggle({ props }) {\n  const { dispatch, state } = useLayoutContext().widget;\n  const { className } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupChatToggle)(), []);\n  const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return mergeProps(props, {\n      className,\n      onClick: () => {\n        if (dispatch)\n          dispatch({ msg: \"toggle_chat\" });\n      },\n      \"aria-pressed\": (state == null ? void 0 : state.showChat) ? \"true\" : \"false\",\n      \"data-lk-unread-msgs\": state ? state.unreadMessages < 10 ? state.unreadMessages.toFixed(0) : \"9+\" : \"0\"\n    });\n  }, [props, className, dispatch, state]);\n  return { mergedProps };\n}\n\n// src/hooks/useToken.ts\n\n\nfunction useToken(tokenEndpoint, roomName, options = {}) {\n  const [token, setToken] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a;\n    if (tokenEndpoint === void 0) {\n      throw Error(\"token endpoint needs to be defined\");\n    }\n    if (((_a = options.userInfo) == null ? void 0 : _a.identity) === void 0) {\n      return;\n    }\n    const tokenFetcher = () => __async(this, null, function* () {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"fetching token\");\n      const params = new URLSearchParams(__spreadProps(__spreadValues({}, options.userInfo), { roomName }));\n      const res = yield fetch(`${tokenEndpoint}?${params.toString()}`);\n      const { accessToken } = yield res.json();\n      setToken(accessToken);\n    });\n    tokenFetcher();\n  }, [tokenEndpoint, roomName, options]);\n  return token;\n}\n\n// src/hooks/useTrackMutedIndicator.ts\n\n\nfunction useTrackMutedIndicator(trackRefOrSource, options = {}) {\n  var _a, _b, _c;\n  let ref = useMaybeTrackRefContext();\n  const p = (_a = useMaybeParticipantContext()) != null ? _a : options.participant;\n  if (typeof trackRefOrSource === \"string\") {\n    if (!p) {\n      throw Error(`Participant missing, either provide it via context or pass it in directly`);\n    }\n    ref = { participant: p, source: trackRefOrSource };\n  } else if (trackRefOrSource) {\n    ref = trackRefOrSource;\n  } else {\n    throw Error(`No track reference found, either provide it via context or pass it in directly`);\n  }\n  const { className, mediaMutedObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupTrackMutedIndicator)(ref),\n    [(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackReferenceId)(ref)]\n  );\n  const isMuted = useObservableState(\n    mediaMutedObserver,\n    !!(((_b = ref.publication) == null ? void 0 : _b.isMuted) || ((_c = ref.participant.getTrack(ref.source)) == null ? void 0 : _c.isMuted))\n  );\n  return { isMuted, className };\n}\n\n// src/hooks/useTrackToggle.ts\n\n\nfunction useTrackToggle(_a) {\n  var _b = _a, {\n    source,\n    onChange,\n    initialState,\n    captureOptions\n  } = _b, rest = __objRest(_b, [\n    \"source\",\n    \"onChange\",\n    \"initialState\",\n    \"captureOptions\"\n  ]);\n  var _a2;\n  const room = useMaybeRoomContext();\n  const track = (_a2 = room == null ? void 0 : room.localParticipant) == null ? void 0 : _a2.getTrack(source);\n  const { toggle, className, pendingObserver, enabledObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => room ? (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupMediaToggle)(source, room, captureOptions) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupManualToggle)(),\n    [room, source, JSON.stringify(captureOptions)]\n  );\n  const pending = useObservableState(pendingObserver, false);\n  const enabled = useObservableState(enabledObserver, initialState != null ? initialState : !!(track == null ? void 0 : track.isEnabled));\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    onChange == null ? void 0 : onChange(enabled);\n  }, [enabled, onChange]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (initialState !== void 0) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"forcing initial toggle state\", source, initialState);\n      toggle(initialState);\n    }\n  }, []);\n  const newProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => mergeProps(rest, { className }), [rest, className]);\n  const clickHandler = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (evt) => {\n      var _a3;\n      toggle();\n      (_a3 = rest.onClick) == null ? void 0 : _a3.call(rest, evt);\n    },\n    [rest, toggle]\n  );\n  return {\n    toggle,\n    enabled,\n    pending,\n    track,\n    buttonProps: __spreadProps(__spreadValues({}, newProps), {\n      \"aria-pressed\": enabled,\n      \"data-lk-source\": source,\n      \"data-lk-enabled\": enabled,\n      disabled: pending,\n      onClick: clickHandler\n    })\n  };\n}\n\n// src/hooks/useTracks.ts\n\n\n\nfunction useTracks(sources = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera,\n  livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n  livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare,\n  livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShareAudio,\n  livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Unknown\n], options = {}) {\n  const room = useEnsureRoom(options.room);\n  const [trackReferences, setTrackReferences] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  const [participants, setParticipants] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  const sources_ = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return sources.map((s) => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isSourceWitOptions)(s) ? s.source : s);\n  }, [JSON.stringify(sources)]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const subscription = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.trackReferencesObservable)(room, sources_, {\n      additionalRoomEvents: options.updateOnlyOn,\n      onlySubscribed: options.onlySubscribed\n    }).subscribe(({ trackReferences: trackReferences2, participants: participants2 }) => {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"setting track bundles\", trackReferences2, participants2);\n      setTrackReferences(trackReferences2);\n      setParticipants(participants2);\n    });\n    return () => subscription.unsubscribe();\n  }, [room, JSON.stringify(options.updateOnlyOn), JSON.stringify(sources)]);\n  const maybeTrackReferences = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if ((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isSourcesWithOptions)(sources)) {\n      const requirePlaceholder = requiredPlaceholders(sources, participants);\n      const trackReferencesWithPlaceholders = Array.from(trackReferences);\n      participants.forEach((participant) => {\n        var _a;\n        if (requirePlaceholder.has(participant.identity)) {\n          const sourcesToAddPlaceholder = (_a = requirePlaceholder.get(participant.identity)) != null ? _a : [];\n          sourcesToAddPlaceholder.forEach((placeholderSource) => {\n            if (trackReferences.find(\n              ({ participant: p, publication }) => participant.identity === p.identity && publication.source === placeholderSource\n            )) {\n              return;\n            }\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\n              `Add ${placeholderSource} placeholder for participant ${participant.identity}.`\n            );\n            const placeholder = {\n              participant,\n              source: placeholderSource\n            };\n            trackReferencesWithPlaceholders.push(placeholder);\n          });\n        }\n      });\n      return trackReferencesWithPlaceholders;\n    } else {\n      return trackReferences;\n    }\n  }, [trackReferences, participants, sources]);\n  return maybeTrackReferences;\n}\nfunction difference(setA, setB) {\n  const _difference = new Set(setA);\n  for (const elem of setB) {\n    _difference.delete(elem);\n  }\n  return _difference;\n}\nfunction requiredPlaceholders(sources, participants) {\n  const placeholderMap = /* @__PURE__ */ new Map();\n  if ((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isSourcesWithOptions)(sources)) {\n    const sourcesThatNeedPlaceholder = sources.filter((sourceWithOption) => sourceWithOption.withPlaceholder).map((sourceWithOption) => sourceWithOption.source);\n    participants.forEach((participant) => {\n      const sourcesOfSubscribedTracks = participant.getTracks().map((pub) => {\n        var _a;\n        return (_a = pub.track) == null ? void 0 : _a.source;\n      }).filter((trackSource) => trackSource !== void 0);\n      const placeholderNeededForThisParticipant = Array.from(\n        difference(new Set(sourcesThatNeedPlaceholder), new Set(sourcesOfSubscribedTracks))\n      );\n      if (placeholderNeededForThisParticipant.length > 0) {\n        placeholderMap.set(participant.identity, placeholderNeededForThisParticipant);\n      }\n    });\n  }\n  return placeholderMap;\n}\n\n// src/hooks/useTrack.ts\nfunction useTrack(trackRef, options = {}) {\n  return useMediaTrackBySourceOrName(trackRef, options);\n}\n\n// src/hooks/useTrackByName.ts\nfunction useTrackByName(trackRef, options = {}) {\n  const ref = useEnsureTrackRef(trackRef);\n  return useMediaTrackBySourceOrName(ref, options);\n}\n\n// src/hooks/useChat.ts\n\n\nfunction useChat(options) {\n  const room = useRoomContext();\n  const [setup, setSetup] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  const isSending = useObservableState(setup == null ? void 0 : setup.isSendingObservable, false);\n  const chatMessages = useObservableState(setup == null ? void 0 : setup.messageObservable, []);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const setupChatReturn = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupChat)(room, options);\n    setSetup(setupChatReturn);\n    return setupChatReturn.destroy;\n  }, [room, options]);\n  return { send: setup == null ? void 0 : setup.send, chatMessages, isSending };\n}\n\n// src/components/controls/ClearPinButton.tsx\nfunction ClearPinButton(props) {\n  const { buttonProps } = useClearPinButton(props);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({}, buttonProps), props.children);\n}\n\n// src/components/ConnectionState.tsx\n\nfunction ConnectionState3(_a) {\n  var _b = _a, { room } = _b, props = __objRest(_b, [\"room\"]);\n  const connectionState = useConnectionState(room);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, props), connectionState);\n}\n\n// src/components/controls/ChatToggle.tsx\n\nfunction ChatToggle(props) {\n  const { mergedProps } = useChatToggle({ props });\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({}, mergedProps), props.children);\n}\n\n// src/components/controls/DisconnectButton.tsx\n\nfunction DisconnectButton(props) {\n  const { buttonProps } = useDisconnectButton(props);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({}, buttonProps), props.children);\n}\n\n// src/components/controls/FocusToggle.tsx\n\n\n// src/assets/icons/CameraDisabledIcon.tsx\n\nvar SvgCameraDisabledIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708L11 10.293V4.5A1.5 1.5 0 0 0 9.5 3H3.707zM0 4.5a1.5 1.5 0 0 1 .943-1.393l9.532 9.533c-.262.224-.603.36-.975.36h-8A1.5 1.5 0 0 1 0 11.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"m15.2 3.6-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z\" }));\nvar CameraDisabledIcon_default = SvgCameraDisabledIcon;\n\n// src/assets/icons/CameraIcon.tsx\n\nvar SvgCameraIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 4.5A1.5 1.5 0 0 1 1.5 3h8A1.5 1.5 0 0 1 11 4.5v7A1.5 1.5 0 0 1 9.5 13h-8A1.5 1.5 0 0 1 0 11.5zM15.2 3.6l-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z\" }));\nvar CameraIcon_default = SvgCameraIcon;\n\n// src/assets/icons/ChatIcon.tsx\n\nvar SvgChatIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 18, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M0 2.75A2.75 2.75 0 0 1 2.75 0h10.5A2.75 2.75 0 0 1 16 2.75v13.594a.75.75 0 0 1-1.234.572l-3.691-3.12a1.25 1.25 0 0 0-.807-.296H2.75A2.75 2.75 0 0 1 0 10.75v-8ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v8c0 .69.56 1.25 1.25 1.25h7.518c.65 0 1.279.23 1.775.65l2.457 2.077V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M3 4.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5Z\",\n    clipRule: \"evenodd\"\n  }\n));\nvar ChatIcon_default = SvgChatIcon;\n\n// src/assets/icons/Chevron.tsx\n\nvar SvgChevron = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentcolor\",\n    fillRule: \"evenodd\",\n    d: \"M5.293 2.293a1 1 0 0 1 1.414 0l4.823 4.823a1.25 1.25 0 0 1 0 1.768l-4.823 4.823a1 1 0 0 1-1.414-1.414L9.586 8 5.293 3.707a1 1 0 0 1 0-1.414z\",\n    clipRule: \"evenodd\"\n  }\n));\nvar Chevron_default = SvgChevron;\n\n// src/assets/icons/FocusToggleIcon.tsx\n\nvar SvgFocusToggleIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { stroke: \"currentColor\", strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 1.5 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M10 1.75h4.25m0 0V6m0-4.25L9 7M6 14.25H1.75m0 0V10m0 4.25L7 9\" })));\nvar FocusToggleIcon_default = SvgFocusToggleIcon;\n\n// src/assets/icons/LeaveIcon.tsx\n\nvar SvgLeaveIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M2 2.75A2.75 2.75 0 0 1 4.75 0h6.5A2.75 2.75 0 0 1 14 2.75v10.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-.5a.75.75 0 0 1 1.5 0v.5c0 .69.56 1.25 1.25 1.25h6.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25h-6.5c-.69 0-1.25.56-1.25 1.25v.5a.75.75 0 0 1-1.5 0v-.5Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M8.78 7.47a.75.75 0 0 1 0 1.06l-2.25 2.25a.75.75 0 1 1-1.06-1.06l.97-.97H1.75a.75.75 0 0 1 0-1.5h4.69l-.97-.97a.75.75 0 0 1 1.06-1.06l2.25 2.25Z\",\n    clipRule: \"evenodd\"\n  }\n));\nvar LeaveIcon_default = SvgLeaveIcon;\n\n// src/assets/icons/LockLockedIcon.tsx\n\nvar SvgLockLockedIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentcolor\",\n    fillRule: \"evenodd\",\n    d: \"M4 6.104V4a4 4 0 1 1 8 0v2.104c1.154.326 2 1.387 2 2.646v4.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-4.5c0-1.259.846-2.32 2-2.646ZM5.5 4a2.5 2.5 0 0 1 5 0v2h-5V4Z\",\n    clipRule: \"evenodd\"\n  }\n));\nvar LockLockedIcon_default = SvgLockLockedIcon;\n\n// src/assets/icons/MicDisabledIcon.tsx\n\nvar SvgMicDisabledIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M12.227 11.52a5.477 5.477 0 0 0 1.246-2.97.5.5 0 0 0-.995-.1 4.478 4.478 0 0 1-.962 2.359l-1.07-1.07C10.794 9.247 11 8.647 11 8V3a3 3 0 0 0-6 0v1.293L1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708zM8 12.5c.683 0 1.33-.152 1.911-.425l.743.743c-.649.359-1.378.59-2.154.66V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .995-.098A4.5 4.5 0 0 0 8 12.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M8.743 10.907 5 7.164V8a3 3 0 0 0 3.743 2.907z\" }));\nvar MicDisabledIcon_default = SvgMicDisabledIcon;\n\n// src/assets/icons/MicIcon.tsx\n\nvar SvgMicIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fillRule: \"evenodd\",\n    d: \"M2.975 8.002a.5.5 0 0 1 .547.449 4.5 4.5 0 0 0 8.956 0 .5.5 0 1 1 .995.098A5.502 5.502 0 0 1 8.5 13.478V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .448-.547z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M5 3a3 3 0 1 1 6 0v5a3 3 0 0 1-6 0z\" }));\nvar MicIcon_default = SvgMicIcon;\n\n// src/assets/icons/QualityExcellentIcon.tsx\n\nvar SvgQualityExcellentIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentcolor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }));\nvar QualityExcellentIcon_default = SvgQualityExcellentIcon;\n\n// src/assets/icons/QualityGoodIcon.tsx\n\nvar SvgQualityGoodIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentcolor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { opacity: 0.25 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" })));\nvar QualityGoodIcon_default = SvgQualityGoodIcon;\n\n// src/assets/icons/QualityPoorIcon.tsx\n\nvar SvgQualityPoorIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentcolor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { opacity: 0.25 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" })));\nvar QualityPoorIcon_default = SvgQualityPoorIcon;\n\n// src/assets/icons/QualityUnknownIcon.tsx\n\nvar SvgQualityUnknownIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { opacity: 0.25 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z\" })));\nvar QualityUnknownIcon_default = SvgQualityUnknownIcon;\n\n// src/assets/icons/ScreenShareIcon.tsx\n\nvar SvgScreenShareIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 20, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M0 2.75A2.75 2.75 0 0 1 2.75 0h14.5A2.75 2.75 0 0 1 20 2.75v10.5A2.75 2.75 0 0 1 17.25 16H2.75A2.75 2.75 0 0 1 0 13.25V2.75ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v10.5c0 .69.56 1.25 1.25 1.25h14.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M9.47 4.22a.75.75 0 0 1 1.06 0l2.25 2.25a.75.75 0 0 1-1.06 1.06l-.97-.97v4.69a.75.75 0 0 1-1.5 0V6.56l-.97.97a.75.75 0 0 1-1.06-1.06l2.25-2.25Z\",\n    clipRule: \"evenodd\"\n  }\n));\nvar ScreenShareIcon_default = SvgScreenShareIcon;\n\n// src/assets/icons/ScreenShareStopIcon.tsx\n\nvar SvgScreenShareStopIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 20, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { fill: \"currentColor\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M7.28 4.22a.75.75 0 0 0-1.06 1.06L8.94 8l-2.72 2.72a.75.75 0 1 0 1.06 1.06L10 9.06l2.72 2.72a.75.75 0 1 0 1.06-1.06L11.06 8l2.72-2.72a.75.75 0 0 0-1.06-1.06L10 6.94z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fillRule: \"evenodd\",\n    d: \"M2.75 0A2.75 2.75 0 0 0 0 2.75v10.5A2.75 2.75 0 0 0 2.75 16h14.5A2.75 2.75 0 0 0 20 13.25V2.75A2.75 2.75 0 0 0 17.25 0zM1.5 2.75c0-.69.56-1.25 1.25-1.25h14.5c.69 0 1.25.56 1.25 1.25v10.5c0 .69-.56 1.25-1.25 1.25H2.75c-.69 0-1.25-.56-1.25-1.25z\",\n    clipRule: \"evenodd\"\n  }\n)));\nvar ScreenShareStopIcon_default = SvgScreenShareStopIcon;\n\n// src/assets/icons/SpinnerIcon.tsx\n\nvar SvgSpinnerIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M8 0a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0V.75A.75.75 0 0 1 8 0Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M8 12a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0v-2.5A.75.75 0 0 1 8 12Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.7\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M12 1.072a.75.75 0 0 1 .274 1.024l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 12 1.072Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M6 11.464a.75.75 0 0 1 .274 1.025l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 6 11.464Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.6\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M14.928 4a.75.75 0 0 1-.274 1.025l-2.165 1.25a.75.75 0 1 1-.75-1.3l2.165-1.25A.75.75 0 0 1 14.928 4Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M4.536 10a.75.75 0 0 1-.275 1.024l-2.165 1.25a.75.75 0 0 1-.75-1.298l2.165-1.25A.75.75 0 0 1 4.536 10Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.5\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M16 8a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 16 8Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M4 8a.75.75 0 0 1-.75.75H.75a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 4 8Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.4\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M14.928 12a.75.75 0 0 1-1.024.274l-2.165-1.25a.75.75 0 0 1 .75-1.299l2.165 1.25A.75.75 0 0 1 14.928 12Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.9\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M4.536 6a.75.75 0 0 1-1.025.275l-2.165-1.25a.75.75 0 1 1 .75-1.3l2.165 1.25A.75.75 0 0 1 4.536 6Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.3\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M12 14.928a.75.75 0 0 1-1.024-.274l-1.25-2.165a.75.75 0 0 1 1.298-.75l1.25 2.165A.75.75 0 0 1 12 14.928Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.8\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M6 4.536a.75.75 0 0 1-1.024-.275l-1.25-2.165a.75.75 0 1 1 1.299-.75l1.25 2.165A.75.75 0 0 1 6 4.536Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.2\n  }\n));\nvar SpinnerIcon_default = SvgSpinnerIcon;\n\n// src/assets/icons/UnfocusToggleIcon.tsx\n\nvar SvgUnfocusToggleIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { stroke: \"currentColor\", strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 1.5 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M13.25 7H9m0 0V2.75M9 7l5.25-5.25M2.75 9H7m0 0v4.25M7 9l-5.25 5.25\" })));\nvar UnfocusToggleIcon_default = SvgUnfocusToggleIcon;\n\n// src/components/controls/FocusToggle.tsx\nfunction FocusToggle(_a) {\n  var _b = _a, { trackRef, trackSource, participant } = _b, props = __objRest(_b, [\"trackRef\", \"trackSource\", \"participant\"]);\n  const trackRefFromContext = useMaybeTrackRefContext();\n  const { mergedProps, inFocus } = useFocusToggle({\n    trackRef: trackRef != null ? trackRef : trackRefFromContext,\n    trackSource,\n    participant,\n    props\n  });\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContext.Consumer, null, (layoutContext) => layoutContext !== void 0 && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({}, mergedProps), props.children ? props.children : inFocus ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(UnfocusToggleIcon_default, null) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusToggleIcon_default, null)));\n}\n\n// src/components/controls/MediaDeviceSelect.tsx\n\nfunction MediaDeviceSelect(_a) {\n  var _b = _a, {\n    kind,\n    initialSelection,\n    onActiveDeviceChange,\n    onDeviceListChange,\n    onDeviceSelectError,\n    exactMatch,\n    track,\n    requestPermissions\n  } = _b, props = __objRest(_b, [\n    \"kind\",\n    \"initialSelection\",\n    \"onActiveDeviceChange\",\n    \"onDeviceListChange\",\n    \"onDeviceSelectError\",\n    \"exactMatch\",\n    \"track\",\n    \"requestPermissions\"\n  ]);\n  const room = useMaybeRoomContext();\n  const { devices, activeDeviceId, setActiveMediaDevice, className } = useMediaDeviceSelect({\n    kind,\n    room,\n    track,\n    requestPermissions\n  });\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (initialSelection !== void 0) {\n      setActiveMediaDevice(initialSelection);\n    }\n  }, [setActiveMediaDevice]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (typeof onDeviceListChange === \"function\") {\n      onDeviceListChange(devices);\n    }\n  }, [onDeviceListChange, devices]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (activeDeviceId && activeDeviceId !== \"\") {\n      onActiveDeviceChange == null ? void 0 : onActiveDeviceChange(activeDeviceId);\n    }\n  }, [activeDeviceId]);\n  const handleActiveDeviceChange = (deviceId) => __async(this, null, function* () {\n    try {\n      yield setActiveMediaDevice(deviceId, { exact: exactMatch });\n    } catch (e) {\n      if (e instanceof Error) {\n        onDeviceSelectError == null ? void 0 : onDeviceSelectError(e);\n      } else {\n        throw e;\n      }\n    }\n  });\n  const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => mergeProps2(props, { className }, { className: \"lk-list\" }),\n    [className, props]\n  );\n  function isActive(deviceId, activeDeviceId2, index) {\n    return deviceId === activeDeviceId2 || index === 0 && activeDeviceId2 === \"default\";\n  }\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", __spreadValues({}, mergedProps), devices.map((device, index) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"li\",\n    {\n      key: device.deviceId,\n      id: device.deviceId,\n      \"data-lk-active\": isActive(device.deviceId, activeDeviceId, index),\n      \"aria-selected\": isActive(device.deviceId, activeDeviceId, index),\n      role: \"option\"\n    },\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"lk-button\", onClick: () => handleActiveDeviceChange(device.deviceId) }, device.label)\n  )));\n}\n\n// src/components/controls/StartAudio.tsx\n\nfunction StartAudio(_a) {\n  var _b = _a, { label = \"Allow Audio\" } = _b, props = __objRest(_b, [\"label\"]);\n  const room = useRoomContext();\n  const { mergedProps } = useStartAudio({ room, props });\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({}, mergedProps), label);\n}\n\n// src/components/controls/TrackToggle.tsx\n\n\n// src/assets/icons/util.tsx\n\n\nfunction getSourceIcon(source, enabled) {\n  switch (source) {\n    case livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone:\n      return enabled ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MicIcon_default, null) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MicDisabledIcon_default, null);\n    case livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera:\n      return enabled ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CameraIcon_default, null) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CameraDisabledIcon_default, null);\n    case livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare:\n      return enabled ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenShareStopIcon_default, null) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenShareIcon_default, null);\n    default:\n      return void 0;\n  }\n}\nfunction getConnectionQualityIcon(quality) {\n  switch (quality) {\n    case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionQuality.Excellent:\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityExcellentIcon_default, null);\n    case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionQuality.Good:\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityGoodIcon_default, null);\n    case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionQuality.Poor:\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityPoorIcon_default, null);\n    default:\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityUnknownIcon_default, null);\n  }\n}\n\n// src/components/controls/TrackToggle.tsx\nfunction TrackToggle(_a) {\n  var _b = _a, { showIcon } = _b, props = __objRest(_b, [\"showIcon\"]);\n  const { buttonProps, enabled } = useTrackToggle(props);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({}, buttonProps), (showIcon != null ? showIcon : true) && getSourceIcon(props.source, enabled), props.children);\n}\n\n// src/components/layout/FocusLayout.tsx\n\n\n// src/components/participant/ParticipantTile.tsx\n\n\n\n\n// src/components/participant/ConnectionQualityIndicator.tsx\n\nfunction ConnectionQualityIndicator(props) {\n  var _a;\n  const { className, quality } = useConnectionQualityIndicator(props);\n  const elementProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return __spreadProps(__spreadValues({}, mergeProps2(props, { className })), { \"data-lk-quality\": quality });\n  }, [quality, props, className]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, elementProps), (_a = props.children) != null ? _a : getConnectionQualityIcon(quality));\n}\n\n// src/components/participant/ParticipantName.tsx\n\n\nfunction ParticipantName(_a) {\n  var _b = _a, { participant } = _b, props = __objRest(_b, [\"participant\"]);\n  const p = useEnsureParticipant(participant);\n  const { className, infoObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupParticipantName)(p);\n  }, [p]);\n  const { identity, name } = useObservableState(infoObserver, {\n    name: p.name,\n    identity: p.identity,\n    metadata: p.metadata\n  });\n  const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return mergeProps2(props, { className, \"data-lk-participant-name\": name });\n  }, [props, className, name]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", __spreadValues({}, mergedProps), name !== \"\" ? name : identity, props.children);\n}\n\n// src/components/participant/TrackMutedIndicator.tsx\n\nfunction TrackMutedIndicator(_a) {\n  var _b = _a, {\n    source,\n    participant,\n    trackRef,\n    show = \"always\"\n  } = _b, props = __objRest(_b, [\n    \"source\",\n    \"participant\",\n    \"trackRef\",\n    \"show\"\n  ]);\n  var _a2, _b2;\n  const { className, isMuted } = useTrackMutedIndicator(trackRef != null ? trackRef : source, { participant });\n  const showIndicator = show === \"always\" || show === \"muted\" && isMuted || show === \"unmuted\" && !isMuted;\n  const htmlProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => mergeProps2(props, {\n      className\n    }),\n    [className, props]\n  );\n  if (!showIndicator) {\n    return null;\n  }\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadProps(__spreadValues({}, htmlProps), { \"data-lk-muted\": isMuted }), (_b2 = props.children) != null ? _b2 : getSourceIcon((_a2 = trackRef == null ? void 0 : trackRef.source) != null ? _a2 : source, !isMuted));\n}\n\n// src/assets/images/ParticipantPlaceholder.tsx\n\nvar SvgParticipantPlaceholder = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"svg\",\n  __spreadValues({\n    width: 320,\n    height: 320,\n    viewBox: \"0 0 320 320\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props),\n  /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"path\",\n    {\n      d: \"M160 180C204.182 180 240 144.183 240 100C240 55.8172 204.182 20 160 20C115.817 20 79.9997 55.8172 79.9997 100C79.9997 144.183 115.817 180 160 180Z\",\n      fill: \"white\",\n      fillOpacity: 0.25\n    }\n  ),\n  /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"path\",\n    {\n      d: \"M97.6542 194.614C103.267 191.818 109.841 192.481 115.519 195.141C129.025 201.466 144.1 205 159.999 205C175.899 205 190.973 201.466 204.48 195.141C210.158 192.481 216.732 191.818 222.345 194.614C262.703 214.719 291.985 253.736 298.591 300.062C300.15 310.997 291.045 320 280 320H39.9997C28.954 320 19.8495 310.997 21.4087 300.062C28.014 253.736 57.2966 214.72 97.6542 194.614Z\",\n      fill: \"white\",\n      fillOpacity: 0.25\n    }\n  )\n);\nvar ParticipantPlaceholder_default = SvgParticipantPlaceholder;\n\n// src/components/participant/VideoTrack.tsx\n\n\n\nfunction VideoTrack(_a) {\n  var _b = _a, {\n    onTrackClick,\n    onClick,\n    onSubscriptionStatusChanged,\n    trackRef,\n    name,\n    publication,\n    source,\n    participant: p,\n    manageSubscription\n  } = _b, props = __objRest(_b, [\n    \"onTrackClick\",\n    \"onClick\",\n    \"onSubscriptionStatusChanged\",\n    \"trackRef\",\n    \"name\",\n    \"publication\",\n    \"source\",\n    \"participant\",\n    \"manageSubscription\"\n  ]);\n  var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j;\n  const maybeTrackRef = useMaybeTrackRefContext();\n  const _name = (_d = (_c = (_a2 = trackRef == null ? void 0 : trackRef.publication) == null ? void 0 : _a2.trackName) != null ? _c : (_b2 = maybeTrackRef == null ? void 0 : maybeTrackRef.publication) == null ? void 0 : _b2.trackName) != null ? _d : name;\n  const _source = (_f = (_e = trackRef == null ? void 0 : trackRef.source) != null ? _e : maybeTrackRef == null ? void 0 : maybeTrackRef.source) != null ? _f : source;\n  const _publication = (_h = (_g = trackRef == null ? void 0 : trackRef.publication) != null ? _g : maybeTrackRef == null ? void 0 : maybeTrackRef.publication) != null ? _h : publication;\n  const _participant = (_j = (_i = trackRef == null ? void 0 : trackRef.participant) != null ? _i : maybeTrackRef == null ? void 0 : maybeTrackRef.participant) != null ? _j : p;\n  if (_source === void 0) {\n    throw new Error(\"VideoTrack: You must provide a trackRef or source property.\");\n  }\n  const participant = useEnsureParticipant(_participant);\n  const mediaEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const intersectionEntry = usehooks_ts__WEBPACK_IMPORTED_MODULE_5__.useIntersectionObserver(mediaEl, {});\n  const debouncedIntersectionEntry = usehooks_ts__WEBPACK_IMPORTED_MODULE_5__.useDebounce(intersectionEntry, 3e3);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (manageSubscription && _publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteTrackPublication && (debouncedIntersectionEntry == null ? void 0 : debouncedIntersectionEntry.isIntersecting) === false && (intersectionEntry == null ? void 0 : intersectionEntry.isIntersecting) === false) {\n      _publication.setSubscribed(false);\n    }\n  }, [debouncedIntersectionEntry, _publication, manageSubscription]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (manageSubscription && _publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteTrackPublication && (intersectionEntry == null ? void 0 : intersectionEntry.isIntersecting) === true) {\n      _publication.setSubscribed(true);\n    }\n  }, [intersectionEntry, _publication, manageSubscription]);\n  const {\n    elementProps,\n    publication: pub,\n    isSubscribed\n  } = useMediaTrackBySourceOrName(\n    { participant, name: _name, source: _source, publication: _publication },\n    {\n      element: mediaEl,\n      props\n    }\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    onSubscriptionStatusChanged == null ? void 0 : onSubscriptionStatusChanged(!!isSubscribed);\n  }, [isSubscribed, onSubscriptionStatusChanged]);\n  const clickHandler = (evt) => {\n    onClick == null ? void 0 : onClick(evt);\n    onTrackClick == null ? void 0 : onTrackClick({ participant, track: pub });\n  };\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", __spreadProps(__spreadValues({ ref: mediaEl }, elementProps), { muted: true, onClick: clickHandler }));\n}\n\n// src/components/participant/AudioTrack.tsx\n\n\n\nfunction AudioTrack(_a) {\n  var _b = _a, {\n    trackRef,\n    onSubscriptionStatusChanged,\n    volume,\n    source,\n    name,\n    publication,\n    participant: p\n  } = _b, props = __objRest(_b, [\n    \"trackRef\",\n    \"onSubscriptionStatusChanged\",\n    \"volume\",\n    \"source\",\n    \"name\",\n    \"publication\",\n    \"participant\"\n  ]);\n  var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j;\n  const maybeTrackRef = useMaybeTrackRefContext();\n  const _name = (_d = (_c = (_a2 = trackRef == null ? void 0 : trackRef.publication) == null ? void 0 : _a2.trackName) != null ? _c : (_b2 = maybeTrackRef == null ? void 0 : maybeTrackRef.publication) == null ? void 0 : _b2.trackName) != null ? _d : name;\n  const _source = (_f = (_e = trackRef == null ? void 0 : trackRef.source) != null ? _e : maybeTrackRef == null ? void 0 : maybeTrackRef.source) != null ? _f : source;\n  const _publication = (_h = (_g = trackRef == null ? void 0 : trackRef.publication) != null ? _g : maybeTrackRef == null ? void 0 : maybeTrackRef.publication) != null ? _h : publication;\n  const _participant = (_j = (_i = trackRef == null ? void 0 : trackRef.participant) != null ? _i : maybeTrackRef == null ? void 0 : maybeTrackRef.participant) != null ? _j : p;\n  if (_source === void 0) {\n    throw new Error(\"The AudioTrack component expects a trackRef or source property.\");\n  }\n  const mediaEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const participant = useEnsureParticipant(_participant);\n  const {\n    elementProps,\n    isSubscribed,\n    track,\n    publication: pub\n  } = useMediaTrackBySourceOrName(\n    { source: _source, name: _name, participant, publication: _publication },\n    {\n      element: mediaEl,\n      props\n    }\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    onSubscriptionStatusChanged == null ? void 0 : onSubscriptionStatusChanged(!!isSubscribed);\n  }, [isSubscribed, onSubscriptionStatusChanged]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (track === void 0 || volume === void 0) {\n      return;\n    }\n    if (track instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteAudioTrack) {\n      track.setVolume(volume);\n    } else {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"Volume can only be set on remote audio tracks.\");\n    }\n  }, [volume, track]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (pub === void 0 || props.muted === void 0) {\n      return;\n    }\n    if (pub instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteTrackPublication) {\n      pub.setEnabled(!props.muted);\n    } else {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"Can only call setEnabled on remote track publications.\");\n    }\n  }, [props.muted, pub, track]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"audio\", __spreadValues({ ref: mediaEl }, elementProps));\n}\n\n// src/hooks/useIsEncrypted.ts\n\n\n\nfunction useIsEncrypted(participant) {\n  const p = useEnsureParticipant(participant);\n  const room = useEnsureRoom();\n  const observer = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.encryptionStatusObservable)(room, p), [room, p]);\n  const isEncrypted = useObservableState(\n    observer,\n    p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.LocalParticipant ? p.isE2EEEnabled : p.isEncrypted\n  );\n  return isEncrypted;\n}\n\n// src/components/participant/ParticipantTile.tsx\nfunction ParticipantContextIfNeeded(props) {\n  const hasContext = !!useMaybeParticipantContext();\n  return props.participant && !hasContext ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContext.Provider, { value: props.participant }, props.children) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, props.children);\n}\nfunction TrackRefContextIfNeeded(props) {\n  const hasContext = !!useMaybeTrackRefContext();\n  return props.trackRef && !hasContext ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackRefContext.Provider, { value: props.trackRef }, props.children) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, props.children);\n}\nfunction ParticipantTile(_a) {\n  var _b = _a, {\n    trackRef,\n    participant,\n    children,\n    source = livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera,\n    onParticipantClick,\n    publication,\n    disableSpeakingIndicator\n  } = _b, htmlProps = __objRest(_b, [\n    \"trackRef\",\n    \"participant\",\n    \"children\",\n    \"source\",\n    \"onParticipantClick\",\n    \"publication\",\n    \"disableSpeakingIndicator\"\n  ]);\n  var _a2, _b2;\n  const maybeTrackRef = useMaybeTrackRefContext();\n  const p = useEnsureParticipant(participant);\n  const trackReference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    var _a3, _b3, _c, _d, _e, _f;\n    return {\n      participant: (_b3 = (_a3 = trackRef == null ? void 0 : trackRef.participant) != null ? _a3 : maybeTrackRef == null ? void 0 : maybeTrackRef.participant) != null ? _b3 : p,\n      source: (_d = (_c = trackRef == null ? void 0 : trackRef.source) != null ? _c : maybeTrackRef == null ? void 0 : maybeTrackRef.source) != null ? _d : source,\n      publication: (_f = (_e = trackRef == null ? void 0 : trackRef.publication) != null ? _e : maybeTrackRef == null ? void 0 : maybeTrackRef.publication) != null ? _f : publication\n    };\n  }, [maybeTrackRef, p, publication, source, trackRef]);\n  const { elementProps } = useParticipantTile({\n    participant: trackReference.participant,\n    htmlProps,\n    source: trackReference.source,\n    publication: trackReference.publication,\n    disableSpeakingIndicator,\n    onParticipantClick\n  });\n  const isEncrypted = useIsEncrypted(p);\n  const layoutContext = useMaybeLayoutContext();\n  const autoManageSubscription = (_a2 = useFeatureContext()) == null ? void 0 : _a2.autoSubscription;\n  const handleSubscribe = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (subscribed) => {\n      if (trackReference.source && !subscribed && layoutContext && layoutContext.pin.dispatch && (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReferencePinned)(trackReference, layoutContext.pin.state)) {\n        layoutContext.pin.dispatch({ msg: \"clear_pin\" });\n      }\n    },\n    [trackReference, layoutContext]\n  );\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ style: { position: \"relative\" } }, elementProps), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackRefContextIfNeeded, { trackRef: trackReference }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContextIfNeeded, { participant: trackReference.participant }, children != null ? children : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference)(trackReference) && (((_b2 = trackReference.publication) == null ? void 0 : _b2.kind) === \"video\" || trackReference.source === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera || trackReference.source === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare) ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    VideoTrack,\n    {\n      trackRef: trackReference,\n      onSubscriptionStatusChanged: handleSubscribe,\n      manageSubscription: autoManageSubscription\n    }\n  ) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference)(trackReference) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    AudioTrack,\n    {\n      trackRef: trackReference,\n      onSubscriptionStatusChanged: handleSubscribe\n    }\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-placeholder\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantPlaceholder_default, null)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-metadata\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-metadata-item\" }, trackReference.source === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, isEncrypted && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LockLockedIcon_default, { style: { marginRight: \"0.25rem\" } }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    TrackMutedIndicator,\n    {\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n      show: \"muted\"\n    }\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantName, null)) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenShareIcon_default, { style: { marginRight: \"0.25rem\" } }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantName, null, \"'s screen\"))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionQualityIndicator, { className: \"lk-participant-metadata-item\" }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusToggle, { trackRef: trackReference }))));\n}\n\n// src/components/layout/FocusLayout.tsx\nfunction FocusLayoutContainer(props) {\n  const elementProps = mergeProps2(props, { className: \"lk-focus-layout\" });\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, elementProps), props.children);\n}\nfunction FocusLayout(_a) {\n  var _b = _a, { trackRef, track } = _b, htmlProps = __objRest(_b, [\"trackRef\", \"track\"]);\n  const trackReference = trackRef != null ? trackRef : track;\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantTile, __spreadValues(__spreadValues({}, trackReference), htmlProps));\n}\n\n// src/components/layout/GridLayout.tsx\n\n\n// src/components/TrackLoop.tsx\n\n\nfunction TrackLoop(_a) {\n  var _b = _a, { tracks } = _b, props = __objRest(_b, [\"tracks\"]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, tracks.map((trackReference) => {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      TrackRefContext.Provider,\n      {\n        value: trackReference,\n        key: (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackReferenceId)(trackReference)\n      },\n      cloneSingleChild(props.children)\n    );\n  }));\n}\n\n// src/components/controls/PaginationControl.tsx\n\n\nfunction PaginationControl({\n  totalPageCount,\n  nextPage,\n  prevPage,\n  currentPage,\n  pagesContainer: connectedElement\n}) {\n  const [interactive, setInteractive] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    let subscription;\n    if (connectedElement) {\n      subscription = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createInteractingObservable)(connectedElement.current, 2e3).subscribe(\n        setInteractive\n      );\n    }\n    return () => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, [connectedElement]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-pagination-control\", \"data-lk-user-interaction\": interactive }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"lk-button\", onClick: prevPage }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chevron_default, null)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"lk-pagination-count\" }, `${currentPage} of ${totalPageCount}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"lk-button\", onClick: nextPage }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chevron_default, null)));\n}\n\n// src/components/controls/PaginationIndicator.tsx\n\nfunction PaginationIndicator({ totalPageCount, currentPage }) {\n  const bubbles = new Array(totalPageCount).fill(\"\").map((_, index) => {\n    if (index + 1 === currentPage) {\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { \"data-lk-active\": true, key: index });\n    } else {\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { key: index });\n    }\n  });\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-pagination-indicator\" }, bubbles);\n}\n\n// src/components/layout/GridLayout.tsx\nfunction GridLayout(_a) {\n  var _b = _a, { tracks } = _b, props = __objRest(_b, [\"tracks\"]);\n  const gridEl = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n  const elementProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => mergeProps2(props, { className: \"lk-grid-layout\" }),\n    [props]\n  );\n  const { layout } = useGridLayout(gridEl, tracks.length);\n  const pagination = usePagination(layout.maxTiles, tracks);\n  useSwipe(gridEl, {\n    onLeftSwipe: pagination.nextPage,\n    onRightSwipe: pagination.prevPage\n  });\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ ref: gridEl, \"data-lk-pagination\": pagination.totalPageCount > 1 }, elementProps), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackLoop, { tracks: pagination.tracks }, props.children), tracks.length > layout.maxTiles && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    PaginationIndicator,\n    {\n      totalPageCount: pagination.totalPageCount,\n      currentPage: pagination.currentPage\n    }\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PaginationControl, __spreadValues({ pagesContainer: gridEl }, pagination))));\n}\n\n// src/components/layout/CarouselLayout.tsx\n\n\nvar MIN_HEIGHT = 130;\nvar MIN_WIDTH = 140;\nvar MIN_VISIBLE_TILES = 1;\nvar ASPECT_RATIO = 16 / 10;\nvar ASPECT_RATIO_INVERT = (1 - ASPECT_RATIO) * -1;\nvar CarouselView = CarouselLayout;\nfunction CarouselLayout(_a) {\n  var _b = _a, { tracks, orientation } = _b, props = __objRest(_b, [\"tracks\", \"orientation\"]);\n  const asideEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const [prevTiles, setPrevTiles] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n  const { width, height } = useSize(asideEl);\n  const carouselOrientation = orientation ? orientation : height >= width ? \"vertical\" : \"horizontal\";\n  const tileSpan = carouselOrientation === \"vertical\" ? Math.max(width * ASPECT_RATIO_INVERT, MIN_HEIGHT) : Math.max(height * ASPECT_RATIO, MIN_WIDTH);\n  const scrollBarWidth = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getScrollBarWidth)();\n  const tilesThatFit = carouselOrientation === \"vertical\" ? Math.max((height - scrollBarWidth) / tileSpan, MIN_VISIBLE_TILES) : Math.max((width - scrollBarWidth) / tileSpan, MIN_VISIBLE_TILES);\n  let maxVisibleTiles = Math.round(tilesThatFit);\n  if (Math.abs(tilesThatFit - prevTiles) < 0.5) {\n    maxVisibleTiles = Math.round(prevTiles);\n  } else if (prevTiles !== tilesThatFit) {\n    setPrevTiles(tilesThatFit);\n  }\n  const sortedTiles = useVisualStableUpdate(tracks, maxVisibleTiles);\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    if (asideEl.current) {\n      asideEl.current.dataset.lkOrientation = carouselOrientation;\n      asideEl.current.style.setProperty(\"--lk-max-visible-tiles\", maxVisibleTiles.toString());\n    }\n  }, [maxVisibleTiles, carouselOrientation]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"aside\", __spreadValues({ key: carouselOrientation, className: \"lk-carousel\", ref: asideEl }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackLoop, { tracks: sortedTiles }, props.children));\n}\n\n// src/components/layout/LayoutContextProvider.tsx\n\n\nfunction LayoutContextProvider({\n  value,\n  onPinChange,\n  onWidgetChange,\n  children\n}) {\n  const layoutContextValue = useEnsureCreateLayoutContext(value);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"PinState Updated\", { state: layoutContextValue.pin.state });\n    if (onPinChange && layoutContextValue.pin.state)\n      onPinChange(layoutContextValue.pin.state);\n  }, [layoutContextValue.pin.state, onPinChange]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Widget Updated\", { widgetState: layoutContextValue.widget.state });\n    if (onWidgetChange && layoutContextValue.widget.state) {\n      onWidgetChange(layoutContextValue.widget.state);\n    }\n  }, [onWidgetChange, layoutContextValue.widget.state]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContext.Provider, { value: layoutContextValue }, children);\n}\n\n// src/components/LiveKitRoom.tsx\n\nfunction LiveKitRoom(props) {\n  const { room, htmlProps } = useLiveKitRoom(props);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, htmlProps), room && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomContext.Provider, { value: room }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LKFeatureContext.Provider, { value: props.featureFlags }, props.children)));\n}\n\n// src/components/participant/AudioVisualizer.tsx\n\n\nfunction AudioVisualizer(_a) {\n  var _b = _a, { participant, trackRef } = _b, props = __objRest(_b, [\"participant\", \"trackRef\"]);\n  var _a2, _b2;\n  const [volumeBars, setVolumeBars] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  const svgWidth = 200;\n  const svgHeight = 90;\n  const barWidth = 6;\n  const barSpacing = 4;\n  const volMultiplier = 50;\n  const barCount = 7;\n  const p = (_a2 = useMaybeParticipantContext()) != null ? _a2 : participant;\n  let ref = (_b2 = useMaybeTrackRefContext()) != null ? _b2 : trackRef;\n  if (!ref) {\n    if (!p) {\n      throw Error(`Participant missing, provide it directly or within a context`);\n    }\n    ref = { participant: p, source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone };\n  }\n  const { track } = useTrack(ref);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!track || !(track instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.LocalAudioTrack || track instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteAudioTrack)) {\n      return;\n    }\n    const { analyser, cleanup } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createAudioAnalyser)(track, {\n      smoothingTimeConstant: 0.8,\n      fftSize: 64\n    });\n    const dataArray = new Uint8Array(analyser.frequencyBinCount);\n    const calculateBars = () => {\n      analyser.getByteFrequencyData(dataArray);\n      const sums = new Array(barCount).fill(0);\n      dataArray.slice(1);\n      const binSize = 6;\n      for (let i = 0; i < barCount / 2; i += 1) {\n        const id = Math.floor(barCount / 2 - i);\n        for (let k = 0; k < binSize; k += 1) {\n          sums[id] += Math.pow(dataArray[i * binSize + k] / 255, 2);\n        }\n        sums[id] /= binSize;\n      }\n      for (let i = 0; i < barCount / 2; i += 1) {\n        const id = Math.floor(barCount / 2 + i);\n        if (sums[id] !== 0) {\n          continue;\n        }\n        for (let k = 0; k < binSize; k += 1) {\n          sums[id] += Math.pow(dataArray[i * binSize + k] / 255, 2);\n        }\n        sums[id] /= binSize;\n      }\n      return sums.map((s) => s * volMultiplier);\n    };\n    const calcInterval = setInterval(() => {\n      const bars = calculateBars();\n      setVolumeBars(bars);\n    }, 100);\n    return () => {\n      clearInterval(calcInterval);\n      cleanup();\n    };\n  }, [track]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"svg\",\n    __spreadProps(__spreadValues({\n      width: \"100%\",\n      height: \"100%\",\n      viewBox: `0 0 ${svgWidth} ${svgHeight}`\n    }, props), {\n      className: \"lk-audio-visualizer\"\n    }),\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", { x: \"0\", y: \"0\", width: \"100%\", height: \"100%\" }),\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"g\",\n      {\n        style: {\n          transform: `translate(${(svgWidth - barCount * (barWidth + barSpacing)) / 2}px, 0)`\n        }\n      },\n      volumeBars.map((vol, idx) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n        \"rect\",\n        {\n          key: idx,\n          x: idx * (barWidth + barSpacing),\n          y: svgHeight / 2 - vol / 2,\n          width: barWidth,\n          height: vol\n        }\n      ))\n    )\n  );\n}\n\n// src/components/ParticipantLoop.tsx\n\nfunction ParticipantLoop(_a) {\n  var _b = _a, { participants } = _b, props = __objRest(_b, [\"participants\"]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, participants.map((participant) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContext.Provider, { value: participant, key: participant.identity }, cloneSingleChild(props.children))));\n}\n\n// src/components/RoomAudioRenderer.tsx\n\n\n\nfunction RoomAudioRenderer({ volume, muted }) {\n  const tracks = useTracks(\n    [livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone, livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShareAudio, livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Unknown],\n    {\n      updateOnlyOn: [],\n      onlySubscribed: false\n    }\n  ).filter((ref) => !(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isLocal)(ref.participant) && ref.publication.kind === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Kind.Audio);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    for (const track of tracks) {\n      track.publication.setSubscribed(true);\n    }\n  }, [tracks]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: { display: \"none\" } }, tracks.map((trackRef) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    AudioTrack,\n    {\n      key: (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackReferenceId)(trackRef),\n      trackRef,\n      volume,\n      muted\n    }\n  )));\n}\n\n// src/components/RoomName.tsx\n\nfunction RoomName(_a) {\n  var _b = _a, {\n    childrenPosition = \"before\",\n    children\n  } = _b, htmlAttributes = __objRest(_b, [\n    \"childrenPosition\",\n    \"children\"\n  ]);\n  const { name } = useRoomInfo();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", __spreadValues({}, htmlAttributes), childrenPosition === \"before\" && children, name, childrenPosition === \"after\" && children);\n}\n\n// src/components/Toast.tsx\n\nfunction Toast(props) {\n  const htmlProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => mergeProps2(props, { className: \"lk-toast\" }), [props]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, htmlProps), props.children);\n}\n\n// src/components/participant/ParticipantAudioTile.tsx\n\n\nfunction ParticipantAudioTile(_a) {\n  var _b = _a, {\n    participant,\n    children,\n    source,\n    publication,\n    disableSpeakingIndicator,\n    onParticipantClick\n  } = _b, htmlProps = __objRest(_b, [\n    \"participant\",\n    \"children\",\n    \"source\",\n    \"publication\",\n    \"disableSpeakingIndicator\",\n    \"onParticipantClick\"\n  ]);\n  const p = useEnsureParticipant(participant);\n  const { elementProps } = useParticipantTile({\n    participant: p,\n    htmlProps,\n    disableSpeakingIndicator,\n    source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n    publication,\n    onParticipantClick\n  });\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ style: { position: \"relative\" } }, elementProps), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContextIfNeeded, { participant: p }, children != null ? children : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioTrack, { source: source != null ? source : livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioVisualizer, null), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-metadata\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-metadata-item\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackMutedIndicator, { source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantName, null)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionQualityIndicator, { className: \"lk-participant-metadata-item\" })))));\n}\n\n// src/components/ConnectionStateToast.tsx\n\n\nfunction ConnectionStateToast(props) {\n  const [notification, setNotification] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n  const state = useConnectionState(props.room);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    switch (state) {\n      case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Reconnecting:\n        setNotification(\n          /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SpinnerIcon_default, { className: \"lk-spinner\" }), \" Reconnecting\")\n        );\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Connecting:\n        setNotification(\n          /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SpinnerIcon_default, { className: \"lk-spinner\" }), \" Connecting\")\n        );\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Disconnected:\n        setNotification(/* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \"Disconnected\"));\n        break;\n      default:\n        setNotification(void 0);\n        break;\n    }\n  }, [state]);\n  return notification ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Toast, { className: \"lk-toast-connection-state\" }, notification) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n}\n\n// src/components/ChatEntry.tsx\n\n\nfunction ChatEntry(_a) {\n  var _b = _a, {\n    entry,\n    hideName = false,\n    hideTimestamp = false,\n    messageFormatter\n  } = _b, props = __objRest(_b, [\n    \"entry\",\n    \"hideName\",\n    \"hideTimestamp\",\n    \"messageFormatter\"\n  ]);\n  var _a2, _b2, _c, _d;\n  const formattedMessage = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return messageFormatter ? messageFormatter(entry.message) : entry.message;\n  }, [entry.message, messageFormatter]);\n  const time = new Date(entry.timestamp);\n  const locale = navigator ? navigator.language : \"en-US\";\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"li\",\n    __spreadValues({\n      className: \"lk-chat-entry\",\n      title: time.toLocaleTimeString(locale, { timeStyle: \"full\" }),\n      \"data-lk-message-origin\": ((_a2 = entry.from) == null ? void 0 : _a2.isLocal) ? \"local\" : \"remote\"\n    }, props),\n    (!hideTimestamp || !hideName) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"lk-meta-data\" }, !hideName && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", { className: \"lk-participant-name\" }, (_d = (_b2 = entry.from) == null ? void 0 : _b2.name) != null ? _d : (_c = entry.from) == null ? void 0 : _c.identity), !hideTimestamp && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"lk-timestamp\" }, time.toLocaleTimeString(locale, { timeStyle: \"short\" }))),\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"lk-message-body\" }, formattedMessage)\n  );\n}\nfunction formatChatMessageLinks(message) {\n  return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.tokenize)(message, (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createDefaultGrammar)()).map((tok, i) => {\n    if (typeof tok === `string`) {\n      return tok;\n    } else {\n      const content = tok.content.toString();\n      const href = tok.type === `url` ? /^http(s?):\\/\\//.test(content) ? content : `https://${content}` : `mailto:${content}`;\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", { className: \"lk-chat-link\", key: i, href, target: \"_blank\", rel: \"noreferrer\" }, content);\n    }\n  });\n}\n\n// src/prefabs/Chat.tsx\n\nfunction Chat(_a) {\n  var _b = _a, { messageFormatter, messageDecoder, messageEncoder } = _b, props = __objRest(_b, [\"messageFormatter\", \"messageDecoder\", \"messageEncoder\"]);\n  const inputRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const ulRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const chatOptions = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return { messageDecoder, messageEncoder };\n  }, [messageDecoder, messageEncoder]);\n  const { send, chatMessages, isSending } = useChat(chatOptions);\n  const layoutContext = useMaybeLayoutContext();\n  const lastReadMsgAt = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n  function handleSubmit(event) {\n    return __async(this, null, function* () {\n      event.preventDefault();\n      if (inputRef.current && inputRef.current.value.trim() !== \"\") {\n        if (send) {\n          yield send(inputRef.current.value);\n          inputRef.current.value = \"\";\n          inputRef.current.focus();\n        }\n      }\n    });\n  }\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a2;\n    if (ulRef) {\n      (_a2 = ulRef.current) == null ? void 0 : _a2.scrollTo({ top: ulRef.current.scrollHeight });\n    }\n  }, [ulRef, chatMessages]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a2, _b2, _c, _d, _e;\n    if (!layoutContext || chatMessages.length === 0) {\n      return;\n    }\n    if (((_a2 = layoutContext.widget.state) == null ? void 0 : _a2.showChat) && chatMessages.length > 0 && lastReadMsgAt.current !== ((_b2 = chatMessages[chatMessages.length - 1]) == null ? void 0 : _b2.timestamp)) {\n      lastReadMsgAt.current = (_c = chatMessages[chatMessages.length - 1]) == null ? void 0 : _c.timestamp;\n      return;\n    }\n    const unreadMessageCount = chatMessages.filter(\n      (msg) => !lastReadMsgAt.current || msg.timestamp > lastReadMsgAt.current\n    ).length;\n    const { widget } = layoutContext;\n    if (unreadMessageCount > 0 && ((_d = widget.state) == null ? void 0 : _d.unreadMessages) !== unreadMessageCount) {\n      (_e = widget.dispatch) == null ? void 0 : _e.call(widget, { msg: \"unread_msg\", count: unreadMessageCount });\n    }\n  }, [chatMessages, layoutContext == null ? void 0 : layoutContext.widget]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadProps(__spreadValues({}, props), { className: \"lk-chat\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", { className: \"lk-list lk-chat-messages\", ref: ulRef }, props.children ? chatMessages.map(\n    (msg, idx) => cloneSingleChild(props.children, {\n      entry: msg,\n      key: idx,\n      messageFormatter\n    })\n  ) : chatMessages.map((msg, idx, allMsg) => {\n    const hideName = idx >= 1 && allMsg[idx - 1].from === msg.from;\n    const hideTimestamp = idx >= 1 && msg.timestamp - allMsg[idx - 1].timestamp < 6e4;\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      ChatEntry,\n      {\n        key: idx,\n        hideName,\n        hideTimestamp: hideName === false ? false : hideTimestamp,\n        entry: msg,\n        messageFormatter\n      }\n    );\n  })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", { className: \"lk-chat-form\", onSubmit: handleSubmit }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"input\",\n    {\n      className: \"lk-form-control lk-chat-form-input\",\n      disabled: isSending,\n      ref: inputRef,\n      type: \"text\",\n      placeholder: \"Enter a message...\"\n    }\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { type: \"submit\", className: \"lk-button lk-chat-form-button\", disabled: isSending }, \"Send\")));\n}\n\n// src/prefabs/PreJoin.tsx\n\n\n\n// src/prefabs/MediaDeviceMenu.tsx\n\n\n\nfunction MediaDeviceMenu(_a) {\n  var _b = _a, {\n    kind,\n    initialSelection,\n    onActiveDeviceChange,\n    tracks,\n    requestPermissions = false\n  } = _b, props = __objRest(_b, [\n    \"kind\",\n    \"initialSelection\",\n    \"onActiveDeviceChange\",\n    \"tracks\",\n    \"requestPermissions\"\n  ]);\n  const [isOpen, setIsOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const [devices, setDevices] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  const [updateRequired, setUpdateRequired] = react__WEBPACK_IMPORTED_MODULE_0__.useState(true);\n  const handleActiveDeviceChange = (kind2, deviceId) => {\n    _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"handle device change\");\n    setIsOpen(false);\n    onActiveDeviceChange == null ? void 0 : onActiveDeviceChange(kind2, deviceId);\n  };\n  const button = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const tooltip = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    if (button.current && tooltip.current && (devices || updateRequired)) {\n      (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.computeMenuPosition)(button.current, tooltip.current).then(({ x, y }) => {\n        if (tooltip.current) {\n          Object.assign(tooltip.current.style, { left: `${x}px`, top: `${y}px` });\n        }\n      });\n    }\n    setUpdateRequired(false);\n  }, [button, tooltip, devices, updateRequired]);\n  const handleClickOutside = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (event) => {\n      if (!tooltip.current) {\n        return;\n      }\n      if (event.target === button.current) {\n        return;\n      }\n      if (isOpen && (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.wasClickOutside)(tooltip.current, event)) {\n        setIsOpen(false);\n      }\n    },\n    [isOpen, tooltip, button]\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    document.addEventListener(\"click\", handleClickOutside);\n    window.addEventListener(\"resize\", () => setUpdateRequired(true));\n    return () => {\n      document.removeEventListener(\"click\", handleClickOutside);\n      window.removeEventListener(\"resize\", () => setUpdateRequired(true));\n    };\n  }, [handleClickOutside, setUpdateRequired]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"button\",\n    __spreadProps(__spreadValues({\n      className: \"lk-button lk-button-menu\",\n      \"aria-pressed\": isOpen\n    }, props), {\n      onClick: () => setIsOpen(!isOpen),\n      ref: button\n    }),\n    props.children\n  ), !props.disabled && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"div\",\n    {\n      className: \"lk-device-menu\",\n      ref: tooltip,\n      style: { visibility: isOpen ? \"visible\" : \"hidden\" }\n    },\n    kind ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      MediaDeviceSelect,\n      {\n        initialSelection,\n        onActiveDeviceChange: (deviceId) => handleActiveDeviceChange(kind, deviceId),\n        onDeviceListChange: setDevices,\n        kind,\n        track: tracks == null ? void 0 : tracks[kind],\n        requestPermissions\n      }\n    ) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-device-menu-heading\" }, \"Audio inputs\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      MediaDeviceSelect,\n      {\n        kind: \"audioinput\",\n        onActiveDeviceChange: (deviceId) => handleActiveDeviceChange(\"audioinput\", deviceId),\n        onDeviceListChange: setDevices,\n        track: tracks == null ? void 0 : tracks.audioinput,\n        requestPermissions\n      }\n    ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-device-menu-heading\" }, \"Video inputs\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      MediaDeviceSelect,\n      {\n        kind: \"videoinput\",\n        onActiveDeviceChange: (deviceId) => handleActiveDeviceChange(\"videoinput\", deviceId),\n        onDeviceListChange: setDevices,\n        track: tracks == null ? void 0 : tracks.videoinput,\n        requestPermissions\n      }\n    ))\n  ));\n}\n\n// src/prefabs/PreJoin.tsx\n\nvar DEFAULT_USER_CHOICES = {\n  username: \"\",\n  videoEnabled: true,\n  audioEnabled: true,\n  videoDeviceId: \"default\",\n  audioDeviceId: \"default\",\n  e2ee: false,\n  sharedPassphrase: \"\"\n};\nfunction usePreviewTracks(options, onError) {\n  const [tracks, setTracks] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    let trackPromise = void 0;\n    let needsCleanup = false;\n    if (options.audio || options.video) {\n      trackPromise = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createLocalTracks)(options);\n      trackPromise.then((tracks2) => {\n        if (needsCleanup) {\n          tracks2.forEach((tr) => tr.stop());\n        } else {\n          setTracks(tracks2);\n        }\n      }).catch(onError);\n    }\n    return () => {\n      needsCleanup = true;\n      trackPromise == null ? void 0 : trackPromise.then(\n        (tracks2) => tracks2.forEach((track) => {\n          track.stop();\n        })\n      );\n    };\n  }, [JSON.stringify(options)]);\n  return tracks;\n}\nfunction usePreviewDevice(enabled, deviceId, kind) {\n  const [deviceError, setDeviceError] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n  const [isCreatingTrack, setIsCreatingTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const devices = useMediaDevices({ kind });\n  const [selectedDevice, setSelectedDevice] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    void 0\n  );\n  const [localTrack, setLocalTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  const [localDeviceId, setLocalDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(deviceId);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    setLocalDeviceId(deviceId);\n  }, [deviceId]);\n  const createTrack = (deviceId2, kind2) => __async(this, null, function* () {\n    try {\n      const track = kind2 === \"videoinput\" ? yield (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createLocalVideoTrack)({\n        deviceId: deviceId2,\n        resolution: livekit_client__WEBPACK_IMPORTED_MODULE_4__.VideoPresets.h720.resolution\n      }) : yield (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createLocalAudioTrack)({ deviceId: deviceId2 });\n      const newDeviceId = yield track.getDeviceId();\n      if (newDeviceId && deviceId2 !== newDeviceId) {\n        prevDeviceId.current = newDeviceId;\n        setLocalDeviceId(newDeviceId);\n      }\n      setLocalTrack(track);\n    } catch (e) {\n      if (e instanceof Error) {\n        setDeviceError(e);\n      }\n    }\n  });\n  const switchDevice = (track, id) => __async(this, null, function* () {\n    yield track.setDeviceId(id);\n    prevDeviceId.current = id;\n  });\n  const prevDeviceId = react__WEBPACK_IMPORTED_MODULE_0__.useRef(localDeviceId);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (enabled && !localTrack && !deviceError && !isCreatingTrack) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"creating track\", kind);\n      setIsCreatingTrack(true);\n      createTrack(localDeviceId, kind).finally(() => {\n        setIsCreatingTrack(false);\n      });\n    }\n  }, [enabled, localTrack, deviceError, isCreatingTrack]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!localTrack) {\n      return;\n    }\n    if (!enabled) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`muting ${kind} track`);\n      localTrack.mute().then(() => _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(localTrack.mediaStreamTrack));\n    } else if ((selectedDevice == null ? void 0 : selectedDevice.deviceId) && prevDeviceId.current !== (selectedDevice == null ? void 0 : selectedDevice.deviceId)) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`switching ${kind} device from`, prevDeviceId.current, selectedDevice.deviceId);\n      switchDevice(localTrack, selectedDevice.deviceId);\n    } else {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`unmuting local ${kind} track`);\n      localTrack.unmute();\n    }\n  }, [localTrack, selectedDevice, enabled, kind]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    return () => {\n      if (localTrack) {\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`stopping local ${kind} track`);\n        localTrack.stop();\n        localTrack.mute();\n      }\n    };\n  }, []);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    setSelectedDevice(devices.find((dev) => dev.deviceId === localDeviceId));\n  }, [localDeviceId, devices]);\n  return {\n    selectedDevice,\n    localTrack,\n    deviceError\n  };\n}\nfunction PreJoin(_a) {\n  var _b = _a, {\n    defaults = {},\n    onValidate,\n    onSubmit,\n    onError,\n    debug,\n    joinLabel = \"Join Room\",\n    micLabel = \"Microphone\",\n    camLabel = \"Camera\",\n    userLabel = \"Username\",\n    showE2EEOptions = false\n  } = _b, htmlProps = __objRest(_b, [\n    \"defaults\",\n    \"onValidate\",\n    \"onSubmit\",\n    \"onError\",\n    \"debug\",\n    \"joinLabel\",\n    \"micLabel\",\n    \"camLabel\",\n    \"userLabel\",\n    \"showE2EEOptions\"\n  ]);\n  var _a2, _b2, _c, _d, _e, _f, _g;\n  const [userChoices, setUserChoices] = react__WEBPACK_IMPORTED_MODULE_0__.useState(DEFAULT_USER_CHOICES);\n  const [username, setUsername] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    (_a2 = defaults.username) != null ? _a2 : DEFAULT_USER_CHOICES.username\n  );\n  const [videoEnabled, setVideoEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    (_b2 = defaults.videoEnabled) != null ? _b2 : DEFAULT_USER_CHOICES.videoEnabled\n  );\n  const initialVideoDeviceId = (_c = defaults.videoDeviceId) != null ? _c : DEFAULT_USER_CHOICES.videoDeviceId;\n  const [videoDeviceId, setVideoDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialVideoDeviceId);\n  const initialAudioDeviceId = (_d = defaults.audioDeviceId) != null ? _d : DEFAULT_USER_CHOICES.audioDeviceId;\n  const [audioEnabled, setAudioEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    (_e = defaults.audioEnabled) != null ? _e : DEFAULT_USER_CHOICES.audioEnabled\n  );\n  const [audioDeviceId, setAudioDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialAudioDeviceId);\n  const [e2ee, setE2ee] = react__WEBPACK_IMPORTED_MODULE_0__.useState((_f = defaults.e2ee) != null ? _f : DEFAULT_USER_CHOICES.e2ee);\n  const [sharedPassphrase, setSharedPassphrase] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    (_g = defaults.sharedPassphrase) != null ? _g : DEFAULT_USER_CHOICES.sharedPassphrase\n  );\n  const tracks = usePreviewTracks(\n    {\n      audio: audioEnabled ? { deviceId: initialAudioDeviceId } : false,\n      video: videoEnabled ? { deviceId: initialVideoDeviceId } : false\n    },\n    onError\n  );\n  const videoEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const videoTrack = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => tracks == null ? void 0 : tracks.filter((track) => track.kind === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Kind.Video)[0],\n    [tracks]\n  );\n  const facingMode = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (videoTrack) {\n      const { facingMode: facingMode2 } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.facingModeFromLocalTrack)(videoTrack);\n      return facingMode2;\n    } else {\n      return \"undefined\";\n    }\n  }, [videoTrack]);\n  const audioTrack = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => tracks == null ? void 0 : tracks.filter((track) => track.kind === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Kind.Audio)[0],\n    [tracks]\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (videoEl.current && videoTrack) {\n      videoTrack.unmute();\n      videoTrack.attach(videoEl.current);\n    }\n    return () => {\n      videoTrack == null ? void 0 : videoTrack.detach();\n    };\n  }, [videoTrack]);\n  const [isValid, setIsValid] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  const handleValidation = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (values) => {\n      if (typeof onValidate === \"function\") {\n        return onValidate(values);\n      } else {\n        return values.username !== \"\";\n      }\n    },\n    [onValidate]\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const newUserChoices = {\n      username,\n      videoEnabled,\n      videoDeviceId,\n      audioEnabled,\n      audioDeviceId,\n      e2ee,\n      sharedPassphrase\n    };\n    setUserChoices(newUserChoices);\n    setIsValid(handleValidation(newUserChoices));\n  }, [\n    username,\n    videoEnabled,\n    handleValidation,\n    audioEnabled,\n    audioDeviceId,\n    videoDeviceId,\n    sharedPassphrase,\n    e2ee\n  ]);\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (handleValidation(userChoices)) {\n      if (typeof onSubmit === \"function\") {\n        onSubmit(userChoices);\n      }\n    } else {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"Validation failed with: \", userChoices);\n    }\n  }\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ className: \"lk-prejoin\" }, htmlProps), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-video-container\" }, videoTrack && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", { ref: videoEl, width: \"1280\", height: \"720\", \"data-lk-facing-mode\": facingMode }), (!videoTrack || !videoEnabled) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-camera-off-note\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantPlaceholder_default, null))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-container\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group audio\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    TrackToggle,\n    {\n      initialState: audioEnabled,\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n      onChange: (enabled) => setAudioEnabled(enabled)\n    },\n    micLabel\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MediaDeviceMenu,\n    {\n      initialSelection: audioDeviceId,\n      kind: \"audioinput\",\n      disabled: !audioTrack,\n      tracks: { audioinput: audioTrack },\n      onActiveDeviceChange: (_, id) => setAudioDeviceId(id)\n    }\n  ))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group video\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    TrackToggle,\n    {\n      initialState: videoEnabled,\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera,\n      onChange: (enabled) => setVideoEnabled(enabled)\n    },\n    camLabel\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MediaDeviceMenu,\n    {\n      initialSelection: videoDeviceId,\n      kind: \"videoinput\",\n      disabled: !videoTrack,\n      tracks: { videoinput: videoTrack },\n      onActiveDeviceChange: (_, id) => setVideoDeviceId(id)\n    }\n  )))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", { className: \"lk-username-container\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"input\",\n    {\n      className: \"lk-form-control\",\n      id: \"username\",\n      name: \"username\",\n      type: \"text\",\n      defaultValue: username,\n      placeholder: userLabel,\n      onChange: (inputEl) => setUsername(inputEl.target.value),\n      autoComplete: \"off\"\n    }\n  ), showE2EEOptions && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: { display: \"flex\", flexDirection: \"column\", gap: \"1rem\" } }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: { display: \"flex\", flexDirection: \"row\", gap: \"1rem\" } }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"input\",\n    {\n      id: \"use-e2ee\",\n      type: \"checkbox\",\n      checked: e2ee,\n      onChange: (ev) => setE2ee(ev.target.checked)\n    }\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", { htmlFor: \"use-e2ee\" }, \"Enable end-to-end encryption\")), e2ee && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: { display: \"flex\", flexDirection: \"row\", gap: \"1rem\" } }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", { htmlFor: \"passphrase\" }, \"Passphrase\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"input\",\n    {\n      id: \"passphrase\",\n      type: \"password\",\n      value: sharedPassphrase,\n      onChange: (ev) => setSharedPassphrase(ev.target.value)\n    }\n  ))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"button\",\n    {\n      className: \"lk-button lk-join-button\",\n      type: \"submit\",\n      onClick: handleSubmit,\n      disabled: !isValid\n    },\n    joinLabel\n  )), debug && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", null, \"User Choices:\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", { className: \"lk-list\", style: { overflow: \"hidden\", maxWidth: \"15rem\" } }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Username: \", `${userChoices.username}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Video Enabled: \", `${userChoices.videoEnabled}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Audio Enabled: \", `${userChoices.audioEnabled}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Video Device: \", `${userChoices.videoDeviceId}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Audio Device: \", `${userChoices.audioDeviceId}`))));\n}\n\n// src/prefabs/VideoConference.tsx\n\n\n\n\n// src/prefabs/ControlBar.tsx\n\n\n\nfunction ControlBar(_a) {\n  var _b = _a, { variation, controls } = _b, props = __objRest(_b, [\"variation\", \"controls\"]);\n  var _a2, _b2, _c, _d, _e;\n  const [isChatOpen, setIsChatOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const layoutContext = useMaybeLayoutContext();\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a3, _b3;\n    if (((_a3 = layoutContext == null ? void 0 : layoutContext.widget.state) == null ? void 0 : _a3.showChat) !== void 0) {\n      setIsChatOpen((_b3 = layoutContext == null ? void 0 : layoutContext.widget.state) == null ? void 0 : _b3.showChat);\n    }\n  }, [(_a2 = layoutContext == null ? void 0 : layoutContext.widget.state) == null ? void 0 : _a2.showChat]);\n  const isTooLittleSpace = useMediaQuery(`(max-width: ${isChatOpen ? 1e3 : 760}px)`);\n  const defaultVariation = isTooLittleSpace ? \"minimal\" : \"verbose\";\n  variation != null ? variation : variation = defaultVariation;\n  const visibleControls = __spreadValues({ leave: true }, controls);\n  const localPermissions = useLocalParticipantPermissions();\n  if (!localPermissions) {\n    visibleControls.camera = false;\n    visibleControls.chat = false;\n    visibleControls.microphone = false;\n    visibleControls.screenShare = false;\n  } else {\n    (_b2 = visibleControls.camera) != null ? _b2 : visibleControls.camera = localPermissions.canPublish;\n    (_c = visibleControls.microphone) != null ? _c : visibleControls.microphone = localPermissions.canPublish;\n    (_d = visibleControls.screenShare) != null ? _d : visibleControls.screenShare = localPermissions.canPublish;\n    (_e = visibleControls.chat) != null ? _e : visibleControls.chat = localPermissions.canPublishData && (controls == null ? void 0 : controls.chat);\n  }\n  const showIcon = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => variation === \"minimal\" || variation === \"verbose\",\n    [variation]\n  );\n  const showText = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => variation === \"textOnly\" || variation === \"verbose\",\n    [variation]\n  );\n  const browserSupportsScreenSharing = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.supportsScreenSharing)();\n  const [isScreenShareEnabled, setIsScreenShareEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const onScreenShareChange = (enabled) => {\n    setIsScreenShareEnabled(enabled);\n  };\n  const htmlProps = mergeProps2({ className: \"lk-control-bar\" }, props);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, htmlProps), visibleControls.microphone && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackToggle, { source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone, showIcon }, showText && \"Microphone\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceMenu, { kind: \"audioinput\" }))), visibleControls.camera && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackToggle, { source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera, showIcon }, showText && \"Camera\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceMenu, { kind: \"videoinput\" }))), visibleControls.screenShare && browserSupportsScreenSharing && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    TrackToggle,\n    {\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare,\n      captureOptions: { audio: true, selfBrowserSurface: \"include\" },\n      showIcon,\n      onChange: onScreenShareChange\n    },\n    showText && (isScreenShareEnabled ? \"Stop screen share\" : \"Share screen\")\n  ), visibleControls.chat && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatToggle, null, showIcon && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatIcon_default, null), showText && \"Chat\"), visibleControls.leave && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DisconnectButton, null, showIcon && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LeaveIcon_default, null), showText && \"Leave\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(StartAudio, { label: \"Start Audio\" }));\n}\n\n// src/prefabs/VideoConference.tsx\nfunction VideoConference(_a) {\n  var _b = _a, {\n    chatMessageFormatter,\n    chatMessageDecoder,\n    chatMessageEncoder\n  } = _b, props = __objRest(_b, [\n    \"chatMessageFormatter\",\n    \"chatMessageDecoder\",\n    \"chatMessageEncoder\"\n  ]);\n  var _a2, _b2;\n  const [widgetState, setWidgetState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n    showChat: false,\n    unreadMessages: 0\n  });\n  const lastAutoFocusedScreenShareTrack = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const tracks = useTracks(\n    [\n      { source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera, withPlaceholder: true },\n      { source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare, withPlaceholder: false }\n    ],\n    { updateOnlyOn: [livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.ActiveSpeakersChanged], onlySubscribed: false }\n  );\n  const widgetUpdate = (state) => {\n    _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"updating widget state\", state);\n    setWidgetState(state);\n  };\n  const layoutContext = useCreateLayoutContext();\n  const screenShareTracks = tracks.filter(_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference).filter((track) => track.publication.source === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare);\n  const focusTrack = (_a2 = usePinnedTracks(layoutContext)) == null ? void 0 : _a2[0];\n  const carouselTracks = tracks.filter((track) => !(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isEqualTrackRef)(track, focusTrack));\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a3, _b3, _c, _d;\n    if (screenShareTracks.some((track) => track.publication.isSubscribed) && lastAutoFocusedScreenShareTrack.current === null) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Auto set screen share focus:\", { newScreenShareTrack: screenShareTracks[0] });\n      (_b3 = (_a3 = layoutContext.pin).dispatch) == null ? void 0 : _b3.call(_a3, { msg: \"set_pin\", trackReference: screenShareTracks[0] });\n      lastAutoFocusedScreenShareTrack.current = screenShareTracks[0];\n    } else if (lastAutoFocusedScreenShareTrack.current && !screenShareTracks.some(\n      (track) => {\n        var _a4, _b4;\n        return track.publication.trackSid === ((_b4 = (_a4 = lastAutoFocusedScreenShareTrack.current) == null ? void 0 : _a4.publication) == null ? void 0 : _b4.trackSid);\n      }\n    )) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Auto clearing screen share focus.\");\n      (_d = (_c = layoutContext.pin).dispatch) == null ? void 0 : _d.call(_c, { msg: \"clear_pin\" });\n      lastAutoFocusedScreenShareTrack.current = null;\n    }\n  }, [\n    screenShareTracks.map((ref) => `${ref.publication.trackSid}_${ref.publication.isSubscribed}`).join(),\n    (_b2 = focusTrack == null ? void 0 : focusTrack.publication) == null ? void 0 : _b2.trackSid\n  ]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ className: \"lk-video-conference\" }, props), (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isWeb)() && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    LayoutContextProvider,\n    {\n      value: layoutContext,\n      onWidgetChange: widgetUpdate\n    },\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-video-conference-inner\" }, !focusTrack ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-grid-layout-wrapper\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GridLayout, { tracks }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantTile, null))) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-focus-layout-wrapper\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusLayoutContainer, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CarouselLayout, { tracks: carouselTracks }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantTile, null)), focusTrack && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusLayout, { trackRef: focusTrack }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlBar, { controls: { chat: true } })),\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      Chat,\n      {\n        style: { display: widgetState.showChat ? \"flex\" : \"none\" },\n        messageFormatter: chatMessageFormatter,\n        messageEncoder: chatMessageEncoder,\n        messageDecoder: chatMessageDecoder\n      }\n    )\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomAudioRenderer, null), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionStateToast, null));\n}\n\n// src/prefabs/AudioConference.tsx\n\nfunction AudioConference(_a) {\n  var props = __objRest(_a, []);\n  const [widgetState, setWidgetState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n    showChat: false,\n    unreadMessages: 0\n  });\n  const participants = useParticipants();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContextProvider, { onWidgetChange: setWidgetState }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ className: \"lk-audio-conference\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-audio-conference-stage\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantLoop, { participants }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantAudioTile, null))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    ControlBar,\n    {\n      controls: { microphone: true, screenShare: false, camera: false, chat: true }\n    }\n  ), widgetState.showChat && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chat, null)));\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@livekit+components-react@1.3.0_livekit-client@1.14.4_react-dom@18.0.0_react@18.0.0/node_modules/@livekit/components-react/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/clsx@2.0.0/node_modules/clsx/dist/clsx.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/.pnpm/clsx@2.0.0/node_modules/clsx/dist/clsx.mjs ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clsx: function() { return /* binding */ clsx; }\n/* harmony export */ });\nfunction r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}/* harmony default export */ __webpack_exports__[\"default\"] = (clsx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jbHN4QDIuMC4wL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGNBQWMsYUFBYSwrQ0FBK0MsdURBQXVELFdBQVcsMENBQTBDLHlDQUF5QyxTQUFnQixnQkFBZ0IscUJBQXFCLG1CQUFtQixrREFBa0QsU0FBUywrREFBZSxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jbHN4QDIuMC4wL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tanM/YTE3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiByKGUpe3ZhciB0LGYsbj1cIlwiO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZSluKz1lO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGUpaWYoQXJyYXkuaXNBcnJheShlKSlmb3IodD0wO3Q8ZS5sZW5ndGg7dCsrKWVbdF0mJihmPXIoZVt0XSkpJiYobiYmKG4rPVwiIFwiKSxuKz1mKTtlbHNlIGZvcih0IGluIGUpZVt0XSYmKG4mJihuKz1cIiBcIiksbis9dCk7cmV0dXJuIG59ZXhwb3J0IGZ1bmN0aW9uIGNsc3goKXtmb3IodmFyIGUsdCxmPTAsbj1cIlwiO2Y8YXJndW1lbnRzLmxlbmd0aDspKGU9YXJndW1lbnRzW2YrK10pJiYodD1yKGUpKSYmKG4mJihuKz1cIiBcIiksbis9dCk7cmV0dXJuIG59ZXhwb3J0IGRlZmF1bHQgY2xzeDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/clsx@2.0.0/node_modules/clsx/dist/clsx.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/email-regex@5.0.0/node_modules/email-regex/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/email-regex@5.0.0/node_modules/email-regex/index.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ emailRegex; }\n/* harmony export */ });\nconst regex = '[^\\\\.\\\\s@:](?:[^\\\\s@:]*[^\\\\s@:\\\\.])?@[^\\\\.\\\\s@]+(?:\\\\.[^\\\\.\\\\s@]+)*';\n\nfunction emailRegex({exact} = {}) {\n\treturn exact ? new RegExp(`^${regex}$`) : new RegExp(regex, 'g');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9lbWFpbC1yZWdleEA1LjAuMC9ub2RlX21vZHVsZXMvZW1haWwtcmVnZXgvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVlLHFCQUFxQixPQUFPLElBQUk7QUFDL0MsK0JBQStCLE1BQU07QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2VtYWlsLXJlZ2V4QDUuMC4wL25vZGVfbW9kdWxlcy9lbWFpbC1yZWdleC9pbmRleC5qcz9jNjgwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlZ2V4ID0gJ1teXFxcXC5cXFxcc0A6XSg/OlteXFxcXHNAOl0qW15cXFxcc0A6XFxcXC5dKT9AW15cXFxcLlxcXFxzQF0rKD86XFxcXC5bXlxcXFwuXFxcXHNAXSspKic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVtYWlsUmVnZXgoe2V4YWN0fSA9IHt9KSB7XG5cdHJldHVybiBleGFjdCA/IG5ldyBSZWdFeHAoYF4ke3JlZ2V4fSRgKSA6IG5ldyBSZWdFeHAocmVnZXgsICdnJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/email-regex@5.0.0/node_modules/email-regex/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/livekit-client@1.14.4/node_modules/livekit-client/dist/livekit-client.esm.mjs":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/livekit-client@1.14.4/node_modules/livekit-client/dist/livekit-client.esm.mjs ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioPresets: function() { return /* binding */ AudioPresets; },\n/* harmony export */   BaseKeyProvider: function() { return /* binding */ BaseKeyProvider; },\n/* harmony export */   ConnectionCheck: function() { return /* binding */ ConnectionCheck; },\n/* harmony export */   ConnectionError: function() { return /* binding */ ConnectionError; },\n/* harmony export */   ConnectionQuality: function() { return /* binding */ ConnectionQuality; },\n/* harmony export */   ConnectionState: function() { return /* binding */ ConnectionState; },\n/* harmony export */   CriticalTimers: function() { return /* binding */ CriticalTimers; },\n/* harmony export */   CryptorEvent: function() { return /* binding */ CryptorEvent; },\n/* harmony export */   DataPacket_Kind: function() { return /* binding */ DataPacket_Kind; },\n/* harmony export */   DefaultReconnectPolicy: function() { return /* binding */ DefaultReconnectPolicy; },\n/* harmony export */   DeviceUnsupportedError: function() { return /* binding */ DeviceUnsupportedError; },\n/* harmony export */   DisconnectReason: function() { return /* binding */ DisconnectReason; },\n/* harmony export */   EncryptionEvent: function() { return /* binding */ EncryptionEvent; },\n/* harmony export */   EngineEvent: function() { return /* binding */ EngineEvent; },\n/* harmony export */   ExternalE2EEKeyProvider: function() { return /* binding */ ExternalE2EEKeyProvider; },\n/* harmony export */   KeyHandlerEvent: function() { return /* binding */ KeyHandlerEvent; },\n/* harmony export */   KeyProviderEvent: function() { return /* binding */ KeyProviderEvent; },\n/* harmony export */   LivekitError: function() { return /* binding */ LivekitError; },\n/* harmony export */   LocalAudioTrack: function() { return /* binding */ LocalAudioTrack; },\n/* harmony export */   LocalParticipant: function() { return /* binding */ LocalParticipant; },\n/* harmony export */   LocalTrack: function() { return /* binding */ LocalTrack; },\n/* harmony export */   LocalTrackPublication: function() { return /* binding */ LocalTrackPublication; },\n/* harmony export */   LocalVideoTrack: function() { return /* binding */ LocalVideoTrack; },\n/* harmony export */   LogLevel: function() { return /* binding */ LogLevel; },\n/* harmony export */   MediaDeviceFailure: function() { return /* binding */ MediaDeviceFailure; },\n/* harmony export */   NegotiationError: function() { return /* binding */ NegotiationError; },\n/* harmony export */   Participant: function() { return /* binding */ Participant; },\n/* harmony export */   ParticipantEvent: function() { return /* binding */ ParticipantEvent; },\n/* harmony export */   PublishDataError: function() { return /* binding */ PublishDataError; },\n/* harmony export */   RemoteAudioTrack: function() { return /* binding */ RemoteAudioTrack; },\n/* harmony export */   RemoteParticipant: function() { return /* binding */ RemoteParticipant; },\n/* harmony export */   RemoteTrack: function() { return /* binding */ RemoteTrack; },\n/* harmony export */   RemoteTrackPublication: function() { return /* binding */ RemoteTrackPublication; },\n/* harmony export */   RemoteVideoTrack: function() { return /* binding */ RemoteVideoTrack; },\n/* harmony export */   Room: function() { return /* binding */ Room; },\n/* harmony export */   RoomEvent: function() { return /* binding */ RoomEvent; },\n/* harmony export */   RoomState: function() { return /* binding */ RoomState; },\n/* harmony export */   ScreenSharePresets: function() { return /* binding */ ScreenSharePresets; },\n/* harmony export */   Track: function() { return /* binding */ Track; },\n/* harmony export */   TrackEvent: function() { return /* binding */ TrackEvent; },\n/* harmony export */   TrackInvalidError: function() { return /* binding */ TrackInvalidError; },\n/* harmony export */   TrackPublication: function() { return /* binding */ TrackPublication; },\n/* harmony export */   UnexpectedConnectionState: function() { return /* binding */ UnexpectedConnectionState; },\n/* harmony export */   UnsupportedServer: function() { return /* binding */ UnsupportedServer; },\n/* harmony export */   VideoPreset: function() { return /* binding */ VideoPreset; },\n/* harmony export */   VideoPresets: function() { return /* binding */ VideoPresets; },\n/* harmony export */   VideoPresets43: function() { return /* binding */ VideoPresets43; },\n/* harmony export */   VideoQuality: function() { return /* binding */ VideoQuality; },\n/* harmony export */   attachToElement: function() { return /* binding */ attachToElement; },\n/* harmony export */   createAudioAnalyser: function() { return /* binding */ createAudioAnalyser; },\n/* harmony export */   createE2EEKey: function() { return /* binding */ createE2EEKey; },\n/* harmony export */   createKeyMaterialFromBuffer: function() { return /* binding */ createKeyMaterialFromBuffer; },\n/* harmony export */   createKeyMaterialFromString: function() { return /* binding */ createKeyMaterialFromString; },\n/* harmony export */   createLocalAudioTrack: function() { return /* binding */ createLocalAudioTrack; },\n/* harmony export */   createLocalScreenTracks: function() { return /* binding */ createLocalScreenTracks; },\n/* harmony export */   createLocalTracks: function() { return /* binding */ createLocalTracks; },\n/* harmony export */   createLocalVideoTrack: function() { return /* binding */ createLocalVideoTrack; },\n/* harmony export */   deriveKeys: function() { return /* binding */ deriveKeys; },\n/* harmony export */   detachTrack: function() { return /* binding */ detachTrack; },\n/* harmony export */   facingModeFromDeviceLabel: function() { return /* binding */ facingModeFromDeviceLabel; },\n/* harmony export */   facingModeFromLocalTrack: function() { return /* binding */ facingModeFromLocalTrack; },\n/* harmony export */   getEmptyAudioStreamTrack: function() { return /* binding */ getEmptyAudioStreamTrack; },\n/* harmony export */   getEmptyVideoStreamTrack: function() { return /* binding */ getEmptyVideoStreamTrack; },\n/* harmony export */   importKey: function() { return /* binding */ importKey; },\n/* harmony export */   isBackupCodec: function() { return /* binding */ isBackupCodec; },\n/* harmony export */   isBrowserSupported: function() { return /* binding */ isBrowserSupported; },\n/* harmony export */   isE2EESupported: function() { return /* binding */ isE2EESupported; },\n/* harmony export */   isInsertableStreamSupported: function() { return /* binding */ isInsertableStreamSupported; },\n/* harmony export */   isScriptTransformSupported: function() { return /* binding */ isScriptTransformSupported; },\n/* harmony export */   isVideoFrame: function() { return /* binding */ isVideoFrame; },\n/* harmony export */   needsRbspUnescaping: function() { return /* binding */ needsRbspUnescaping; },\n/* harmony export */   parseRbsp: function() { return /* binding */ parseRbsp; },\n/* harmony export */   protocolVersion: function() { return /* binding */ protocolVersion; },\n/* harmony export */   ratchet: function() { return /* binding */ ratchet; },\n/* harmony export */   setLogExtension: function() { return /* binding */ setLogExtension; },\n/* harmony export */   setLogLevel: function() { return /* binding */ setLogLevel; },\n/* harmony export */   supportsAV1: function() { return /* binding */ supportsAV1; },\n/* harmony export */   supportsAdaptiveStream: function() { return /* binding */ supportsAdaptiveStream; },\n/* harmony export */   supportsDynacast: function() { return /* binding */ supportsDynacast; },\n/* harmony export */   supportsVP9: function() { return /* binding */ supportsVP9; },\n/* harmony export */   version: function() { return /* binding */ version; },\n/* harmony export */   videoCodecs: function() { return /* binding */ videoCodecs; },\n/* harmony export */   writeRbsp: function() { return /* binding */ writeRbsp; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.1_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/build/polyfills/process.js\");\nfunction _mergeNamespaces(n, m) {\n\tm.forEach(function (e) {\n\t\te && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {\n\t\t\tif (k !== 'default' && !(k in n)) {\n\t\t\t\tvar d = Object.getOwnPropertyDescriptor(e, k);\n\t\t\t\tObject.defineProperty(n, k, d.get ? d : {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function () { return e[k]; }\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\treturn Object.freeze(n);\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar loglevel = {exports: {}};\n\n/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (module) {\n  (function (root, definition) {\n\n    if (module.exports) {\n      module.exports = definition();\n    } else {\n      root.log = definition();\n    }\n  })(commonjsGlobal, function () {\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function () {};\n    var undefinedType = \"undefined\";\n    var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\\/|MSIE /.test(window.navigator.userAgent);\n    var logMethods = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n      var method = obj[methodName];\n      if (typeof method.bind === 'function') {\n        return method.bind(obj);\n      } else {\n        try {\n          return Function.prototype.bind.call(method, obj);\n        } catch (e) {\n          // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n          return function () {\n            return Function.prototype.apply.apply(method, [obj, arguments]);\n          };\n        }\n      }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n      if (console.log) {\n        if (console.log.apply) {\n          console.log.apply(console, arguments);\n        } else {\n          // In old IE, native console methods themselves don't have apply().\n          Function.prototype.apply.apply(console.log, [console, arguments]);\n        }\n      }\n      if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n      if (methodName === 'debug') {\n        methodName = 'log';\n      }\n      if (typeof console === undefinedType) {\n        return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n      } else if (methodName === 'trace' && isIE) {\n        return traceForIE;\n      } else if (console[methodName] !== undefined) {\n        return bindMethod(console, methodName);\n      } else if (console.log !== undefined) {\n        return bindMethod(console, 'log');\n      } else {\n        return noop;\n      }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n      /*jshint validthis:true */\n      for (var i = 0; i < logMethods.length; i++) {\n        var methodName = logMethods[i];\n        this[methodName] = i < level ? noop : this.methodFactory(methodName, level, loggerName);\n      }\n\n      // Define log.log as an alias for log.debug\n      this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n      return function () {\n        if (typeof console !== undefinedType) {\n          replaceLoggingMethods.call(this, level, loggerName);\n          this[methodName].apply(this, arguments);\n        }\n      };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n      /*jshint validthis:true */\n      return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n      function persistLevelIfPossible(levelNum) {\n        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n        if (typeof window === undefinedType || !storageKey) return;\n\n        // Use localStorage if available\n        try {\n          window.localStorage[storageKey] = levelName;\n          return;\n        } catch (ignore) {}\n\n        // Use session cookie as fallback\n        try {\n          window.document.cookie = encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n        } catch (ignore) {}\n      }\n      function getPersistedLevel() {\n        var storedLevel;\n        if (typeof window === undefinedType || !storageKey) return;\n        try {\n          storedLevel = window.localStorage[storageKey];\n        } catch (ignore) {}\n\n        // Fallback to cookies if local storage gives us nothing\n        if (typeof storedLevel === undefinedType) {\n          try {\n            var cookie = window.document.cookie;\n            var location = cookie.indexOf(encodeURIComponent(storageKey) + \"=\");\n            if (location !== -1) {\n              storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n            }\n          } catch (ignore) {}\n        }\n\n        // If the stored level is not valid, treat it as if nothing was stored.\n        if (self.levels[storedLevel] === undefined) {\n          storedLevel = undefined;\n        }\n        return storedLevel;\n      }\n      function clearPersistedLevel() {\n        if (typeof window === undefinedType || !storageKey) return;\n\n        // Use localStorage if available\n        try {\n          window.localStorage.removeItem(storageKey);\n          return;\n        } catch (ignore) {}\n\n        // Use session cookie as fallback\n        try {\n          window.document.cookie = encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n        } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n      self.levels = {\n        \"TRACE\": 0,\n        \"DEBUG\": 1,\n        \"INFO\": 2,\n        \"WARN\": 3,\n        \"ERROR\": 4,\n        \"SILENT\": 5\n      };\n      self.methodFactory = factory || defaultMethodFactory;\n      self.getLevel = function () {\n        return currentLevel;\n      };\n      self.setLevel = function (level, persist) {\n        if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n          level = self.levels[level.toUpperCase()];\n        }\n        if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n          currentLevel = level;\n          if (persist !== false) {\n            // defaults to true\n            persistLevelIfPossible(level);\n          }\n          replaceLoggingMethods.call(self, level, name);\n          if (typeof console === undefinedType && level < self.levels.SILENT) {\n            return \"No console available for logging\";\n          }\n        } else {\n          throw \"log.setLevel() called with invalid level: \" + level;\n        }\n      };\n      self.setDefaultLevel = function (level) {\n        defaultLevel = level;\n        if (!getPersistedLevel()) {\n          self.setLevel(level, false);\n        }\n      };\n      self.resetLevel = function () {\n        self.setLevel(defaultLevel, false);\n        clearPersistedLevel();\n      };\n      self.enableAll = function (persist) {\n        self.setLevel(self.levels.TRACE, persist);\n      };\n      self.disableAll = function (persist) {\n        self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n        initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n      if (typeof name !== \"symbol\" && typeof name !== \"string\" || name === \"\") {\n        throw new TypeError(\"You must supply a name when creating a logger.\");\n      }\n      var logger = _loggersByName[name];\n      if (!logger) {\n        logger = _loggersByName[name] = new Logger(name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n      }\n      return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = typeof window !== undefinedType ? window.log : undefined;\n    defaultLogger.noConflict = function () {\n      if (typeof window !== undefinedType && window.log === defaultLogger) {\n        window.log = _log;\n      }\n      return defaultLogger;\n    };\n    defaultLogger.getLoggers = function getLoggers() {\n      return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n    return defaultLogger;\n  });\n})(loglevel);\nvar loglevelExports = loglevel.exports;\n\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"trace\"] = 0] = \"trace\";\n  LogLevel[LogLevel[\"debug\"] = 1] = \"debug\";\n  LogLevel[LogLevel[\"info\"] = 2] = \"info\";\n  LogLevel[LogLevel[\"warn\"] = 3] = \"warn\";\n  LogLevel[LogLevel[\"error\"] = 4] = \"error\";\n  LogLevel[LogLevel[\"silent\"] = 5] = \"silent\";\n})(LogLevel || (LogLevel = {}));\nconst livekitLogger = loglevelExports.getLogger('livekit');\nlivekitLogger.setDefaultLevel(LogLevel.info);\nfunction setLogLevel(level, loggerName) {\n  if (loggerName) {\n    loglevelExports.getLogger(loggerName).setLevel(level);\n  }\n  for (const logger of Object.values(loglevelExports.getLoggers())) {\n    logger.setLevel(level);\n  }\n}\n/**\n * use this to hook into the logging function to allow sending internal livekit logs to third party services\n * if set, the browser logs will lose their stacktrace information (see https://github.com/pimterry/loglevel#writing-plugins)\n */\nfunction setLogExtension(extension) {\n  const originalFactory = livekitLogger.methodFactory;\n  livekitLogger.methodFactory = (methodName, configLevel, loggerName) => {\n    const rawMethod = originalFactory(methodName, configLevel, loggerName);\n    const logLevel = LogLevel[methodName];\n    const needLog = logLevel >= configLevel && logLevel < LogLevel.silent;\n    return (msg, context) => {\n      if (context) rawMethod(msg, context);else rawMethod(msg);\n      if (needLog) {\n        extension(logLevel, msg, context);\n      }\n    };\n  };\n  livekitLogger.setLevel(livekitLogger.getLevel()); // Be sure to call setLevel method in order to apply plugin\n}\n\nloglevelExports.getLogger('lk-e2ee');\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Assert that condition is truthy or throw error (with message)\n */\nfunction assert(condition, msg) {\n  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean\n  if (!condition) {\n    throw new Error(msg);\n  }\n}\nconst FLOAT32_MAX = 3.4028234663852886e38,\n  FLOAT32_MIN = -3.4028234663852886e38,\n  UINT32_MAX = 0xffffffff,\n  INT32_MAX = 0x7fffffff,\n  INT32_MIN = -0x80000000;\n/**\n * Assert a valid signed protobuf 32-bit integer.\n */\nfunction assertInt32(arg) {\n  if (typeof arg !== \"number\") throw new Error(\"invalid int 32: \" + typeof arg);\n  if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN) throw new Error(\"invalid int 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid unsigned protobuf 32-bit integer.\n */\nfunction assertUInt32(arg) {\n  if (typeof arg !== \"number\") throw new Error(\"invalid uint 32: \" + typeof arg);\n  if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0) throw new Error(\"invalid uint 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid protobuf float value.\n */\nfunction assertFloat32(arg) {\n  if (typeof arg !== \"number\") throw new Error(\"invalid float 32: \" + typeof arg);\n  if (!Number.isFinite(arg)) return;\n  if (arg > FLOAT32_MAX || arg < FLOAT32_MIN) throw new Error(\"invalid float 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nconst enumTypeSymbol = Symbol(\"@bufbuild/protobuf/enum-type\");\n/**\n * Get reflection information from a generated enum.\n * If this function is called on something other than a generated\n * enum, it raises an error.\n */\nfunction getEnumType(enumObject) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any\n  const t = enumObject[enumTypeSymbol];\n  assert(t, \"missing enum type on enum object\");\n  return t; // eslint-disable-line @typescript-eslint/no-unsafe-return\n}\n/**\n * Sets reflection information on a generated enum.\n */\nfunction setEnumType(enumObject, typeName, values, opt) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n  enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map(v => ({\n    no: v.no,\n    name: v.name,\n    localName: enumObject[v.no]\n  })));\n}\n/**\n * Create a new EnumType with the given values.\n */\nfunction makeEnumType(typeName, values,\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_opt) {\n  const names = Object.create(null);\n  const numbers = Object.create(null);\n  const normalValues = [];\n  for (const value of values) {\n    // We do not surface options at this time\n    // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};\n    const n = normalizeEnumValue(value);\n    normalValues.push(n);\n    names[value.name] = n;\n    numbers[value.no] = n;\n  }\n  return {\n    typeName,\n    values: normalValues,\n    // We do not surface options at this time\n    // options: opt?.options ?? Object.create(null),\n    findName(name) {\n      return names[name];\n    },\n    findNumber(no) {\n      return numbers[no];\n    }\n  };\n}\n/**\n * Create a new enum object with the given values.\n * Sets reflection information.\n */\nfunction makeEnum(typeName, values, opt) {\n  const enumObject = {};\n  for (const value of values) {\n    const n = normalizeEnumValue(value);\n    enumObject[n.localName] = n.no;\n    enumObject[n.no] = n.localName;\n  }\n  setEnumType(enumObject, typeName, values);\n  return enumObject;\n}\nfunction normalizeEnumValue(value) {\n  if (\"localName\" in value) {\n    return value;\n  }\n  return Object.assign(Object.assign({}, value), {\n    localName: value.name\n  });\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Message is the base class of every message, generated, or created at\n * runtime.\n *\n * It is _not_ safe to extend this class. If you want to create a message at\n * run time, use proto3.makeMessageType().\n */\nclass Message {\n  /**\n   * Compare with a message of the same type.\n   */\n  equals(other) {\n    return this.getType().runtime.util.equals(this.getType(), this, other);\n  }\n  /**\n   * Create a deep copy.\n   */\n  clone() {\n    return this.getType().runtime.util.clone(this);\n  }\n  /**\n   * Parse from binary data, merging fields.\n   *\n   * Repeated fields are appended. Map entries are added, overwriting\n   * existing keys.\n   *\n   * If a message field is already present, it will be merged with the\n   * new data.\n   */\n  fromBinary(bytes, options) {\n    const type = this.getType(),\n      format = type.runtime.bin,\n      opt = format.makeReadOptions(options);\n    format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);\n    return this;\n  }\n  /**\n   * Parse a message from a JSON value.\n   */\n  fromJson(jsonValue, options) {\n    const type = this.getType(),\n      format = type.runtime.json,\n      opt = format.makeReadOptions(options);\n    format.readMessage(type, jsonValue, opt, this);\n    return this;\n  }\n  /**\n   * Parse a message from a JSON string.\n   */\n  fromJsonString(jsonString, options) {\n    let json;\n    try {\n      json = JSON.parse(jsonString);\n    } catch (e) {\n      throw new Error(\"cannot decode \".concat(this.getType().typeName, \" from JSON: \").concat(e instanceof Error ? e.message : String(e)));\n    }\n    return this.fromJson(json, options);\n  }\n  /**\n   * Serialize the message to binary data.\n   */\n  toBinary(options) {\n    const type = this.getType(),\n      bin = type.runtime.bin,\n      opt = bin.makeWriteOptions(options),\n      writer = opt.writerFactory();\n    bin.writeMessage(this, writer, opt);\n    return writer.finish();\n  }\n  /**\n   * Serialize the message to a JSON value, a JavaScript value that can be\n   * passed to JSON.stringify().\n   */\n  toJson(options) {\n    const type = this.getType(),\n      json = type.runtime.json,\n      opt = json.makeWriteOptions(options);\n    return json.writeMessage(this, opt);\n  }\n  /**\n   * Serialize the message to a JSON string.\n   */\n  toJsonString(options) {\n    var _a;\n    const value = this.toJson(options);\n    return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n  }\n  /**\n   * Override for serialization behavior. This will be invoked when calling\n   * JSON.stringify on this message (i.e. JSON.stringify(msg)).\n   *\n   * Note that this will not serialize google.protobuf.Any with a packed\n   * message because the protobuf JSON format specifies that it needs to be\n   * unpacked, and this is only possible with a type registry to look up the\n   * message type.  As a result, attempting to serialize a message with this\n   * type will throw an Error.\n   *\n   * This method is protected because you should not need to invoke it\n   * directly -- instead use JSON.stringify or toJsonString for\n   * stringified JSON.  Alternatively, if actual JSON is desired, you should\n   * use toJson.\n   */\n  toJSON() {\n    return this.toJson({\n      emitDefaultValues: true\n    });\n  }\n  /**\n   * Retrieve the MessageType of this message - a singleton that represents\n   * the protobuf message declaration and provides metadata for reflection-\n   * based operations.\n   */\n  getType() {\n    // Any class that extends Message _must_ provide a complete static\n    // implementation of MessageType.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n    return Object.getPrototypeOf(this).constructor;\n  }\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create a new message type using the given runtime.\n */\nfunction makeMessageType(runtime, typeName, fields, opt) {\n  var _a;\n  const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(\".\") + 1);\n  const type = {\n    [localName]: function (data) {\n      runtime.util.initFields(this);\n      runtime.util.initPartial(data, this);\n    }\n  }[localName];\n  Object.setPrototypeOf(type.prototype, new Message());\n  Object.assign(type, {\n    runtime,\n    typeName,\n    fields: runtime.util.newFieldList(fields),\n    fromBinary(bytes, options) {\n      return new type().fromBinary(bytes, options);\n    },\n    fromJson(jsonValue, options) {\n      return new type().fromJson(jsonValue, options);\n    },\n    fromJsonString(jsonString, options) {\n      return new type().fromJsonString(jsonString, options);\n    },\n    equals(a, b) {\n      return runtime.util.equals(type, a, b);\n    }\n  });\n  return type;\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nfunction makeProtoRuntime(syntax, json, bin, util) {\n  return {\n    syntax,\n    json,\n    bin,\n    util,\n    makeMessageType(typeName, fields, opt) {\n      return makeMessageType(this, typeName, fields, opt);\n    },\n    makeEnum,\n    makeEnumType,\n    getEnumType\n  };\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nvar ScalarType;\n(function (ScalarType) {\n  // 0 is reserved for errors.\n  // Order is weird for historical reasons.\n  ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n  ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n  // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n  // negative values are likely.\n  ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n  ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n  // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n  // negative values are likely.\n  ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n  ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n  ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n  ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n  ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n  // Tag-delimited aggregate.\n  // Group type is deprecated and not supported in proto3. However, Proto3\n  // implementations should still be able to parse the group wire format and\n  // treat group fields as unknown fields.\n  // TYPE_GROUP = 10,\n  // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n  // New in version 2.\n  ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n  ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n  // TYPE_ENUM = 14,\n  ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n  ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n  ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n  ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of fields with 64 bit integral types (int64, uint64,\n * sint64, fixed64, sfixed64).\n *\n * This is a subset of google.protobuf.FieldOptions.JSType, which defines JS_NORMAL,\n * JS_STRING, and JS_NUMBER. Protobuf-ES uses BigInt by default, but will use\n * String if `[jstype = JS_STRING]` is specified.\n *\n * ```protobuf\n * uint64 field_a = 1; // BigInt\n * uint64 field_b = 2 [jstype = JS_NORMAL]; // BigInt\n * uint64 field_b = 2 [jstype = JS_NUMBER]; // BigInt\n * uint64 field_b = 2 [jstype = JS_STRING]; // String\n * ```\n */\nvar LongType;\n(function (LongType) {\n  /**\n   * Use JavaScript BigInt.\n   */\n  LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n  /**\n   * Use JavaScript String.\n   *\n   * Field option `[jstype = JS_STRING]`.\n   */\n  LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n})(LongType || (LongType = {}));\n\n// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [1]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nfunction varint64read() {\n  let lowBits = 0;\n  let highBits = 0;\n  for (let shift = 0; shift < 28; shift += 7) {\n    let b = this.buf[this.pos++];\n    lowBits |= (b & 0x7f) << shift;\n    if ((b & 0x80) == 0) {\n      this.assertBounds();\n      return [lowBits, highBits];\n    }\n  }\n  let middleByte = this.buf[this.pos++];\n  // last four bits of the first 32 bit number\n  lowBits |= (middleByte & 0x0f) << 28;\n  // 3 upper bits are part of the next 32 bit number\n  highBits = (middleByte & 0x70) >> 4;\n  if ((middleByte & 0x80) == 0) {\n    this.assertBounds();\n    return [lowBits, highBits];\n  }\n  for (let shift = 3; shift <= 31; shift += 7) {\n    let b = this.buf[this.pos++];\n    highBits |= (b & 0x7f) << shift;\n    if ((b & 0x80) == 0) {\n      this.assertBounds();\n      return [lowBits, highBits];\n    }\n  }\n  throw new Error(\"invalid varint\");\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nfunction varint64write(lo, hi, bytes) {\n  for (let i = 0; i < 28; i = i + 7) {\n    const shift = lo >>> i;\n    const hasNext = !(shift >>> 7 == 0 && hi == 0);\n    const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n    bytes.push(byte);\n    if (!hasNext) {\n      return;\n    }\n  }\n  const splitBits = lo >>> 28 & 0x0f | (hi & 0x07) << 4;\n  const hasMoreBits = !(hi >> 3 == 0);\n  bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\n  if (!hasMoreBits) {\n    return;\n  }\n  for (let i = 3; i < 31; i = i + 7) {\n    const shift = hi >>> i;\n    const hasNext = !(shift >>> 7 == 0);\n    const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n    bytes.push(byte);\n    if (!hasNext) {\n      return;\n    }\n  }\n  bytes.push(hi >>> 31 & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nfunction int64FromString(dec) {\n  // Check for minus sign.\n  const minus = dec[0] === \"-\";\n  if (minus) {\n    dec = dec.slice(1);\n  }\n  // Work 6 decimal digits at a time, acting like we're converting base 1e6\n  // digits to binary. This is safe to do with floating point math because\n  // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n  const base = 1e6;\n  let lowBits = 0;\n  let highBits = 0;\n  function add1e6digit(begin, end) {\n    // Note: Number('') is 0.\n    const digit1e6 = Number(dec.slice(begin, end));\n    highBits *= base;\n    lowBits = lowBits * base + digit1e6;\n    // Carry bits from lowBits to\n    if (lowBits >= TWO_PWR_32_DBL) {\n      highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);\n      lowBits = lowBits % TWO_PWR_32_DBL;\n    }\n  }\n  add1e6digit(-24, -18);\n  add1e6digit(-18, -12);\n  add1e6digit(-12, -6);\n  add1e6digit(-6);\n  return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\n}\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nfunction int64ToString(lo, hi) {\n  let bits = newBits(lo, hi);\n  // If we're treating the input as a signed value and the high bit is set, do\n  // a manual two's complement conversion before the decimal conversion.\n  const negative = bits.hi & 0x80000000;\n  if (negative) {\n    bits = negate(bits.lo, bits.hi);\n  }\n  const result = uInt64ToString(bits.lo, bits.hi);\n  return negative ? \"-\" + result : result;\n}\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nfunction uInt64ToString(lo, hi) {\n  ({\n    lo,\n    hi\n  } = toUnsigned(lo, hi));\n  // Skip the expensive conversion if the number is small enough to use the\n  // built-in conversions.\n  // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\n  // highBits <= 0x1FFFFF can be safely expressed with a double and retain\n  // integer precision.\n  // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\n  if (hi <= 0x1FFFFF) {\n    return String(TWO_PWR_32_DBL * hi + lo);\n  }\n  // What this code is doing is essentially converting the input number from\n  // base-2 to base-1e7, which allows us to represent the 64-bit range with\n  // only 3 (very large) digits. Those digits are then trivial to convert to\n  // a base-10 string.\n  // The magic numbers used here are -\n  // 2^24 = 16777216 = (1,6777216) in base-1e7.\n  // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n  // Split 32:32 representation into 16:24:24 representation so our\n  // intermediate digits don't overflow.\n  const low = lo & 0xFFFFFF;\n  const mid = (lo >>> 24 | hi << 8) & 0xFFFFFF;\n  const high = hi >> 16 & 0xFFFF;\n  // Assemble our three base-1e7 digits, ignoring carries. The maximum\n  // value in a digit at this step is representable as a 48-bit integer, which\n  // can be stored in a 64-bit floating point number.\n  let digitA = low + mid * 6777216 + high * 6710656;\n  let digitB = mid + high * 8147497;\n  let digitC = high * 2;\n  // Apply carries from A to B and from B to C.\n  const base = 10000000;\n  if (digitA >= base) {\n    digitB += Math.floor(digitA / base);\n    digitA %= base;\n  }\n  if (digitB >= base) {\n    digitC += Math.floor(digitB / base);\n    digitB %= base;\n  }\n  // If digitC is 0, then we should have returned in the trivial code path\n  // at the top for non-safe integers. Given this, we can assume both digitB\n  // and digitA need leading zeros.\n  return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);\n}\nfunction toUnsigned(lo, hi) {\n  return {\n    lo: lo >>> 0,\n    hi: hi >>> 0\n  };\n}\nfunction newBits(lo, hi) {\n  return {\n    lo: lo | 0,\n    hi: hi | 0\n  };\n}\n/**\n * Returns two's compliment negation of input.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n */\nfunction negate(lowBits, highBits) {\n  highBits = ~highBits;\n  if (lowBits) {\n    lowBits = ~lowBits + 1;\n  } else {\n    // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\n    // adding 1 to that, results in 0x100000000, which leaves\n    // the low bits 0x0 and simply adds one to the high bits.\n    highBits += 1;\n  }\n  return newBits(lowBits, highBits);\n}\n/**\n * Returns decimal representation of digit1e7 with leading zeros.\n */\nconst decimalFrom1e7WithLeadingZeros = digit1e7 => {\n  const partial = String(digit1e7);\n  return \"0000000\".slice(partial.length) + partial;\n};\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nfunction varint32write(value, bytes) {\n  if (value >= 0) {\n    // write value as varint 32\n    while (value > 0x7f) {\n      bytes.push(value & 0x7f | 0x80);\n      value = value >>> 7;\n    }\n    bytes.push(value);\n  } else {\n    for (let i = 0; i < 9; i++) {\n      bytes.push(value & 127 | 128);\n      value = value >> 7;\n    }\n    bytes.push(1);\n  }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nfunction varint32read() {\n  let b = this.buf[this.pos++];\n  let result = b & 0x7f;\n  if ((b & 0x80) == 0) {\n    this.assertBounds();\n    return result;\n  }\n  b = this.buf[this.pos++];\n  result |= (b & 0x7f) << 7;\n  if ((b & 0x80) == 0) {\n    this.assertBounds();\n    return result;\n  }\n  b = this.buf[this.pos++];\n  result |= (b & 0x7f) << 14;\n  if ((b & 0x80) == 0) {\n    this.assertBounds();\n    return result;\n  }\n  b = this.buf[this.pos++];\n  result |= (b & 0x7f) << 21;\n  if ((b & 0x80) == 0) {\n    this.assertBounds();\n    return result;\n  }\n  // Extract only last 4 bits\n  b = this.buf[this.pos++];\n  result |= (b & 0x0f) << 28;\n  for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++) b = this.buf[this.pos++];\n  if ((b & 0x80) != 0) throw new Error(\"invalid varint\");\n  this.assertBounds();\n  // Result can have 32 bits, convert it to unsigned\n  return result >>> 0;\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nfunction makeInt64Support() {\n  const dv = new DataView(new ArrayBuffer(8));\n  // note that Safari 14 implements BigInt, but not the DataView methods\n  const ok = typeof BigInt === \"function\" && typeof dv.getBigInt64 === \"function\" && typeof dv.getBigUint64 === \"function\" && typeof dv.setBigInt64 === \"function\" && typeof dv.setBigUint64 === \"function\" && (typeof process != \"object\" || typeof process.env != \"object\" || process.env.BUF_BIGINT_DISABLE !== \"1\");\n  if (ok) {\n    const MIN = BigInt(\"-9223372036854775808\"),\n      MAX = BigInt(\"9223372036854775807\"),\n      UMIN = BigInt(\"0\"),\n      UMAX = BigInt(\"18446744073709551615\");\n    return {\n      zero: BigInt(0),\n      supported: true,\n      parse(value) {\n        const bi = typeof value == \"bigint\" ? value : BigInt(value);\n        if (bi > MAX || bi < MIN) {\n          throw new Error(\"int64 invalid: \".concat(value));\n        }\n        return bi;\n      },\n      uParse(value) {\n        const bi = typeof value == \"bigint\" ? value : BigInt(value);\n        if (bi > UMAX || bi < UMIN) {\n          throw new Error(\"uint64 invalid: \".concat(value));\n        }\n        return bi;\n      },\n      enc(value) {\n        dv.setBigInt64(0, this.parse(value), true);\n        return {\n          lo: dv.getInt32(0, true),\n          hi: dv.getInt32(4, true)\n        };\n      },\n      uEnc(value) {\n        dv.setBigInt64(0, this.uParse(value), true);\n        return {\n          lo: dv.getInt32(0, true),\n          hi: dv.getInt32(4, true)\n        };\n      },\n      dec(lo, hi) {\n        dv.setInt32(0, lo, true);\n        dv.setInt32(4, hi, true);\n        return dv.getBigInt64(0, true);\n      },\n      uDec(lo, hi) {\n        dv.setInt32(0, lo, true);\n        dv.setInt32(4, hi, true);\n        return dv.getBigUint64(0, true);\n      }\n    };\n  }\n  const assertInt64String = value => assert(/^-?[0-9]+$/.test(value), \"int64 invalid: \".concat(value));\n  const assertUInt64String = value => assert(/^[0-9]+$/.test(value), \"uint64 invalid: \".concat(value));\n  return {\n    zero: \"0\",\n    supported: false,\n    parse(value) {\n      if (typeof value != \"string\") {\n        value = value.toString();\n      }\n      assertInt64String(value);\n      return value;\n    },\n    uParse(value) {\n      if (typeof value != \"string\") {\n        value = value.toString();\n      }\n      assertUInt64String(value);\n      return value;\n    },\n    enc(value) {\n      if (typeof value != \"string\") {\n        value = value.toString();\n      }\n      assertInt64String(value);\n      return int64FromString(value);\n    },\n    uEnc(value) {\n      if (typeof value != \"string\") {\n        value = value.toString();\n      }\n      assertUInt64String(value);\n      return int64FromString(value);\n    },\n    dec(lo, hi) {\n      return int64ToString(lo, hi);\n    },\n    uDec(lo, hi) {\n      return uInt64ToString(lo, hi);\n    }\n  };\n}\nconst protoInt64 = makeInt64Support();\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nvar WireType;\n(function (WireType) {\n  /**\n   * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n   */\n  WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n  /**\n   * Used for fixed64, sfixed64, double.\n   * Always 8 bytes with little-endian byte order.\n   */\n  WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n  /**\n   * Used for string, bytes, embedded messages, packed repeated fields\n   *\n   * Only repeated numeric types (types which use the varint, 32-bit,\n   * or 64-bit wire types) can be packed. In proto3, such fields are\n   * packed by default.\n   */\n  WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n  /**\n   * Used for groups\n   * @deprecated\n   */\n  WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n  /**\n   * Used for groups\n   * @deprecated\n   */\n  WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n  /**\n   * Used for fixed32, sfixed32, float.\n   * Always 4 bytes with little-endian byte order.\n   */\n  WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\nclass BinaryWriter {\n  constructor(textEncoder) {\n    /**\n     * Previous fork states.\n     */\n    this.stack = [];\n    this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n    this.chunks = [];\n    this.buf = [];\n  }\n  /**\n   * Return all bytes written and reset this writer.\n   */\n  finish() {\n    this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n    let len = 0;\n    for (let i = 0; i < this.chunks.length; i++) len += this.chunks[i].length;\n    let bytes = new Uint8Array(len);\n    let offset = 0;\n    for (let i = 0; i < this.chunks.length; i++) {\n      bytes.set(this.chunks[i], offset);\n      offset += this.chunks[i].length;\n    }\n    this.chunks = [];\n    return bytes;\n  }\n  /**\n   * Start a new fork for length-delimited data like a message\n   * or a packed repeated field.\n   *\n   * Must be joined later with `join()`.\n   */\n  fork() {\n    this.stack.push({\n      chunks: this.chunks,\n      buf: this.buf\n    });\n    this.chunks = [];\n    this.buf = [];\n    return this;\n  }\n  /**\n   * Join the last fork. Write its length and bytes, then\n   * return to the previous state.\n   */\n  join() {\n    // get chunk of fork\n    let chunk = this.finish();\n    // restore previous state\n    let prev = this.stack.pop();\n    if (!prev) throw new Error(\"invalid state, fork stack empty\");\n    this.chunks = prev.chunks;\n    this.buf = prev.buf;\n    // write length of chunk as varint\n    this.uint32(chunk.byteLength);\n    return this.raw(chunk);\n  }\n  /**\n   * Writes a tag (field number and wire type).\n   *\n   * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n   *\n   * Generated code should compute the tag ahead of time and call `uint32()`.\n   */\n  tag(fieldNo, type) {\n    return this.uint32((fieldNo << 3 | type) >>> 0);\n  }\n  /**\n   * Write a chunk of raw bytes.\n   */\n  raw(chunk) {\n    if (this.buf.length) {\n      this.chunks.push(new Uint8Array(this.buf));\n      this.buf = [];\n    }\n    this.chunks.push(chunk);\n    return this;\n  }\n  /**\n   * Write a `uint32` value, an unsigned 32 bit varint.\n   */\n  uint32(value) {\n    assertUInt32(value);\n    // write value as varint 32, inlined for speed\n    while (value > 0x7f) {\n      this.buf.push(value & 0x7f | 0x80);\n      value = value >>> 7;\n    }\n    this.buf.push(value);\n    return this;\n  }\n  /**\n   * Write a `int32` value, a signed 32 bit varint.\n   */\n  int32(value) {\n    assertInt32(value);\n    varint32write(value, this.buf);\n    return this;\n  }\n  /**\n   * Write a `bool` value, a variant.\n   */\n  bool(value) {\n    this.buf.push(value ? 1 : 0);\n    return this;\n  }\n  /**\n   * Write a `bytes` value, length-delimited arbitrary data.\n   */\n  bytes(value) {\n    this.uint32(value.byteLength); // write length of chunk as varint\n    return this.raw(value);\n  }\n  /**\n   * Write a `string` value, length-delimited data converted to UTF-8 text.\n   */\n  string(value) {\n    let chunk = this.textEncoder.encode(value);\n    this.uint32(chunk.byteLength); // write length of chunk as varint\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `float` value, 32-bit floating point number.\n   */\n  float(value) {\n    assertFloat32(value);\n    let chunk = new Uint8Array(4);\n    new DataView(chunk.buffer).setFloat32(0, value, true);\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `double` value, a 64-bit floating point number.\n   */\n  double(value) {\n    let chunk = new Uint8Array(8);\n    new DataView(chunk.buffer).setFloat64(0, value, true);\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n   */\n  fixed32(value) {\n    assertUInt32(value);\n    let chunk = new Uint8Array(4);\n    new DataView(chunk.buffer).setUint32(0, value, true);\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n   */\n  sfixed32(value) {\n    assertInt32(value);\n    let chunk = new Uint8Array(4);\n    new DataView(chunk.buffer).setInt32(0, value, true);\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n   */\n  sint32(value) {\n    assertInt32(value);\n    // zigzag encode\n    value = (value << 1 ^ value >> 31) >>> 0;\n    varint32write(value, this.buf);\n    return this;\n  }\n  /**\n   * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n   */\n  sfixed64(value) {\n    let chunk = new Uint8Array(8),\n      view = new DataView(chunk.buffer),\n      tc = protoInt64.enc(value);\n    view.setInt32(0, tc.lo, true);\n    view.setInt32(4, tc.hi, true);\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n   */\n  fixed64(value) {\n    let chunk = new Uint8Array(8),\n      view = new DataView(chunk.buffer),\n      tc = protoInt64.uEnc(value);\n    view.setInt32(0, tc.lo, true);\n    view.setInt32(4, tc.hi, true);\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `int64` value, a signed 64-bit varint.\n   */\n  int64(value) {\n    let tc = protoInt64.enc(value);\n    varint64write(tc.lo, tc.hi, this.buf);\n    return this;\n  }\n  /**\n   * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n   */\n  sint64(value) {\n    let tc = protoInt64.enc(value),\n      // zigzag encode\n      sign = tc.hi >> 31,\n      lo = tc.lo << 1 ^ sign,\n      hi = (tc.hi << 1 | tc.lo >>> 31) ^ sign;\n    varint64write(lo, hi, this.buf);\n    return this;\n  }\n  /**\n   * Write a `uint64` value, an unsigned 64-bit varint.\n   */\n  uint64(value) {\n    let tc = protoInt64.uEnc(value);\n    varint64write(tc.lo, tc.hi, this.buf);\n    return this;\n  }\n}\nclass BinaryReader {\n  constructor(buf, textDecoder) {\n    this.varint64 = varint64read; // dirty cast for `this`\n    /**\n     * Read a `uint32` field, an unsigned 32 bit varint.\n     */\n    this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n    this.buf = buf;\n    this.len = buf.length;\n    this.pos = 0;\n    this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();\n  }\n  /**\n   * Reads a tag - field number and wire type.\n   */\n  tag() {\n    let tag = this.uint32(),\n      fieldNo = tag >>> 3,\n      wireType = tag & 7;\n    if (fieldNo <= 0 || wireType < 0 || wireType > 5) throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n    return [fieldNo, wireType];\n  }\n  /**\n   * Skip one element on the wire and return the skipped data.\n   * Supports WireType.StartGroup since v2.0.0-alpha.23.\n   */\n  skip(wireType) {\n    let start = this.pos;\n    switch (wireType) {\n      case WireType.Varint:\n        while (this.buf[this.pos++] & 0x80) {\n          // ignore\n        }\n        break;\n      // eslint-disable-next-line\n      // @ts-ignore TS7029: Fallthrough case in switch\n      case WireType.Bit64:\n        this.pos += 4;\n      // eslint-disable-next-line\n      // @ts-ignore TS7029: Fallthrough case in switch\n      case WireType.Bit32:\n        this.pos += 4;\n        break;\n      case WireType.LengthDelimited:\n        let len = this.uint32();\n        this.pos += len;\n        break;\n      case WireType.StartGroup:\n        // From descriptor.proto: Group type is deprecated, not supported in proto3.\n        // But we must still be able to parse and treat as unknown.\n        let t;\n        while ((t = this.tag()[1]) !== WireType.EndGroup) {\n          this.skip(t);\n        }\n        break;\n      default:\n        throw new Error(\"cant skip wire type \" + wireType);\n    }\n    this.assertBounds();\n    return this.buf.subarray(start, this.pos);\n  }\n  /**\n   * Throws error if position in byte array is out of range.\n   */\n  assertBounds() {\n    if (this.pos > this.len) throw new RangeError(\"premature EOF\");\n  }\n  /**\n   * Read a `int32` field, a signed 32 bit varint.\n   */\n  int32() {\n    return this.uint32() | 0;\n  }\n  /**\n   * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n   */\n  sint32() {\n    let zze = this.uint32();\n    // decode zigzag\n    return zze >>> 1 ^ -(zze & 1);\n  }\n  /**\n   * Read a `int64` field, a signed 64-bit varint.\n   */\n  int64() {\n    return protoInt64.dec(...this.varint64());\n  }\n  /**\n   * Read a `uint64` field, an unsigned 64-bit varint.\n   */\n  uint64() {\n    return protoInt64.uDec(...this.varint64());\n  }\n  /**\n   * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n   */\n  sint64() {\n    let [lo, hi] = this.varint64();\n    // decode zig zag\n    let s = -(lo & 1);\n    lo = (lo >>> 1 | (hi & 1) << 31) ^ s;\n    hi = hi >>> 1 ^ s;\n    return protoInt64.dec(lo, hi);\n  }\n  /**\n   * Read a `bool` field, a variant.\n   */\n  bool() {\n    let [lo, hi] = this.varint64();\n    return lo !== 0 || hi !== 0;\n  }\n  /**\n   * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n   */\n  fixed32() {\n    return this.view.getUint32((this.pos += 4) - 4, true);\n  }\n  /**\n   * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n   */\n  sfixed32() {\n    return this.view.getInt32((this.pos += 4) - 4, true);\n  }\n  /**\n   * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n   */\n  fixed64() {\n    return protoInt64.uDec(this.sfixed32(), this.sfixed32());\n  }\n  /**\n   * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n   */\n  sfixed64() {\n    return protoInt64.dec(this.sfixed32(), this.sfixed32());\n  }\n  /**\n   * Read a `float` field, 32-bit floating point number.\n   */\n  float() {\n    return this.view.getFloat32((this.pos += 4) - 4, true);\n  }\n  /**\n   * Read a `double` field, a 64-bit floating point number.\n   */\n  double() {\n    return this.view.getFloat64((this.pos += 8) - 8, true);\n  }\n  /**\n   * Read a `bytes` field, length-delimited arbitrary data.\n   */\n  bytes() {\n    let len = this.uint32(),\n      start = this.pos;\n    this.pos += len;\n    this.assertBounds();\n    return this.buf.subarray(start, start + len);\n  }\n  /**\n   * Read a `string` field, length-delimited data converted to UTF-8 text.\n   */\n  string() {\n    return this.textDecoder.decode(this.bytes());\n  }\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Wrap a primitive message field value in its corresponding wrapper\n * message. This function is idempotent.\n */\nfunction wrapField(type, value) {\n  if (value instanceof Message || !type.fieldWrapper) {\n    return value;\n  }\n  return type.fieldWrapper.wrapField(value);\n}\n({\n  \"google.protobuf.DoubleValue\": ScalarType.DOUBLE,\n  \"google.protobuf.FloatValue\": ScalarType.FLOAT,\n  \"google.protobuf.Int64Value\": ScalarType.INT64,\n  \"google.protobuf.UInt64Value\": ScalarType.UINT64,\n  \"google.protobuf.Int32Value\": ScalarType.INT32,\n  \"google.protobuf.UInt32Value\": ScalarType.UINT32,\n  \"google.protobuf.BoolValue\": ScalarType.BOOL,\n  \"google.protobuf.StringValue\": ScalarType.STRING,\n  \"google.protobuf.BytesValue\": ScalarType.BYTES\n});\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Returns true if both scalar values are equal.\n */\nfunction scalarEquals(type, a, b) {\n  if (a === b) {\n    // This correctly matches equal values except BYTES and (possibly) 64-bit integers.\n    return true;\n  }\n  // Special case BYTES - we need to compare each byte individually\n  if (type == ScalarType.BYTES) {\n    if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\n      return false;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // Special case 64-bit integers - we support number, string and bigint representation.\n  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n  switch (type) {\n    case ScalarType.UINT64:\n    case ScalarType.FIXED64:\n    case ScalarType.INT64:\n    case ScalarType.SFIXED64:\n    case ScalarType.SINT64:\n      // Loose comparison will match between 0n, 0 and \"0\".\n      return a == b;\n  }\n  // Anything that hasn't been caught by strict comparison or special cased\n  // BYTES and 64-bit integers is not equal.\n  return false;\n}\n/**\n * Returns the default value for the given scalar type, following\n * proto3 semantics.\n */\nfunction scalarDefaultValue(type, longType) {\n  switch (type) {\n    case ScalarType.BOOL:\n      return false;\n    case ScalarType.UINT64:\n    case ScalarType.FIXED64:\n    case ScalarType.INT64:\n    case ScalarType.SFIXED64:\n    case ScalarType.SINT64:\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n      return longType == 0 ? protoInt64.zero : \"0\";\n    case ScalarType.DOUBLE:\n    case ScalarType.FLOAT:\n      return 0.0;\n    case ScalarType.BYTES:\n      return new Uint8Array(0);\n    case ScalarType.STRING:\n      return \"\";\n    default:\n      // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.\n      // We do not use individual cases to save a few bytes code size.\n      return 0;\n  }\n}\n/**\n * Get information for writing a scalar value.\n *\n * Returns tuple:\n * [0]: appropriate WireType\n * [1]: name of the appropriate method of IBinaryWriter\n * [2]: whether the given value is a default value for proto3 semantics\n *\n * If argument `value` is omitted, [2] is always false.\n */\nfunction scalarTypeInfo(type, value) {\n  const isUndefined = value === undefined;\n  let wireType = WireType.Varint;\n  let isIntrinsicDefault = value === 0;\n  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults\n  switch (type) {\n    case ScalarType.STRING:\n      isIntrinsicDefault = isUndefined || !value.length;\n      wireType = WireType.LengthDelimited;\n      break;\n    case ScalarType.BOOL:\n      isIntrinsicDefault = value === false;\n      break;\n    case ScalarType.DOUBLE:\n      wireType = WireType.Bit64;\n      break;\n    case ScalarType.FLOAT:\n      wireType = WireType.Bit32;\n      break;\n    case ScalarType.INT64:\n      isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and \"0\"\n      break;\n    case ScalarType.UINT64:\n      isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and \"0\"\n      break;\n    case ScalarType.FIXED64:\n      isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and \"0\"\n      wireType = WireType.Bit64;\n      break;\n    case ScalarType.BYTES:\n      isIntrinsicDefault = isUndefined || !value.byteLength;\n      wireType = WireType.LengthDelimited;\n      break;\n    case ScalarType.FIXED32:\n      wireType = WireType.Bit32;\n      break;\n    case ScalarType.SFIXED32:\n      wireType = WireType.Bit32;\n      break;\n    case ScalarType.SFIXED64:\n      isIntrinsicDefault = isUndefined || value == 0;\n      wireType = WireType.Bit64;\n      break;\n    case ScalarType.SINT64:\n      isIntrinsicDefault = isUndefined || value == 0;\n      break;\n  }\n  const method = ScalarType[type].toLowerCase();\n  return [wireType, method, isUndefined || isIntrinsicDefault];\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unnecessary-condition, no-case-declarations, prefer-const */\nconst unknownFieldsSymbol = Symbol(\"@bufbuild/protobuf/unknown-fields\");\n// Default options for parsing binary data.\nconst readDefaults = {\n  readUnknownFields: true,\n  readerFactory: bytes => new BinaryReader(bytes)\n};\n// Default options for serializing binary data.\nconst writeDefaults = {\n  writeUnknownFields: true,\n  writerFactory: () => new BinaryWriter()\n};\nfunction makeReadOptions$1(options) {\n  return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;\n}\nfunction makeWriteOptions$1(options) {\n  return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;\n}\nfunction makeBinaryFormatCommon() {\n  return {\n    makeReadOptions: makeReadOptions$1,\n    makeWriteOptions: makeWriteOptions$1,\n    listUnknownFields(message) {\n      var _a;\n      return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];\n    },\n    discardUnknownFields(message) {\n      delete message[unknownFieldsSymbol];\n    },\n    writeUnknownFields(message, writer) {\n      const m = message;\n      const c = m[unknownFieldsSymbol];\n      if (c) {\n        for (const f of c) {\n          writer.tag(f.no, f.wireType).raw(f.data);\n        }\n      }\n    },\n    onUnknownField(message, no, wireType, data) {\n      const m = message;\n      if (!Array.isArray(m[unknownFieldsSymbol])) {\n        m[unknownFieldsSymbol] = [];\n      }\n      m[unknownFieldsSymbol].push({\n        no,\n        wireType,\n        data\n      });\n    },\n    readMessage(message, reader, length, options) {\n      const type = message.getType();\n      const end = length === undefined ? reader.len : reader.pos + length;\n      while (reader.pos < end) {\n        const [fieldNo, wireType] = reader.tag(),\n          field = type.fields.find(fieldNo);\n        if (!field) {\n          const data = reader.skip(wireType);\n          if (options.readUnknownFields) {\n            this.onUnknownField(message, fieldNo, wireType, data);\n          }\n          continue;\n        }\n        let target = message,\n          repeated = field.repeated,\n          localName = field.localName;\n        if (field.oneof) {\n          target = target[field.oneof.localName];\n          if (target.case != localName) {\n            delete target.value;\n          }\n          target.case = localName;\n          localName = \"value\";\n        }\n        switch (field.kind) {\n          case \"scalar\":\n          case \"enum\":\n            const scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n            let read = readScalar$1;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n            if (field.kind == \"scalar\" && field.L > 0) {\n              read = readScalarLTString;\n            }\n            if (repeated) {\n              let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n              if (wireType == WireType.LengthDelimited && scalarType != ScalarType.STRING && scalarType != ScalarType.BYTES) {\n                let e = reader.uint32() + reader.pos;\n                while (reader.pos < e) {\n                  arr.push(read(reader, scalarType));\n                }\n              } else {\n                arr.push(read(reader, scalarType));\n              }\n            } else {\n              target[localName] = read(reader, scalarType);\n            }\n            break;\n          case \"message\":\n            const messageType = field.T;\n            if (repeated) {\n              // safe to assume presence of array, oneof cannot contain repeated values\n              target[localName].push(readMessageField(reader, new messageType(), options));\n            } else {\n              if (target[localName] instanceof Message) {\n                readMessageField(reader, target[localName], options);\n              } else {\n                target[localName] = readMessageField(reader, new messageType(), options);\n                if (messageType.fieldWrapper && !field.oneof && !field.repeated) {\n                  target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                }\n              }\n            }\n            break;\n          case \"map\":\n            let [mapKey, mapVal] = readMapEntry(field, reader, options);\n            // safe to assume presence of map object, oneof cannot contain repeated values\n            target[localName][mapKey] = mapVal;\n            break;\n        }\n      }\n    }\n  };\n}\n// Read a message, avoiding MessageType.fromBinary() to re-use the\n// BinaryReadOptions and the IBinaryReader.\nfunction readMessageField(reader, message, options) {\n  const format = message.getType().runtime.bin;\n  format.readMessage(message, reader, reader.uint32(), options);\n  return message;\n}\n// Read a map field, expecting key field = 1, value field = 2\nfunction readMapEntry(field, reader, options) {\n  const length = reader.uint32(),\n    end = reader.pos + length;\n  let key, val;\n  while (reader.pos < end) {\n    let [fieldNo] = reader.tag();\n    switch (fieldNo) {\n      case 1:\n        key = readScalar$1(reader, field.K);\n        break;\n      case 2:\n        switch (field.V.kind) {\n          case \"scalar\":\n            val = readScalar$1(reader, field.V.T);\n            break;\n          case \"enum\":\n            val = reader.int32();\n            break;\n          case \"message\":\n            val = readMessageField(reader, new field.V.T(), options);\n            break;\n        }\n        break;\n    }\n  }\n  if (key === undefined) {\n    let keyRaw = scalarDefaultValue(field.K, LongType.BIGINT);\n    key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;\n  }\n  if (typeof key != \"string\" && typeof key != \"number\") {\n    key = key.toString();\n  }\n  if (val === undefined) {\n    switch (field.V.kind) {\n      case \"scalar\":\n        val = scalarDefaultValue(field.V.T, LongType.BIGINT);\n        break;\n      case \"enum\":\n        val = 0;\n        break;\n      case \"message\":\n        val = new field.V.T();\n        break;\n    }\n  }\n  return [key, val];\n}\n// Read a scalar value, but return 64 bit integral types (int64, uint64,\n// sint64, fixed64, sfixed64) as string instead of bigint.\nfunction readScalarLTString(reader, type) {\n  const v = readScalar$1(reader, type);\n  return typeof v == \"bigint\" ? v.toString() : v;\n}\n// Does not use scalarTypeInfo() for better performance.\nfunction readScalar$1(reader, type) {\n  switch (type) {\n    case ScalarType.STRING:\n      return reader.string();\n    case ScalarType.BOOL:\n      return reader.bool();\n    case ScalarType.DOUBLE:\n      return reader.double();\n    case ScalarType.FLOAT:\n      return reader.float();\n    case ScalarType.INT32:\n      return reader.int32();\n    case ScalarType.INT64:\n      return reader.int64();\n    case ScalarType.UINT64:\n      return reader.uint64();\n    case ScalarType.FIXED64:\n      return reader.fixed64();\n    case ScalarType.BYTES:\n      return reader.bytes();\n    case ScalarType.FIXED32:\n      return reader.fixed32();\n    case ScalarType.SFIXED32:\n      return reader.sfixed32();\n    case ScalarType.SFIXED64:\n      return reader.sfixed64();\n    case ScalarType.SINT64:\n      return reader.sint64();\n    case ScalarType.UINT32:\n      return reader.uint32();\n    case ScalarType.SINT32:\n      return reader.sint32();\n  }\n}\nfunction writeMapEntry(writer, options, field, key, value) {\n  writer.tag(field.no, WireType.LengthDelimited);\n  writer.fork();\n  // javascript only allows number or string for object properties\n  // we convert from our representation to the protobuf type\n  let keyValue = key;\n  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys\n  switch (field.K) {\n    case ScalarType.INT32:\n    case ScalarType.FIXED32:\n    case ScalarType.UINT32:\n    case ScalarType.SFIXED32:\n    case ScalarType.SINT32:\n      keyValue = Number.parseInt(key);\n      break;\n    case ScalarType.BOOL:\n      assert(key == \"true\" || key == \"false\");\n      keyValue = key == \"true\";\n      break;\n  }\n  // write key, expecting key field number = 1\n  writeScalar$1(writer, field.K, 1, keyValue, true);\n  // write value, expecting value field number = 2\n  switch (field.V.kind) {\n    case \"scalar\":\n      writeScalar$1(writer, field.V.T, 2, value, true);\n      break;\n    case \"enum\":\n      writeScalar$1(writer, ScalarType.INT32, 2, value, true);\n      break;\n    case \"message\":\n      writeMessageField(writer, options, field.V.T, 2, value);\n      break;\n  }\n  writer.join();\n}\nfunction writeMessageField(writer, options, type, fieldNo, value) {\n  if (value !== undefined) {\n    const message = wrapField(type, value);\n    writer.tag(fieldNo, WireType.LengthDelimited).bytes(message.toBinary(options));\n  }\n}\nfunction writeScalar$1(writer, type, fieldNo, value, emitIntrinsicDefault) {\n  let [wireType, method, isIntrinsicDefault] = scalarTypeInfo(type, value);\n  if (!isIntrinsicDefault || emitIntrinsicDefault) {\n    writer.tag(fieldNo, wireType)[method](value);\n  }\n}\nfunction writePacked(writer, type, fieldNo, value) {\n  if (!value.length) {\n    return;\n  }\n  writer.tag(fieldNo, WireType.LengthDelimited).fork();\n  let [, method] = scalarTypeInfo(type);\n  for (let i = 0; i < value.length; i++) {\n    writer[method](value[i]);\n  }\n  writer.join();\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions, prefer-const, no-case-declarations */\nfunction makeBinaryFormatProto3() {\n  return Object.assign(Object.assign({}, makeBinaryFormatCommon()), {\n    writeMessage(message, writer, options) {\n      const type = message.getType();\n      for (const field of type.fields.byNumber()) {\n        let value,\n          // this will be our field value, whether it is member of a oneof or regular field\n          repeated = field.repeated,\n          localName = field.localName;\n        if (field.oneof) {\n          const oneof = message[field.oneof.localName];\n          if (oneof.case !== localName) {\n            continue; // field is not selected, skip\n          }\n\n          value = oneof.value;\n        } else {\n          value = message[localName];\n        }\n        switch (field.kind) {\n          case \"scalar\":\n          case \"enum\":\n            let scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n            if (repeated) {\n              if (field.packed) {\n                writePacked(writer, scalarType, field.no, value);\n              } else {\n                for (const item of value) {\n                  writeScalar$1(writer, scalarType, field.no, item, true);\n                }\n              }\n            } else {\n              if (value !== undefined) {\n                writeScalar$1(writer, scalarType, field.no, value, !!field.oneof || field.opt);\n              }\n            }\n            break;\n          case \"message\":\n            if (repeated) {\n              for (const item of value) {\n                writeMessageField(writer, options, field.T, field.no, item);\n              }\n            } else {\n              writeMessageField(writer, options, field.T, field.no, value);\n            }\n            break;\n          case \"map\":\n            for (const [key, val] of Object.entries(value)) {\n              writeMapEntry(writer, options, field, key, val);\n            }\n            break;\n        }\n      }\n      if (options.writeUnknownFields) {\n        this.writeUnknownFields(message, writer);\n      }\n      return writer;\n    }\n  });\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */\n// lookup table from base64 character to byte\nlet encTable = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++) decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\nconst protoBase64 = {\n  /**\n   * Decodes a base64 string to a byte array.\n   *\n   * - ignores white-space, including line breaks and tabs\n   * - allows inner padding (can decode concatenated base64 strings)\n   * - does not require padding\n   * - understands base64url encoding:\n   *   \"-\" instead of \"+\",\n   *   \"_\" instead of \"/\",\n   *   no padding\n   */\n  dec(base64Str) {\n    // estimate byte size, not accounting for inner padding and whitespace\n    let es = base64Str.length * 3 / 4;\n    if (base64Str[base64Str.length - 2] == \"=\") es -= 2;else if (base64Str[base64Str.length - 1] == \"=\") es -= 1;\n    let bytes = new Uint8Array(es),\n      bytePos = 0,\n      // position in byte array\n      groupPos = 0,\n      // position in base64 group\n      b,\n      // current byte\n      p = 0; // previous byte\n    for (let i = 0; i < base64Str.length; i++) {\n      b = decTable[base64Str.charCodeAt(i)];\n      if (b === undefined) {\n        switch (base64Str[i]) {\n          // @ts-ignore TS7029: Fallthrough case in switch\n          case \"=\":\n            groupPos = 0;\n          // reset state when padding found\n          // @ts-ignore TS7029: Fallthrough case in switch\n          case \"\\n\":\n          case \"\\r\":\n          case \"\\t\":\n          case \" \":\n            continue;\n          // skip white-space, and padding\n          default:\n            throw Error(\"invalid base64 string.\");\n        }\n      }\n      switch (groupPos) {\n        case 0:\n          p = b;\n          groupPos = 1;\n          break;\n        case 1:\n          bytes[bytePos++] = p << 2 | (b & 48) >> 4;\n          p = b;\n          groupPos = 2;\n          break;\n        case 2:\n          bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\n          p = b;\n          groupPos = 3;\n          break;\n        case 3:\n          bytes[bytePos++] = (p & 3) << 6 | b;\n          groupPos = 0;\n          break;\n      }\n    }\n    if (groupPos == 1) throw Error(\"invalid base64 string.\");\n    return bytes.subarray(0, bytePos);\n  },\n  /**\n   * Encode a byte array to a base64 string.\n   */\n  enc(bytes) {\n    let base64 = \"\",\n      groupPos = 0,\n      // position in base64 group\n      b,\n      // current byte\n      p = 0; // carry over from previous byte\n    for (let i = 0; i < bytes.length; i++) {\n      b = bytes[i];\n      switch (groupPos) {\n        case 0:\n          base64 += encTable[b >> 2];\n          p = (b & 3) << 4;\n          groupPos = 1;\n          break;\n        case 1:\n          base64 += encTable[p | b >> 4];\n          p = (b & 15) << 2;\n          groupPos = 2;\n          break;\n        case 2:\n          base64 += encTable[p | b >> 6];\n          base64 += encTable[b & 63];\n          groupPos = 0;\n          break;\n      }\n    }\n    // add output padding\n    if (groupPos) {\n      base64 += encTable[p];\n      base64 += \"=\";\n      if (groupPos == 1) base64 += \"=\";\n    }\n    return base64;\n  }\n};\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */\n// Default options for parsing JSON.\nconst jsonReadDefaults = {\n  ignoreUnknownFields: false\n};\n// Default options for serializing to JSON.\nconst jsonWriteDefaults = {\n  emitDefaultValues: false,\n  enumAsInteger: false,\n  useProtoFieldName: false,\n  prettySpaces: 0\n};\nfunction makeReadOptions(options) {\n  return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;\n}\nfunction makeWriteOptions(options) {\n  return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;\n}\nfunction makeJsonFormatCommon(makeWriteField) {\n  const writeField = makeWriteField(writeEnum, writeScalar);\n  return {\n    makeReadOptions,\n    makeWriteOptions,\n    readMessage(type, json, options, message) {\n      if (json == null || Array.isArray(json) || typeof json != \"object\") {\n        throw new Error(\"cannot decode message \".concat(type.typeName, \" from JSON: \").concat(this.debug(json)));\n      }\n      message = message !== null && message !== void 0 ? message : new type();\n      const oneofSeen = {};\n      for (const [jsonKey, jsonValue] of Object.entries(json)) {\n        const field = type.fields.findJsonName(jsonKey);\n        if (!field) {\n          if (!options.ignoreUnknownFields) {\n            throw new Error(\"cannot decode message \".concat(type.typeName, \" from JSON: key \\\"\").concat(jsonKey, \"\\\" is unknown\"));\n          }\n          continue;\n        }\n        let localName = field.localName;\n        let target = message;\n        if (field.oneof) {\n          if (jsonValue === null && field.kind == \"scalar\") {\n            // see conformance test Required.Proto3.JsonInput.OneofFieldNull{First,Second}\n            continue;\n          }\n          const seen = oneofSeen[field.oneof.localName];\n          if (seen) {\n            throw new Error(\"cannot decode message \".concat(type.typeName, \" from JSON: multiple keys for oneof \\\"\").concat(field.oneof.name, \"\\\" present: \\\"\").concat(seen, \"\\\", \\\"\").concat(jsonKey, \"\\\"\"));\n          }\n          oneofSeen[field.oneof.localName] = jsonKey;\n          target = target[field.oneof.localName] = {\n            case: localName\n          };\n          localName = \"value\";\n        }\n        if (field.repeated) {\n          if (jsonValue === null) {\n            continue;\n          }\n          if (!Array.isArray(jsonValue)) {\n            throw new Error(\"cannot decode field \".concat(type.typeName, \".\").concat(field.name, \" from JSON: \").concat(this.debug(jsonValue)));\n          }\n          const targetArray = target[localName];\n          for (const jsonItem of jsonValue) {\n            if (jsonItem === null) {\n              throw new Error(\"cannot decode field \".concat(type.typeName, \".\").concat(field.name, \" from JSON: \").concat(this.debug(jsonItem)));\n            }\n            let val;\n            // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- \"map\" is invalid for repeated fields\n            switch (field.kind) {\n              case \"message\":\n                val = field.T.fromJson(jsonItem, options);\n                break;\n              case \"enum\":\n                val = readEnum(field.T, jsonItem, options.ignoreUnknownFields);\n                if (val === undefined) continue;\n                break;\n              case \"scalar\":\n                try {\n                  val = readScalar(field.T, jsonItem, field.L);\n                } catch (e) {\n                  let m = \"cannot decode field \".concat(type.typeName, \".\").concat(field.name, \" from JSON: \").concat(this.debug(jsonItem));\n                  if (e instanceof Error && e.message.length > 0) {\n                    m += \": \".concat(e.message);\n                  }\n                  throw new Error(m);\n                }\n                break;\n            }\n            targetArray.push(val);\n          }\n        } else if (field.kind == \"map\") {\n          if (jsonValue === null) {\n            continue;\n          }\n          if (Array.isArray(jsonValue) || typeof jsonValue != \"object\") {\n            throw new Error(\"cannot decode field \".concat(type.typeName, \".\").concat(field.name, \" from JSON: \").concat(this.debug(jsonValue)));\n          }\n          const targetMap = target[localName];\n          for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {\n            if (jsonMapValue === null) {\n              throw new Error(\"cannot decode field \".concat(type.typeName, \".\").concat(field.name, \" from JSON: map value null\"));\n            }\n            let val;\n            switch (field.V.kind) {\n              case \"message\":\n                val = field.V.T.fromJson(jsonMapValue, options);\n                break;\n              case \"enum\":\n                val = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields);\n                if (val === undefined) continue;\n                break;\n              case \"scalar\":\n                try {\n                  val = readScalar(field.V.T, jsonMapValue, LongType.BIGINT);\n                } catch (e) {\n                  let m = \"cannot decode map value for field \".concat(type.typeName, \".\").concat(field.name, \" from JSON: \").concat(this.debug(jsonValue));\n                  if (e instanceof Error && e.message.length > 0) {\n                    m += \": \".concat(e.message);\n                  }\n                  throw new Error(m);\n                }\n                break;\n            }\n            try {\n              targetMap[readScalar(field.K, field.K == ScalarType.BOOL ? jsonMapKey == \"true\" ? true : jsonMapKey == \"false\" ? false : jsonMapKey : jsonMapKey, LongType.BIGINT).toString()] = val;\n            } catch (e) {\n              let m = \"cannot decode map key for field \".concat(type.typeName, \".\").concat(field.name, \" from JSON: \").concat(this.debug(jsonValue));\n              if (e instanceof Error && e.message.length > 0) {\n                m += \": \".concat(e.message);\n              }\n              throw new Error(m);\n            }\n          }\n        } else {\n          switch (field.kind) {\n            case \"message\":\n              const messageType = field.T;\n              if (jsonValue === null && messageType.typeName != \"google.protobuf.Value\") {\n                if (field.oneof) {\n                  throw new Error(\"cannot decode field \".concat(type.typeName, \".\").concat(field.name, \" from JSON: null is invalid for oneof field \\\"\").concat(jsonKey, \"\\\"\"));\n                }\n                continue;\n              }\n              if (target[localName] instanceof Message) {\n                target[localName].fromJson(jsonValue, options);\n              } else {\n                target[localName] = messageType.fromJson(jsonValue, options);\n                if (messageType.fieldWrapper && !field.oneof) {\n                  target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                }\n              }\n              break;\n            case \"enum\":\n              const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields);\n              if (enumValue !== undefined) {\n                target[localName] = enumValue;\n              }\n              break;\n            case \"scalar\":\n              try {\n                target[localName] = readScalar(field.T, jsonValue, field.L);\n              } catch (e) {\n                let m = \"cannot decode field \".concat(type.typeName, \".\").concat(field.name, \" from JSON: \").concat(this.debug(jsonValue));\n                if (e instanceof Error && e.message.length > 0) {\n                  m += \": \".concat(e.message);\n                }\n                throw new Error(m);\n              }\n              break;\n          }\n        }\n      }\n      return message;\n    },\n    writeMessage(message, options) {\n      const type = message.getType();\n      const json = {};\n      let field;\n      try {\n        for (const member of type.fields.byMember()) {\n          let jsonValue;\n          if (member.kind == \"oneof\") {\n            const oneof = message[member.localName];\n            if (oneof.value === undefined) {\n              continue;\n            }\n            field = member.findField(oneof.case);\n            if (!field) {\n              throw \"oneof case not found: \" + oneof.case;\n            }\n            jsonValue = writeField(field, oneof.value, options);\n          } else {\n            field = member;\n            jsonValue = writeField(field, message[field.localName], options);\n          }\n          if (jsonValue !== undefined) {\n            json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n          }\n        }\n      } catch (e) {\n        const m = field ? \"cannot encode field \".concat(type.typeName, \".\").concat(field.name, \" to JSON\") : \"cannot encode message \".concat(type.typeName, \" to JSON\");\n        const r = e instanceof Error ? e.message : String(e);\n        throw new Error(m + (r.length > 0 ? \": \".concat(r) : \"\"));\n      }\n      return json;\n    },\n    readScalar,\n    writeScalar,\n    debug: debugJsonValue\n  };\n}\nfunction debugJsonValue(json) {\n  if (json === null) {\n    return \"null\";\n  }\n  switch (typeof json) {\n    case \"object\":\n      return Array.isArray(json) ? \"array\" : \"object\";\n    case \"string\":\n      return json.length > 100 ? \"string\" : \"\\\"\".concat(json.split('\"').join('\\\\\"'), \"\\\"\");\n    default:\n      return String(json);\n  }\n}\n// May throw an error. If the error message is non-blank, it should be shown.\n// It is up to the caller to provide context.\nfunction readScalar(type, json, longType) {\n  // every valid case in the switch below returns, and every fall\n  // through is regarded as a failure.\n  switch (type) {\n    // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n    // Either numbers or strings are accepted. Exponent notation is also accepted.\n    case ScalarType.DOUBLE:\n    case ScalarType.FLOAT:\n      if (json === null) return 0.0;\n      if (json === \"NaN\") return Number.NaN;\n      if (json === \"Infinity\") return Number.POSITIVE_INFINITY;\n      if (json === \"-Infinity\") return Number.NEGATIVE_INFINITY;\n      if (json === \"\") {\n        // empty string is not a number\n        break;\n      }\n      if (typeof json == \"string\" && json.trim().length !== json.length) {\n        // extra whitespace\n        break;\n      }\n      if (typeof json != \"string\" && typeof json != \"number\") {\n        break;\n      }\n      const float = Number(json);\n      if (Number.isNaN(float)) {\n        // not a number\n        break;\n      }\n      if (!Number.isFinite(float)) {\n        // infinity and -infinity are handled by string representation above, so this is an error\n        break;\n      }\n      if (type == ScalarType.FLOAT) assertFloat32(float);\n      return float;\n    // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n    case ScalarType.INT32:\n    case ScalarType.FIXED32:\n    case ScalarType.SFIXED32:\n    case ScalarType.SINT32:\n    case ScalarType.UINT32:\n      if (json === null) return 0;\n      let int32;\n      if (typeof json == \"number\") int32 = json;else if (typeof json == \"string\" && json.length > 0) {\n        if (json.trim().length === json.length) int32 = Number(json);\n      }\n      if (int32 === undefined) break;\n      if (type == ScalarType.UINT32) assertUInt32(int32);else assertInt32(int32);\n      return int32;\n    // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n    case ScalarType.INT64:\n    case ScalarType.SFIXED64:\n    case ScalarType.SINT64:\n      if (json === null) return protoInt64.zero;\n      if (typeof json != \"number\" && typeof json != \"string\") break;\n      const long = protoInt64.parse(json);\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n      return longType ? long.toString() : long;\n    case ScalarType.FIXED64:\n    case ScalarType.UINT64:\n      if (json === null) return protoInt64.zero;\n      if (typeof json != \"number\" && typeof json != \"string\") break;\n      const uLong = protoInt64.uParse(json);\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n      return longType ? uLong.toString() : uLong;\n    // bool:\n    case ScalarType.BOOL:\n      if (json === null) return false;\n      if (typeof json !== \"boolean\") break;\n      return json;\n    // string:\n    case ScalarType.STRING:\n      if (json === null) return \"\";\n      if (typeof json !== \"string\") {\n        break;\n      }\n      // A string must always contain UTF-8 encoded or 7-bit ASCII.\n      // We validate with encodeURIComponent, which appears to be the fastest widely available option.\n      try {\n        encodeURIComponent(json);\n      } catch (e) {\n        throw new Error(\"invalid UTF8\");\n      }\n      return json;\n    // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n    // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n    case ScalarType.BYTES:\n      if (json === null || json === \"\") return new Uint8Array(0);\n      if (typeof json !== \"string\") break;\n      return protoBase64.dec(json);\n  }\n  throw new Error();\n}\nfunction readEnum(type, json, ignoreUnknownFields) {\n  if (json === null) {\n    // proto3 requires 0 to be default value for all enums\n    return 0;\n  }\n  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n  switch (typeof json) {\n    case \"number\":\n      if (Number.isInteger(json)) {\n        return json;\n      }\n      break;\n    case \"string\":\n      const value = type.findName(json);\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      if (value || ignoreUnknownFields) {\n        return value === null || value === void 0 ? void 0 : value.no;\n      }\n      break;\n  }\n  throw new Error(\"cannot decode enum \".concat(type.typeName, \" from JSON: \").concat(debugJsonValue(json)));\n}\nfunction writeEnum(type, value, emitIntrinsicDefault, enumAsInteger) {\n  var _a;\n  if (value === undefined) {\n    return value;\n  }\n  if (value === 0 && !emitIntrinsicDefault) {\n    // proto3 requires 0 to be default value for all enums\n    return undefined;\n  }\n  if (enumAsInteger) {\n    return value;\n  }\n  if (type.typeName == \"google.protobuf.NullValue\") {\n    return null;\n  }\n  const val = type.findNumber(value);\n  return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number\n}\n\nfunction writeScalar(type, value, emitIntrinsicDefault) {\n  if (value === undefined) {\n    return undefined;\n  }\n  switch (type) {\n    // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n    case ScalarType.INT32:\n    case ScalarType.SFIXED32:\n    case ScalarType.SINT32:\n    case ScalarType.FIXED32:\n    case ScalarType.UINT32:\n      assert(typeof value == \"number\");\n      return value != 0 || emitIntrinsicDefault ? value : undefined;\n    // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n    // Either numbers or strings are accepted. Exponent notation is also accepted.\n    case ScalarType.FLOAT:\n    // assertFloat32(value);\n    case ScalarType.DOUBLE:\n      // eslint-disable-line no-fallthrough\n      assert(typeof value == \"number\");\n      if (Number.isNaN(value)) return \"NaN\";\n      if (value === Number.POSITIVE_INFINITY) return \"Infinity\";\n      if (value === Number.NEGATIVE_INFINITY) return \"-Infinity\";\n      return value !== 0 || emitIntrinsicDefault ? value : undefined;\n    // string:\n    case ScalarType.STRING:\n      assert(typeof value == \"string\");\n      return value.length > 0 || emitIntrinsicDefault ? value : undefined;\n    // bool:\n    case ScalarType.BOOL:\n      assert(typeof value == \"boolean\");\n      return value || emitIntrinsicDefault ? value : undefined;\n    // JSON value will be a decimal string. Either numbers or strings are accepted.\n    case ScalarType.UINT64:\n    case ScalarType.FIXED64:\n    case ScalarType.INT64:\n    case ScalarType.SFIXED64:\n    case ScalarType.SINT64:\n      assert(typeof value == \"bigint\" || typeof value == \"string\" || typeof value == \"number\");\n      // We use implicit conversion with `value != 0` to catch both 0n and \"0\"\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      return emitIntrinsicDefault || value != 0 ? value.toString(10) : undefined;\n    // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n    // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n    case ScalarType.BYTES:\n      assert(value instanceof Uint8Array);\n      return emitIntrinsicDefault || value.byteLength > 0 ? protoBase64.enc(value) : undefined;\n  }\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */\nfunction makeJsonFormatProto3() {\n  return makeJsonFormatCommon((writeEnum, writeScalar) => {\n    return function writeField(field, value, options) {\n      if (field.kind == \"map\") {\n        const jsonObj = {};\n        switch (field.V.kind) {\n          case \"scalar\":\n            for (const [entryKey, entryValue] of Object.entries(value)) {\n              const val = writeScalar(field.V.T, entryValue, true);\n              assert(val !== undefined);\n              jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n            }\n\n            break;\n          case \"message\":\n            for (const [entryKey, entryValue] of Object.entries(value)) {\n              // JSON standard allows only (double quoted) string as property key\n              jsonObj[entryKey.toString()] = entryValue.toJson(options);\n            }\n            break;\n          case \"enum\":\n            const enumType = field.V.T;\n            for (const [entryKey, entryValue] of Object.entries(value)) {\n              assert(entryValue === undefined || typeof entryValue == \"number\");\n              const val = writeEnum(enumType, entryValue, true, options.enumAsInteger);\n              assert(val !== undefined);\n              jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n            }\n\n            break;\n        }\n        return options.emitDefaultValues || Object.keys(jsonObj).length > 0 ? jsonObj : undefined;\n      } else if (field.repeated) {\n        const jsonArr = [];\n        switch (field.kind) {\n          case \"scalar\":\n            for (let i = 0; i < value.length; i++) {\n              jsonArr.push(writeScalar(field.T, value[i], true));\n            }\n            break;\n          case \"enum\":\n            for (let i = 0; i < value.length; i++) {\n              jsonArr.push(writeEnum(field.T, value[i], true, options.enumAsInteger));\n            }\n            break;\n          case \"message\":\n            for (let i = 0; i < value.length; i++) {\n              jsonArr.push(wrapField(field.T, value[i]).toJson(options));\n            }\n            break;\n        }\n        return options.emitDefaultValues || jsonArr.length > 0 ? jsonArr : undefined;\n      } else {\n        switch (field.kind) {\n          case \"scalar\":\n            return writeScalar(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues);\n          case \"enum\":\n            return writeEnum(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues, options.enumAsInteger);\n          case \"message\":\n            return value !== undefined ? wrapField(field.T, value).toJson(options) : undefined;\n        }\n      }\n    };\n  });\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */\nfunction makeUtilCommon() {\n  return {\n    setEnumType,\n    initPartial(source, target) {\n      if (source === undefined) {\n        return;\n      }\n      const type = target.getType();\n      for (const member of type.fields.byMember()) {\n        const localName = member.localName,\n          t = target,\n          s = source;\n        if (s[localName] === undefined) {\n          continue;\n        }\n        switch (member.kind) {\n          case \"oneof\":\n            const sk = s[localName].case;\n            if (sk === undefined) {\n              continue;\n            }\n            const sourceField = member.findField(sk);\n            let val = s[localName].value;\n            if (sourceField && sourceField.kind == \"message\" && !(val instanceof sourceField.T)) {\n              val = new sourceField.T(val);\n            } else if (sourceField && sourceField.kind === \"scalar\" && sourceField.T === ScalarType.BYTES) {\n              val = toU8Arr(val);\n            }\n            t[localName] = {\n              case: sk,\n              value: val\n            };\n            break;\n          case \"scalar\":\n          case \"enum\":\n            let copy = s[localName];\n            if (member.T === ScalarType.BYTES) {\n              copy = member.repeated ? copy.map(toU8Arr) : toU8Arr(copy);\n            }\n            t[localName] = copy;\n            break;\n          case \"map\":\n            switch (member.V.kind) {\n              case \"scalar\":\n              case \"enum\":\n                if (member.V.T === ScalarType.BYTES) {\n                  for (const [k, v] of Object.entries(s[localName])) {\n                    t[localName][k] = toU8Arr(v);\n                  }\n                } else {\n                  Object.assign(t[localName], s[localName]);\n                }\n                break;\n              case \"message\":\n                const messageType = member.V.T;\n                for (const k of Object.keys(s[localName])) {\n                  let val = s[localName][k];\n                  if (!messageType.fieldWrapper) {\n                    // We only take partial input for messages that are not a wrapper type.\n                    // For those messages, we recursively normalize the partial input.\n                    val = new messageType(val);\n                  }\n                  t[localName][k] = val;\n                }\n                break;\n            }\n            break;\n          case \"message\":\n            const mt = member.T;\n            if (member.repeated) {\n              t[localName] = s[localName].map(val => val instanceof mt ? val : new mt(val));\n            } else if (s[localName] !== undefined) {\n              const val = s[localName];\n              if (mt.fieldWrapper) {\n                if (\n                // We can't use BytesValue.typeName as that will create a circular import\n                mt.typeName === \"google.protobuf.BytesValue\") {\n                  t[localName] = toU8Arr(val);\n                } else {\n                  t[localName] = val;\n                }\n              } else {\n                t[localName] = val instanceof mt ? val : new mt(val);\n              }\n            }\n            break;\n        }\n      }\n    },\n    equals(type, a, b) {\n      if (a === b) {\n        return true;\n      }\n      if (!a || !b) {\n        return false;\n      }\n      return type.fields.byMember().every(m => {\n        const va = a[m.localName];\n        const vb = b[m.localName];\n        if (m.repeated) {\n          if (va.length !== vb.length) {\n            return false;\n          }\n          // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never \"map\"\n          switch (m.kind) {\n            case \"message\":\n              return va.every((a, i) => m.T.equals(a, vb[i]));\n            case \"scalar\":\n              return va.every((a, i) => scalarEquals(m.T, a, vb[i]));\n            case \"enum\":\n              return va.every((a, i) => scalarEquals(ScalarType.INT32, a, vb[i]));\n          }\n          throw new Error(\"repeated cannot contain \".concat(m.kind));\n        }\n        switch (m.kind) {\n          case \"message\":\n            return m.T.equals(va, vb);\n          case \"enum\":\n            return scalarEquals(ScalarType.INT32, va, vb);\n          case \"scalar\":\n            return scalarEquals(m.T, va, vb);\n          case \"oneof\":\n            if (va.case !== vb.case) {\n              return false;\n            }\n            const s = m.findField(va.case);\n            if (s === undefined) {\n              return true;\n            }\n            // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never \"map\"\n            switch (s.kind) {\n              case \"message\":\n                return s.T.equals(va.value, vb.value);\n              case \"enum\":\n                return scalarEquals(ScalarType.INT32, va.value, vb.value);\n              case \"scalar\":\n                return scalarEquals(s.T, va.value, vb.value);\n            }\n            throw new Error(\"oneof cannot contain \".concat(s.kind));\n          case \"map\":\n            const keys = Object.keys(va).concat(Object.keys(vb));\n            switch (m.V.kind) {\n              case \"message\":\n                const messageType = m.V.T;\n                return keys.every(k => messageType.equals(va[k], vb[k]));\n              case \"enum\":\n                return keys.every(k => scalarEquals(ScalarType.INT32, va[k], vb[k]));\n              case \"scalar\":\n                const scalarType = m.V.T;\n                return keys.every(k => scalarEquals(scalarType, va[k], vb[k]));\n            }\n            break;\n        }\n      });\n    },\n    clone(message) {\n      const type = message.getType(),\n        target = new type(),\n        any = target;\n      for (const member of type.fields.byMember()) {\n        const source = message[member.localName];\n        let copy;\n        if (member.repeated) {\n          copy = source.map(cloneSingularField);\n        } else if (member.kind == \"map\") {\n          copy = any[member.localName];\n          for (const [key, v] of Object.entries(source)) {\n            copy[key] = cloneSingularField(v);\n          }\n        } else if (member.kind == \"oneof\") {\n          const f = member.findField(source.case);\n          copy = f ? {\n            case: source.case,\n            value: cloneSingularField(source.value)\n          } : {\n            case: undefined\n          };\n        } else {\n          copy = cloneSingularField(source);\n        }\n        any[member.localName] = copy;\n      }\n      return target;\n    }\n  };\n}\n// clone a single field value - i.e. the element type of repeated fields, the value type of maps\nfunction cloneSingularField(value) {\n  if (value === undefined) {\n    return value;\n  }\n  if (value instanceof Message) {\n    return value.clone();\n  }\n  if (value instanceof Uint8Array) {\n    const c = new Uint8Array(value.byteLength);\n    c.set(value);\n    return c;\n  }\n  return value;\n}\n// converts any ArrayLike<number> to Uint8Array if necessary.\nfunction toU8Arr(input) {\n  return input instanceof Uint8Array ? input : new Uint8Array(input);\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nclass InternalFieldList {\n  constructor(fields, normalizer) {\n    this._fields = fields;\n    this._normalizer = normalizer;\n  }\n  findJsonName(jsonName) {\n    if (!this.jsonNames) {\n      const t = {};\n      for (const f of this.list()) {\n        t[f.jsonName] = t[f.name] = f;\n      }\n      this.jsonNames = t;\n    }\n    return this.jsonNames[jsonName];\n  }\n  find(fieldNo) {\n    if (!this.numbers) {\n      const t = {};\n      for (const f of this.list()) {\n        t[f.no] = f;\n      }\n      this.numbers = t;\n    }\n    return this.numbers[fieldNo];\n  }\n  list() {\n    if (!this.all) {\n      this.all = this._normalizer(this._fields);\n    }\n    return this.all;\n  }\n  byNumber() {\n    if (!this.numbersAsc) {\n      this.numbersAsc = this.list().concat().sort((a, b) => a.no - b.no);\n    }\n    return this.numbersAsc;\n  }\n  byMember() {\n    if (!this.members) {\n      this.members = [];\n      const a = this.members;\n      let o;\n      for (const f of this.list()) {\n        if (f.oneof) {\n          if (f.oneof !== o) {\n            o = f.oneof;\n            a.push(o);\n          }\n        } else {\n          a.push(f);\n        }\n      }\n    }\n    return this.members;\n  }\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Returns the name of a protobuf element in generated code.\n *\n * Field names - including oneofs - are converted to lowerCamelCase. For\n * messages, enumerations and services, the package name is stripped from\n * the type name. For nested messages and enumerations, the names are joined\n * with an underscore. For methods, the first character is made lowercase.\n */\n/**\n * Returns the name of a field in generated code.\n */\nfunction localFieldName(protoName, inOneof) {\n  const name = protoCamelCase(protoName);\n  if (inOneof) {\n    // oneof member names are not properties, but values of the `case` property.\n    return name;\n  }\n  return safeObjectProperty(safeMessageProperty(name));\n}\n/**\n * Returns the name of a oneof group in generated code.\n */\nfunction localOneofName(protoName) {\n  return localFieldName(protoName, false);\n}\n/**\n * Returns the JSON name for a protobuf field, exactly like protoc does.\n */\nconst fieldJsonName = protoCamelCase;\n/**\n * Converts snake_case to protoCamelCase according to the convention\n * used by protoc to convert a field name to a JSON name.\n */\nfunction protoCamelCase(snakeCase) {\n  let capNext = false;\n  const b = [];\n  for (let i = 0; i < snakeCase.length; i++) {\n    let c = snakeCase.charAt(i);\n    switch (c) {\n      case \"_\":\n        capNext = true;\n        break;\n      case \"0\":\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        b.push(c);\n        capNext = false;\n        break;\n      default:\n        if (capNext) {\n          capNext = false;\n          c = c.toUpperCase();\n        }\n        b.push(c);\n        break;\n    }\n  }\n  return b.join(\"\");\n}\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nconst reservedObjectProperties = new Set([\n// names reserved by JavaScript\n\"constructor\", \"toString\", \"toJSON\", \"valueOf\"]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by the runtime.\n */\nconst reservedMessageProperties = new Set([\n// names reserved by the runtime\n\"getType\", \"clone\", \"equals\", \"fromBinary\", \"fromJson\", \"fromJsonString\", \"toBinary\", \"toJson\", \"toJsonString\",\n// names reserved by the runtime for the future\n\"toObject\"]);\nconst fallback = name => \"\".concat(name, \"$\");\n/**\n * Will wrap names that are Object prototype properties or names reserved\n * for `Message`s.\n */\nconst safeMessageProperty = name => {\n  if (reservedMessageProperties.has(name)) {\n    return fallback(name);\n  }\n  return name;\n};\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nconst safeObjectProperty = name => {\n  if (reservedObjectProperties.has(name)) {\n    return fallback(name);\n  }\n  return name;\n};\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nclass InternalOneofInfo {\n  constructor(name) {\n    this.kind = \"oneof\";\n    this.repeated = false;\n    this.packed = false;\n    this.opt = false;\n    this.default = undefined;\n    this.fields = [];\n    this.name = name;\n    this.localName = localOneofName(name);\n  }\n  addField(field) {\n    assert(field.oneof === this, \"field \".concat(field.name, \" not one of \").concat(this.name));\n    this.fields.push(field);\n  }\n  findField(localName) {\n    if (!this._lookup) {\n      this._lookup = Object.create(null);\n      for (let i = 0; i < this.fields.length; i++) {\n        this._lookup[this.fields[i].localName] = this.fields[i];\n      }\n    }\n    return this._lookup[localName];\n  }\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Provides functionality for messages defined with the proto3 syntax.\n */\nconst proto3 = makeProtoRuntime(\"proto3\", makeJsonFormatProto3(), makeBinaryFormatProto3(), Object.assign(Object.assign({}, makeUtilCommon()), {\n  newFieldList(fields) {\n    return new InternalFieldList(fields, normalizeFieldInfosProto3);\n  },\n  initFields(target) {\n    for (const member of target.getType().fields.byMember()) {\n      if (member.opt) {\n        continue;\n      }\n      const name = member.localName,\n        t = target;\n      if (member.repeated) {\n        t[name] = [];\n        continue;\n      }\n      switch (member.kind) {\n        case \"oneof\":\n          t[name] = {\n            case: undefined\n          };\n          break;\n        case \"enum\":\n          t[name] = 0;\n          break;\n        case \"map\":\n          t[name] = {};\n          break;\n        case \"scalar\":\n          t[name] = scalarDefaultValue(member.T, member.L); // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n          break;\n      }\n    }\n  }\n}));\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */\nfunction normalizeFieldInfosProto3(fieldInfos) {\n  var _a, _b, _c, _d;\n  const r = [];\n  let o;\n  for (const field of typeof fieldInfos == \"function\" ? fieldInfos() : fieldInfos) {\n    const f = field;\n    f.localName = localFieldName(field.name, field.oneof !== undefined);\n    f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : fieldJsonName(field.name);\n    f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;\n    if (field.kind == \"scalar\") {\n      f.L = (_c = field.L) !== null && _c !== void 0 ? _c : LongType.BIGINT;\n    }\n    // From the proto3 language guide:\n    // > In proto3, repeated fields of scalar numeric types are packed by default.\n    // This information is incomplete - according to the conformance tests, BOOL\n    // and ENUM are packed by default as well. This means only STRING and BYTES\n    // are not packed by default, which makes sense because they are length-delimited.\n    f.packed = (_d = field.packed) !== null && _d !== void 0 ? _d : field.kind == \"enum\" || field.kind == \"scalar\" && field.T != ScalarType.BYTES && field.T != ScalarType.STRING;\n    // We do not surface options at this time\n    // f.options = field.options ?? emptyReadonlyObject;\n    if (field.oneof !== undefined) {\n      const ooname = typeof field.oneof == \"string\" ? field.oneof : field.oneof.name;\n      if (!o || o.name != ooname) {\n        o = new InternalOneofInfo(ooname);\n      }\n      f.oneof = o;\n      o.addField(f);\n    }\n    r.push(f);\n  }\n  return r;\n}\n\n// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * A Timestamp represents a point in time independent of any time zone or local\n * calendar, encoded as a count of seconds and fractions of seconds at\n * nanosecond resolution. The count is relative to an epoch at UTC midnight on\n * January 1, 1970, in the proleptic Gregorian calendar which extends the\n * Gregorian calendar backwards to year one.\n *\n * All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\n * second table is needed for interpretation, using a [24-hour linear\n * smear](https://developers.google.com/time/smear).\n *\n * The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\n * restricting to that range, we ensure that we can convert to and from [RFC\n * 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n *\n * # Examples\n *\n * Example 1: Compute Timestamp from POSIX `time()`.\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(time(NULL));\n *     timestamp.set_nanos(0);\n *\n * Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n *\n *     struct timeval tv;\n *     gettimeofday(&tv, NULL);\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(tv.tv_sec);\n *     timestamp.set_nanos(tv.tv_usec * 1000);\n *\n * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n *\n *     FILETIME ft;\n *     GetSystemTimeAsFileTime(&ft);\n *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n *\n *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n *     Timestamp timestamp;\n *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n *\n * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n *\n *     long millis = System.currentTimeMillis();\n *\n *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n *         .setNanos((int) ((millis % 1000) * 1000000)).build();\n *\n * Example 5: Compute Timestamp from Java `Instant.now()`.\n *\n *     Instant now = Instant.now();\n *\n *     Timestamp timestamp =\n *         Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n *             .setNanos(now.getNano()).build();\n *\n * Example 6: Compute Timestamp from current time in Python.\n *\n *     timestamp = Timestamp()\n *     timestamp.GetCurrentTime()\n *\n * # JSON Mapping\n *\n * In JSON format, the Timestamp type is encoded as a string in the\n * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n * format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n * where {year} is always expressed using four digits while {month}, {day},\n * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n * are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n * is required. A proto3 JSON serializer should always use UTC (as indicated by\n * \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n * able to accept both UTC and other timezones (as indicated by an offset).\n *\n * For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n * 01:30 UTC on January 15, 2017.\n *\n * In JavaScript, one can convert a Date object to this format using the\n * standard\n * [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n * method. In Python, a standard `datetime.datetime` object can be converted\n * to this format using\n * [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\n * the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\n * the Joda Time's [`ISODateTimeFormat.dateTime()`](\n * http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()\n * ) to obtain a formatter capable of generating timestamps in this format.\n *\n *\n * @generated from message google.protobuf.Timestamp\n */\nclass Timestamp extends Message {\n  constructor(data) {\n    super();\n    /**\n     * Represents seconds of UTC time since Unix epoch\n     * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n     * 9999-12-31T23:59:59Z inclusive.\n     *\n     * @generated from field: int64 seconds = 1;\n     */\n    this.seconds = protoInt64.zero;\n    /**\n     * Non-negative fractions of a second at nanosecond resolution. Negative\n     * second values with fractions must still have non-negative nanos values\n     * that count forward in time. Must be from 0 to 999,999,999\n     * inclusive.\n     *\n     * @generated from field: int32 nanos = 2;\n     */\n    this.nanos = 0;\n    proto3.util.initPartial(data, this);\n  }\n  fromJson(json, options) {\n    if (typeof json !== \"string\") {\n      throw new Error(\"cannot decode google.protobuf.Timestamp from JSON: \".concat(proto3.json.debug(json)));\n    }\n    const matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);\n    if (!matches) {\n      throw new Error(\"cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string\");\n    }\n    const ms = Date.parse(matches[1] + \"-\" + matches[2] + \"-\" + matches[3] + \"T\" + matches[4] + \":\" + matches[5] + \":\" + matches[6] + (matches[8] ? matches[8] : \"Z\"));\n    if (Number.isNaN(ms)) {\n      throw new Error(\"cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string\");\n    }\n    if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) {\n      throw new Error(\"cannot decode message google.protobuf.Timestamp from JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive\");\n    }\n    this.seconds = protoInt64.parse(ms / 1000);\n    this.nanos = 0;\n    if (matches[7]) {\n      this.nanos = parseInt(\"1\" + matches[7] + \"0\".repeat(9 - matches[7].length)) - 1000000000;\n    }\n    return this;\n  }\n  toJson(options) {\n    const ms = Number(this.seconds) * 1000;\n    if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) {\n      throw new Error(\"cannot encode google.protobuf.Timestamp to JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive\");\n    }\n    if (this.nanos < 0) {\n      throw new Error(\"cannot encode google.protobuf.Timestamp to JSON: nanos must not be negative\");\n    }\n    let z = \"Z\";\n    if (this.nanos > 0) {\n      const nanosStr = (this.nanos + 1000000000).toString().substring(1);\n      if (nanosStr.substring(3) === \"000000\") {\n        z = \".\" + nanosStr.substring(0, 3) + \"Z\";\n      } else if (nanosStr.substring(6) === \"000\") {\n        z = \".\" + nanosStr.substring(0, 6) + \"Z\";\n      } else {\n        z = \".\" + nanosStr + \"Z\";\n      }\n    }\n    return new Date(ms).toISOString().replace(\".000Z\", z);\n  }\n  toDate() {\n    return new Date(Number(this.seconds) * 1000 + Math.ceil(this.nanos / 1000000));\n  }\n  static now() {\n    return Timestamp.fromDate(new Date());\n  }\n  static fromDate(date) {\n    const ms = date.getTime();\n    return new Timestamp({\n      seconds: protoInt64.parse(Math.floor(ms / 1000)),\n      nanos: ms % 1000 * 1000000\n    });\n  }\n  static fromBinary(bytes, options) {\n    return new Timestamp().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new Timestamp().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new Timestamp().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(Timestamp, a, b);\n  }\n}\nTimestamp.runtime = proto3;\nTimestamp.typeName = \"google.protobuf.Timestamp\";\nTimestamp.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"seconds\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */\n}, {\n  no: 2,\n  name: \"nanos\",\n  kind: \"scalar\",\n  T: 5 /* ScalarType.INT32 */\n}]);\n\n// Copyright 2023 LiveKit, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * @generated from enum livekit.AudioCodec\n */\nvar AudioCodec;\n(function (AudioCodec) {\n  /**\n   * @generated from enum value: DEFAULT_AC = 0;\n   */\n  AudioCodec[AudioCodec[\"DEFAULT_AC\"] = 0] = \"DEFAULT_AC\";\n  /**\n   * @generated from enum value: OPUS = 1;\n   */\n  AudioCodec[AudioCodec[\"OPUS\"] = 1] = \"OPUS\";\n  /**\n   * @generated from enum value: AAC = 2;\n   */\n  AudioCodec[AudioCodec[\"AAC\"] = 2] = \"AAC\";\n})(AudioCodec || (AudioCodec = {}));\n// Retrieve enum metadata with: proto3.getEnumType(AudioCodec)\nproto3.util.setEnumType(AudioCodec, \"livekit.AudioCodec\", [{\n  no: 0,\n  name: \"DEFAULT_AC\"\n}, {\n  no: 1,\n  name: \"OPUS\"\n}, {\n  no: 2,\n  name: \"AAC\"\n}]);\n/**\n * @generated from enum livekit.VideoCodec\n */\nvar VideoCodec;\n(function (VideoCodec) {\n  /**\n   * @generated from enum value: DEFAULT_VC = 0;\n   */\n  VideoCodec[VideoCodec[\"DEFAULT_VC\"] = 0] = \"DEFAULT_VC\";\n  /**\n   * @generated from enum value: H264_BASELINE = 1;\n   */\n  VideoCodec[VideoCodec[\"H264_BASELINE\"] = 1] = \"H264_BASELINE\";\n  /**\n   * @generated from enum value: H264_MAIN = 2;\n   */\n  VideoCodec[VideoCodec[\"H264_MAIN\"] = 2] = \"H264_MAIN\";\n  /**\n   * @generated from enum value: H264_HIGH = 3;\n   */\n  VideoCodec[VideoCodec[\"H264_HIGH\"] = 3] = \"H264_HIGH\";\n  /**\n   * @generated from enum value: VP8 = 4;\n   */\n  VideoCodec[VideoCodec[\"VP8\"] = 4] = \"VP8\";\n})(VideoCodec || (VideoCodec = {}));\n// Retrieve enum metadata with: proto3.getEnumType(VideoCodec)\nproto3.util.setEnumType(VideoCodec, \"livekit.VideoCodec\", [{\n  no: 0,\n  name: \"DEFAULT_VC\"\n}, {\n  no: 1,\n  name: \"H264_BASELINE\"\n}, {\n  no: 2,\n  name: \"H264_MAIN\"\n}, {\n  no: 3,\n  name: \"H264_HIGH\"\n}, {\n  no: 4,\n  name: \"VP8\"\n}]);\n/**\n * @generated from enum livekit.ImageCodec\n */\nvar ImageCodec;\n(function (ImageCodec) {\n  /**\n   * @generated from enum value: IC_DEFAULT = 0;\n   */\n  ImageCodec[ImageCodec[\"IC_DEFAULT\"] = 0] = \"IC_DEFAULT\";\n  /**\n   * @generated from enum value: IC_JPEG = 1;\n   */\n  ImageCodec[ImageCodec[\"IC_JPEG\"] = 1] = \"IC_JPEG\";\n})(ImageCodec || (ImageCodec = {}));\n// Retrieve enum metadata with: proto3.getEnumType(ImageCodec)\nproto3.util.setEnumType(ImageCodec, \"livekit.ImageCodec\", [{\n  no: 0,\n  name: \"IC_DEFAULT\"\n}, {\n  no: 1,\n  name: \"IC_JPEG\"\n}]);\n/**\n * @generated from enum livekit.TrackType\n */\nvar TrackType;\n(function (TrackType) {\n  /**\n   * @generated from enum value: AUDIO = 0;\n   */\n  TrackType[TrackType[\"AUDIO\"] = 0] = \"AUDIO\";\n  /**\n   * @generated from enum value: VIDEO = 1;\n   */\n  TrackType[TrackType[\"VIDEO\"] = 1] = \"VIDEO\";\n  /**\n   * @generated from enum value: DATA = 2;\n   */\n  TrackType[TrackType[\"DATA\"] = 2] = \"DATA\";\n})(TrackType || (TrackType = {}));\n// Retrieve enum metadata with: proto3.getEnumType(TrackType)\nproto3.util.setEnumType(TrackType, \"livekit.TrackType\", [{\n  no: 0,\n  name: \"AUDIO\"\n}, {\n  no: 1,\n  name: \"VIDEO\"\n}, {\n  no: 2,\n  name: \"DATA\"\n}]);\n/**\n * @generated from enum livekit.TrackSource\n */\nvar TrackSource;\n(function (TrackSource) {\n  /**\n   * @generated from enum value: UNKNOWN = 0;\n   */\n  TrackSource[TrackSource[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  /**\n   * @generated from enum value: CAMERA = 1;\n   */\n  TrackSource[TrackSource[\"CAMERA\"] = 1] = \"CAMERA\";\n  /**\n   * @generated from enum value: MICROPHONE = 2;\n   */\n  TrackSource[TrackSource[\"MICROPHONE\"] = 2] = \"MICROPHONE\";\n  /**\n   * @generated from enum value: SCREEN_SHARE = 3;\n   */\n  TrackSource[TrackSource[\"SCREEN_SHARE\"] = 3] = \"SCREEN_SHARE\";\n  /**\n   * @generated from enum value: SCREEN_SHARE_AUDIO = 4;\n   */\n  TrackSource[TrackSource[\"SCREEN_SHARE_AUDIO\"] = 4] = \"SCREEN_SHARE_AUDIO\";\n})(TrackSource || (TrackSource = {}));\n// Retrieve enum metadata with: proto3.getEnumType(TrackSource)\nproto3.util.setEnumType(TrackSource, \"livekit.TrackSource\", [{\n  no: 0,\n  name: \"UNKNOWN\"\n}, {\n  no: 1,\n  name: \"CAMERA\"\n}, {\n  no: 2,\n  name: \"MICROPHONE\"\n}, {\n  no: 3,\n  name: \"SCREEN_SHARE\"\n}, {\n  no: 4,\n  name: \"SCREEN_SHARE_AUDIO\"\n}]);\n/**\n * @generated from enum livekit.VideoQuality\n */\nvar VideoQuality;\n(function (VideoQuality) {\n  /**\n   * @generated from enum value: LOW = 0;\n   */\n  VideoQuality[VideoQuality[\"LOW\"] = 0] = \"LOW\";\n  /**\n   * @generated from enum value: MEDIUM = 1;\n   */\n  VideoQuality[VideoQuality[\"MEDIUM\"] = 1] = \"MEDIUM\";\n  /**\n   * @generated from enum value: HIGH = 2;\n   */\n  VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\n  /**\n   * @generated from enum value: OFF = 3;\n   */\n  VideoQuality[VideoQuality[\"OFF\"] = 3] = \"OFF\";\n})(VideoQuality || (VideoQuality = {}));\n// Retrieve enum metadata with: proto3.getEnumType(VideoQuality)\nproto3.util.setEnumType(VideoQuality, \"livekit.VideoQuality\", [{\n  no: 0,\n  name: \"LOW\"\n}, {\n  no: 1,\n  name: \"MEDIUM\"\n}, {\n  no: 2,\n  name: \"HIGH\"\n}, {\n  no: 3,\n  name: \"OFF\"\n}]);\n/**\n * @generated from enum livekit.ConnectionQuality\n */\nvar ConnectionQuality$1;\n(function (ConnectionQuality) {\n  /**\n   * @generated from enum value: POOR = 0;\n   */\n  ConnectionQuality[ConnectionQuality[\"POOR\"] = 0] = \"POOR\";\n  /**\n   * @generated from enum value: GOOD = 1;\n   */\n  ConnectionQuality[ConnectionQuality[\"GOOD\"] = 1] = \"GOOD\";\n  /**\n   * @generated from enum value: EXCELLENT = 2;\n   */\n  ConnectionQuality[ConnectionQuality[\"EXCELLENT\"] = 2] = \"EXCELLENT\";\n})(ConnectionQuality$1 || (ConnectionQuality$1 = {}));\n// Retrieve enum metadata with: proto3.getEnumType(ConnectionQuality)\nproto3.util.setEnumType(ConnectionQuality$1, \"livekit.ConnectionQuality\", [{\n  no: 0,\n  name: \"POOR\"\n}, {\n  no: 1,\n  name: \"GOOD\"\n}, {\n  no: 2,\n  name: \"EXCELLENT\"\n}]);\n/**\n * @generated from enum livekit.ClientConfigSetting\n */\nvar ClientConfigSetting;\n(function (ClientConfigSetting) {\n  /**\n   * @generated from enum value: UNSET = 0;\n   */\n  ClientConfigSetting[ClientConfigSetting[\"UNSET\"] = 0] = \"UNSET\";\n  /**\n   * @generated from enum value: DISABLED = 1;\n   */\n  ClientConfigSetting[ClientConfigSetting[\"DISABLED\"] = 1] = \"DISABLED\";\n  /**\n   * @generated from enum value: ENABLED = 2;\n   */\n  ClientConfigSetting[ClientConfigSetting[\"ENABLED\"] = 2] = \"ENABLED\";\n})(ClientConfigSetting || (ClientConfigSetting = {}));\n// Retrieve enum metadata with: proto3.getEnumType(ClientConfigSetting)\nproto3.util.setEnumType(ClientConfigSetting, \"livekit.ClientConfigSetting\", [{\n  no: 0,\n  name: \"UNSET\"\n}, {\n  no: 1,\n  name: \"DISABLED\"\n}, {\n  no: 2,\n  name: \"ENABLED\"\n}]);\n/**\n * @generated from enum livekit.DisconnectReason\n */\nvar DisconnectReason;\n(function (DisconnectReason) {\n  /**\n   * @generated from enum value: UNKNOWN_REASON = 0;\n   */\n  DisconnectReason[DisconnectReason[\"UNKNOWN_REASON\"] = 0] = \"UNKNOWN_REASON\";\n  /**\n   * @generated from enum value: CLIENT_INITIATED = 1;\n   */\n  DisconnectReason[DisconnectReason[\"CLIENT_INITIATED\"] = 1] = \"CLIENT_INITIATED\";\n  /**\n   * @generated from enum value: DUPLICATE_IDENTITY = 2;\n   */\n  DisconnectReason[DisconnectReason[\"DUPLICATE_IDENTITY\"] = 2] = \"DUPLICATE_IDENTITY\";\n  /**\n   * @generated from enum value: SERVER_SHUTDOWN = 3;\n   */\n  DisconnectReason[DisconnectReason[\"SERVER_SHUTDOWN\"] = 3] = \"SERVER_SHUTDOWN\";\n  /**\n   * @generated from enum value: PARTICIPANT_REMOVED = 4;\n   */\n  DisconnectReason[DisconnectReason[\"PARTICIPANT_REMOVED\"] = 4] = \"PARTICIPANT_REMOVED\";\n  /**\n   * @generated from enum value: ROOM_DELETED = 5;\n   */\n  DisconnectReason[DisconnectReason[\"ROOM_DELETED\"] = 5] = \"ROOM_DELETED\";\n  /**\n   * @generated from enum value: STATE_MISMATCH = 6;\n   */\n  DisconnectReason[DisconnectReason[\"STATE_MISMATCH\"] = 6] = \"STATE_MISMATCH\";\n  /**\n   * @generated from enum value: JOIN_FAILURE = 7;\n   */\n  DisconnectReason[DisconnectReason[\"JOIN_FAILURE\"] = 7] = \"JOIN_FAILURE\";\n})(DisconnectReason || (DisconnectReason = {}));\n// Retrieve enum metadata with: proto3.getEnumType(DisconnectReason)\nproto3.util.setEnumType(DisconnectReason, \"livekit.DisconnectReason\", [{\n  no: 0,\n  name: \"UNKNOWN_REASON\"\n}, {\n  no: 1,\n  name: \"CLIENT_INITIATED\"\n}, {\n  no: 2,\n  name: \"DUPLICATE_IDENTITY\"\n}, {\n  no: 3,\n  name: \"SERVER_SHUTDOWN\"\n}, {\n  no: 4,\n  name: \"PARTICIPANT_REMOVED\"\n}, {\n  no: 5,\n  name: \"ROOM_DELETED\"\n}, {\n  no: 6,\n  name: \"STATE_MISMATCH\"\n}, {\n  no: 7,\n  name: \"JOIN_FAILURE\"\n}]);\n/**\n * @generated from enum livekit.ReconnectReason\n */\nvar ReconnectReason;\n(function (ReconnectReason) {\n  /**\n   * @generated from enum value: RR_UNKNOWN = 0;\n   */\n  ReconnectReason[ReconnectReason[\"RR_UNKNOWN\"] = 0] = \"RR_UNKNOWN\";\n  /**\n   * @generated from enum value: RR_SIGNAL_DISCONNECTED = 1;\n   */\n  ReconnectReason[ReconnectReason[\"RR_SIGNAL_DISCONNECTED\"] = 1] = \"RR_SIGNAL_DISCONNECTED\";\n  /**\n   * @generated from enum value: RR_PUBLISHER_FAILED = 2;\n   */\n  ReconnectReason[ReconnectReason[\"RR_PUBLISHER_FAILED\"] = 2] = \"RR_PUBLISHER_FAILED\";\n  /**\n   * @generated from enum value: RR_SUBSCRIBER_FAILED = 3;\n   */\n  ReconnectReason[ReconnectReason[\"RR_SUBSCRIBER_FAILED\"] = 3] = \"RR_SUBSCRIBER_FAILED\";\n  /**\n   * @generated from enum value: RR_SWITCH_CANDIDATE = 4;\n   */\n  ReconnectReason[ReconnectReason[\"RR_SWITCH_CANDIDATE\"] = 4] = \"RR_SWITCH_CANDIDATE\";\n})(ReconnectReason || (ReconnectReason = {}));\n// Retrieve enum metadata with: proto3.getEnumType(ReconnectReason)\nproto3.util.setEnumType(ReconnectReason, \"livekit.ReconnectReason\", [{\n  no: 0,\n  name: \"RR_UNKNOWN\"\n}, {\n  no: 1,\n  name: \"RR_SIGNAL_DISCONNECTED\"\n}, {\n  no: 2,\n  name: \"RR_PUBLISHER_FAILED\"\n}, {\n  no: 3,\n  name: \"RR_SUBSCRIBER_FAILED\"\n}, {\n  no: 4,\n  name: \"RR_SWITCH_CANDIDATE\"\n}]);\n/**\n * @generated from enum livekit.SubscriptionError\n */\nvar SubscriptionError;\n(function (SubscriptionError) {\n  /**\n   * @generated from enum value: SE_UNKNOWN = 0;\n   */\n  SubscriptionError[SubscriptionError[\"SE_UNKNOWN\"] = 0] = \"SE_UNKNOWN\";\n  /**\n   * @generated from enum value: SE_CODEC_UNSUPPORTED = 1;\n   */\n  SubscriptionError[SubscriptionError[\"SE_CODEC_UNSUPPORTED\"] = 1] = \"SE_CODEC_UNSUPPORTED\";\n  /**\n   * @generated from enum value: SE_TRACK_NOTFOUND = 2;\n   */\n  SubscriptionError[SubscriptionError[\"SE_TRACK_NOTFOUND\"] = 2] = \"SE_TRACK_NOTFOUND\";\n})(SubscriptionError || (SubscriptionError = {}));\n// Retrieve enum metadata with: proto3.getEnumType(SubscriptionError)\nproto3.util.setEnumType(SubscriptionError, \"livekit.SubscriptionError\", [{\n  no: 0,\n  name: \"SE_UNKNOWN\"\n}, {\n  no: 1,\n  name: \"SE_CODEC_UNSUPPORTED\"\n}, {\n  no: 2,\n  name: \"SE_TRACK_NOTFOUND\"\n}]);\n/**\n * @generated from message livekit.Room\n */\nlet Room$1 = class Room extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string sid = 1;\n     */\n    this.sid = \"\";\n    /**\n     * @generated from field: string name = 2;\n     */\n    this.name = \"\";\n    /**\n     * @generated from field: uint32 empty_timeout = 3;\n     */\n    this.emptyTimeout = 0;\n    /**\n     * @generated from field: uint32 max_participants = 4;\n     */\n    this.maxParticipants = 0;\n    /**\n     * @generated from field: int64 creation_time = 5;\n     */\n    this.creationTime = protoInt64.zero;\n    /**\n     * @generated from field: string turn_password = 6;\n     */\n    this.turnPassword = \"\";\n    /**\n     * @generated from field: repeated livekit.Codec enabled_codecs = 7;\n     */\n    this.enabledCodecs = [];\n    /**\n     * @generated from field: string metadata = 8;\n     */\n    this.metadata = \"\";\n    /**\n     * @generated from field: uint32 num_participants = 9;\n     */\n    this.numParticipants = 0;\n    /**\n     * @generated from field: uint32 num_publishers = 11;\n     */\n    this.numPublishers = 0;\n    /**\n     * @generated from field: bool active_recording = 10;\n     */\n    this.activeRecording = false;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new Room().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new Room().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new Room().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(Room, a, b);\n  }\n};\nRoom$1.runtime = proto3;\nRoom$1.typeName = \"livekit.Room\";\nRoom$1.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"name\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 3,\n  name: \"empty_timeout\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 4,\n  name: \"max_participants\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 5,\n  name: \"creation_time\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */\n}, {\n  no: 6,\n  name: \"turn_password\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 7,\n  name: \"enabled_codecs\",\n  kind: \"message\",\n  T: Codec,\n  repeated: true\n}, {\n  no: 8,\n  name: \"metadata\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 9,\n  name: \"num_participants\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 11,\n  name: \"num_publishers\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 10,\n  name: \"active_recording\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}]);\n/**\n * @generated from message livekit.Codec\n */\nclass Codec extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string mime = 1;\n     */\n    this.mime = \"\";\n    /**\n     * @generated from field: string fmtp_line = 2;\n     */\n    this.fmtpLine = \"\";\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new Codec().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new Codec().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new Codec().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(Codec, a, b);\n  }\n}\nCodec.runtime = proto3;\nCodec.typeName = \"livekit.Codec\";\nCodec.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"mime\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"fmtp_line\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}]);\n/**\n * @generated from message livekit.PlayoutDelay\n */\nclass PlayoutDelay extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: bool enabled = 1;\n     */\n    this.enabled = false;\n    /**\n     * @generated from field: uint32 min = 2;\n     */\n    this.min = 0;\n    /**\n     * @generated from field: uint32 max = 3;\n     */\n    this.max = 0;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new PlayoutDelay().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new PlayoutDelay().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new PlayoutDelay().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(PlayoutDelay, a, b);\n  }\n}\nPlayoutDelay.runtime = proto3;\nPlayoutDelay.typeName = \"livekit.PlayoutDelay\";\nPlayoutDelay.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"enabled\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 2,\n  name: \"min\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 3,\n  name: \"max\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}]);\n/**\n * @generated from message livekit.ParticipantPermission\n */\nclass ParticipantPermission extends Message {\n  constructor(data) {\n    super();\n    /**\n     * allow participant to subscribe to other tracks in the room\n     *\n     * @generated from field: bool can_subscribe = 1;\n     */\n    this.canSubscribe = false;\n    /**\n     * allow participant to publish new tracks to room\n     *\n     * @generated from field: bool can_publish = 2;\n     */\n    this.canPublish = false;\n    /**\n     * allow participant to publish data\n     *\n     * @generated from field: bool can_publish_data = 3;\n     */\n    this.canPublishData = false;\n    /**\n     * sources that are allowed to be published\n     *\n     * @generated from field: repeated livekit.TrackSource can_publish_sources = 9;\n     */\n    this.canPublishSources = [];\n    /**\n     * indicates that it's hidden to others\n     *\n     * @generated from field: bool hidden = 7;\n     */\n    this.hidden = false;\n    /**\n     * indicates it's a recorder instance\n     *\n     * @generated from field: bool recorder = 8;\n     */\n    this.recorder = false;\n    /**\n     * indicates that participant can update own metadata\n     *\n     * @generated from field: bool can_update_metadata = 10;\n     */\n    this.canUpdateMetadata = false;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new ParticipantPermission().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new ParticipantPermission().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new ParticipantPermission().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(ParticipantPermission, a, b);\n  }\n}\nParticipantPermission.runtime = proto3;\nParticipantPermission.typeName = \"livekit.ParticipantPermission\";\nParticipantPermission.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"can_subscribe\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 2,\n  name: \"can_publish\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 3,\n  name: \"can_publish_data\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 9,\n  name: \"can_publish_sources\",\n  kind: \"enum\",\n  T: proto3.getEnumType(TrackSource),\n  repeated: true\n}, {\n  no: 7,\n  name: \"hidden\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 8,\n  name: \"recorder\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 10,\n  name: \"can_update_metadata\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}]);\n/**\n * @generated from message livekit.ParticipantInfo\n */\nclass ParticipantInfo extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string sid = 1;\n     */\n    this.sid = \"\";\n    /**\n     * @generated from field: string identity = 2;\n     */\n    this.identity = \"\";\n    /**\n     * @generated from field: livekit.ParticipantInfo.State state = 3;\n     */\n    this.state = ParticipantInfo_State.JOINING;\n    /**\n     * @generated from field: repeated livekit.TrackInfo tracks = 4;\n     */\n    this.tracks = [];\n    /**\n     * @generated from field: string metadata = 5;\n     */\n    this.metadata = \"\";\n    /**\n     * timestamp when participant joined room, in seconds\n     *\n     * @generated from field: int64 joined_at = 6;\n     */\n    this.joinedAt = protoInt64.zero;\n    /**\n     * @generated from field: string name = 9;\n     */\n    this.name = \"\";\n    /**\n     * @generated from field: uint32 version = 10;\n     */\n    this.version = 0;\n    /**\n     * @generated from field: string region = 12;\n     */\n    this.region = \"\";\n    /**\n     * indicates the participant has an active publisher connection\n     * and can publish to the server\n     *\n     * @generated from field: bool is_publisher = 13;\n     */\n    this.isPublisher = false;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new ParticipantInfo().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new ParticipantInfo().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new ParticipantInfo().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(ParticipantInfo, a, b);\n  }\n}\nParticipantInfo.runtime = proto3;\nParticipantInfo.typeName = \"livekit.ParticipantInfo\";\nParticipantInfo.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"identity\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 3,\n  name: \"state\",\n  kind: \"enum\",\n  T: proto3.getEnumType(ParticipantInfo_State)\n}, {\n  no: 4,\n  name: \"tracks\",\n  kind: \"message\",\n  T: TrackInfo,\n  repeated: true\n}, {\n  no: 5,\n  name: \"metadata\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 6,\n  name: \"joined_at\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */\n}, {\n  no: 9,\n  name: \"name\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 10,\n  name: \"version\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 11,\n  name: \"permission\",\n  kind: \"message\",\n  T: ParticipantPermission\n}, {\n  no: 12,\n  name: \"region\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 13,\n  name: \"is_publisher\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}]);\n/**\n * @generated from enum livekit.ParticipantInfo.State\n */\nvar ParticipantInfo_State;\n(function (ParticipantInfo_State) {\n  /**\n   * websocket' connected, but not offered yet\n   *\n   * @generated from enum value: JOINING = 0;\n   */\n  ParticipantInfo_State[ParticipantInfo_State[\"JOINING\"] = 0] = \"JOINING\";\n  /**\n   * server received client offer\n   *\n   * @generated from enum value: JOINED = 1;\n   */\n  ParticipantInfo_State[ParticipantInfo_State[\"JOINED\"] = 1] = \"JOINED\";\n  /**\n   * ICE connectivity established\n   *\n   * @generated from enum value: ACTIVE = 2;\n   */\n  ParticipantInfo_State[ParticipantInfo_State[\"ACTIVE\"] = 2] = \"ACTIVE\";\n  /**\n   * WS disconnected\n   *\n   * @generated from enum value: DISCONNECTED = 3;\n   */\n  ParticipantInfo_State[ParticipantInfo_State[\"DISCONNECTED\"] = 3] = \"DISCONNECTED\";\n})(ParticipantInfo_State || (ParticipantInfo_State = {}));\n// Retrieve enum metadata with: proto3.getEnumType(ParticipantInfo_State)\nproto3.util.setEnumType(ParticipantInfo_State, \"livekit.ParticipantInfo.State\", [{\n  no: 0,\n  name: \"JOINING\"\n}, {\n  no: 1,\n  name: \"JOINED\"\n}, {\n  no: 2,\n  name: \"ACTIVE\"\n}, {\n  no: 3,\n  name: \"DISCONNECTED\"\n}]);\n/**\n * @generated from message livekit.Encryption\n */\nclass Encryption extends Message {\n  constructor(data) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new Encryption().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new Encryption().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new Encryption().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(Encryption, a, b);\n  }\n}\nEncryption.runtime = proto3;\nEncryption.typeName = \"livekit.Encryption\";\nEncryption.fields = proto3.util.newFieldList(() => []);\n/**\n * @generated from enum livekit.Encryption.Type\n */\nvar Encryption_Type;\n(function (Encryption_Type) {\n  /**\n   * @generated from enum value: NONE = 0;\n   */\n  Encryption_Type[Encryption_Type[\"NONE\"] = 0] = \"NONE\";\n  /**\n   * @generated from enum value: GCM = 1;\n   */\n  Encryption_Type[Encryption_Type[\"GCM\"] = 1] = \"GCM\";\n  /**\n   * @generated from enum value: CUSTOM = 2;\n   */\n  Encryption_Type[Encryption_Type[\"CUSTOM\"] = 2] = \"CUSTOM\";\n})(Encryption_Type || (Encryption_Type = {}));\n// Retrieve enum metadata with: proto3.getEnumType(Encryption_Type)\nproto3.util.setEnumType(Encryption_Type, \"livekit.Encryption.Type\", [{\n  no: 0,\n  name: \"NONE\"\n}, {\n  no: 1,\n  name: \"GCM\"\n}, {\n  no: 2,\n  name: \"CUSTOM\"\n}]);\n/**\n * @generated from message livekit.SimulcastCodecInfo\n */\nclass SimulcastCodecInfo extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string mime_type = 1;\n     */\n    this.mimeType = \"\";\n    /**\n     * @generated from field: string mid = 2;\n     */\n    this.mid = \"\";\n    /**\n     * @generated from field: string cid = 3;\n     */\n    this.cid = \"\";\n    /**\n     * @generated from field: repeated livekit.VideoLayer layers = 4;\n     */\n    this.layers = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SimulcastCodecInfo().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SimulcastCodecInfo().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SimulcastCodecInfo().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SimulcastCodecInfo, a, b);\n  }\n}\nSimulcastCodecInfo.runtime = proto3;\nSimulcastCodecInfo.typeName = \"livekit.SimulcastCodecInfo\";\nSimulcastCodecInfo.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"mime_type\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"mid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 3,\n  name: \"cid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 4,\n  name: \"layers\",\n  kind: \"message\",\n  T: VideoLayer,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.TrackInfo\n */\nclass TrackInfo extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string sid = 1;\n     */\n    this.sid = \"\";\n    /**\n     * @generated from field: livekit.TrackType type = 2;\n     */\n    this.type = TrackType.AUDIO;\n    /**\n     * @generated from field: string name = 3;\n     */\n    this.name = \"\";\n    /**\n     * @generated from field: bool muted = 4;\n     */\n    this.muted = false;\n    /**\n     * original width of video (unset for audio)\n     * clients may receive a lower resolution version with simulcast\n     *\n     * @generated from field: uint32 width = 5;\n     */\n    this.width = 0;\n    /**\n     * original height of video (unset for audio)\n     *\n     * @generated from field: uint32 height = 6;\n     */\n    this.height = 0;\n    /**\n     * true if track is simulcasted\n     *\n     * @generated from field: bool simulcast = 7;\n     */\n    this.simulcast = false;\n    /**\n     * true if DTX (Discontinuous Transmission) is disabled for audio\n     *\n     * @generated from field: bool disable_dtx = 8;\n     */\n    this.disableDtx = false;\n    /**\n     * source of media\n     *\n     * @generated from field: livekit.TrackSource source = 9;\n     */\n    this.source = TrackSource.UNKNOWN;\n    /**\n     * @generated from field: repeated livekit.VideoLayer layers = 10;\n     */\n    this.layers = [];\n    /**\n     * mime type of codec\n     *\n     * @generated from field: string mime_type = 11;\n     */\n    this.mimeType = \"\";\n    /**\n     * @generated from field: string mid = 12;\n     */\n    this.mid = \"\";\n    /**\n     * @generated from field: repeated livekit.SimulcastCodecInfo codecs = 13;\n     */\n    this.codecs = [];\n    /**\n     * @generated from field: bool stereo = 14;\n     */\n    this.stereo = false;\n    /**\n     * true if RED (Redundant Encoding) is disabled for audio\n     *\n     * @generated from field: bool disable_red = 15;\n     */\n    this.disableRed = false;\n    /**\n     * @generated from field: livekit.Encryption.Type encryption = 16;\n     */\n    this.encryption = Encryption_Type.NONE;\n    /**\n     * @generated from field: string stream = 17;\n     */\n    this.stream = \"\";\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new TrackInfo().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new TrackInfo().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new TrackInfo().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(TrackInfo, a, b);\n  }\n}\nTrackInfo.runtime = proto3;\nTrackInfo.typeName = \"livekit.TrackInfo\";\nTrackInfo.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"type\",\n  kind: \"enum\",\n  T: proto3.getEnumType(TrackType)\n}, {\n  no: 3,\n  name: \"name\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 4,\n  name: \"muted\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 5,\n  name: \"width\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 6,\n  name: \"height\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 7,\n  name: \"simulcast\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 8,\n  name: \"disable_dtx\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 9,\n  name: \"source\",\n  kind: \"enum\",\n  T: proto3.getEnumType(TrackSource)\n}, {\n  no: 10,\n  name: \"layers\",\n  kind: \"message\",\n  T: VideoLayer,\n  repeated: true\n}, {\n  no: 11,\n  name: \"mime_type\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 12,\n  name: \"mid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 13,\n  name: \"codecs\",\n  kind: \"message\",\n  T: SimulcastCodecInfo,\n  repeated: true\n}, {\n  no: 14,\n  name: \"stereo\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 15,\n  name: \"disable_red\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 16,\n  name: \"encryption\",\n  kind: \"enum\",\n  T: proto3.getEnumType(Encryption_Type)\n}, {\n  no: 17,\n  name: \"stream\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}]);\n/**\n * provide information about available spatial layers\n *\n * @generated from message livekit.VideoLayer\n */\nclass VideoLayer extends Message {\n  constructor(data) {\n    super();\n    /**\n     * for tracks with a single layer, this should be HIGH\n     *\n     * @generated from field: livekit.VideoQuality quality = 1;\n     */\n    this.quality = VideoQuality.LOW;\n    /**\n     * @generated from field: uint32 width = 2;\n     */\n    this.width = 0;\n    /**\n     * @generated from field: uint32 height = 3;\n     */\n    this.height = 0;\n    /**\n     * target bitrate in bit per second (bps), server will measure actual\n     *\n     * @generated from field: uint32 bitrate = 4;\n     */\n    this.bitrate = 0;\n    /**\n     * @generated from field: uint32 ssrc = 5;\n     */\n    this.ssrc = 0;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new VideoLayer().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new VideoLayer().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new VideoLayer().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(VideoLayer, a, b);\n  }\n}\nVideoLayer.runtime = proto3;\nVideoLayer.typeName = \"livekit.VideoLayer\";\nVideoLayer.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"quality\",\n  kind: \"enum\",\n  T: proto3.getEnumType(VideoQuality)\n}, {\n  no: 2,\n  name: \"width\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 3,\n  name: \"height\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 4,\n  name: \"bitrate\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 5,\n  name: \"ssrc\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}]);\n/**\n * new DataPacket API\n *\n * @generated from message livekit.DataPacket\n */\nclass DataPacket extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: livekit.DataPacket.Kind kind = 1;\n     */\n    this.kind = DataPacket_Kind.RELIABLE;\n    /**\n     * @generated from oneof livekit.DataPacket.value\n     */\n    this.value = {\n      case: undefined\n    };\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new DataPacket().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new DataPacket().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new DataPacket().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(DataPacket, a, b);\n  }\n}\nDataPacket.runtime = proto3;\nDataPacket.typeName = \"livekit.DataPacket\";\nDataPacket.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"kind\",\n  kind: \"enum\",\n  T: proto3.getEnumType(DataPacket_Kind)\n}, {\n  no: 2,\n  name: \"user\",\n  kind: \"message\",\n  T: UserPacket,\n  oneof: \"value\"\n}, {\n  no: 3,\n  name: \"speaker\",\n  kind: \"message\",\n  T: ActiveSpeakerUpdate,\n  oneof: \"value\"\n}]);\n/**\n * @generated from enum livekit.DataPacket.Kind\n */\nvar DataPacket_Kind;\n(function (DataPacket_Kind) {\n  /**\n   * @generated from enum value: RELIABLE = 0;\n   */\n  DataPacket_Kind[DataPacket_Kind[\"RELIABLE\"] = 0] = \"RELIABLE\";\n  /**\n   * @generated from enum value: LOSSY = 1;\n   */\n  DataPacket_Kind[DataPacket_Kind[\"LOSSY\"] = 1] = \"LOSSY\";\n})(DataPacket_Kind || (DataPacket_Kind = {}));\n// Retrieve enum metadata with: proto3.getEnumType(DataPacket_Kind)\nproto3.util.setEnumType(DataPacket_Kind, \"livekit.DataPacket.Kind\", [{\n  no: 0,\n  name: \"RELIABLE\"\n}, {\n  no: 1,\n  name: \"LOSSY\"\n}]);\n/**\n * @generated from message livekit.ActiveSpeakerUpdate\n */\nclass ActiveSpeakerUpdate extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: repeated livekit.SpeakerInfo speakers = 1;\n     */\n    this.speakers = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new ActiveSpeakerUpdate().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new ActiveSpeakerUpdate().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new ActiveSpeakerUpdate().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(ActiveSpeakerUpdate, a, b);\n  }\n}\nActiveSpeakerUpdate.runtime = proto3;\nActiveSpeakerUpdate.typeName = \"livekit.ActiveSpeakerUpdate\";\nActiveSpeakerUpdate.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"speakers\",\n  kind: \"message\",\n  T: SpeakerInfo,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.SpeakerInfo\n */\nclass SpeakerInfo extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string sid = 1;\n     */\n    this.sid = \"\";\n    /**\n     * audio level, 0-1.0, 1 is loudest\n     *\n     * @generated from field: float level = 2;\n     */\n    this.level = 0;\n    /**\n     * true if speaker is currently active\n     *\n     * @generated from field: bool active = 3;\n     */\n    this.active = false;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SpeakerInfo().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SpeakerInfo().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SpeakerInfo().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SpeakerInfo, a, b);\n  }\n}\nSpeakerInfo.runtime = proto3;\nSpeakerInfo.typeName = \"livekit.SpeakerInfo\";\nSpeakerInfo.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"level\",\n  kind: \"scalar\",\n  T: 2 /* ScalarType.FLOAT */\n}, {\n  no: 3,\n  name: \"active\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}]);\n/**\n * @generated from message livekit.UserPacket\n */\nclass UserPacket extends Message {\n  constructor(data) {\n    super();\n    /**\n     * participant ID of user that sent the message\n     *\n     * @generated from field: string participant_sid = 1;\n     */\n    this.participantSid = \"\";\n    /**\n     * @generated from field: string participant_identity = 5;\n     */\n    this.participantIdentity = \"\";\n    /**\n     * user defined payload\n     *\n     * @generated from field: bytes payload = 2;\n     */\n    this.payload = new Uint8Array(0);\n    /**\n     * the ID of the participants who will receive the message (sent to all by default)\n     *\n     * @generated from field: repeated string destination_sids = 3;\n     */\n    this.destinationSids = [];\n    /**\n     * identities of participants who will receive the message (sent to all by default)\n     *\n     * @generated from field: repeated string destination_identities = 6;\n     */\n    this.destinationIdentities = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new UserPacket().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new UserPacket().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new UserPacket().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(UserPacket, a, b);\n  }\n}\nUserPacket.runtime = proto3;\nUserPacket.typeName = \"livekit.UserPacket\";\nUserPacket.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"participant_sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 5,\n  name: \"participant_identity\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"payload\",\n  kind: \"scalar\",\n  T: 12 /* ScalarType.BYTES */\n}, {\n  no: 3,\n  name: \"destination_sids\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */,\n  repeated: true\n}, {\n  no: 6,\n  name: \"destination_identities\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */,\n  repeated: true\n}, {\n  no: 4,\n  name: \"topic\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */,\n  opt: true\n}]);\n/**\n * @generated from message livekit.ParticipantTracks\n */\nclass ParticipantTracks extends Message {\n  constructor(data) {\n    super();\n    /**\n     * participant ID of participant to whom the tracks belong\n     *\n     * @generated from field: string participant_sid = 1;\n     */\n    this.participantSid = \"\";\n    /**\n     * @generated from field: repeated string track_sids = 2;\n     */\n    this.trackSids = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new ParticipantTracks().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new ParticipantTracks().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new ParticipantTracks().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(ParticipantTracks, a, b);\n  }\n}\nParticipantTracks.runtime = proto3;\nParticipantTracks.typeName = \"livekit.ParticipantTracks\";\nParticipantTracks.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"participant_sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"track_sids\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */,\n  repeated: true\n}]);\n/**\n * details about the server\n *\n * @generated from message livekit.ServerInfo\n */\nclass ServerInfo extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: livekit.ServerInfo.Edition edition = 1;\n     */\n    this.edition = ServerInfo_Edition.Standard;\n    /**\n     * @generated from field: string version = 2;\n     */\n    this.version = \"\";\n    /**\n     * @generated from field: int32 protocol = 3;\n     */\n    this.protocol = 0;\n    /**\n     * @generated from field: string region = 4;\n     */\n    this.region = \"\";\n    /**\n     * @generated from field: string node_id = 5;\n     */\n    this.nodeId = \"\";\n    /**\n     * additional debugging information. sent only if server is in development mode\n     *\n     * @generated from field: string debug_info = 6;\n     */\n    this.debugInfo = \"\";\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new ServerInfo().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new ServerInfo().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new ServerInfo().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(ServerInfo, a, b);\n  }\n}\nServerInfo.runtime = proto3;\nServerInfo.typeName = \"livekit.ServerInfo\";\nServerInfo.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"edition\",\n  kind: \"enum\",\n  T: proto3.getEnumType(ServerInfo_Edition)\n}, {\n  no: 2,\n  name: \"version\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 3,\n  name: \"protocol\",\n  kind: \"scalar\",\n  T: 5 /* ScalarType.INT32 */\n}, {\n  no: 4,\n  name: \"region\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 5,\n  name: \"node_id\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 6,\n  name: \"debug_info\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}]);\n/**\n * @generated from enum livekit.ServerInfo.Edition\n */\nvar ServerInfo_Edition;\n(function (ServerInfo_Edition) {\n  /**\n   * @generated from enum value: Standard = 0;\n   */\n  ServerInfo_Edition[ServerInfo_Edition[\"Standard\"] = 0] = \"Standard\";\n  /**\n   * @generated from enum value: Cloud = 1;\n   */\n  ServerInfo_Edition[ServerInfo_Edition[\"Cloud\"] = 1] = \"Cloud\";\n})(ServerInfo_Edition || (ServerInfo_Edition = {}));\n// Retrieve enum metadata with: proto3.getEnumType(ServerInfo_Edition)\nproto3.util.setEnumType(ServerInfo_Edition, \"livekit.ServerInfo.Edition\", [{\n  no: 0,\n  name: \"Standard\"\n}, {\n  no: 1,\n  name: \"Cloud\"\n}]);\n/**\n * details about the client\n *\n * @generated from message livekit.ClientInfo\n */\nclass ClientInfo extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: livekit.ClientInfo.SDK sdk = 1;\n     */\n    this.sdk = ClientInfo_SDK.UNKNOWN;\n    /**\n     * @generated from field: string version = 2;\n     */\n    this.version = \"\";\n    /**\n     * @generated from field: int32 protocol = 3;\n     */\n    this.protocol = 0;\n    /**\n     * @generated from field: string os = 4;\n     */\n    this.os = \"\";\n    /**\n     * @generated from field: string os_version = 5;\n     */\n    this.osVersion = \"\";\n    /**\n     * @generated from field: string device_model = 6;\n     */\n    this.deviceModel = \"\";\n    /**\n     * @generated from field: string browser = 7;\n     */\n    this.browser = \"\";\n    /**\n     * @generated from field: string browser_version = 8;\n     */\n    this.browserVersion = \"\";\n    /**\n     * @generated from field: string address = 9;\n     */\n    this.address = \"\";\n    /**\n     * wifi, wired, cellular, vpn, empty if not known\n     *\n     * @generated from field: string network = 10;\n     */\n    this.network = \"\";\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new ClientInfo().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new ClientInfo().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new ClientInfo().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(ClientInfo, a, b);\n  }\n}\nClientInfo.runtime = proto3;\nClientInfo.typeName = \"livekit.ClientInfo\";\nClientInfo.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"sdk\",\n  kind: \"enum\",\n  T: proto3.getEnumType(ClientInfo_SDK)\n}, {\n  no: 2,\n  name: \"version\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 3,\n  name: \"protocol\",\n  kind: \"scalar\",\n  T: 5 /* ScalarType.INT32 */\n}, {\n  no: 4,\n  name: \"os\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 5,\n  name: \"os_version\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 6,\n  name: \"device_model\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 7,\n  name: \"browser\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 8,\n  name: \"browser_version\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 9,\n  name: \"address\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 10,\n  name: \"network\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}]);\n/**\n * @generated from enum livekit.ClientInfo.SDK\n */\nvar ClientInfo_SDK;\n(function (ClientInfo_SDK) {\n  /**\n   * @generated from enum value: UNKNOWN = 0;\n   */\n  ClientInfo_SDK[ClientInfo_SDK[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  /**\n   * @generated from enum value: JS = 1;\n   */\n  ClientInfo_SDK[ClientInfo_SDK[\"JS\"] = 1] = \"JS\";\n  /**\n   * @generated from enum value: SWIFT = 2;\n   */\n  ClientInfo_SDK[ClientInfo_SDK[\"SWIFT\"] = 2] = \"SWIFT\";\n  /**\n   * @generated from enum value: ANDROID = 3;\n   */\n  ClientInfo_SDK[ClientInfo_SDK[\"ANDROID\"] = 3] = \"ANDROID\";\n  /**\n   * @generated from enum value: FLUTTER = 4;\n   */\n  ClientInfo_SDK[ClientInfo_SDK[\"FLUTTER\"] = 4] = \"FLUTTER\";\n  /**\n   * @generated from enum value: GO = 5;\n   */\n  ClientInfo_SDK[ClientInfo_SDK[\"GO\"] = 5] = \"GO\";\n  /**\n   * @generated from enum value: UNITY = 6;\n   */\n  ClientInfo_SDK[ClientInfo_SDK[\"UNITY\"] = 6] = \"UNITY\";\n  /**\n   * @generated from enum value: REACT_NATIVE = 7;\n   */\n  ClientInfo_SDK[ClientInfo_SDK[\"REACT_NATIVE\"] = 7] = \"REACT_NATIVE\";\n  /**\n   * @generated from enum value: RUST = 8;\n   */\n  ClientInfo_SDK[ClientInfo_SDK[\"RUST\"] = 8] = \"RUST\";\n  /**\n   * @generated from enum value: PYTHON = 9;\n   */\n  ClientInfo_SDK[ClientInfo_SDK[\"PYTHON\"] = 9] = \"PYTHON\";\n  /**\n   * @generated from enum value: CPP = 10;\n   */\n  ClientInfo_SDK[ClientInfo_SDK[\"CPP\"] = 10] = \"CPP\";\n})(ClientInfo_SDK || (ClientInfo_SDK = {}));\n// Retrieve enum metadata with: proto3.getEnumType(ClientInfo_SDK)\nproto3.util.setEnumType(ClientInfo_SDK, \"livekit.ClientInfo.SDK\", [{\n  no: 0,\n  name: \"UNKNOWN\"\n}, {\n  no: 1,\n  name: \"JS\"\n}, {\n  no: 2,\n  name: \"SWIFT\"\n}, {\n  no: 3,\n  name: \"ANDROID\"\n}, {\n  no: 4,\n  name: \"FLUTTER\"\n}, {\n  no: 5,\n  name: \"GO\"\n}, {\n  no: 6,\n  name: \"UNITY\"\n}, {\n  no: 7,\n  name: \"REACT_NATIVE\"\n}, {\n  no: 8,\n  name: \"RUST\"\n}, {\n  no: 9,\n  name: \"PYTHON\"\n}, {\n  no: 10,\n  name: \"CPP\"\n}]);\n/**\n * server provided client configuration\n *\n * @generated from message livekit.ClientConfiguration\n */\nclass ClientConfiguration extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: livekit.ClientConfigSetting resume_connection = 3;\n     */\n    this.resumeConnection = ClientConfigSetting.UNSET;\n    /**\n     * @generated from field: livekit.ClientConfigSetting force_relay = 5;\n     */\n    this.forceRelay = ClientConfigSetting.UNSET;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new ClientConfiguration().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new ClientConfiguration().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new ClientConfiguration().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(ClientConfiguration, a, b);\n  }\n}\nClientConfiguration.runtime = proto3;\nClientConfiguration.typeName = \"livekit.ClientConfiguration\";\nClientConfiguration.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"video\",\n  kind: \"message\",\n  T: VideoConfiguration\n}, {\n  no: 2,\n  name: \"screen\",\n  kind: \"message\",\n  T: VideoConfiguration\n}, {\n  no: 3,\n  name: \"resume_connection\",\n  kind: \"enum\",\n  T: proto3.getEnumType(ClientConfigSetting)\n}, {\n  no: 4,\n  name: \"disabled_codecs\",\n  kind: \"message\",\n  T: DisabledCodecs\n}, {\n  no: 5,\n  name: \"force_relay\",\n  kind: \"enum\",\n  T: proto3.getEnumType(ClientConfigSetting)\n}]);\n/**\n * @generated from message livekit.VideoConfiguration\n */\nclass VideoConfiguration extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: livekit.ClientConfigSetting hardware_encoder = 1;\n     */\n    this.hardwareEncoder = ClientConfigSetting.UNSET;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new VideoConfiguration().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new VideoConfiguration().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new VideoConfiguration().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(VideoConfiguration, a, b);\n  }\n}\nVideoConfiguration.runtime = proto3;\nVideoConfiguration.typeName = \"livekit.VideoConfiguration\";\nVideoConfiguration.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"hardware_encoder\",\n  kind: \"enum\",\n  T: proto3.getEnumType(ClientConfigSetting)\n}]);\n/**\n * @generated from message livekit.DisabledCodecs\n */\nclass DisabledCodecs extends Message {\n  constructor(data) {\n    super();\n    /**\n     * disabled for both publish and subscribe\n     *\n     * @generated from field: repeated livekit.Codec codecs = 1;\n     */\n    this.codecs = [];\n    /**\n     * only disable for publish\n     *\n     * @generated from field: repeated livekit.Codec publish = 2;\n     */\n    this.publish = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new DisabledCodecs().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new DisabledCodecs().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new DisabledCodecs().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(DisabledCodecs, a, b);\n  }\n}\nDisabledCodecs.runtime = proto3;\nDisabledCodecs.typeName = \"livekit.DisabledCodecs\";\nDisabledCodecs.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"codecs\",\n  kind: \"message\",\n  T: Codec,\n  repeated: true\n}, {\n  no: 2,\n  name: \"publish\",\n  kind: \"message\",\n  T: Codec,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.RTPDrift\n */\nclass RTPDrift extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: double duration = 3;\n     */\n    this.duration = 0;\n    /**\n     * @generated from field: uint64 start_timestamp = 4;\n     */\n    this.startTimestamp = protoInt64.zero;\n    /**\n     * @generated from field: uint64 end_timestamp = 5;\n     */\n    this.endTimestamp = protoInt64.zero;\n    /**\n     * @generated from field: uint64 rtp_clock_ticks = 6;\n     */\n    this.rtpClockTicks = protoInt64.zero;\n    /**\n     * @generated from field: int64 drift_samples = 7;\n     */\n    this.driftSamples = protoInt64.zero;\n    /**\n     * @generated from field: double drift_ms = 8;\n     */\n    this.driftMs = 0;\n    /**\n     * @generated from field: double clock_rate = 9;\n     */\n    this.clockRate = 0;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new RTPDrift().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new RTPDrift().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new RTPDrift().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(RTPDrift, a, b);\n  }\n}\nRTPDrift.runtime = proto3;\nRTPDrift.typeName = \"livekit.RTPDrift\";\nRTPDrift.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"start_time\",\n  kind: \"message\",\n  T: Timestamp\n}, {\n  no: 2,\n  name: \"end_time\",\n  kind: \"message\",\n  T: Timestamp\n}, {\n  no: 3,\n  name: \"duration\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 4,\n  name: \"start_timestamp\",\n  kind: \"scalar\",\n  T: 4 /* ScalarType.UINT64 */\n}, {\n  no: 5,\n  name: \"end_timestamp\",\n  kind: \"scalar\",\n  T: 4 /* ScalarType.UINT64 */\n}, {\n  no: 6,\n  name: \"rtp_clock_ticks\",\n  kind: \"scalar\",\n  T: 4 /* ScalarType.UINT64 */\n}, {\n  no: 7,\n  name: \"drift_samples\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */\n}, {\n  no: 8,\n  name: \"drift_ms\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 9,\n  name: \"clock_rate\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}]);\n/**\n * @generated from message livekit.RTPStats\n */\nclass RTPStats extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: double duration = 3;\n     */\n    this.duration = 0;\n    /**\n     * @generated from field: uint32 packets = 4;\n     */\n    this.packets = 0;\n    /**\n     * @generated from field: double packet_rate = 5;\n     */\n    this.packetRate = 0;\n    /**\n     * @generated from field: uint64 bytes = 6;\n     */\n    this.bytes = protoInt64.zero;\n    /**\n     * @generated from field: uint64 header_bytes = 39;\n     */\n    this.headerBytes = protoInt64.zero;\n    /**\n     * @generated from field: double bitrate = 7;\n     */\n    this.bitrate = 0;\n    /**\n     * @generated from field: uint32 packets_lost = 8;\n     */\n    this.packetsLost = 0;\n    /**\n     * @generated from field: double packet_loss_rate = 9;\n     */\n    this.packetLossRate = 0;\n    /**\n     * @generated from field: float packet_loss_percentage = 10;\n     */\n    this.packetLossPercentage = 0;\n    /**\n     * @generated from field: uint32 packets_duplicate = 11;\n     */\n    this.packetsDuplicate = 0;\n    /**\n     * @generated from field: double packet_duplicate_rate = 12;\n     */\n    this.packetDuplicateRate = 0;\n    /**\n     * @generated from field: uint64 bytes_duplicate = 13;\n     */\n    this.bytesDuplicate = protoInt64.zero;\n    /**\n     * @generated from field: uint64 header_bytes_duplicate = 40;\n     */\n    this.headerBytesDuplicate = protoInt64.zero;\n    /**\n     * @generated from field: double bitrate_duplicate = 14;\n     */\n    this.bitrateDuplicate = 0;\n    /**\n     * @generated from field: uint32 packets_padding = 15;\n     */\n    this.packetsPadding = 0;\n    /**\n     * @generated from field: double packet_padding_rate = 16;\n     */\n    this.packetPaddingRate = 0;\n    /**\n     * @generated from field: uint64 bytes_padding = 17;\n     */\n    this.bytesPadding = protoInt64.zero;\n    /**\n     * @generated from field: uint64 header_bytes_padding = 41;\n     */\n    this.headerBytesPadding = protoInt64.zero;\n    /**\n     * @generated from field: double bitrate_padding = 18;\n     */\n    this.bitratePadding = 0;\n    /**\n     * @generated from field: uint32 packets_out_of_order = 19;\n     */\n    this.packetsOutOfOrder = 0;\n    /**\n     * @generated from field: uint32 frames = 20;\n     */\n    this.frames = 0;\n    /**\n     * @generated from field: double frame_rate = 21;\n     */\n    this.frameRate = 0;\n    /**\n     * @generated from field: double jitter_current = 22;\n     */\n    this.jitterCurrent = 0;\n    /**\n     * @generated from field: double jitter_max = 23;\n     */\n    this.jitterMax = 0;\n    /**\n     * @generated from field: map<int32, uint32> gap_histogram = 24;\n     */\n    this.gapHistogram = {};\n    /**\n     * @generated from field: uint32 nacks = 25;\n     */\n    this.nacks = 0;\n    /**\n     * @generated from field: uint32 nack_acks = 37;\n     */\n    this.nackAcks = 0;\n    /**\n     * @generated from field: uint32 nack_misses = 26;\n     */\n    this.nackMisses = 0;\n    /**\n     * @generated from field: uint32 nack_repeated = 38;\n     */\n    this.nackRepeated = 0;\n    /**\n     * @generated from field: uint32 plis = 27;\n     */\n    this.plis = 0;\n    /**\n     * @generated from field: uint32 firs = 29;\n     */\n    this.firs = 0;\n    /**\n     * @generated from field: uint32 rtt_current = 31;\n     */\n    this.rttCurrent = 0;\n    /**\n     * @generated from field: uint32 rtt_max = 32;\n     */\n    this.rttMax = 0;\n    /**\n     * @generated from field: uint32 key_frames = 33;\n     */\n    this.keyFrames = 0;\n    /**\n     * @generated from field: uint32 layer_lock_plis = 35;\n     */\n    this.layerLockPlis = 0;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new RTPStats().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new RTPStats().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new RTPStats().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(RTPStats, a, b);\n  }\n}\nRTPStats.runtime = proto3;\nRTPStats.typeName = \"livekit.RTPStats\";\nRTPStats.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"start_time\",\n  kind: \"message\",\n  T: Timestamp\n}, {\n  no: 2,\n  name: \"end_time\",\n  kind: \"message\",\n  T: Timestamp\n}, {\n  no: 3,\n  name: \"duration\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 4,\n  name: \"packets\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 5,\n  name: \"packet_rate\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 6,\n  name: \"bytes\",\n  kind: \"scalar\",\n  T: 4 /* ScalarType.UINT64 */\n}, {\n  no: 39,\n  name: \"header_bytes\",\n  kind: \"scalar\",\n  T: 4 /* ScalarType.UINT64 */\n}, {\n  no: 7,\n  name: \"bitrate\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 8,\n  name: \"packets_lost\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 9,\n  name: \"packet_loss_rate\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 10,\n  name: \"packet_loss_percentage\",\n  kind: \"scalar\",\n  T: 2 /* ScalarType.FLOAT */\n}, {\n  no: 11,\n  name: \"packets_duplicate\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 12,\n  name: \"packet_duplicate_rate\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 13,\n  name: \"bytes_duplicate\",\n  kind: \"scalar\",\n  T: 4 /* ScalarType.UINT64 */\n}, {\n  no: 40,\n  name: \"header_bytes_duplicate\",\n  kind: \"scalar\",\n  T: 4 /* ScalarType.UINT64 */\n}, {\n  no: 14,\n  name: \"bitrate_duplicate\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 15,\n  name: \"packets_padding\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 16,\n  name: \"packet_padding_rate\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 17,\n  name: \"bytes_padding\",\n  kind: \"scalar\",\n  T: 4 /* ScalarType.UINT64 */\n}, {\n  no: 41,\n  name: \"header_bytes_padding\",\n  kind: \"scalar\",\n  T: 4 /* ScalarType.UINT64 */\n}, {\n  no: 18,\n  name: \"bitrate_padding\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 19,\n  name: \"packets_out_of_order\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 20,\n  name: \"frames\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 21,\n  name: \"frame_rate\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 22,\n  name: \"jitter_current\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 23,\n  name: \"jitter_max\",\n  kind: \"scalar\",\n  T: 1 /* ScalarType.DOUBLE */\n}, {\n  no: 24,\n  name: \"gap_histogram\",\n  kind: \"map\",\n  K: 5 /* ScalarType.INT32 */,\n  V: {\n    kind: \"scalar\",\n    T: 13 /* ScalarType.UINT32 */\n  }\n}, {\n  no: 25,\n  name: \"nacks\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 37,\n  name: \"nack_acks\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 26,\n  name: \"nack_misses\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 38,\n  name: \"nack_repeated\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 27,\n  name: \"plis\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 28,\n  name: \"last_pli\",\n  kind: \"message\",\n  T: Timestamp\n}, {\n  no: 29,\n  name: \"firs\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 30,\n  name: \"last_fir\",\n  kind: \"message\",\n  T: Timestamp\n}, {\n  no: 31,\n  name: \"rtt_current\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 32,\n  name: \"rtt_max\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 33,\n  name: \"key_frames\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 34,\n  name: \"last_key_frame\",\n  kind: \"message\",\n  T: Timestamp\n}, {\n  no: 35,\n  name: \"layer_lock_plis\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 36,\n  name: \"last_layer_lock_pli\",\n  kind: \"message\",\n  T: Timestamp\n}, {\n  no: 44,\n  name: \"packet_drift\",\n  kind: \"message\",\n  T: RTPDrift\n}, {\n  no: 45,\n  name: \"report_drift\",\n  kind: \"message\",\n  T: RTPDrift\n}]);\n/**\n * @generated from message livekit.TimedVersion\n */\nclass TimedVersion extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: int64 unix_micro = 1;\n     */\n    this.unixMicro = protoInt64.zero;\n    /**\n     * @generated from field: int32 ticks = 2;\n     */\n    this.ticks = 0;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new TimedVersion().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new TimedVersion().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new TimedVersion().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(TimedVersion, a, b);\n  }\n}\nTimedVersion.runtime = proto3;\nTimedVersion.typeName = \"livekit.TimedVersion\";\nTimedVersion.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"unix_micro\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */\n}, {\n  no: 2,\n  name: \"ticks\",\n  kind: \"scalar\",\n  T: 5 /* ScalarType.INT32 */\n}]);\n\nconst maxRetryDelay = 7000;\nconst DEFAULT_RETRY_DELAYS_IN_MS = [0, 300, 2 * 2 * 300, 3 * 3 * 300, 4 * 4 * 300, maxRetryDelay, maxRetryDelay, maxRetryDelay, maxRetryDelay, maxRetryDelay];\nclass DefaultReconnectPolicy {\n  constructor(retryDelays) {\n    this._retryDelays = retryDelays !== undefined ? [...retryDelays] : DEFAULT_RETRY_DELAYS_IN_MS;\n  }\n  nextRetryDelayInMs(context) {\n    if (context.retryCount >= this._retryDelays.length) return null;\n    const retryDelay = this._retryDelays[context.retryCount];\n    if (context.retryCount <= 1) return retryDelay;\n    return retryDelay + Math.random() * 1000;\n  }\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar events = {exports: {}};\n\nvar R = typeof Reflect === 'object' ? Reflect : null;\nvar ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {\n  return Function.prototype.apply.call(target, receiver, args);\n};\nvar ReflectOwnKeys;\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys;\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n};\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nevents.exports = EventEmitter;\nevents.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function () {\n    return defaultMaxListeners;\n  },\n  set: function (arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\nEventEmitter.init = function () {\n  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = type === 'error';\n  var events = this._events;\n  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0) er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n  if (handler === undefined) return false;\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);\n  }\n  return true;\n};\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n  checkListener(listener);\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type, listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n  return target;\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\nEventEmitter.prototype.prependListener = function prependListener(type, listener) {\n  return _addListener(this, type, listener, true);\n};\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0) return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\nfunction _onceWrap(target, type, listener) {\n  var state = {\n    fired: false,\n    wrapFn: undefined,\n    target: target,\n    type: type,\n    listener: listener\n  };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\nEventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n  checkListener(listener);\n  this.prependListener(type, _onceWrap(this, type, listener));\n  return this;\n};\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener = function removeListener(type, listener) {\n  var list, events, position, i, originalListener;\n  checkListener(listener);\n  events = this._events;\n  if (events === undefined) return this;\n  list = events[type];\n  if (list === undefined) return this;\n  if (list === listener || list.listener === listener) {\n    if (--this._eventsCount === 0) this._events = Object.create(null);else {\n      delete events[type];\n      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);\n    }\n  } else if (typeof list !== 'function') {\n    position = -1;\n    for (i = list.length - 1; i >= 0; i--) {\n      if (list[i] === listener || list[i].listener === listener) {\n        originalListener = list[i].listener;\n        position = i;\n        break;\n      }\n    }\n    if (position < 0) return this;\n    if (position === 0) list.shift();else {\n      spliceOne(list, position);\n    }\n    if (list.length === 1) events[type] = list[0];\n    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);\n  }\n  return this;\n};\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n  var listeners, events, i;\n  events = this._events;\n  if (events === undefined) return this;\n\n  // not listening for removeListener, no need to emit\n  if (events.removeListener === undefined) {\n    if (arguments.length === 0) {\n      this._events = Object.create(null);\n      this._eventsCount = 0;\n    } else if (events[type] !== undefined) {\n      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];\n    }\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    var keys = Object.keys(events);\n    var key;\n    for (i = 0; i < keys.length; ++i) {\n      key = keys[i];\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n    return this;\n  }\n  listeners = events[type];\n  if (typeof listeners === 'function') {\n    this.removeListener(type, listeners);\n  } else if (listeners !== undefined) {\n    // LIFO order\n    for (i = listeners.length - 1; i >= 0; i--) {\n      this.removeListener(type, listeners[i]);\n    }\n  }\n  return this;\n};\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n  if (events === undefined) return [];\n  var evlistener = events[type];\n  if (evlistener === undefined) return [];\n  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\nEventEmitter.listenerCount = function (emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n  if (events !== undefined) {\n    var evlistener = events[type];\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n  return 0;\n}\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i) copy[i] = arr[i];\n  return copy;\n}\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++) list[index] = list[index + 1];\n  list.pop();\n}\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    }\n    eventTargetAgnosticAddListener(emitter, name, resolver, {\n      once: true\n    });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, {\n        once: true\n      });\n    }\n  });\n}\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\nvar eventsExports = events.exports;\n\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nfunction extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nfunction wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function (nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = e => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName, wrappedCallback]);\n  };\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function (nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName, unwrappedCb]);\n  };\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap, this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap, this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\nfunction disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nfunction disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\nfunction log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nfunction deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod + ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nfunction detectBrowser(window) {\n  // Returned result object.\n  const result = {\n    browser: null,\n    version: null\n  };\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator || !window.navigator.userAgent) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n  const {\n    navigator\n  } = window;\n  if (navigator.mozGetUserMedia) {\n    // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent, /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia || window.isSecureContext === false && window.webkitRTCPeerConnection) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent, /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) {\n    // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent, /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver && 'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else {\n    // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nfunction compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n  return Object.keys(data).reduce(function (accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {\n      [key]: value\n    });\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nfunction walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nfunction filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' && value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\nconst logging = log;\nfunction shimGetUserMedia$2(window, browserDetails) {\n  const navigator = window && window.navigator;\n  if (!navigator.mediaDevices) {\n    return;\n  }\n  const constraintsToChrome_ = function (c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = typeof c[key] === 'object' ? c[key] : {\n        ideal: c[key]\n      };\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function (prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return name === 'deviceId' ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n  const shimConstraints_ = function (constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function (obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && (typeof face === 'object' ? face : {\n        ideal: face\n      });\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n      if (face && (face.exact === 'user' || face.exact === 'environment' || face.ideal === 'user' || face.ideal === 'environment') && !(navigator.mediaDevices.getSupportedConstraints && navigator.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices().then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match => d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {\n                exact: dev.deviceId\n              } : {\n                ideal: dev.deviceId\n              };\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n  const shimError_ = function (e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n  const getUserMedia_ = function (constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function (cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length || c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n\n/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\nfunction shimGetDisplayMedia$1(window, getSourceId) {\n  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!window.navigator.mediaDevices) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' + 'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {\n    return getSourceId(constraints).then(sourceId => {\n      const widthSpecified = constraints.video && constraints.video.width;\n      const heightSpecified = constraints.video && constraints.video.height;\n      const frameRateSpecified = constraints.video && constraints.video.frameRate;\n      constraints.video = {\n        mandatory: {\n          chromeMediaSource: 'desktop',\n          chromeMediaSourceId: sourceId,\n          maxFrameRate: frameRateSpecified || 3\n        }\n      };\n      if (widthSpecified) {\n        constraints.video.mandatory.maxWidth = widthSpecified;\n      }\n      if (heightSpecified) {\n        constraints.video.mandatory.maxHeight = heightSpecified;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    });\n  };\n}\n\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\nfunction shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\nfunction shimOnTrack$1(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {\n      if (!this._ontrackpoly) {\n        this._ontrackpoly = e => {\n          // onaddstream does not fire when a track is added to an existing\n          // stream. But stream.onaddtrack is implemented so we use that.\n          e.stream.addEventListener('addtrack', te => {\n            let receiver;\n            if (window.RTCPeerConnection.prototype.getReceivers) {\n              receiver = this.getReceivers().find(r => r.track && r.track.id === te.track.id);\n            } else {\n              receiver = {\n                track: te.track\n              };\n            }\n            const event = new Event('track');\n            event.track = te.track;\n            event.receiver = receiver;\n            event.transceiver = {\n              receiver\n            };\n            event.streams = [e.stream];\n            this.dispatchEvent(event);\n          });\n          e.stream.getTracks().forEach(track => {\n            let receiver;\n            if (window.RTCPeerConnection.prototype.getReceivers) {\n              receiver = this.getReceivers().find(r => r.track && r.track.id === track.id);\n            } else {\n              receiver = {\n                track\n              };\n            }\n            const event = new Event('track');\n            event.track = track;\n            event.receiver = receiver;\n            event.transceiver = {\n              receiver\n            };\n            event.streams = [e.stream];\n            this.dispatchEvent(event);\n          });\n        };\n        this.addEventListener('addstream', this._ontrackpoly);\n      }\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver', {\n          value: {\n            receiver: e.receiver\n          }\n        });\n      }\n      return e;\n    });\n  }\n}\nfunction shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection && !('getSenders' in window.RTCPeerConnection.prototype) && 'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function (pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {\n        let sender = origAddTrack.apply(this, arguments);\n        if (!sender) {\n          sender = shimSenderWithDtmf(this, track);\n          this._senders.push(sender);\n        }\n        return sender;\n      };\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\n        origRemoveTrack.apply(this, arguments);\n        const idx = this._senders.indexOf(sender);\n        if (idx !== -1) {\n          this._senders.splice(idx, 1);\n        }\n      };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\n      this._senders = this._senders || [];\n      origRemoveStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        const sender = this._senders.find(s => s.track === track);\n        if (sender) {\n          // remove sender\n          this._senders.splice(this._senders.indexOf(sender), 1);\n        }\n      });\n    };\n  } else if (typeof window === 'object' && window.RTCPeerConnection && 'getSenders' in window.RTCPeerConnection.prototype && 'createDTMFSender' in window.RTCPeerConnection.prototype && window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\nfunction shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 || typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n    const fixChromeStats_ = function (response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function (stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function (response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n      return origGetStats.apply(this, [successCallbackWrapper_, selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [function (response) {\n        resolve(makeMapStats(fixChromeStats_(response)));\n      }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\nfunction shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n      /* Note: this will include stats of all senders that\n       *   send a track with the same id as sender.track as\n       *   it is not possible to identify the RTCRtpSender.\n       */\n      filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n        const receivers = origGetReceivers.apply(this, []);\n        receivers.forEach(receiver => receiver._pc = this);\n        return receivers;\n      };\n    }\n    wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result => filterStats(result, receiver.track, false));\n    };\n  }\n  if (!('getStats' in window.RTCRtpSender.prototype && 'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || sender && receiver) {\n        return Promise.reject(new DOMException('There are more than one sender or receiver for the track.', 'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException('There is no sender or receiver for the track.', 'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\nfunction shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    return Object.keys(this._shimmedLocalStreams).map(streamId => this._shimmedLocalStreams[streamId][0]);\n  };\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {\n    if (!stream) {\n      return origAddTrack.apply(this, arguments);\n    }\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    const sender = origAddTrack.apply(this, arguments);\n    if (!this._shimmedLocalStreams[stream.id]) {\n      this._shimmedLocalStreams[stream.id] = [stream, sender];\n    } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n      this._shimmedLocalStreams[stream.id].push(sender);\n    }\n    return sender;\n  };\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.', 'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders().filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    delete this._shimmedLocalStreams[stream.id];\n    return origRemoveStream.apply(this, arguments);\n  };\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    if (sender) {\n      Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n        const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n        if (idx !== -1) {\n          this._shimmedLocalStreams[streamId].splice(idx, 1);\n        }\n        if (this._shimmedLocalStreams[streamId].length === 1) {\n          delete this._shimmedLocalStreams[streamId];\n        }\n      });\n    }\n    return origRemoveTrack.apply(this, arguments);\n  };\n}\nfunction shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {\n    const nativeStreams = origGetLocalStreams.apply(this);\n    this._reverseStreams = this._reverseStreams || {};\n    return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n  };\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.', 'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n    origRemoveStream.apply(this, [this._streams[stream.id] || stream]);\n    delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];\n    delete this._streams[stream.id];\n  };\n  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {\n    if (this.signalingState === 'closed') {\n      throw new DOMException('The RTCPeerConnection\\'s signalingState is \\'closed\\'.', 'InvalidStateError');\n    }\n    const streams = [].slice.call(arguments, 1);\n    if (streams.length !== 1 || !streams[0].getTracks().find(t => t === track)) {\n      // this is not fully correct but all we can manage without\n      // [[associated MediaStreams]] internal slot.\n      throw new DOMException('The adapter.js addTrack polyfill only supports a single ' + ' stream which is associated with the specified track.', 'NotSupportedError');\n    }\n    const alreadyExists = this.getSenders().find(s => s.track === track);\n    if (alreadyExists) {\n      throw new DOMException('Track already exists.', 'InvalidAccessError');\n    }\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n    const oldStream = this._streams[stream.id];\n    if (oldStream) {\n      // this is using odd Chrome behaviour, use with caution:\n      // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n      // Note: we rely on the high-level addTrack/dtmf shim to\n      // create the sender with a dtmf sender.\n      oldStream.addTrack(track);\n\n      // Trigger ONN async.\n      Promise.resolve().then(() => {\n        this.dispatchEvent(new Event('negotiationneeded'));\n      });\n    } else {\n      const newStream = new window.MediaStream([track]);\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      this.addStream(newStream);\n    }\n    return this.getSenders().find(s => s.track === track);\n  };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'), externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'), internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function (method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {\n      [method]() {\n        const args = arguments;\n        const isLegacyCall = arguments.length && typeof arguments[0] === 'function';\n        if (isLegacyCall) {\n          return nativeMethod.apply(this, [description => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          }, err => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]]);\n        }\n        return nativeMethod.apply(this, arguments).then(description => replaceInternalStreamId(this, description));\n      }\n    };\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n  const origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {\n    if (!arguments.length || !arguments[0].type) {\n      return origSetLocalDescription.apply(this, arguments);\n    }\n    arguments[0] = replaceExternalStreamId(this, arguments[0]);\n    return origSetLocalDescription.apply(this, arguments);\n  };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype, 'localDescription', {\n    get() {\n      const description = origLocalDescription.get.apply(this);\n      if (description.type === '') {\n        return description;\n      }\n      return replaceInternalStreamId(this, description);\n    }\n  });\n  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\n    if (this.signalingState === 'closed') {\n      throw new DOMException('The RTCPeerConnection\\'s signalingState is \\'closed\\'.', 'InvalidStateError');\n    }\n    // We can not yet check for sender instanceof RTCRtpSender\n    // since we shim RTPSender. So we check if sender._pc is set.\n    if (!sender._pc) {\n      throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' + 'does not implement interface RTCRtpSender.', 'TypeError');\n    }\n    const isLocal = sender._pc === this;\n    if (!isLocal) {\n      throw new DOMException('Sender was not created by this connection.', 'InvalidAccessError');\n    }\n\n    // Search for the native stream the senders track belongs to.\n    this._streams = this._streams || {};\n    let stream;\n    Object.keys(this._streams).forEach(streamid => {\n      const hasTrack = this._streams[streamid].getTracks().find(track => sender.track === track);\n      if (hasTrack) {\n        stream = this._streams[streamid];\n      }\n    });\n    if (stream) {\n      if (stream.getTracks().length === 1) {\n        // if this is the last track of the stream, remove the stream. This\n        // takes care of any shimmed _senders.\n        this.removeStream(this._reverseStreams[stream.id]);\n      } else {\n        // relying on the same odd chrome behaviour as above.\n        stream.removeTrack(sender.track);\n      }\n      this.dispatchEvent(new Event('negotiationneeded'));\n    }\n  };\n}\nfunction shimPeerConnection$1(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {\n      const nativeMethod = window.RTCPeerConnection.prototype[method];\n      const methodObj = {\n        [method]() {\n          arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);\n          return nativeMethod.apply(this, arguments);\n        }\n      };\n      window.RTCPeerConnection.prototype[method] = methodObj[method];\n    });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nfunction fixNegotiationNeeded(window, browserDetails) {\n  wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || pc.getConfiguration && pc.getConfiguration().sdpSemantics === 'plan-b') {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n\nvar chromeShim = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tfixNegotiationNeeded: fixNegotiationNeeded,\n\tshimAddTrackRemoveTrack: shimAddTrackRemoveTrack,\n\tshimAddTrackRemoveTrackWithNative: shimAddTrackRemoveTrackWithNative,\n\tshimGetDisplayMedia: shimGetDisplayMedia$1,\n\tshimGetSendersWithDtmf: shimGetSendersWithDtmf,\n\tshimGetStats: shimGetStats,\n\tshimGetUserMedia: shimGetUserMedia$2,\n\tshimMediaStream: shimMediaStream,\n\tshimOnTrack: shimOnTrack$1,\n\tshimPeerConnection: shimPeerConnection$1,\n\tshimSenderReceiverGetStats: shimSenderReceiverGetStats\n});\n\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\nfunction shimGetUserMedia$1(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n  navigator.getUserMedia = function (constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    deprecated('navigator.getUserMedia', 'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n  if (!(browserDetails.version > 55 && 'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function (obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function (c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function () {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function (c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n\n/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\nfunction shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!window.navigator.mediaDevices) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {\n    if (!(constraints && constraints.video)) {\n      const err = new DOMException('getDisplayMedia without video ' + 'constraints is undefined');\n      err.name = 'NotFoundError';\n      // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n      err.code = 8;\n      return Promise.reject(err);\n    }\n    if (constraints.video === true) {\n      constraints.video = {\n        mediaSource: preferredMediaSource\n      };\n    } else {\n      constraints.video.mediaSource = preferredMediaSource;\n    }\n    return window.navigator.mediaDevices.getUserMedia(constraints);\n  };\n}\n\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\nfunction shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {\n          receiver: this.receiver\n        };\n      }\n    });\n  }\n}\nfunction shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {\n      const nativeMethod = window.RTCPeerConnection.prototype[method];\n      const methodObj = {\n        [method]() {\n          arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);\n          return nativeMethod.apply(this, arguments);\n        }\n      };\n      window.RTCPeerConnection.prototype[method] = methodObj[method];\n    });\n  }\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null]).then(stats => {\n      if (browserDetails.version < 53 && !onSucc) {\n        // Shim only promise getStats with spec-hyphens in type names\n        // Leave callback version alone; misc old uses of forEach before Map\n        try {\n          stats.forEach(stat => {\n            stat.type = modernStatsTypes[stat.type] || stat.type;\n          });\n        } catch (e) {\n          if (e.name !== 'TypeError') {\n            throw e;\n          }\n          // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n          stats.forEach((stat, i) => {\n            stats.set(i, Object.assign({}, stat, {\n              type: modernStatsTypes[stat.type] || stat.type\n            }));\n          });\n        }\n      }\n      return stats;\n    }).then(onSucc, onErr);\n  };\n}\nfunction shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());\n  };\n}\nfunction shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\nfunction shimRemoveStream(window) {\n  if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\n    deprecated('removeStream', 'removeTrack');\n    this.getSenders().forEach(sender => {\n      if (sender.track && stream.getTracks().includes(sender.track)) {\n        this.removeTrack(sender);\n      }\n    });\n  };\n}\nfunction shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\nfunction shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {\n      this.setParametersPromises = [];\n      // WebIDL input coercion and validation\n      let sendEncodings = arguments[1] && arguments[1].sendEncodings;\n      if (sendEncodings === undefined) {\n        sendEncodings = [];\n      }\n      sendEncodings = [...sendEncodings];\n      const shouldPerformCheck = sendEncodings.length > 0;\n      if (shouldPerformCheck) {\n        // If sendEncodings params are provided, validate grammar\n        sendEncodings.forEach(encodingParam => {\n          if ('rid' in encodingParam) {\n            const ridRegex = /^[a-z0-9]{0,16}$/i;\n            if (!ridRegex.test(encodingParam.rid)) {\n              throw new TypeError('Invalid RID value provided.');\n            }\n          }\n          if ('scaleResolutionDownBy' in encodingParam) {\n            if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n              throw new RangeError('scale_resolution_down_by must be >= 1.0');\n            }\n          }\n          if ('maxFramerate' in encodingParam) {\n            if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n              throw new RangeError('max_framerate must be >= 0.0');\n            }\n          }\n        });\n      }\n      const transceiver = origAddTransceiver.apply(this, arguments);\n      if (shouldPerformCheck) {\n        // Check if the init options were applied. If not we do this in an\n        // asynchronous way and save the promise reference in a global object.\n        // This is an ugly hack, but at the same time is way more robust than\n        // checking the sender parameters before and after the createOffer\n        // Also note that after the createoffer we are not 100% sure that\n        // the params were asynchronously applied so we might miss the\n        // opportunity to recreate offer.\n        const {\n          sender\n        } = transceiver;\n        const params = sender.getParameters();\n        if (!('encodings' in params) ||\n        // Avoid being fooled by patched getParameters() below.\n        params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {\n          params.encodings = sendEncodings;\n          sender.sendEncodings = sendEncodings;\n          this.setParametersPromises.push(sender.setParameters(params).then(() => {\n            delete sender.sendEncodings;\n          }).catch(() => {\n            delete sender.sendEncodings;\n          }));\n        }\n      }\n      return transceiver;\n    };\n  }\n}\nfunction shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters = function getParameters() {\n      const params = origGetParameters.apply(this, arguments);\n      if (!('encodings' in params)) {\n        params.encodings = [].concat(this.sendEncodings || [{}]);\n      }\n      return params;\n    };\n  }\n}\nfunction shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises).then(() => {\n        return origCreateOffer.apply(this, arguments);\n      }).finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\nfunction shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises).then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      }).finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n\nvar firefoxShim = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tshimAddTransceiver: shimAddTransceiver,\n\tshimCreateAnswer: shimCreateAnswer,\n\tshimCreateOffer: shimCreateOffer,\n\tshimGetDisplayMedia: shimGetDisplayMedia,\n\tshimGetParameters: shimGetParameters,\n\tshimGetUserMedia: shimGetUserMedia$1,\n\tshimOnTrack: shimOnTrack,\n\tshimPeerConnection: shimPeerConnection,\n\tshimRTCDataChannel: shimRTCDataChannel,\n\tshimReceiverGetStats: shimReceiverGetStats,\n\tshimRemoveStream: shimRemoveStream,\n\tshimSenderGetStats: shimSenderGetStats\n});\n\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nfunction shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      return this._localStreams;\n    };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track, stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track, stream));\n    };\n    window.RTCPeerConnection.prototype.addTrack = function addTrack(track) {\n      for (var _len = arguments.length, streams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        streams[_key - 1] = arguments[_key];\n      }\n      if (streams) {\n        streams.forEach(stream => {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (!this._localStreams.includes(stream)) {\n            this._localStreams.push(stream);\n          }\n        });\n      }\n      return _addTrack.apply(this, arguments);\n    };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      const index = this._localStreams.indexOf(stream);\n      if (index === -1) {\n        return;\n      }\n      this._localStreams.splice(index, 1);\n      const tracks = stream.getTracks();\n      this.getSenders().forEach(sender => {\n        if (tracks.includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n  }\n}\nfunction shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {\n      return this._remoteStreams ? this._remoteStreams : [];\n    };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = e => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {\n      const pc = this;\n      if (!this._onaddstreampoly) {\n        this.addEventListener('track', this._onaddstreampoly = function (e) {\n          e.streams.forEach(stream => {\n            if (!pc._remoteStreams) {\n              pc._remoteStreams = [];\n            }\n            if (pc._remoteStreams.indexOf(stream) >= 0) {\n              return;\n            }\n            pc._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            pc.dispatchEvent(event);\n          });\n        });\n      }\n      return origSetRemoteDescription.apply(pc, arguments);\n    };\n  }\n}\nfunction shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n  prototype.createOffer = function createOffer(successCallback, failureCallback) {\n    const options = arguments.length >= 2 ? arguments[2] : arguments[0];\n    const promise = origCreateOffer.apply(this, [options]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.createAnswer = function createAnswer(successCallback, failureCallback) {\n    const options = arguments.length >= 2 ? arguments[2] : arguments[0];\n    const promise = origCreateAnswer.apply(this, [options]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  let withCallback = function (description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n  withCallback = function (description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n  withCallback = function (candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\nfunction shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = constraints => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n  if (!navigator.getUserMedia && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);\n    }.bind(navigator);\n  }\n}\nfunction shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({}, constraints, {\n      video: compactObject(constraints.video)\n    });\n  }\n  return constraints;\n}\nfunction shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection = function RTCPeerConnection(pcConfig, pcConstraints) {\n    if (pcConfig && pcConfig.iceServers) {\n      const newIceServers = [];\n      for (let i = 0; i < pcConfig.iceServers.length; i++) {\n        let server = pcConfig.iceServers[i];\n        if (server.urls === undefined && server.url) {\n          deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n          server = JSON.parse(JSON.stringify(server));\n          server.urls = server.url;\n          delete server.url;\n          newIceServers.push(server);\n        } else {\n          newIceServers.push(pcConfig.iceServers[i]);\n        }\n      }\n      pcConfig.iceServers = newIceServers;\n    }\n    return new OrigPeerConnection(pcConfig, pcConstraints);\n  };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\nfunction shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {\n          receiver: this.receiver\n        };\n      }\n    });\n  }\n}\nfunction shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {\n    if (offerOptions) {\n      if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n        // support bit values\n        offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;\n      }\n      const audioTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'audio');\n      if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n        if (audioTransceiver.direction === 'sendrecv') {\n          if (audioTransceiver.setDirection) {\n            audioTransceiver.setDirection('sendonly');\n          } else {\n            audioTransceiver.direction = 'sendonly';\n          }\n        } else if (audioTransceiver.direction === 'recvonly') {\n          if (audioTransceiver.setDirection) {\n            audioTransceiver.setDirection('inactive');\n          } else {\n            audioTransceiver.direction = 'inactive';\n          }\n        }\n      } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {\n        this.addTransceiver('audio', {\n          direction: 'recvonly'\n        });\n      }\n      if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n        // support bit values\n        offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;\n      }\n      const videoTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'video');\n      if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n        if (videoTransceiver.direction === 'sendrecv') {\n          if (videoTransceiver.setDirection) {\n            videoTransceiver.setDirection('sendonly');\n          } else {\n            videoTransceiver.direction = 'sendonly';\n          }\n        } else if (videoTransceiver.direction === 'recvonly') {\n          if (videoTransceiver.setDirection) {\n            videoTransceiver.setDirection('inactive');\n          } else {\n            videoTransceiver.direction = 'inactive';\n          }\n        }\n      } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {\n        this.addTransceiver('video', {\n          direction: 'recvonly'\n        });\n      }\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\nfunction shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n\nvar safariShim = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tshimAudioContext: shimAudioContext,\n\tshimCallbacksAPI: shimCallbacksAPI,\n\tshimConstraints: shimConstraints,\n\tshimCreateOfferLegacy: shimCreateOfferLegacy,\n\tshimGetUserMedia: shimGetUserMedia,\n\tshimLocalStreamsAPI: shimLocalStreamsAPI,\n\tshimRTCIceServerUrls: shimRTCIceServerUrls,\n\tshimRemoteStreamsAPI: shimRemoteStreamsAPI,\n\tshimTrackEventTransceiver: shimTrackEventTransceiver\n});\n\nvar sdp$1 = {exports: {}};\n\n/* eslint-env node */\n(function (module) {\n\n  // SDP helpers.\n  const SDPUtils = {};\n\n  // Generate an alphanumeric identifier for cname or mids.\n  // TODO: use UUIDs instead? https://gist.github.com/jed/982883\n  SDPUtils.generateIdentifier = function () {\n    return Math.random().toString(36).substring(2, 12);\n  };\n\n  // The RTCP CNAME used by all peerconnections from the same JS.\n  SDPUtils.localCName = SDPUtils.generateIdentifier();\n\n  // Splits SDP into lines, dealing with both CRLF and LF.\n  SDPUtils.splitLines = function (blob) {\n    return blob.trim().split('\\n').map(line => line.trim());\n  };\n  // Splits SDP into sessionpart and mediasections. Ensures CRLF.\n  SDPUtils.splitSections = function (blob) {\n    const parts = blob.split('\\nm=');\n    return parts.map((part, index) => (index > 0 ? 'm=' + part : part).trim() + '\\r\\n');\n  };\n\n  // Returns the session description.\n  SDPUtils.getDescription = function (blob) {\n    const sections = SDPUtils.splitSections(blob);\n    return sections && sections[0];\n  };\n\n  // Returns the individual media sections.\n  SDPUtils.getMediaSections = function (blob) {\n    const sections = SDPUtils.splitSections(blob);\n    sections.shift();\n    return sections;\n  };\n\n  // Returns lines that start with a certain prefix.\n  SDPUtils.matchPrefix = function (blob, prefix) {\n    return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n  };\n\n  // Parses an ICE candidate line. Sample input:\n  // candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n  // rport 55996\"\n  // Input can be prefixed with a=.\n  SDPUtils.parseCandidate = function (line) {\n    let parts;\n    // Parse both variants.\n    if (line.indexOf('a=candidate:') === 0) {\n      parts = line.substring(12).split(' ');\n    } else {\n      parts = line.substring(10).split(' ');\n    }\n    const candidate = {\n      foundation: parts[0],\n      component: {\n        1: 'rtp',\n        2: 'rtcp'\n      }[parts[1]] || parts[1],\n      protocol: parts[2].toLowerCase(),\n      priority: parseInt(parts[3], 10),\n      ip: parts[4],\n      address: parts[4],\n      // address is an alias for ip.\n      port: parseInt(parts[5], 10),\n      // skip parts[6] == 'typ'\n      type: parts[7]\n    };\n    for (let i = 8; i < parts.length; i += 2) {\n      switch (parts[i]) {\n        case 'raddr':\n          candidate.relatedAddress = parts[i + 1];\n          break;\n        case 'rport':\n          candidate.relatedPort = parseInt(parts[i + 1], 10);\n          break;\n        case 'tcptype':\n          candidate.tcpType = parts[i + 1];\n          break;\n        case 'ufrag':\n          candidate.ufrag = parts[i + 1]; // for backward compatibility.\n          candidate.usernameFragment = parts[i + 1];\n          break;\n        default:\n          // extension handling, in particular ufrag. Don't overwrite.\n          if (candidate[parts[i]] === undefined) {\n            candidate[parts[i]] = parts[i + 1];\n          }\n          break;\n      }\n    }\n    return candidate;\n  };\n\n  // Translates a candidate object into SDP candidate attribute.\n  // This does not include the a= prefix!\n  SDPUtils.writeCandidate = function (candidate) {\n    const sdp = [];\n    sdp.push(candidate.foundation);\n    const component = candidate.component;\n    if (component === 'rtp') {\n      sdp.push(1);\n    } else if (component === 'rtcp') {\n      sdp.push(2);\n    } else {\n      sdp.push(component);\n    }\n    sdp.push(candidate.protocol.toUpperCase());\n    sdp.push(candidate.priority);\n    sdp.push(candidate.address || candidate.ip);\n    sdp.push(candidate.port);\n    const type = candidate.type;\n    sdp.push('typ');\n    sdp.push(type);\n    if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {\n      sdp.push('raddr');\n      sdp.push(candidate.relatedAddress);\n      sdp.push('rport');\n      sdp.push(candidate.relatedPort);\n    }\n    if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n      sdp.push('tcptype');\n      sdp.push(candidate.tcpType);\n    }\n    if (candidate.usernameFragment || candidate.ufrag) {\n      sdp.push('ufrag');\n      sdp.push(candidate.usernameFragment || candidate.ufrag);\n    }\n    return 'candidate:' + sdp.join(' ');\n  };\n\n  // Parses an ice-options line, returns an array of option tags.\n  // Sample input:\n  // a=ice-options:foo bar\n  SDPUtils.parseIceOptions = function (line) {\n    return line.substring(14).split(' ');\n  };\n\n  // Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n  // a=rtpmap:111 opus/48000/2\n  SDPUtils.parseRtpMap = function (line) {\n    let parts = line.substring(9).split(' ');\n    const parsed = {\n      payloadType: parseInt(parts.shift(), 10) // was: id\n    };\n\n    parts = parts[0].split('/');\n    parsed.name = parts[0];\n    parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n    parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n    // legacy alias, got renamed back to channels in ORTC.\n    parsed.numChannels = parsed.channels;\n    return parsed;\n  };\n\n  // Generates a rtpmap line from RTCRtpCodecCapability or\n  // RTCRtpCodecParameters.\n  SDPUtils.writeRtpMap = function (codec) {\n    let pt = codec.payloadType;\n    if (codec.preferredPayloadType !== undefined) {\n      pt = codec.preferredPayloadType;\n    }\n    const channels = codec.channels || codec.numChannels || 1;\n    return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate + (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n  };\n\n  // Parses a extmap line (headerextension from RFC 5285). Sample input:\n  // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n  // a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\n  SDPUtils.parseExtmap = function (line) {\n    const parts = line.substring(9).split(' ');\n    return {\n      id: parseInt(parts[0], 10),\n      direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n      uri: parts[1],\n      attributes: parts.slice(2).join(' ')\n    };\n  };\n\n  // Generates an extmap line from RTCRtpHeaderExtensionParameters or\n  // RTCRtpHeaderExtension.\n  SDPUtils.writeExtmap = function (headerExtension) {\n    return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== 'sendrecv' ? '/' + headerExtension.direction : '') + ' ' + headerExtension.uri + (headerExtension.attributes ? ' ' + headerExtension.attributes : '') + '\\r\\n';\n  };\n\n  // Parses a fmtp line, returns dictionary. Sample input:\n  // a=fmtp:96 vbr=on;cng=on\n  // Also deals with vbr=on; cng=on\n  SDPUtils.parseFmtp = function (line) {\n    const parsed = {};\n    let kv;\n    const parts = line.substring(line.indexOf(' ') + 1).split(';');\n    for (let j = 0; j < parts.length; j++) {\n      kv = parts[j].trim().split('=');\n      parsed[kv[0].trim()] = kv[1];\n    }\n    return parsed;\n  };\n\n  // Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\n  SDPUtils.writeFmtp = function (codec) {\n    let line = '';\n    let pt = codec.payloadType;\n    if (codec.preferredPayloadType !== undefined) {\n      pt = codec.preferredPayloadType;\n    }\n    if (codec.parameters && Object.keys(codec.parameters).length) {\n      const params = [];\n      Object.keys(codec.parameters).forEach(param => {\n        if (codec.parameters[param] !== undefined) {\n          params.push(param + '=' + codec.parameters[param]);\n        } else {\n          params.push(param);\n        }\n      });\n      line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n    }\n    return line;\n  };\n\n  // Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n  // a=rtcp-fb:98 nack rpsi\n  SDPUtils.parseRtcpFb = function (line) {\n    const parts = line.substring(line.indexOf(' ') + 1).split(' ');\n    return {\n      type: parts.shift(),\n      parameter: parts.join(' ')\n    };\n  };\n\n  // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\n  SDPUtils.writeRtcpFb = function (codec) {\n    let lines = '';\n    let pt = codec.payloadType;\n    if (codec.preferredPayloadType !== undefined) {\n      pt = codec.preferredPayloadType;\n    }\n    if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n      // FIXME: special handling for trr-int?\n      codec.rtcpFeedback.forEach(fb => {\n        lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') + '\\r\\n';\n      });\n    }\n    return lines;\n  };\n\n  // Parses a RFC 5576 ssrc media attribute. Sample input:\n  // a=ssrc:3735928559 cname:something\n  SDPUtils.parseSsrcMedia = function (line) {\n    const sp = line.indexOf(' ');\n    const parts = {\n      ssrc: parseInt(line.substring(7, sp), 10)\n    };\n    const colon = line.indexOf(':', sp);\n    if (colon > -1) {\n      parts.attribute = line.substring(sp + 1, colon);\n      parts.value = line.substring(colon + 1);\n    } else {\n      parts.attribute = line.substring(sp + 1);\n    }\n    return parts;\n  };\n\n  // Parse a ssrc-group line (see RFC 5576). Sample input:\n  // a=ssrc-group:semantics 12 34\n  SDPUtils.parseSsrcGroup = function (line) {\n    const parts = line.substring(13).split(' ');\n    return {\n      semantics: parts.shift(),\n      ssrcs: parts.map(ssrc => parseInt(ssrc, 10))\n    };\n  };\n\n  // Extracts the MID (RFC 5888) from a media section.\n  // Returns the MID or undefined if no mid line was found.\n  SDPUtils.getMid = function (mediaSection) {\n    const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n    if (mid) {\n      return mid.substring(6);\n    }\n  };\n\n  // Parses a fingerprint line for DTLS-SRTP.\n  SDPUtils.parseFingerprint = function (line) {\n    const parts = line.substring(14).split(' ');\n    return {\n      algorithm: parts[0].toLowerCase(),\n      // algorithm is case-sensitive in Edge.\n      value: parts[1].toUpperCase() // the definition is upper-case in RFC 4572.\n    };\n  };\n\n  // Extracts DTLS parameters from SDP media section or sessionpart.\n  // FIXME: for consistency with other functions this should only\n  //   get the fingerprint line as input. See also getIceParameters.\n  SDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {\n    const lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:');\n    // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n    return {\n      role: 'auto',\n      fingerprints: lines.map(SDPUtils.parseFingerprint)\n    };\n  };\n\n  // Serializes DTLS parameters to SDP.\n  SDPUtils.writeDtlsParameters = function (params, setupType) {\n    let sdp = 'a=setup:' + setupType + '\\r\\n';\n    params.fingerprints.forEach(fp => {\n      sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n    });\n    return sdp;\n  };\n\n  // Parses a=crypto lines into\n  //   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\n  SDPUtils.parseCryptoLine = function (line) {\n    const parts = line.substring(9).split(' ');\n    return {\n      tag: parseInt(parts[0], 10),\n      cryptoSuite: parts[1],\n      keyParams: parts[2],\n      sessionParams: parts.slice(3)\n    };\n  };\n  SDPUtils.writeCryptoLine = function (parameters) {\n    return 'a=crypto:' + parameters.tag + ' ' + parameters.cryptoSuite + ' ' + (typeof parameters.keyParams === 'object' ? SDPUtils.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') + '\\r\\n';\n  };\n\n  // Parses the crypto key parameters into\n  //   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\n  SDPUtils.parseCryptoKeyParams = function (keyParams) {\n    if (keyParams.indexOf('inline:') !== 0) {\n      return null;\n    }\n    const parts = keyParams.substring(7).split('|');\n    return {\n      keyMethod: 'inline',\n      keySalt: parts[0],\n      lifeTime: parts[1],\n      mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n      mkiLength: parts[2] ? parts[2].split(':')[1] : undefined\n    };\n  };\n  SDPUtils.writeCryptoKeyParams = function (keyParams) {\n    return keyParams.keyMethod + ':' + keyParams.keySalt + (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') + (keyParams.mkiValue && keyParams.mkiLength ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength : '');\n  };\n\n  // Extracts all SDES parameters.\n  SDPUtils.getCryptoParameters = function (mediaSection, sessionpart) {\n    const lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=crypto:');\n    return lines.map(SDPUtils.parseCryptoLine);\n  };\n\n  // Parses ICE information from SDP media section or sessionpart.\n  // FIXME: for consistency with other functions this should only\n  //   get the ice-ufrag and ice-pwd lines as input.\n  SDPUtils.getIceParameters = function (mediaSection, sessionpart) {\n    const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-ufrag:')[0];\n    const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-pwd:')[0];\n    if (!(ufrag && pwd)) {\n      return null;\n    }\n    return {\n      usernameFragment: ufrag.substring(12),\n      password: pwd.substring(10)\n    };\n  };\n\n  // Serializes ICE parameters to SDP.\n  SDPUtils.writeIceParameters = function (params) {\n    let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' + 'a=ice-pwd:' + params.password + '\\r\\n';\n    if (params.iceLite) {\n      sdp += 'a=ice-lite\\r\\n';\n    }\n    return sdp;\n  };\n\n  // Parses the SDP media section and returns RTCRtpParameters.\n  SDPUtils.parseRtpParameters = function (mediaSection) {\n    const description = {\n      codecs: [],\n      headerExtensions: [],\n      fecMechanisms: [],\n      rtcp: []\n    };\n    const lines = SDPUtils.splitLines(mediaSection);\n    const mline = lines[0].split(' ');\n    description.profile = mline[2];\n    for (let i = 3; i < mline.length; i++) {\n      // find all codecs from mline[3..]\n      const pt = mline[i];\n      const rtpmapline = SDPUtils.matchPrefix(mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n      if (rtpmapline) {\n        const codec = SDPUtils.parseRtpMap(rtpmapline);\n        const fmtps = SDPUtils.matchPrefix(mediaSection, 'a=fmtp:' + pt + ' ');\n        // Only the first a=fmtp:<pt> is considered.\n        codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n        codec.rtcpFeedback = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:' + pt + ' ').map(SDPUtils.parseRtcpFb);\n        description.codecs.push(codec);\n        // parse FEC mechanisms from rtpmap lines.\n        switch (codec.name.toUpperCase()) {\n          case 'RED':\n          case 'ULPFEC':\n            description.fecMechanisms.push(codec.name.toUpperCase());\n            break;\n        }\n      }\n    }\n    SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n      description.headerExtensions.push(SDPUtils.parseExtmap(line));\n    });\n    const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ').map(SDPUtils.parseRtcpFb);\n    description.codecs.forEach(codec => {\n      wildcardRtcpFb.forEach(fb => {\n        const duplicate = codec.rtcpFeedback.find(existingFeedback => {\n          return existingFeedback.type === fb.type && existingFeedback.parameter === fb.parameter;\n        });\n        if (!duplicate) {\n          codec.rtcpFeedback.push(fb);\n        }\n      });\n    });\n    // FIXME: parse rtcp.\n    return description;\n  };\n\n  // Generates parts of the SDP media section describing the capabilities /\n  // parameters.\n  SDPUtils.writeRtpDescription = function (kind, caps) {\n    let sdp = '';\n\n    // Build the mline.\n    sdp += 'm=' + kind + ' ';\n    sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n    sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';\n    sdp += caps.codecs.map(codec => {\n      if (codec.preferredPayloadType !== undefined) {\n        return codec.preferredPayloadType;\n      }\n      return codec.payloadType;\n    }).join(' ') + '\\r\\n';\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n    // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n    caps.codecs.forEach(codec => {\n      sdp += SDPUtils.writeRtpMap(codec);\n      sdp += SDPUtils.writeFmtp(codec);\n      sdp += SDPUtils.writeRtcpFb(codec);\n    });\n    let maxptime = 0;\n    caps.codecs.forEach(codec => {\n      if (codec.maxptime > maxptime) {\n        maxptime = codec.maxptime;\n      }\n    });\n    if (maxptime > 0) {\n      sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n    }\n    if (caps.headerExtensions) {\n      caps.headerExtensions.forEach(extension => {\n        sdp += SDPUtils.writeExtmap(extension);\n      });\n    }\n    // FIXME: write fecMechanisms.\n    return sdp;\n  };\n\n  // Parses the SDP media section and returns an array of\n  // RTCRtpEncodingParameters.\n  SDPUtils.parseRtpEncodingParameters = function (mediaSection) {\n    const encodingParameters = [];\n    const description = SDPUtils.parseRtpParameters(mediaSection);\n    const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n    const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n    // filter a=ssrc:... cname:, ignore PlanB-msid\n    const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(parts => parts.attribute === 'cname');\n    const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n    let secondarySsrc;\n    const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map(line => {\n      const parts = line.substring(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n    if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n      secondarySsrc = flows[0][1];\n    }\n    description.codecs.forEach(codec => {\n      if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n        let encParam = {\n          ssrc: primarySsrc,\n          codecPayloadType: parseInt(codec.parameters.apt, 10)\n        };\n        if (primarySsrc && secondarySsrc) {\n          encParam.rtx = {\n            ssrc: secondarySsrc\n          };\n        }\n        encodingParameters.push(encParam);\n        if (hasRed) {\n          encParam = JSON.parse(JSON.stringify(encParam));\n          encParam.fec = {\n            ssrc: primarySsrc,\n            mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n          };\n          encodingParameters.push(encParam);\n        }\n      }\n    });\n    if (encodingParameters.length === 0 && primarySsrc) {\n      encodingParameters.push({\n        ssrc: primarySsrc\n      });\n    }\n\n    // we support both b=AS and b=TIAS but interpret AS as TIAS.\n    let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n    if (bandwidth.length) {\n      if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n        bandwidth = parseInt(bandwidth[0].substring(7), 10);\n      } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n        // use formula from JSEP to convert b=AS to TIAS value.\n        bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95 - 50 * 40 * 8;\n      } else {\n        bandwidth = undefined;\n      }\n      encodingParameters.forEach(params => {\n        params.maxBitrate = bandwidth;\n      });\n    }\n    return encodingParameters;\n  };\n\n  // parses http://draft.ortc.org/#rtcrtcpparameters*\n  SDPUtils.parseRtcpParameters = function (mediaSection) {\n    const rtcpParameters = {};\n\n    // Gets the first SSRC. Note that with RTX there might be multiple\n    // SSRCs.\n    const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(obj => obj.attribute === 'cname')[0];\n    if (remoteSsrc) {\n      rtcpParameters.cname = remoteSsrc.value;\n      rtcpParameters.ssrc = remoteSsrc.ssrc;\n    }\n\n    // Edge uses the compound attribute instead of reducedSize\n    // compound is !reducedSize\n    const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n    rtcpParameters.reducedSize = rsize.length > 0;\n    rtcpParameters.compound = rsize.length === 0;\n\n    // parses the rtcp-mux attrіbute.\n    // Note that Edge does not support unmuxed RTCP.\n    const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n    rtcpParameters.mux = mux.length > 0;\n    return rtcpParameters;\n  };\n  SDPUtils.writeRtcpParameters = function (rtcpParameters) {\n    let sdp = '';\n    if (rtcpParameters.reducedSize) {\n      sdp += 'a=rtcp-rsize\\r\\n';\n    }\n    if (rtcpParameters.mux) {\n      sdp += 'a=rtcp-mux\\r\\n';\n    }\n    if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n      sdp += 'a=ssrc:' + rtcpParameters.ssrc + ' cname:' + rtcpParameters.cname + '\\r\\n';\n    }\n    return sdp;\n  };\n\n  // parses either a=msid: or a=ssrc:... msid lines and returns\n  // the id of the MediaStream and MediaStreamTrack.\n  SDPUtils.parseMsid = function (mediaSection) {\n    let parts;\n    const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n    if (spec.length === 1) {\n      parts = spec[0].substring(7).split(' ');\n      return {\n        stream: parts[0],\n        track: parts[1]\n      };\n    }\n    const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(msidParts => msidParts.attribute === 'msid');\n    if (planB.length > 0) {\n      parts = planB[0].value.split(' ');\n      return {\n        stream: parts[0],\n        track: parts[1]\n      };\n    }\n  };\n\n  // SCTP\n  // parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n  // to draft-ietf-mmusic-sctp-sdp-05\n  SDPUtils.parseSctpDescription = function (mediaSection) {\n    const mline = SDPUtils.parseMLine(mediaSection);\n    const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n    let maxMessageSize;\n    if (maxSizeLine.length > 0) {\n      maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);\n    }\n    if (isNaN(maxMessageSize)) {\n      maxMessageSize = 65536;\n    }\n    const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n    if (sctpPort.length > 0) {\n      return {\n        port: parseInt(sctpPort[0].substring(12), 10),\n        protocol: mline.fmt,\n        maxMessageSize\n      };\n    }\n    const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n    if (sctpMapLines.length > 0) {\n      const parts = sctpMapLines[0].substring(10).split(' ');\n      return {\n        port: parseInt(parts[0], 10),\n        protocol: parts[1],\n        maxMessageSize\n      };\n    }\n  };\n\n  // SCTP\n  // outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n  // support by now receiving in this format, unless we originally parsed\n  // as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n  // protocol of DTLS/SCTP -- without UDP/ or TCP/)\n  SDPUtils.writeSctpDescription = function (media, sctp) {\n    let output = [];\n    if (media.protocol !== 'DTLS/SCTP') {\n      output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n', 'c=IN IP4 0.0.0.0\\r\\n', 'a=sctp-port:' + sctp.port + '\\r\\n'];\n    } else {\n      output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n', 'c=IN IP4 0.0.0.0\\r\\n', 'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'];\n    }\n    if (sctp.maxMessageSize !== undefined) {\n      output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n    }\n    return output.join('');\n  };\n\n  // Generate a session ID for SDP.\n  // https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n  // recommends using a cryptographically random +ve 64-bit value\n  // but right now this should be acceptable and within the right range\n  SDPUtils.generateSessionId = function () {\n    return Math.random().toString().substr(2, 22);\n  };\n\n  // Write boiler plate for start of SDP\n  // sessId argument is optional - if not supplied it will\n  // be generated randomly\n  // sessVersion is optional and defaults to 2\n  // sessUser is optional and defaults to 'thisisadapterortc'\n  SDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {\n    let sessionId;\n    const version = sessVer !== undefined ? sessVer : 2;\n    if (sessId) {\n      sessionId = sessId;\n    } else {\n      sessionId = SDPUtils.generateSessionId();\n    }\n    const user = sessUser || 'thisisadapterortc';\n    // FIXME: sess-id should be an NTP timestamp.\n    return 'v=0\\r\\n' + 'o=' + user + ' ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\\r\\n' + 's=-\\r\\n' + 't=0 0\\r\\n';\n  };\n\n  // Gets the direction from the mediaSection or the sessionpart.\n  SDPUtils.getDirection = function (mediaSection, sessionpart) {\n    // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n    const lines = SDPUtils.splitLines(mediaSection);\n    for (let i = 0; i < lines.length; i++) {\n      switch (lines[i]) {\n        case 'a=sendrecv':\n        case 'a=sendonly':\n        case 'a=recvonly':\n        case 'a=inactive':\n          return lines[i].substring(2);\n        // FIXME: What should happen here?\n      }\n    }\n\n    if (sessionpart) {\n      return SDPUtils.getDirection(sessionpart);\n    }\n    return 'sendrecv';\n  };\n  SDPUtils.getKind = function (mediaSection) {\n    const lines = SDPUtils.splitLines(mediaSection);\n    const mline = lines[0].split(' ');\n    return mline[0].substring(2);\n  };\n  SDPUtils.isRejected = function (mediaSection) {\n    return mediaSection.split(' ', 2)[1] === '0';\n  };\n  SDPUtils.parseMLine = function (mediaSection) {\n    const lines = SDPUtils.splitLines(mediaSection);\n    const parts = lines[0].substring(2).split(' ');\n    return {\n      kind: parts[0],\n      port: parseInt(parts[1], 10),\n      protocol: parts[2],\n      fmt: parts.slice(3).join(' ')\n    };\n  };\n  SDPUtils.parseOLine = function (mediaSection) {\n    const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n    const parts = line.substring(2).split(' ');\n    return {\n      username: parts[0],\n      sessionId: parts[1],\n      sessionVersion: parseInt(parts[2], 10),\n      netType: parts[3],\n      addressType: parts[4],\n      address: parts[5]\n    };\n  };\n\n  // a very naive interpretation of a valid SDP.\n  SDPUtils.isValidSDP = function (blob) {\n    if (typeof blob !== 'string' || blob.length === 0) {\n      return false;\n    }\n    const lines = SDPUtils.splitLines(blob);\n    for (let i = 0; i < lines.length; i++) {\n      if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n        return false;\n      }\n      // TODO: check the modifier a bit more.\n    }\n\n    return true;\n  };\n\n  // Expose public methods.\n  {\n    module.exports = SDPUtils;\n  }\n})(sdp$1);\nvar sdpExports = sdp$1.exports;\nvar SDPUtils = /*@__PURE__*/getDefaultExportFromCjs(sdpExports);\n\nvar sdp = /*#__PURE__*/_mergeNamespaces({\n\t__proto__: null,\n\tdefault: SDPUtils\n}, [sdpExports]);\n\n/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\nfunction shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {\n    return;\n  }\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substring(2);\n    }\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      for (const key in parsedCandidate) {\n        if (!(key in nativeCandidate)) {\n          Object.defineProperty(nativeCandidate, key, {\n            value: parsedCandidate[key]\n          });\n        }\n      }\n\n      // Override serializer to not serialize the extra attributes.\n      nativeCandidate.toJSON = function toJSON() {\n        return {\n          candidate: nativeCandidate.candidate,\n          sdpMid: nativeCandidate.sdpMid,\n          sdpMLineIndex: nativeCandidate.sdpMLineIndex,\n          usernameFragment: nativeCandidate.usernameFragment\n        };\n      };\n      return nativeCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\nfunction shimRTCIceCandidateRelayProtocol(window) {\n  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'relayProtocol' in window.RTCIceCandidate.prototype) {\n    return;\n  }\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      const parsedCandidate = SDPUtils.parseCandidate(e.candidate.candidate);\n      if (parsedCandidate.type === 'relay') {\n        // This is a libwebrtc-specific mapping of local type preference\n        // to relayProtocol.\n        e.candidate.relayProtocol = {\n          0: 'tls',\n          1: 'tcp',\n          2: 'udp'\n        }[parsedCandidate.priority >> 24];\n      }\n    }\n    return e;\n  });\n}\nfunction shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n  const sctpInDescription = function (description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n  const getRemoteFirefoxVersion = function (description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n  const getCanSendMaxMessageSize = function (remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n  const getMaxMessageSize = function (description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n    const match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substring(19), 10);\n    } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n  const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {\n    this._sctp = null;\n    // Chrome decided to not expose .sctp in plan-b mode.\n    // As usual, adapter.js has to do an 'ugly worakaround'\n    // to cover up the mess.\n    if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n      const {\n        sdpSemantics\n      } = this.getConfiguration();\n      if (sdpSemantics === 'plan-b') {\n        Object.defineProperty(this, 'sctp', {\n          get() {\n            return typeof this._sctp === 'undefined' ? null : this._sctp;\n          },\n          enumerable: true,\n          configurable: true\n        });\n      }\n    }\n    if (sctpInDescription(arguments[0])) {\n      // Check if the remote is FF.\n      const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n      // Get the maximum message size the local peer is capable of sending\n      const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n      // Get the maximum message size of the remote peer.\n      const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n      // Determine final maximum message size\n      let maxMessageSize;\n      if (canSendMMS === 0 && remoteMMS === 0) {\n        maxMessageSize = Number.POSITIVE_INFINITY;\n      } else if (canSendMMS === 0 || remoteMMS === 0) {\n        maxMessageSize = Math.max(canSendMMS, remoteMMS);\n      } else {\n        maxMessageSize = Math.min(canSendMMS, remoteMMS);\n      }\n\n      // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n      // attribute.\n      const sctp = {};\n      Object.defineProperty(sctp, 'maxMessageSize', {\n        get() {\n          return maxMessageSize;\n        }\n      });\n      this._sctp = sctp;\n    }\n    return origSetRemoteDescription.apply(this, arguments);\n  };\n}\nfunction shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {\n    const dataChannel = origCreateDataChannel.apply(this, arguments);\n    wrapDcSend(dataChannel, this);\n    return dataChannel;\n  };\n  wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nfunction shimConnectionState(window) {\n  if (!window.RTCPeerConnection || 'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange', this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange', this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ['setLocalDescription', 'setRemoteDescription'].forEach(method => {\n    const origMethod = proto[method];\n    proto[method] = function () {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange', this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\nfunction removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter(line => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription && desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\nfunction shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {\n    if (!arguments[0]) {\n      if (arguments[1]) {\n        arguments[1].apply(null);\n      }\n      return Promise.resolve();\n    }\n    // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n    // in older versions.\n    // Native support for ignoring exists for Chrome M77+.\n    // Safari ignores as well, exact version unknown but works in the same\n    // version that also ignores addIceCandidate(null).\n    if ((browserDetails.browser === 'chrome' && browserDetails.version < 78 || browserDetails.browser === 'firefox' && browserDetails.version < 68 || browserDetails.browser === 'safari') && arguments[0] && arguments[0].candidate === '') {\n      return Promise.resolve();\n    }\n    return nativeAddIceCandidate.apply(this, arguments);\n  };\n}\n\n// Note: Make sure to call this ahead of APIs that modify\n// setLocalDescription.length\nfunction shimParameterlessSetLocalDescription(window, browserDetails) {\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;\n  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {\n    let desc = arguments[0] || {};\n    if (typeof desc !== 'object' || desc.type && desc.sdp) {\n      return nativeSetLocalDescription.apply(this, arguments);\n    }\n    // The remaining steps should technically happen when SLD comes off the\n    // RTCPeerConnection's operations chain (not ahead of going on it), but\n    // this is too difficult to shim. Instead, this shim only covers the\n    // common case where the operations chain is empty. This is imperfect, but\n    // should cover many cases. Rationale: Even if we can't reduce the glare\n    // window to zero on imperfect implementations, there's value in tapping\n    // into the perfect negotiation pattern that several browsers support.\n    desc = {\n      type: desc.type,\n      sdp: desc.sdp\n    };\n    if (!desc.type) {\n      switch (this.signalingState) {\n        case 'stable':\n        case 'have-local-offer':\n        case 'have-remote-pranswer':\n          desc.type = 'offer';\n          break;\n        default:\n          desc.type = 'answer';\n          break;\n      }\n    }\n    if (desc.sdp || desc.type !== 'offer' && desc.type !== 'answer') {\n      return nativeSetLocalDescription.apply(this, [desc]);\n    }\n    const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;\n    return func.apply(this).then(d => nativeSetLocalDescription.apply(this, [d]));\n  };\n}\n\nvar commonShim = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tremoveExtmapAllowMixed: removeExtmapAllowMixed,\n\tshimAddIceCandidateNullOrEmpty: shimAddIceCandidateNullOrEmpty,\n\tshimConnectionState: shimConnectionState,\n\tshimMaxMessageSize: shimMaxMessageSize,\n\tshimParameterlessSetLocalDescription: shimParameterlessSetLocalDescription,\n\tshimRTCIceCandidate: shimRTCIceCandidate,\n\tshimRTCIceCandidateRelayProtocol: shimRTCIceCandidateRelayProtocol,\n\tshimSendThrowTypeError: shimSendThrowTypeError\n});\n\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n// Shimming starts here.\nfunction adapterFactory() {\n  let {\n    window\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    shimChrome: true,\n    shimFirefox: true,\n    shimSafari: true\n  };\n  // Utils.\n  const logging = log;\n  const browserDetails = detectBrowser(window);\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: extractVersion,\n    disableLog: disableLog,\n    disableWarnings: disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !shimPeerConnection$1 || !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      shimParameterlessSetLocalDescription(window);\n      shimGetUserMedia$2(window, browserDetails);\n      shimMediaStream(window);\n      shimPeerConnection$1(window, browserDetails);\n      shimOnTrack$1(window);\n      shimAddTrackRemoveTrack(window, browserDetails);\n      shimGetSendersWithDtmf(window);\n      shimGetStats(window);\n      shimSenderReceiverGetStats(window);\n      fixNegotiationNeeded(window, browserDetails);\n      shimRTCIceCandidate(window);\n      shimRTCIceCandidateRelayProtocol(window);\n      shimConnectionState(window);\n      shimMaxMessageSize(window, browserDetails);\n      shimSendThrowTypeError(window);\n      removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !shimPeerConnection || !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      shimParameterlessSetLocalDescription(window);\n      shimGetUserMedia$1(window, browserDetails);\n      shimPeerConnection(window, browserDetails);\n      shimOnTrack(window);\n      shimRemoveStream(window);\n      shimSenderGetStats(window);\n      shimReceiverGetStats(window);\n      shimRTCDataChannel(window);\n      shimAddTransceiver(window);\n      shimGetParameters(window);\n      shimCreateOffer(window);\n      shimCreateAnswer(window);\n      shimRTCIceCandidate(window);\n      shimConnectionState(window);\n      shimMaxMessageSize(window, browserDetails);\n      shimSendThrowTypeError(window);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      shimParameterlessSetLocalDescription(window);\n      shimRTCIceServerUrls(window);\n      shimCreateOfferLegacy(window);\n      shimCallbacksAPI(window);\n      shimLocalStreamsAPI(window);\n      shimRemoteStreamsAPI(window);\n      shimTrackEventTransceiver(window);\n      shimGetUserMedia(window);\n      shimAudioContext(window);\n      shimRTCIceCandidate(window);\n      shimRTCIceCandidateRelayProtocol(window);\n      shimMaxMessageSize(window, browserDetails);\n      shimSendThrowTypeError(window);\n      removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n  return adapter;\n}\n\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\nadapterFactory({\n  window: typeof window === 'undefined' ? undefined : window\n});\n\n// Copyright 2023 LiveKit, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * @generated from enum livekit.SignalTarget\n */\nvar SignalTarget;\n(function (SignalTarget) {\n  /**\n   * @generated from enum value: PUBLISHER = 0;\n   */\n  SignalTarget[SignalTarget[\"PUBLISHER\"] = 0] = \"PUBLISHER\";\n  /**\n   * @generated from enum value: SUBSCRIBER = 1;\n   */\n  SignalTarget[SignalTarget[\"SUBSCRIBER\"] = 1] = \"SUBSCRIBER\";\n})(SignalTarget || (SignalTarget = {}));\n// Retrieve enum metadata with: proto3.getEnumType(SignalTarget)\nproto3.util.setEnumType(SignalTarget, \"livekit.SignalTarget\", [{\n  no: 0,\n  name: \"PUBLISHER\"\n}, {\n  no: 1,\n  name: \"SUBSCRIBER\"\n}]);\n/**\n * @generated from enum livekit.StreamState\n */\nvar StreamState;\n(function (StreamState) {\n  /**\n   * @generated from enum value: ACTIVE = 0;\n   */\n  StreamState[StreamState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n  /**\n   * @generated from enum value: PAUSED = 1;\n   */\n  StreamState[StreamState[\"PAUSED\"] = 1] = \"PAUSED\";\n})(StreamState || (StreamState = {}));\n// Retrieve enum metadata with: proto3.getEnumType(StreamState)\nproto3.util.setEnumType(StreamState, \"livekit.StreamState\", [{\n  no: 0,\n  name: \"ACTIVE\"\n}, {\n  no: 1,\n  name: \"PAUSED\"\n}]);\n/**\n * @generated from enum livekit.CandidateProtocol\n */\nvar CandidateProtocol;\n(function (CandidateProtocol) {\n  /**\n   * @generated from enum value: UDP = 0;\n   */\n  CandidateProtocol[CandidateProtocol[\"UDP\"] = 0] = \"UDP\";\n  /**\n   * @generated from enum value: TCP = 1;\n   */\n  CandidateProtocol[CandidateProtocol[\"TCP\"] = 1] = \"TCP\";\n  /**\n   * @generated from enum value: TLS = 2;\n   */\n  CandidateProtocol[CandidateProtocol[\"TLS\"] = 2] = \"TLS\";\n})(CandidateProtocol || (CandidateProtocol = {}));\n// Retrieve enum metadata with: proto3.getEnumType(CandidateProtocol)\nproto3.util.setEnumType(CandidateProtocol, \"livekit.CandidateProtocol\", [{\n  no: 0,\n  name: \"UDP\"\n}, {\n  no: 1,\n  name: \"TCP\"\n}, {\n  no: 2,\n  name: \"TLS\"\n}]);\n/**\n * @generated from message livekit.SignalRequest\n */\nclass SignalRequest extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from oneof livekit.SignalRequest.message\n     */\n    this.message = {\n      case: undefined\n    };\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SignalRequest().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SignalRequest().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SignalRequest().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SignalRequest, a, b);\n  }\n}\nSignalRequest.runtime = proto3;\nSignalRequest.typeName = \"livekit.SignalRequest\";\nSignalRequest.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"offer\",\n  kind: \"message\",\n  T: SessionDescription,\n  oneof: \"message\"\n}, {\n  no: 2,\n  name: \"answer\",\n  kind: \"message\",\n  T: SessionDescription,\n  oneof: \"message\"\n}, {\n  no: 3,\n  name: \"trickle\",\n  kind: \"message\",\n  T: TrickleRequest,\n  oneof: \"message\"\n}, {\n  no: 4,\n  name: \"add_track\",\n  kind: \"message\",\n  T: AddTrackRequest,\n  oneof: \"message\"\n}, {\n  no: 5,\n  name: \"mute\",\n  kind: \"message\",\n  T: MuteTrackRequest,\n  oneof: \"message\"\n}, {\n  no: 6,\n  name: \"subscription\",\n  kind: \"message\",\n  T: UpdateSubscription,\n  oneof: \"message\"\n}, {\n  no: 7,\n  name: \"track_setting\",\n  kind: \"message\",\n  T: UpdateTrackSettings,\n  oneof: \"message\"\n}, {\n  no: 8,\n  name: \"leave\",\n  kind: \"message\",\n  T: LeaveRequest,\n  oneof: \"message\"\n}, {\n  no: 10,\n  name: \"update_layers\",\n  kind: \"message\",\n  T: UpdateVideoLayers,\n  oneof: \"message\"\n}, {\n  no: 11,\n  name: \"subscription_permission\",\n  kind: \"message\",\n  T: SubscriptionPermission,\n  oneof: \"message\"\n}, {\n  no: 12,\n  name: \"sync_state\",\n  kind: \"message\",\n  T: SyncState,\n  oneof: \"message\"\n}, {\n  no: 13,\n  name: \"simulate\",\n  kind: \"message\",\n  T: SimulateScenario,\n  oneof: \"message\"\n}, {\n  no: 14,\n  name: \"ping\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */,\n  oneof: \"message\"\n}, {\n  no: 15,\n  name: \"update_metadata\",\n  kind: \"message\",\n  T: UpdateParticipantMetadata,\n  oneof: \"message\"\n}, {\n  no: 16,\n  name: \"ping_req\",\n  kind: \"message\",\n  T: Ping,\n  oneof: \"message\"\n}]);\n/**\n * @generated from message livekit.SignalResponse\n */\nclass SignalResponse extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from oneof livekit.SignalResponse.message\n     */\n    this.message = {\n      case: undefined\n    };\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SignalResponse().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SignalResponse().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SignalResponse().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SignalResponse, a, b);\n  }\n}\nSignalResponse.runtime = proto3;\nSignalResponse.typeName = \"livekit.SignalResponse\";\nSignalResponse.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"join\",\n  kind: \"message\",\n  T: JoinResponse,\n  oneof: \"message\"\n}, {\n  no: 2,\n  name: \"answer\",\n  kind: \"message\",\n  T: SessionDescription,\n  oneof: \"message\"\n}, {\n  no: 3,\n  name: \"offer\",\n  kind: \"message\",\n  T: SessionDescription,\n  oneof: \"message\"\n}, {\n  no: 4,\n  name: \"trickle\",\n  kind: \"message\",\n  T: TrickleRequest,\n  oneof: \"message\"\n}, {\n  no: 5,\n  name: \"update\",\n  kind: \"message\",\n  T: ParticipantUpdate,\n  oneof: \"message\"\n}, {\n  no: 6,\n  name: \"track_published\",\n  kind: \"message\",\n  T: TrackPublishedResponse,\n  oneof: \"message\"\n}, {\n  no: 8,\n  name: \"leave\",\n  kind: \"message\",\n  T: LeaveRequest,\n  oneof: \"message\"\n}, {\n  no: 9,\n  name: \"mute\",\n  kind: \"message\",\n  T: MuteTrackRequest,\n  oneof: \"message\"\n}, {\n  no: 10,\n  name: \"speakers_changed\",\n  kind: \"message\",\n  T: SpeakersChanged,\n  oneof: \"message\"\n}, {\n  no: 11,\n  name: \"room_update\",\n  kind: \"message\",\n  T: RoomUpdate,\n  oneof: \"message\"\n}, {\n  no: 12,\n  name: \"connection_quality\",\n  kind: \"message\",\n  T: ConnectionQualityUpdate,\n  oneof: \"message\"\n}, {\n  no: 13,\n  name: \"stream_state_update\",\n  kind: \"message\",\n  T: StreamStateUpdate,\n  oneof: \"message\"\n}, {\n  no: 14,\n  name: \"subscribed_quality_update\",\n  kind: \"message\",\n  T: SubscribedQualityUpdate,\n  oneof: \"message\"\n}, {\n  no: 15,\n  name: \"subscription_permission_update\",\n  kind: \"message\",\n  T: SubscriptionPermissionUpdate,\n  oneof: \"message\"\n}, {\n  no: 16,\n  name: \"refresh_token\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */,\n  oneof: \"message\"\n}, {\n  no: 17,\n  name: \"track_unpublished\",\n  kind: \"message\",\n  T: TrackUnpublishedResponse,\n  oneof: \"message\"\n}, {\n  no: 18,\n  name: \"pong\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */,\n  oneof: \"message\"\n}, {\n  no: 19,\n  name: \"reconnect\",\n  kind: \"message\",\n  T: ReconnectResponse,\n  oneof: \"message\"\n}, {\n  no: 20,\n  name: \"pong_resp\",\n  kind: \"message\",\n  T: Pong,\n  oneof: \"message\"\n}, {\n  no: 21,\n  name: \"subscription_response\",\n  kind: \"message\",\n  T: SubscriptionResponse,\n  oneof: \"message\"\n}]);\n/**\n * @generated from message livekit.SimulcastCodec\n */\nclass SimulcastCodec extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string codec = 1;\n     */\n    this.codec = \"\";\n    /**\n     * @generated from field: string cid = 2;\n     */\n    this.cid = \"\";\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SimulcastCodec().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SimulcastCodec().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SimulcastCodec().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SimulcastCodec, a, b);\n  }\n}\nSimulcastCodec.runtime = proto3;\nSimulcastCodec.typeName = \"livekit.SimulcastCodec\";\nSimulcastCodec.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"codec\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"cid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}]);\n/**\n * @generated from message livekit.AddTrackRequest\n */\nclass AddTrackRequest extends Message {\n  constructor(data) {\n    super();\n    /**\n     * client ID of track, to match it when RTC track is received\n     *\n     * @generated from field: string cid = 1;\n     */\n    this.cid = \"\";\n    /**\n     * @generated from field: string name = 2;\n     */\n    this.name = \"\";\n    /**\n     * @generated from field: livekit.TrackType type = 3;\n     */\n    this.type = TrackType.AUDIO;\n    /**\n     * to be deprecated in favor of layers\n     *\n     * @generated from field: uint32 width = 4;\n     */\n    this.width = 0;\n    /**\n     * @generated from field: uint32 height = 5;\n     */\n    this.height = 0;\n    /**\n     * true to add track and initialize to muted\n     *\n     * @generated from field: bool muted = 6;\n     */\n    this.muted = false;\n    /**\n     * true if DTX (Discontinuous Transmission) is disabled for audio\n     *\n     * @generated from field: bool disable_dtx = 7;\n     */\n    this.disableDtx = false;\n    /**\n     * @generated from field: livekit.TrackSource source = 8;\n     */\n    this.source = TrackSource.UNKNOWN;\n    /**\n     * @generated from field: repeated livekit.VideoLayer layers = 9;\n     */\n    this.layers = [];\n    /**\n     * @generated from field: repeated livekit.SimulcastCodec simulcast_codecs = 10;\n     */\n    this.simulcastCodecs = [];\n    /**\n     * server ID of track, publish new codec to exist track\n     *\n     * @generated from field: string sid = 11;\n     */\n    this.sid = \"\";\n    /**\n     * @generated from field: bool stereo = 12;\n     */\n    this.stereo = false;\n    /**\n     * true if RED (Redundant Encoding) is disabled for audio\n     *\n     * @generated from field: bool disable_red = 13;\n     */\n    this.disableRed = false;\n    /**\n     * @generated from field: livekit.Encryption.Type encryption = 14;\n     */\n    this.encryption = Encryption_Type.NONE;\n    /**\n     * which stream the track belongs to, used to group tracks together.\n     * if not specified, server will infer it from track source to bundle camera/microphone, screenshare/audio together\n     *\n     * @generated from field: string stream = 15;\n     */\n    this.stream = \"\";\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new AddTrackRequest().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new AddTrackRequest().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new AddTrackRequest().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(AddTrackRequest, a, b);\n  }\n}\nAddTrackRequest.runtime = proto3;\nAddTrackRequest.typeName = \"livekit.AddTrackRequest\";\nAddTrackRequest.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"cid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"name\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 3,\n  name: \"type\",\n  kind: \"enum\",\n  T: proto3.getEnumType(TrackType)\n}, {\n  no: 4,\n  name: \"width\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 5,\n  name: \"height\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 6,\n  name: \"muted\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 7,\n  name: \"disable_dtx\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 8,\n  name: \"source\",\n  kind: \"enum\",\n  T: proto3.getEnumType(TrackSource)\n}, {\n  no: 9,\n  name: \"layers\",\n  kind: \"message\",\n  T: VideoLayer,\n  repeated: true\n}, {\n  no: 10,\n  name: \"simulcast_codecs\",\n  kind: \"message\",\n  T: SimulcastCodec,\n  repeated: true\n}, {\n  no: 11,\n  name: \"sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 12,\n  name: \"stereo\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 13,\n  name: \"disable_red\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 14,\n  name: \"encryption\",\n  kind: \"enum\",\n  T: proto3.getEnumType(Encryption_Type)\n}, {\n  no: 15,\n  name: \"stream\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}]);\n/**\n * @generated from message livekit.TrickleRequest\n */\nclass TrickleRequest extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string candidateInit = 1;\n     */\n    this.candidateInit = \"\";\n    /**\n     * @generated from field: livekit.SignalTarget target = 2;\n     */\n    this.target = SignalTarget.PUBLISHER;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new TrickleRequest().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new TrickleRequest().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new TrickleRequest().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(TrickleRequest, a, b);\n  }\n}\nTrickleRequest.runtime = proto3;\nTrickleRequest.typeName = \"livekit.TrickleRequest\";\nTrickleRequest.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"candidateInit\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"target\",\n  kind: \"enum\",\n  T: proto3.getEnumType(SignalTarget)\n}]);\n/**\n * @generated from message livekit.MuteTrackRequest\n */\nclass MuteTrackRequest extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string sid = 1;\n     */\n    this.sid = \"\";\n    /**\n     * @generated from field: bool muted = 2;\n     */\n    this.muted = false;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new MuteTrackRequest().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new MuteTrackRequest().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new MuteTrackRequest().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(MuteTrackRequest, a, b);\n  }\n}\nMuteTrackRequest.runtime = proto3;\nMuteTrackRequest.typeName = \"livekit.MuteTrackRequest\";\nMuteTrackRequest.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"muted\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}]);\n/**\n * @generated from message livekit.JoinResponse\n */\nclass JoinResponse extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: repeated livekit.ParticipantInfo other_participants = 3;\n     */\n    this.otherParticipants = [];\n    /**\n     * deprecated. use server_info.version instead.\n     *\n     * @generated from field: string server_version = 4;\n     */\n    this.serverVersion = \"\";\n    /**\n     * @generated from field: repeated livekit.ICEServer ice_servers = 5;\n     */\n    this.iceServers = [];\n    /**\n     * use subscriber as the primary PeerConnection\n     *\n     * @generated from field: bool subscriber_primary = 6;\n     */\n    this.subscriberPrimary = false;\n    /**\n     * when the current server isn't available, return alternate url to retry connection\n     * when this is set, the other fields will be largely empty\n     *\n     * @generated from field: string alternative_url = 7;\n     */\n    this.alternativeUrl = \"\";\n    /**\n     * deprecated. use server_info.region instead.\n     *\n     * @generated from field: string server_region = 9;\n     */\n    this.serverRegion = \"\";\n    /**\n     * @generated from field: int32 ping_timeout = 10;\n     */\n    this.pingTimeout = 0;\n    /**\n     * @generated from field: int32 ping_interval = 11;\n     */\n    this.pingInterval = 0;\n    /**\n     * Server-Injected-Frame byte trailer, used to identify unencrypted frames when e2ee is enabled\n     *\n     * @generated from field: bytes sif_trailer = 13;\n     */\n    this.sifTrailer = new Uint8Array(0);\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new JoinResponse().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new JoinResponse().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new JoinResponse().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(JoinResponse, a, b);\n  }\n}\nJoinResponse.runtime = proto3;\nJoinResponse.typeName = \"livekit.JoinResponse\";\nJoinResponse.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"room\",\n  kind: \"message\",\n  T: Room$1\n}, {\n  no: 2,\n  name: \"participant\",\n  kind: \"message\",\n  T: ParticipantInfo\n}, {\n  no: 3,\n  name: \"other_participants\",\n  kind: \"message\",\n  T: ParticipantInfo,\n  repeated: true\n}, {\n  no: 4,\n  name: \"server_version\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 5,\n  name: \"ice_servers\",\n  kind: \"message\",\n  T: ICEServer,\n  repeated: true\n}, {\n  no: 6,\n  name: \"subscriber_primary\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 7,\n  name: \"alternative_url\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 8,\n  name: \"client_configuration\",\n  kind: \"message\",\n  T: ClientConfiguration\n}, {\n  no: 9,\n  name: \"server_region\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 10,\n  name: \"ping_timeout\",\n  kind: \"scalar\",\n  T: 5 /* ScalarType.INT32 */\n}, {\n  no: 11,\n  name: \"ping_interval\",\n  kind: \"scalar\",\n  T: 5 /* ScalarType.INT32 */\n}, {\n  no: 12,\n  name: \"server_info\",\n  kind: \"message\",\n  T: ServerInfo\n}, {\n  no: 13,\n  name: \"sif_trailer\",\n  kind: \"scalar\",\n  T: 12 /* ScalarType.BYTES */\n}]);\n/**\n * @generated from message livekit.ReconnectResponse\n */\nclass ReconnectResponse extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: repeated livekit.ICEServer ice_servers = 1;\n     */\n    this.iceServers = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new ReconnectResponse().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new ReconnectResponse().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new ReconnectResponse().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(ReconnectResponse, a, b);\n  }\n}\nReconnectResponse.runtime = proto3;\nReconnectResponse.typeName = \"livekit.ReconnectResponse\";\nReconnectResponse.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"ice_servers\",\n  kind: \"message\",\n  T: ICEServer,\n  repeated: true\n}, {\n  no: 2,\n  name: \"client_configuration\",\n  kind: \"message\",\n  T: ClientConfiguration\n}]);\n/**\n * @generated from message livekit.TrackPublishedResponse\n */\nclass TrackPublishedResponse extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string cid = 1;\n     */\n    this.cid = \"\";\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new TrackPublishedResponse().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new TrackPublishedResponse().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new TrackPublishedResponse().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(TrackPublishedResponse, a, b);\n  }\n}\nTrackPublishedResponse.runtime = proto3;\nTrackPublishedResponse.typeName = \"livekit.TrackPublishedResponse\";\nTrackPublishedResponse.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"cid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"track\",\n  kind: \"message\",\n  T: TrackInfo\n}]);\n/**\n * @generated from message livekit.TrackUnpublishedResponse\n */\nclass TrackUnpublishedResponse extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string track_sid = 1;\n     */\n    this.trackSid = \"\";\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new TrackUnpublishedResponse().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new TrackUnpublishedResponse().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new TrackUnpublishedResponse().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(TrackUnpublishedResponse, a, b);\n  }\n}\nTrackUnpublishedResponse.runtime = proto3;\nTrackUnpublishedResponse.typeName = \"livekit.TrackUnpublishedResponse\";\nTrackUnpublishedResponse.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"track_sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}]);\n/**\n * @generated from message livekit.SessionDescription\n */\nclass SessionDescription extends Message {\n  constructor(data) {\n    super();\n    /**\n     * \"answer\" | \"offer\" | \"pranswer\" | \"rollback\"\n     *\n     * @generated from field: string type = 1;\n     */\n    this.type = \"\";\n    /**\n     * @generated from field: string sdp = 2;\n     */\n    this.sdp = \"\";\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SessionDescription().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SessionDescription().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SessionDescription().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SessionDescription, a, b);\n  }\n}\nSessionDescription.runtime = proto3;\nSessionDescription.typeName = \"livekit.SessionDescription\";\nSessionDescription.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"type\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"sdp\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}]);\n/**\n * @generated from message livekit.ParticipantUpdate\n */\nclass ParticipantUpdate extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: repeated livekit.ParticipantInfo participants = 1;\n     */\n    this.participants = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new ParticipantUpdate().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new ParticipantUpdate().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new ParticipantUpdate().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(ParticipantUpdate, a, b);\n  }\n}\nParticipantUpdate.runtime = proto3;\nParticipantUpdate.typeName = \"livekit.ParticipantUpdate\";\nParticipantUpdate.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"participants\",\n  kind: \"message\",\n  T: ParticipantInfo,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.UpdateSubscription\n */\nclass UpdateSubscription extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: repeated string track_sids = 1;\n     */\n    this.trackSids = [];\n    /**\n     * @generated from field: bool subscribe = 2;\n     */\n    this.subscribe = false;\n    /**\n     * @generated from field: repeated livekit.ParticipantTracks participant_tracks = 3;\n     */\n    this.participantTracks = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new UpdateSubscription().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new UpdateSubscription().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new UpdateSubscription().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(UpdateSubscription, a, b);\n  }\n}\nUpdateSubscription.runtime = proto3;\nUpdateSubscription.typeName = \"livekit.UpdateSubscription\";\nUpdateSubscription.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"track_sids\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */,\n  repeated: true\n}, {\n  no: 2,\n  name: \"subscribe\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 3,\n  name: \"participant_tracks\",\n  kind: \"message\",\n  T: ParticipantTracks,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.UpdateTrackSettings\n */\nclass UpdateTrackSettings extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: repeated string track_sids = 1;\n     */\n    this.trackSids = [];\n    /**\n     * when true, the track is placed in a paused state, with no new data returned\n     *\n     * @generated from field: bool disabled = 3;\n     */\n    this.disabled = false;\n    /**\n     * deprecated in favor of width & height\n     *\n     * @generated from field: livekit.VideoQuality quality = 4;\n     */\n    this.quality = VideoQuality.LOW;\n    /**\n     * for video, width to receive\n     *\n     * @generated from field: uint32 width = 5;\n     */\n    this.width = 0;\n    /**\n     * for video, height to receive\n     *\n     * @generated from field: uint32 height = 6;\n     */\n    this.height = 0;\n    /**\n     * @generated from field: uint32 fps = 7;\n     */\n    this.fps = 0;\n    /**\n     * subscription priority. 1 being the highest (0 is unset)\n     * when unset, server sill assign priority based on the order of subscription\n     * server will use priority in the following ways:\n     * 1. when subscribed tracks exceed per-participant subscription limit, server will\n     *    pause the lowest priority tracks\n     * 2. when the network is congested, server will assign available bandwidth to\n     *    higher priority tracks first. lowest priority tracks can be paused\n     *\n     * @generated from field: uint32 priority = 8;\n     */\n    this.priority = 0;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new UpdateTrackSettings().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new UpdateTrackSettings().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new UpdateTrackSettings().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(UpdateTrackSettings, a, b);\n  }\n}\nUpdateTrackSettings.runtime = proto3;\nUpdateTrackSettings.typeName = \"livekit.UpdateTrackSettings\";\nUpdateTrackSettings.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"track_sids\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */,\n  repeated: true\n}, {\n  no: 3,\n  name: \"disabled\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 4,\n  name: \"quality\",\n  kind: \"enum\",\n  T: proto3.getEnumType(VideoQuality)\n}, {\n  no: 5,\n  name: \"width\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 6,\n  name: \"height\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 7,\n  name: \"fps\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 8,\n  name: \"priority\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}]);\n/**\n * @generated from message livekit.LeaveRequest\n */\nclass LeaveRequest extends Message {\n  constructor(data) {\n    super();\n    /**\n     * sent when server initiates the disconnect due to server-restart\n     * indicates clients should attempt full-reconnect sequence\n     *\n     * @generated from field: bool can_reconnect = 1;\n     */\n    this.canReconnect = false;\n    /**\n     * @generated from field: livekit.DisconnectReason reason = 2;\n     */\n    this.reason = DisconnectReason.UNKNOWN_REASON;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new LeaveRequest().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new LeaveRequest().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new LeaveRequest().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(LeaveRequest, a, b);\n  }\n}\nLeaveRequest.runtime = proto3;\nLeaveRequest.typeName = \"livekit.LeaveRequest\";\nLeaveRequest.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"can_reconnect\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 2,\n  name: \"reason\",\n  kind: \"enum\",\n  T: proto3.getEnumType(DisconnectReason)\n}]);\n/**\n * message to indicate published video track dimensions are changing\n *\n * @generated from message livekit.UpdateVideoLayers\n */\nclass UpdateVideoLayers extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string track_sid = 1;\n     */\n    this.trackSid = \"\";\n    /**\n     * @generated from field: repeated livekit.VideoLayer layers = 2;\n     */\n    this.layers = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new UpdateVideoLayers().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new UpdateVideoLayers().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new UpdateVideoLayers().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(UpdateVideoLayers, a, b);\n  }\n}\nUpdateVideoLayers.runtime = proto3;\nUpdateVideoLayers.typeName = \"livekit.UpdateVideoLayers\";\nUpdateVideoLayers.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"track_sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"layers\",\n  kind: \"message\",\n  T: VideoLayer,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.UpdateParticipantMetadata\n */\nclass UpdateParticipantMetadata extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string metadata = 1;\n     */\n    this.metadata = \"\";\n    /**\n     * @generated from field: string name = 2;\n     */\n    this.name = \"\";\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new UpdateParticipantMetadata().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new UpdateParticipantMetadata().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new UpdateParticipantMetadata().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(UpdateParticipantMetadata, a, b);\n  }\n}\nUpdateParticipantMetadata.runtime = proto3;\nUpdateParticipantMetadata.typeName = \"livekit.UpdateParticipantMetadata\";\nUpdateParticipantMetadata.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"metadata\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"name\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}]);\n/**\n * @generated from message livekit.ICEServer\n */\nclass ICEServer extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: repeated string urls = 1;\n     */\n    this.urls = [];\n    /**\n     * @generated from field: string username = 2;\n     */\n    this.username = \"\";\n    /**\n     * @generated from field: string credential = 3;\n     */\n    this.credential = \"\";\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new ICEServer().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new ICEServer().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new ICEServer().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(ICEServer, a, b);\n  }\n}\nICEServer.runtime = proto3;\nICEServer.typeName = \"livekit.ICEServer\";\nICEServer.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"urls\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */,\n  repeated: true\n}, {\n  no: 2,\n  name: \"username\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 3,\n  name: \"credential\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}]);\n/**\n * @generated from message livekit.SpeakersChanged\n */\nclass SpeakersChanged extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: repeated livekit.SpeakerInfo speakers = 1;\n     */\n    this.speakers = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SpeakersChanged().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SpeakersChanged().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SpeakersChanged().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SpeakersChanged, a, b);\n  }\n}\nSpeakersChanged.runtime = proto3;\nSpeakersChanged.typeName = \"livekit.SpeakersChanged\";\nSpeakersChanged.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"speakers\",\n  kind: \"message\",\n  T: SpeakerInfo,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.RoomUpdate\n */\nclass RoomUpdate extends Message {\n  constructor(data) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new RoomUpdate().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new RoomUpdate().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new RoomUpdate().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(RoomUpdate, a, b);\n  }\n}\nRoomUpdate.runtime = proto3;\nRoomUpdate.typeName = \"livekit.RoomUpdate\";\nRoomUpdate.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"room\",\n  kind: \"message\",\n  T: Room$1\n}]);\n/**\n * @generated from message livekit.ConnectionQualityInfo\n */\nclass ConnectionQualityInfo extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string participant_sid = 1;\n     */\n    this.participantSid = \"\";\n    /**\n     * @generated from field: livekit.ConnectionQuality quality = 2;\n     */\n    this.quality = ConnectionQuality$1.POOR;\n    /**\n     * @generated from field: float score = 3;\n     */\n    this.score = 0;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new ConnectionQualityInfo().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new ConnectionQualityInfo().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new ConnectionQualityInfo().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(ConnectionQualityInfo, a, b);\n  }\n}\nConnectionQualityInfo.runtime = proto3;\nConnectionQualityInfo.typeName = \"livekit.ConnectionQualityInfo\";\nConnectionQualityInfo.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"participant_sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"quality\",\n  kind: \"enum\",\n  T: proto3.getEnumType(ConnectionQuality$1)\n}, {\n  no: 3,\n  name: \"score\",\n  kind: \"scalar\",\n  T: 2 /* ScalarType.FLOAT */\n}]);\n/**\n * @generated from message livekit.ConnectionQualityUpdate\n */\nclass ConnectionQualityUpdate extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: repeated livekit.ConnectionQualityInfo updates = 1;\n     */\n    this.updates = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new ConnectionQualityUpdate().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new ConnectionQualityUpdate().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new ConnectionQualityUpdate().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(ConnectionQualityUpdate, a, b);\n  }\n}\nConnectionQualityUpdate.runtime = proto3;\nConnectionQualityUpdate.typeName = \"livekit.ConnectionQualityUpdate\";\nConnectionQualityUpdate.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"updates\",\n  kind: \"message\",\n  T: ConnectionQualityInfo,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.StreamStateInfo\n */\nclass StreamStateInfo extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string participant_sid = 1;\n     */\n    this.participantSid = \"\";\n    /**\n     * @generated from field: string track_sid = 2;\n     */\n    this.trackSid = \"\";\n    /**\n     * @generated from field: livekit.StreamState state = 3;\n     */\n    this.state = StreamState.ACTIVE;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new StreamStateInfo().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new StreamStateInfo().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new StreamStateInfo().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(StreamStateInfo, a, b);\n  }\n}\nStreamStateInfo.runtime = proto3;\nStreamStateInfo.typeName = \"livekit.StreamStateInfo\";\nStreamStateInfo.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"participant_sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"track_sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 3,\n  name: \"state\",\n  kind: \"enum\",\n  T: proto3.getEnumType(StreamState)\n}]);\n/**\n * @generated from message livekit.StreamStateUpdate\n */\nclass StreamStateUpdate extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: repeated livekit.StreamStateInfo stream_states = 1;\n     */\n    this.streamStates = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new StreamStateUpdate().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new StreamStateUpdate().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new StreamStateUpdate().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(StreamStateUpdate, a, b);\n  }\n}\nStreamStateUpdate.runtime = proto3;\nStreamStateUpdate.typeName = \"livekit.StreamStateUpdate\";\nStreamStateUpdate.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"stream_states\",\n  kind: \"message\",\n  T: StreamStateInfo,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.SubscribedQuality\n */\nclass SubscribedQuality extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: livekit.VideoQuality quality = 1;\n     */\n    this.quality = VideoQuality.LOW;\n    /**\n     * @generated from field: bool enabled = 2;\n     */\n    this.enabled = false;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SubscribedQuality().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SubscribedQuality().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SubscribedQuality().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SubscribedQuality, a, b);\n  }\n}\nSubscribedQuality.runtime = proto3;\nSubscribedQuality.typeName = \"livekit.SubscribedQuality\";\nSubscribedQuality.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"quality\",\n  kind: \"enum\",\n  T: proto3.getEnumType(VideoQuality)\n}, {\n  no: 2,\n  name: \"enabled\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}]);\n/**\n * @generated from message livekit.SubscribedCodec\n */\nclass SubscribedCodec extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string codec = 1;\n     */\n    this.codec = \"\";\n    /**\n     * @generated from field: repeated livekit.SubscribedQuality qualities = 2;\n     */\n    this.qualities = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SubscribedCodec().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SubscribedCodec().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SubscribedCodec().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SubscribedCodec, a, b);\n  }\n}\nSubscribedCodec.runtime = proto3;\nSubscribedCodec.typeName = \"livekit.SubscribedCodec\";\nSubscribedCodec.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"codec\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"qualities\",\n  kind: \"message\",\n  T: SubscribedQuality,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.SubscribedQualityUpdate\n */\nclass SubscribedQualityUpdate extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string track_sid = 1;\n     */\n    this.trackSid = \"\";\n    /**\n     * @generated from field: repeated livekit.SubscribedQuality subscribed_qualities = 2;\n     */\n    this.subscribedQualities = [];\n    /**\n     * @generated from field: repeated livekit.SubscribedCodec subscribed_codecs = 3;\n     */\n    this.subscribedCodecs = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SubscribedQualityUpdate().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SubscribedQualityUpdate().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SubscribedQualityUpdate().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SubscribedQualityUpdate, a, b);\n  }\n}\nSubscribedQualityUpdate.runtime = proto3;\nSubscribedQualityUpdate.typeName = \"livekit.SubscribedQualityUpdate\";\nSubscribedQualityUpdate.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"track_sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"subscribed_qualities\",\n  kind: \"message\",\n  T: SubscribedQuality,\n  repeated: true\n}, {\n  no: 3,\n  name: \"subscribed_codecs\",\n  kind: \"message\",\n  T: SubscribedCodec,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.TrackPermission\n */\nclass TrackPermission extends Message {\n  constructor(data) {\n    super();\n    /**\n     * permission could be granted either by participant sid or identity\n     *\n     * @generated from field: string participant_sid = 1;\n     */\n    this.participantSid = \"\";\n    /**\n     * @generated from field: bool all_tracks = 2;\n     */\n    this.allTracks = false;\n    /**\n     * @generated from field: repeated string track_sids = 3;\n     */\n    this.trackSids = [];\n    /**\n     * @generated from field: string participant_identity = 4;\n     */\n    this.participantIdentity = \"\";\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new TrackPermission().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new TrackPermission().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new TrackPermission().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(TrackPermission, a, b);\n  }\n}\nTrackPermission.runtime = proto3;\nTrackPermission.typeName = \"livekit.TrackPermission\";\nTrackPermission.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"participant_sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"all_tracks\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 3,\n  name: \"track_sids\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */,\n  repeated: true\n}, {\n  no: 4,\n  name: \"participant_identity\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}]);\n/**\n * @generated from message livekit.SubscriptionPermission\n */\nclass SubscriptionPermission extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: bool all_participants = 1;\n     */\n    this.allParticipants = false;\n    /**\n     * @generated from field: repeated livekit.TrackPermission track_permissions = 2;\n     */\n    this.trackPermissions = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SubscriptionPermission().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SubscriptionPermission().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SubscriptionPermission().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SubscriptionPermission, a, b);\n  }\n}\nSubscriptionPermission.runtime = proto3;\nSubscriptionPermission.typeName = \"livekit.SubscriptionPermission\";\nSubscriptionPermission.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"all_participants\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}, {\n  no: 2,\n  name: \"track_permissions\",\n  kind: \"message\",\n  T: TrackPermission,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.SubscriptionPermissionUpdate\n */\nclass SubscriptionPermissionUpdate extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string participant_sid = 1;\n     */\n    this.participantSid = \"\";\n    /**\n     * @generated from field: string track_sid = 2;\n     */\n    this.trackSid = \"\";\n    /**\n     * @generated from field: bool allowed = 3;\n     */\n    this.allowed = false;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SubscriptionPermissionUpdate().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SubscriptionPermissionUpdate().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SubscriptionPermissionUpdate().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SubscriptionPermissionUpdate, a, b);\n  }\n}\nSubscriptionPermissionUpdate.runtime = proto3;\nSubscriptionPermissionUpdate.typeName = \"livekit.SubscriptionPermissionUpdate\";\nSubscriptionPermissionUpdate.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"participant_sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"track_sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 3,\n  name: \"allowed\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */\n}]);\n/**\n * @generated from message livekit.SyncState\n */\nclass SyncState extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: repeated livekit.TrackPublishedResponse publish_tracks = 3;\n     */\n    this.publishTracks = [];\n    /**\n     * @generated from field: repeated livekit.DataChannelInfo data_channels = 4;\n     */\n    this.dataChannels = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SyncState().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SyncState().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SyncState().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SyncState, a, b);\n  }\n}\nSyncState.runtime = proto3;\nSyncState.typeName = \"livekit.SyncState\";\nSyncState.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"answer\",\n  kind: \"message\",\n  T: SessionDescription\n}, {\n  no: 2,\n  name: \"subscription\",\n  kind: \"message\",\n  T: UpdateSubscription\n}, {\n  no: 3,\n  name: \"publish_tracks\",\n  kind: \"message\",\n  T: TrackPublishedResponse,\n  repeated: true\n}, {\n  no: 4,\n  name: \"data_channels\",\n  kind: \"message\",\n  T: DataChannelInfo,\n  repeated: true\n}, {\n  no: 5,\n  name: \"offer\",\n  kind: \"message\",\n  T: SessionDescription\n}]);\n/**\n * @generated from message livekit.DataChannelInfo\n */\nclass DataChannelInfo extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string label = 1;\n     */\n    this.label = \"\";\n    /**\n     * @generated from field: uint32 id = 2;\n     */\n    this.id = 0;\n    /**\n     * @generated from field: livekit.SignalTarget target = 3;\n     */\n    this.target = SignalTarget.PUBLISHER;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new DataChannelInfo().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new DataChannelInfo().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new DataChannelInfo().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(DataChannelInfo, a, b);\n  }\n}\nDataChannelInfo.runtime = proto3;\nDataChannelInfo.typeName = \"livekit.DataChannelInfo\";\nDataChannelInfo.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"label\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"id\",\n  kind: \"scalar\",\n  T: 13 /* ScalarType.UINT32 */\n}, {\n  no: 3,\n  name: \"target\",\n  kind: \"enum\",\n  T: proto3.getEnumType(SignalTarget)\n}]);\n/**\n * @generated from message livekit.SimulateScenario\n */\nclass SimulateScenario extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from oneof livekit.SimulateScenario.scenario\n     */\n    this.scenario = {\n      case: undefined\n    };\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SimulateScenario().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SimulateScenario().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SimulateScenario().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SimulateScenario, a, b);\n  }\n}\nSimulateScenario.runtime = proto3;\nSimulateScenario.typeName = \"livekit.SimulateScenario\";\nSimulateScenario.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"speaker_update\",\n  kind: \"scalar\",\n  T: 5 /* ScalarType.INT32 */,\n  oneof: \"scenario\"\n}, {\n  no: 2,\n  name: \"node_failure\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */,\n  oneof: \"scenario\"\n}, {\n  no: 3,\n  name: \"migration\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */,\n  oneof: \"scenario\"\n}, {\n  no: 4,\n  name: \"server_leave\",\n  kind: \"scalar\",\n  T: 8 /* ScalarType.BOOL */,\n  oneof: \"scenario\"\n}, {\n  no: 5,\n  name: \"switch_candidate_protocol\",\n  kind: \"enum\",\n  T: proto3.getEnumType(CandidateProtocol),\n  oneof: \"scenario\"\n}, {\n  no: 6,\n  name: \"subscriber_bandwidth\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */,\n  oneof: \"scenario\"\n}]);\n/**\n * @generated from message livekit.Ping\n */\nclass Ping extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: int64 timestamp = 1;\n     */\n    this.timestamp = protoInt64.zero;\n    /**\n     * rtt in milliseconds calculated by client\n     *\n     * @generated from field: int64 rtt = 2;\n     */\n    this.rtt = protoInt64.zero;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new Ping().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new Ping().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new Ping().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(Ping, a, b);\n  }\n}\nPing.runtime = proto3;\nPing.typeName = \"livekit.Ping\";\nPing.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"timestamp\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */\n}, {\n  no: 2,\n  name: \"rtt\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */\n}]);\n/**\n * @generated from message livekit.Pong\n */\nclass Pong extends Message {\n  constructor(data) {\n    super();\n    /**\n     * timestamp field of last received ping request\n     *\n     * @generated from field: int64 last_ping_timestamp = 1;\n     */\n    this.lastPingTimestamp = protoInt64.zero;\n    /**\n     * @generated from field: int64 timestamp = 2;\n     */\n    this.timestamp = protoInt64.zero;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new Pong().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new Pong().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new Pong().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(Pong, a, b);\n  }\n}\nPong.runtime = proto3;\nPong.typeName = \"livekit.Pong\";\nPong.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"last_ping_timestamp\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */\n}, {\n  no: 2,\n  name: \"timestamp\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */\n}]);\n/**\n * @generated from message livekit.RegionSettings\n */\nclass RegionSettings extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: repeated livekit.RegionInfo regions = 1;\n     */\n    this.regions = [];\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new RegionSettings().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new RegionSettings().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new RegionSettings().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(RegionSettings, a, b);\n  }\n}\nRegionSettings.runtime = proto3;\nRegionSettings.typeName = \"livekit.RegionSettings\";\nRegionSettings.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"regions\",\n  kind: \"message\",\n  T: RegionInfo,\n  repeated: true\n}]);\n/**\n * @generated from message livekit.RegionInfo\n */\nclass RegionInfo extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string region = 1;\n     */\n    this.region = \"\";\n    /**\n     * @generated from field: string url = 2;\n     */\n    this.url = \"\";\n    /**\n     * @generated from field: int64 distance = 3;\n     */\n    this.distance = protoInt64.zero;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new RegionInfo().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new RegionInfo().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new RegionInfo().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(RegionInfo, a, b);\n  }\n}\nRegionInfo.runtime = proto3;\nRegionInfo.typeName = \"livekit.RegionInfo\";\nRegionInfo.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"region\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"url\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 3,\n  name: \"distance\",\n  kind: \"scalar\",\n  T: 3 /* ScalarType.INT64 */\n}]);\n/**\n * @generated from message livekit.SubscriptionResponse\n */\nclass SubscriptionResponse extends Message {\n  constructor(data) {\n    super();\n    /**\n     * @generated from field: string track_sid = 1;\n     */\n    this.trackSid = \"\";\n    /**\n     * @generated from field: livekit.SubscriptionError err = 2;\n     */\n    this.err = SubscriptionError.SE_UNKNOWN;\n    proto3.util.initPartial(data, this);\n  }\n  static fromBinary(bytes, options) {\n    return new SubscriptionResponse().fromBinary(bytes, options);\n  }\n  static fromJson(jsonValue, options) {\n    return new SubscriptionResponse().fromJson(jsonValue, options);\n  }\n  static fromJsonString(jsonString, options) {\n    return new SubscriptionResponse().fromJsonString(jsonString, options);\n  }\n  static equals(a, b) {\n    return proto3.util.equals(SubscriptionResponse, a, b);\n  }\n}\nSubscriptionResponse.runtime = proto3;\nSubscriptionResponse.typeName = \"livekit.SubscriptionResponse\";\nSubscriptionResponse.fields = proto3.util.newFieldList(() => [{\n  no: 1,\n  name: \"track_sid\",\n  kind: \"scalar\",\n  T: 9 /* ScalarType.STRING */\n}, {\n  no: 2,\n  name: \"err\",\n  kind: \"enum\",\n  T: proto3.getEnumType(SubscriptionError)\n}]);\n\nclass LivekitError extends Error {\n  constructor(code, message) {\n    super(message || 'an error has occured');\n    this.code = code;\n  }\n}\nclass ConnectionError extends LivekitError {\n  constructor(message, reason, status) {\n    super(1, message);\n    this.status = status;\n    this.reason = reason;\n  }\n}\nclass DeviceUnsupportedError extends LivekitError {\n  constructor(message) {\n    super(21, message !== null && message !== void 0 ? message : 'device is unsupported');\n  }\n}\nclass TrackInvalidError extends LivekitError {\n  constructor(message) {\n    super(20, message !== null && message !== void 0 ? message : 'track is invalid');\n  }\n}\nclass UnsupportedServer extends LivekitError {\n  constructor(message) {\n    super(10, message !== null && message !== void 0 ? message : 'unsupported server');\n  }\n}\nclass UnexpectedConnectionState extends LivekitError {\n  constructor(message) {\n    super(12, message !== null && message !== void 0 ? message : 'unexpected connection state');\n  }\n}\nclass NegotiationError extends LivekitError {\n  constructor(message) {\n    super(13, message !== null && message !== void 0 ? message : 'unable to negotiate');\n  }\n}\nclass PublishDataError extends LivekitError {\n  constructor(message) {\n    super(13, message !== null && message !== void 0 ? message : 'unable to publish data');\n  }\n}\nvar MediaDeviceFailure;\n(function (MediaDeviceFailure) {\n  // user rejected permissions\n  MediaDeviceFailure[\"PermissionDenied\"] = \"PermissionDenied\";\n  // device is not available\n  MediaDeviceFailure[\"NotFound\"] = \"NotFound\";\n  // device is in use. On Windows, only a single tab may get access to a device at a time.\n  MediaDeviceFailure[\"DeviceInUse\"] = \"DeviceInUse\";\n  MediaDeviceFailure[\"Other\"] = \"Other\";\n})(MediaDeviceFailure || (MediaDeviceFailure = {}));\n(function (MediaDeviceFailure) {\n  function getFailure(error) {\n    if (error && 'name' in error) {\n      if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {\n        return MediaDeviceFailure.NotFound;\n      }\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\n        return MediaDeviceFailure.PermissionDenied;\n      }\n      if (error.name === 'NotReadableError' || error.name === 'TrackStartError') {\n        return MediaDeviceFailure.DeviceInUse;\n      }\n      return MediaDeviceFailure.Other;\n    }\n  }\n  MediaDeviceFailure.getFailure = getFailure;\n})(MediaDeviceFailure || (MediaDeviceFailure = {}));\n\n/**\n * Timers that can be overridden with platform specific implementations\n * that ensure that they are fired. These should be used when it is critical\n * that the timer fires on time.\n */\nclass CriticalTimers {}\n// eslint-disable-next-line @typescript-eslint/no-implied-eval\nCriticalTimers.setTimeout = function () {\n  return setTimeout(...arguments);\n};\n// eslint-disable-next-line @typescript-eslint/no-implied-eval\nCriticalTimers.setInterval = function () {\n  return setInterval(...arguments);\n};\nCriticalTimers.clearTimeout = function () {\n  return clearTimeout(...arguments);\n};\nCriticalTimers.clearInterval = function () {\n  return clearInterval(...arguments);\n};\n\n// tiny, simplified version of https://github.com/lancedikson/bowser/blob/master/src/parser-browsers.js\n// reduced to only differentiate Chrome(ium) based browsers / Firefox / Safari\nconst commonVersionIdentifier = /version\\/(\\d+(\\.?_?\\d+)+)/i;\nlet browserDetails;\n/**\n * @internal\n */\nfunction getBrowser(userAgent) {\n  let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (typeof userAgent === 'undefined' && typeof navigator === 'undefined') {\n    return;\n  }\n  const ua = (userAgent !== null && userAgent !== void 0 ? userAgent : navigator.userAgent).toLowerCase();\n  if (browserDetails === undefined || force) {\n    const browser = browsersList.find(_ref => {\n      let {\n        test\n      } = _ref;\n      return test.test(ua);\n    });\n    browserDetails = browser === null || browser === void 0 ? void 0 : browser.describe(ua);\n  }\n  return browserDetails;\n}\nconst browsersList = [{\n  test: /firefox|iceweasel|fxios/i,\n  describe(ua) {\n    const browser = {\n      name: 'Firefox',\n      version: getMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua),\n      os: ua.toLowerCase().includes('fxios') ? 'iOS' : undefined\n    };\n    return browser;\n  }\n}, {\n  test: /chrom|crios|crmo/i,\n  describe(ua) {\n    const browser = {\n      name: 'Chrome',\n      version: getMatch(/(?:chrome|chromium|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i, ua),\n      os: ua.toLowerCase().includes('crios') ? 'iOS' : undefined\n    };\n    return browser;\n  }\n}, /* Safari */\n{\n  test: /safari|applewebkit/i,\n  describe(ua) {\n    const browser = {\n      name: 'Safari',\n      version: getMatch(commonVersionIdentifier, ua),\n      os: ua.includes('mobile/') ? 'iOS' : 'macOS'\n    };\n    return browser;\n  }\n}];\nfunction getMatch(exp, ua) {\n  let id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const match = ua.match(exp);\n  return match && match.length >= id && match[id] || '';\n}\n\nvar version$1 = \"1.14.4\";\n\nconst version = version$1;\nconst protocolVersion = 10;\n\nclass VideoPreset {\n  constructor(width, height, maxBitrate, maxFramerate, priority) {\n    this.width = width;\n    this.height = height;\n    this.encoding = {\n      maxBitrate,\n      maxFramerate,\n      priority\n    };\n  }\n  get resolution() {\n    return {\n      width: this.width,\n      height: this.height,\n      frameRate: this.encoding.maxFramerate,\n      aspectRatio: this.width / this.height\n    };\n  }\n}\nconst backupCodecs = ['vp8', 'h264'];\nconst videoCodecs = ['vp8', 'h264', 'vp9', 'av1'];\nfunction isBackupCodec(codec) {\n  return !!backupCodecs.find(backup => backup === codec);\n}\nvar AudioPresets;\n(function (AudioPresets) {\n  AudioPresets.telephone = {\n    maxBitrate: 12000\n  };\n  AudioPresets.speech = {\n    maxBitrate: 20000\n  };\n  AudioPresets.music = {\n    maxBitrate: 32000\n  };\n  AudioPresets.musicStereo = {\n    maxBitrate: 48000\n  };\n  AudioPresets.musicHighQuality = {\n    maxBitrate: 64000\n  };\n  AudioPresets.musicHighQualityStereo = {\n    maxBitrate: 96000\n  };\n})(AudioPresets || (AudioPresets = {}));\n/**\n * Sane presets for video resolution/encoding\n */\nconst VideoPresets = {\n  h90: new VideoPreset(160, 90, 90000, 20),\n  h180: new VideoPreset(320, 180, 160000, 20),\n  h216: new VideoPreset(384, 216, 180000, 20),\n  h360: new VideoPreset(640, 360, 450000, 20),\n  h540: new VideoPreset(960, 540, 800000, 25),\n  h720: new VideoPreset(1280, 720, 1700000, 30),\n  h1080: new VideoPreset(1920, 1080, 3000000, 30),\n  h1440: new VideoPreset(2560, 1440, 5000000, 30),\n  h2160: new VideoPreset(3840, 2160, 8000000, 30)\n};\n/**\n * Four by three presets\n */\nconst VideoPresets43 = {\n  h120: new VideoPreset(160, 120, 70000, 20),\n  h180: new VideoPreset(240, 180, 125000, 20),\n  h240: new VideoPreset(320, 240, 140000, 20),\n  h360: new VideoPreset(480, 360, 330000, 20),\n  h480: new VideoPreset(640, 480, 500000, 20),\n  h540: new VideoPreset(720, 540, 600000, 25),\n  h720: new VideoPreset(960, 720, 1300000, 30),\n  h1080: new VideoPreset(1440, 1080, 2300000, 30),\n  h1440: new VideoPreset(1920, 1440, 3800000, 30)\n};\nconst ScreenSharePresets = {\n  h360fps3: new VideoPreset(640, 360, 200000, 3, 'medium'),\n  h720fps5: new VideoPreset(1280, 720, 400000, 5, 'medium'),\n  h720fps15: new VideoPreset(1280, 720, 1500000, 15, 'medium'),\n  h720fps30: new VideoPreset(1280, 720, 2000000, 30, 'medium'),\n  h1080fps15: new VideoPreset(1920, 1080, 2500000, 15, 'medium'),\n  h1080fps30: new VideoPreset(1920, 1080, 4000000, 30, 'medium')\n};\n\nfunction cloneDeep(value) {\n  if (typeof value === 'undefined') {\n    return;\n  }\n  if (typeof structuredClone === 'function') {\n    return structuredClone(value);\n  } else {\n    return JSON.parse(JSON.stringify(value));\n  }\n}\n\n/**\n * Events are the primary way LiveKit notifies your application of changes.\n *\n * The following are events emitted by [[Room]], listen to room events like\n *\n * ```typescript\n * room.on(RoomEvent.TrackPublished, (track, publication, participant) => {})\n * ```\n */\nvar RoomEvent;\n(function (RoomEvent) {\n  /**\n   * When the connection to the server has been established\n   */\n  RoomEvent[\"Connected\"] = \"connected\";\n  /**\n   * When the connection to the server has been interrupted and it's attempting\n   * to reconnect.\n   */\n  RoomEvent[\"Reconnecting\"] = \"reconnecting\";\n  /**\n   * Fires when a reconnection has been successful.\n   */\n  RoomEvent[\"Reconnected\"] = \"reconnected\";\n  /**\n   * When disconnected from room. This fires when room.disconnect() is called or\n   * when an unrecoverable connection issue had occured\n   */\n  RoomEvent[\"Disconnected\"] = \"disconnected\";\n  /**\n   * Whenever the connection state of the room changes\n   *\n   * args: ([[ConnectionState]])\n   */\n  RoomEvent[\"ConnectionStateChanged\"] = \"connectionStateChanged\";\n  /**\n   * @deprecated StateChanged has been renamed to ConnectionStateChanged\n   */\n  RoomEvent[\"StateChanged\"] = \"connectionStateChanged\";\n  /**\n   * When input or output devices on the machine have changed.\n   */\n  RoomEvent[\"MediaDevicesChanged\"] = \"mediaDevicesChanged\";\n  /**\n   * When a [[RemoteParticipant]] joins *after* the local\n   * participant. It will not emit events for participants that are already\n   * in the room\n   *\n   * args: ([[RemoteParticipant]])\n   */\n  RoomEvent[\"ParticipantConnected\"] = \"participantConnected\";\n  /**\n   * When a [[RemoteParticipant]] leaves *after* the local\n   * participant has joined.\n   *\n   * args: ([[RemoteParticipant]])\n   */\n  RoomEvent[\"ParticipantDisconnected\"] = \"participantDisconnected\";\n  /**\n   * When a new track is published to room *after* the local\n   * participant has joined. It will not fire for tracks that are already published.\n   *\n   * A track published doesn't mean the participant has subscribed to it. It's\n   * simply reflecting the state of the room.\n   *\n   * args: ([[RemoteTrackPublication]], [[RemoteParticipant]])\n   */\n  RoomEvent[\"TrackPublished\"] = \"trackPublished\";\n  /**\n   * The [[LocalParticipant]] has subscribed to a new track. This event will **always**\n   * fire as long as new tracks are ready for use.\n   *\n   * args: ([[RemoteTrack]], [[RemoteTrackPublication]], [[RemoteParticipant]])\n   */\n  RoomEvent[\"TrackSubscribed\"] = \"trackSubscribed\";\n  /**\n   * Could not subscribe to a track\n   *\n   * args: (track sid, [[RemoteParticipant]])\n   */\n  RoomEvent[\"TrackSubscriptionFailed\"] = \"trackSubscriptionFailed\";\n  /**\n   * A [[RemoteParticipant]] has unpublished a track\n   *\n   * args: ([[RemoteTrackPublication]], [[RemoteParticipant]])\n   */\n  RoomEvent[\"TrackUnpublished\"] = \"trackUnpublished\";\n  /**\n   * A subscribed track is no longer available. Clients should listen to this\n   * event and ensure they detach tracks.\n   *\n   * args: ([[Track]], [[RemoteTrackPublication]], [[RemoteParticipant]])\n   */\n  RoomEvent[\"TrackUnsubscribed\"] = \"trackUnsubscribed\";\n  /**\n   * A track that was muted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]\n   *\n   * args: ([[TrackPublication]], [[Participant]])\n   */\n  RoomEvent[\"TrackMuted\"] = \"trackMuted\";\n  /**\n   * A track that was unmuted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]\n   *\n   * args: ([[TrackPublication]], [[Participant]])\n   */\n  RoomEvent[\"TrackUnmuted\"] = \"trackUnmuted\";\n  /**\n   * A local track was published successfully. This event is helpful to know\n   * when to update your local UI with the newly published track.\n   *\n   * args: ([[LocalTrackPublication]], [[LocalParticipant]])\n   */\n  RoomEvent[\"LocalTrackPublished\"] = \"localTrackPublished\";\n  /**\n   * A local track was unpublished. This event is helpful to know when to remove\n   * the local track from your UI.\n   *\n   * When a user stops sharing their screen by pressing \"End\" on the browser UI,\n   * this event will also fire.\n   *\n   * args: ([[LocalTrackPublication]], [[LocalParticipant]])\n   */\n  RoomEvent[\"LocalTrackUnpublished\"] = \"localTrackUnpublished\";\n  /**\n   * When a local audio track is published the SDK checks whether there is complete silence\n   * on that track and emits the LocalAudioSilenceDetected event in that case.\n   * This allows for applications to show UI informing users that they might have to\n   * reset their audio hardware or check for proper device connectivity.\n   */\n  RoomEvent[\"LocalAudioSilenceDetected\"] = \"localAudioSilenceDetected\";\n  /**\n   * Active speakers changed. List of speakers are ordered by their audio level.\n   * loudest speakers first. This will include the LocalParticipant too.\n   *\n   * Speaker updates are sent only to the publishing participant and their subscribers.\n   *\n   * args: (Array<[[Participant]]>)\n   */\n  RoomEvent[\"ActiveSpeakersChanged\"] = \"activeSpeakersChanged\";\n  /**\n   * Participant metadata is a simple way for app-specific state to be pushed to\n   * all users.\n   * When RoomService.UpdateParticipantMetadata is called to change a participant's\n   * state, *all*  participants in the room will fire this event.\n   *\n   * args: (prevMetadata: string, [[Participant]])\n   *\n   */\n  RoomEvent[\"ParticipantMetadataChanged\"] = \"participantMetadataChanged\";\n  /**\n   * Participant's display name changed\n   *\n   * args: (name: string, [[Participant]])\n   *\n   */\n  RoomEvent[\"ParticipantNameChanged\"] = \"participantNameChanged\";\n  /**\n   * Room metadata is a simple way for app-specific state to be pushed to\n   * all users.\n   * When RoomService.UpdateRoomMetadata is called to change a room's state,\n   * *all*  participants in the room will fire this event.\n   *\n   * args: (string)\n   */\n  RoomEvent[\"RoomMetadataChanged\"] = \"roomMetadataChanged\";\n  /**\n   * Data received from another participant.\n   * Data packets provides the ability to use LiveKit to send/receive arbitrary payloads.\n   * All participants in the room will receive the messages sent to the room.\n   *\n   * args: (payload: Uint8Array, participant: [[Participant]], kind: [[DataPacket_Kind]], topic?: string)\n   */\n  RoomEvent[\"DataReceived\"] = \"dataReceived\";\n  /**\n   * Connection quality was changed for a Participant. It'll receive updates\n   * from the local participant, as well as any [[RemoteParticipant]]s that we are\n   * subscribed to.\n   *\n   * args: (connectionQuality: [[ConnectionQuality]], participant: [[Participant]])\n   */\n  RoomEvent[\"ConnectionQualityChanged\"] = \"connectionQualityChanged\";\n  /**\n   * StreamState indicates if a subscribed (remote) track has been paused by the SFU\n   * (typically this happens because of subscriber's bandwidth constraints)\n   *\n   * When bandwidth conditions allow, the track will be resumed automatically.\n   * TrackStreamStateChanged will also be emitted when that happens.\n   *\n   * args: (pub: [[RemoteTrackPublication]], streamState: [[Track.StreamState]],\n   *        participant: [[RemoteParticipant]])\n   */\n  RoomEvent[\"TrackStreamStateChanged\"] = \"trackStreamStateChanged\";\n  /**\n   * One of subscribed tracks have changed its permissions for the current\n   * participant. If permission was revoked, then the track will no longer\n   * be subscribed. If permission was granted, a TrackSubscribed event will\n   * be emitted.\n   *\n   * args: (pub: [[RemoteTrackPublication]],\n   *        status: [[TrackPublication.PermissionStatus]],\n   *        participant: [[RemoteParticipant]])\n   */\n  RoomEvent[\"TrackSubscriptionPermissionChanged\"] = \"trackSubscriptionPermissionChanged\";\n  /**\n   * One of subscribed tracks have changed its status for the current\n   * participant.\n   *\n   * args: (pub: [[RemoteTrackPublication]],\n   *        status: [[TrackPublication.SubscriptionStatus]],\n   *        participant: [[RemoteParticipant]])\n   */\n  RoomEvent[\"TrackSubscriptionStatusChanged\"] = \"trackSubscriptionStatusChanged\";\n  /**\n   * LiveKit will attempt to autoplay all audio tracks when you attach them to\n   * audio elements. However, if that fails, we'll notify you via AudioPlaybackStatusChanged.\n   * `Room.canPlaybackAudio` will indicate if audio playback is permitted.\n   */\n  RoomEvent[\"AudioPlaybackStatusChanged\"] = \"audioPlaybackChanged\";\n  /**\n   * When we have encountered an error while attempting to create a track.\n   * The errors take place in getUserMedia().\n   * Use MediaDeviceFailure.getFailure(error) to get the reason of failure.\n   * [[LocalParticipant.lastCameraError]] and [[LocalParticipant.lastMicrophoneError]]\n   * will indicate if it had an error while creating the audio or video track respectively.\n   *\n   * args: (error: Error)\n   */\n  RoomEvent[\"MediaDevicesError\"] = \"mediaDevicesError\";\n  /**\n   * A participant's permission has changed. Currently only fired on LocalParticipant.\n   * args: (prevPermissions: [[ParticipantPermission]], participant: [[Participant]])\n   */\n  RoomEvent[\"ParticipantPermissionsChanged\"] = \"participantPermissionsChanged\";\n  /**\n   * Signal connected, can publish tracks.\n   */\n  RoomEvent[\"SignalConnected\"] = \"signalConnected\";\n  /**\n   * Recording of a room has started/stopped. Room.isRecording will be updated too.\n   * args: (isRecording: boolean)\n   */\n  RoomEvent[\"RecordingStatusChanged\"] = \"recordingStatusChanged\";\n  RoomEvent[\"ParticipantEncryptionStatusChanged\"] = \"participantEncryptionStatusChanged\";\n  RoomEvent[\"EncryptionError\"] = \"encryptionError\";\n  /**\n   * Emits whenever the current buffer status of a data channel changes\n   * args: (isLow: boolean, kind: [[DataPacket_Kind]])\n   */\n  RoomEvent[\"DCBufferStatusChanged\"] = \"dcBufferStatusChanged\";\n  /**\n   * Triggered by a call to room.switchActiveDevice\n   * args: (kind: MediaDeviceKind, deviceId: string)\n   */\n  RoomEvent[\"ActiveDeviceChanged\"] = \"activeDeviceChanged\";\n})(RoomEvent || (RoomEvent = {}));\nvar ParticipantEvent;\n(function (ParticipantEvent) {\n  /**\n   * When a new track is published to room *after* the local\n   * participant has joined. It will not fire for tracks that are already published.\n   *\n   * A track published doesn't mean the participant has subscribed to it. It's\n   * simply reflecting the state of the room.\n   *\n   * args: ([[RemoteTrackPublication]])\n   */\n  ParticipantEvent[\"TrackPublished\"] = \"trackPublished\";\n  /**\n   * Successfully subscribed to the [[RemoteParticipant]]'s track.\n   * This event will **always** fire as long as new tracks are ready for use.\n   *\n   * args: ([[RemoteTrack]], [[RemoteTrackPublication]])\n   */\n  ParticipantEvent[\"TrackSubscribed\"] = \"trackSubscribed\";\n  /**\n   * Could not subscribe to a track\n   *\n   * args: (track sid)\n   */\n  ParticipantEvent[\"TrackSubscriptionFailed\"] = \"trackSubscriptionFailed\";\n  /**\n   * A [[RemoteParticipant]] has unpublished a track\n   *\n   * args: ([[RemoteTrackPublication]])\n   */\n  ParticipantEvent[\"TrackUnpublished\"] = \"trackUnpublished\";\n  /**\n   * A subscribed track is no longer available. Clients should listen to this\n   * event and ensure they detach tracks.\n   *\n   * args: ([[RemoteTrack]], [[RemoteTrackPublication]])\n   */\n  ParticipantEvent[\"TrackUnsubscribed\"] = \"trackUnsubscribed\";\n  /**\n   * A track that was muted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]\n   *\n   * args: ([[TrackPublication]])\n   */\n  ParticipantEvent[\"TrackMuted\"] = \"trackMuted\";\n  /**\n   * A track that was unmuted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]\n   *\n   * args: ([[TrackPublication]])\n   */\n  ParticipantEvent[\"TrackUnmuted\"] = \"trackUnmuted\";\n  /**\n   * A local track was published successfully. This event is helpful to know\n   * when to update your local UI with the newly published track.\n   *\n   * args: ([[LocalTrackPublication]])\n   */\n  ParticipantEvent[\"LocalTrackPublished\"] = \"localTrackPublished\";\n  /**\n   * A local track was unpublished. This event is helpful to know when to remove\n   * the local track from your UI.\n   *\n   * When a user stops sharing their screen by pressing \"End\" on the browser UI,\n   * this event will also fire.\n   *\n   * args: ([[LocalTrackPublication]])\n   */\n  ParticipantEvent[\"LocalTrackUnpublished\"] = \"localTrackUnpublished\";\n  /**\n   * Participant metadata is a simple way for app-specific state to be pushed to\n   * all users.\n   * When RoomService.UpdateParticipantMetadata is called to change a participant's\n   * state, *all*  participants in the room will fire this event.\n   * To access the current metadata, see [[Participant.metadata]].\n   *\n   * args: (prevMetadata: string)\n   *\n   */\n  ParticipantEvent[\"ParticipantMetadataChanged\"] = \"participantMetadataChanged\";\n  /**\n   * Participant's display name changed\n   *\n   * args: (name: string, [[Participant]])\n   *\n   */\n  ParticipantEvent[\"ParticipantNameChanged\"] = \"participantNameChanged\";\n  /**\n   * Data received from this participant as sender.\n   * Data packets provides the ability to use LiveKit to send/receive arbitrary payloads.\n   * All participants in the room will receive the messages sent to the room.\n   *\n   * args: (payload: Uint8Array, kind: [[DataPacket_Kind]])\n   */\n  ParticipantEvent[\"DataReceived\"] = \"dataReceived\";\n  /**\n   * Has speaking status changed for the current participant\n   *\n   * args: (speaking: boolean)\n   */\n  ParticipantEvent[\"IsSpeakingChanged\"] = \"isSpeakingChanged\";\n  /**\n   * Connection quality was changed for a Participant. It'll receive updates\n   * from the local participant, as well as any [[RemoteParticipant]]s that we are\n   * subscribed to.\n   *\n   * args: (connectionQuality: [[ConnectionQuality]])\n   */\n  ParticipantEvent[\"ConnectionQualityChanged\"] = \"connectionQualityChanged\";\n  /**\n   * StreamState indicates if a subscribed track has been paused by the SFU\n   * (typically this happens because of subscriber's bandwidth constraints)\n   *\n   * When bandwidth conditions allow, the track will be resumed automatically.\n   * TrackStreamStateChanged will also be emitted when that happens.\n   *\n   * args: (pub: [[RemoteTrackPublication]], streamState: [[Track.StreamState]])\n   */\n  ParticipantEvent[\"TrackStreamStateChanged\"] = \"trackStreamStateChanged\";\n  /**\n   * One of subscribed tracks have changed its permissions for the current\n   * participant. If permission was revoked, then the track will no longer\n   * be subscribed. If permission was granted, a TrackSubscribed event will\n   * be emitted.\n   *\n   * args: (pub: [[RemoteTrackPublication]],\n   *        status: [[TrackPublication.SubscriptionStatus]])\n   */\n  ParticipantEvent[\"TrackSubscriptionPermissionChanged\"] = \"trackSubscriptionPermissionChanged\";\n  /**\n   * One of the remote participants publications has changed its subscription status.\n   *\n   */\n  ParticipantEvent[\"TrackSubscriptionStatusChanged\"] = \"trackSubscriptionStatusChanged\";\n  // fired only on LocalParticipant\n  /** @internal */\n  ParticipantEvent[\"MediaDevicesError\"] = \"mediaDevicesError\";\n  // fired only on LocalParticipant\n  /** @internal */\n  ParticipantEvent[\"AudioStreamAcquired\"] = \"audioStreamAcquired\";\n  /**\n   * A participant's permission has changed. Currently only fired on LocalParticipant.\n   * args: (prevPermissions: [[ParticipantPermission]])\n   */\n  ParticipantEvent[\"ParticipantPermissionsChanged\"] = \"participantPermissionsChanged\";\n  /** @internal */\n  ParticipantEvent[\"PCTrackAdded\"] = \"pcTrackAdded\";\n})(ParticipantEvent || (ParticipantEvent = {}));\n/** @internal */\nvar EngineEvent;\n(function (EngineEvent) {\n  EngineEvent[\"TransportsCreated\"] = \"transportsCreated\";\n  EngineEvent[\"Connected\"] = \"connected\";\n  EngineEvent[\"Disconnected\"] = \"disconnected\";\n  EngineEvent[\"Resuming\"] = \"resuming\";\n  EngineEvent[\"Resumed\"] = \"resumed\";\n  EngineEvent[\"Restarting\"] = \"restarting\";\n  EngineEvent[\"Restarted\"] = \"restarted\";\n  EngineEvent[\"SignalResumed\"] = \"signalResumed\";\n  EngineEvent[\"SignalRestarted\"] = \"signalRestarted\";\n  EngineEvent[\"Closing\"] = \"closing\";\n  EngineEvent[\"MediaTrackAdded\"] = \"mediaTrackAdded\";\n  EngineEvent[\"ActiveSpeakersUpdate\"] = \"activeSpeakersUpdate\";\n  EngineEvent[\"DataPacketReceived\"] = \"dataPacketReceived\";\n  EngineEvent[\"RTPVideoMapUpdate\"] = \"rtpVideoMapUpdate\";\n  EngineEvent[\"DCBufferStatusChanged\"] = \"dcBufferStatusChanged\";\n  EngineEvent[\"ParticipantUpdate\"] = \"participantUpdate\";\n  EngineEvent[\"RoomUpdate\"] = \"roomUpdate\";\n  EngineEvent[\"SpeakersChanged\"] = \"speakersChanged\";\n  EngineEvent[\"StreamStateChanged\"] = \"streamStateChanged\";\n  EngineEvent[\"ConnectionQualityUpdate\"] = \"connectionQualityUpdate\";\n  EngineEvent[\"SubscriptionError\"] = \"subscriptionError\";\n  EngineEvent[\"SubscriptionPermissionUpdate\"] = \"subscriptionPermissionUpdate\";\n})(EngineEvent || (EngineEvent = {}));\nvar TrackEvent;\n(function (TrackEvent) {\n  TrackEvent[\"Message\"] = \"message\";\n  TrackEvent[\"Muted\"] = \"muted\";\n  TrackEvent[\"Unmuted\"] = \"unmuted\";\n  /**\n   * Only fires on LocalTracks\n   */\n  TrackEvent[\"Restarted\"] = \"restarted\";\n  TrackEvent[\"Ended\"] = \"ended\";\n  TrackEvent[\"Subscribed\"] = \"subscribed\";\n  TrackEvent[\"Unsubscribed\"] = \"unsubscribed\";\n  /** @internal */\n  TrackEvent[\"UpdateSettings\"] = \"updateSettings\";\n  /** @internal */\n  TrackEvent[\"UpdateSubscription\"] = \"updateSubscription\";\n  /** @internal */\n  TrackEvent[\"AudioPlaybackStarted\"] = \"audioPlaybackStarted\";\n  /** @internal */\n  TrackEvent[\"AudioPlaybackFailed\"] = \"audioPlaybackFailed\";\n  /**\n   * @internal\n   * Only fires on LocalAudioTrack instances\n   */\n  TrackEvent[\"AudioSilenceDetected\"] = \"audioSilenceDetected\";\n  /** @internal */\n  TrackEvent[\"VisibilityChanged\"] = \"visibilityChanged\";\n  /** @internal */\n  TrackEvent[\"VideoDimensionsChanged\"] = \"videoDimensionsChanged\";\n  /** @internal */\n  TrackEvent[\"ElementAttached\"] = \"elementAttached\";\n  /** @internal */\n  TrackEvent[\"ElementDetached\"] = \"elementDetached\";\n  /**\n   * @internal\n   * Only fires on LocalTracks\n   */\n  TrackEvent[\"UpstreamPaused\"] = \"upstreamPaused\";\n  /**\n   * @internal\n   * Only fires on LocalTracks\n   */\n  TrackEvent[\"UpstreamResumed\"] = \"upstreamResumed\";\n  /**\n   * @internal\n   * Fires on RemoteTrackPublication\n   */\n  TrackEvent[\"SubscriptionPermissionChanged\"] = \"subscriptionPermissionChanged\";\n  /**\n   * Fires on RemoteTrackPublication\n   */\n  TrackEvent[\"SubscriptionStatusChanged\"] = \"subscriptionStatusChanged\";\n  /**\n   * Fires on RemoteTrackPublication\n   */\n  TrackEvent[\"SubscriptionFailed\"] = \"subscriptionFailed\";\n})(TrackEvent || (TrackEvent = {}));\n\nconst BACKGROUND_REACTION_DELAY = 5000;\n// keep old audio elements when detached, we would re-use them since on iOS\n// Safari tracks which audio elements have been \"blessed\" by the user.\nconst recycledElements = [];\nclass Track extends eventsExports.EventEmitter {\n  constructor(mediaTrack, kind) {\n    super();\n    this.attachedElements = [];\n    this.isMuted = false;\n    /**\n     * indicates current state of stream, it'll indicate `paused` if the track\n     * has been paused by congestion controller\n     */\n    this.streamState = Track.StreamState.Active;\n    this.isInBackground = false;\n    this._currentBitrate = 0;\n    this.appVisibilityChangedListener = () => {\n      if (this.backgroundTimeout) {\n        clearTimeout(this.backgroundTimeout);\n      }\n      // delay app visibility update if it goes to hidden\n      // update immediately if it comes back to focus\n      if (document.visibilityState === 'hidden') {\n        this.backgroundTimeout = setTimeout(() => this.handleAppVisibilityChanged(), BACKGROUND_REACTION_DELAY);\n      } else {\n        this.handleAppVisibilityChanged();\n      }\n    };\n    this.setMaxListeners(100);\n    this.kind = kind;\n    this._mediaStreamTrack = mediaTrack;\n    this._mediaStreamID = mediaTrack.id;\n    this.source = Track.Source.Unknown;\n  }\n  /** current receive bits per second */\n  get currentBitrate() {\n    return this._currentBitrate;\n  }\n  get mediaStreamTrack() {\n    return this._mediaStreamTrack;\n  }\n  /**\n   * @internal\n   * used for keep mediaStream's first id, since it's id might change\n   * if we disable/enable a track\n   */\n  get mediaStreamID() {\n    return this._mediaStreamID;\n  }\n  attach(element) {\n    let elementType = 'audio';\n    if (this.kind === Track.Kind.Video) {\n      elementType = 'video';\n    }\n    if (this.attachedElements.length === 0 && Track.Kind.Video) {\n      this.addAppVisibilityListener();\n    }\n    if (!element) {\n      if (elementType === 'audio') {\n        recycledElements.forEach(e => {\n          if (e.parentElement === null && !element) {\n            element = e;\n          }\n        });\n        if (element) {\n          // remove it from pool\n          recycledElements.splice(recycledElements.indexOf(element), 1);\n        }\n      }\n      if (!element) {\n        element = document.createElement(elementType);\n      }\n    }\n    if (!this.attachedElements.includes(element)) {\n      this.attachedElements.push(element);\n    }\n    // even if we believe it's already attached to the element, it's possible\n    // the element's srcObject was set to something else out of band.\n    // we'll want to re-attach it in that case\n    attachToElement(this.mediaStreamTrack, element);\n    // handle auto playback failures\n    const allMediaStreamTracks = element.srcObject.getTracks();\n    if (allMediaStreamTracks.some(tr => tr.kind === 'audio')) {\n      // manually play audio to detect audio playback status\n      element.play().then(() => {\n        this.emit(TrackEvent.AudioPlaybackStarted);\n      }).catch(e => {\n        if (e.name === 'NotAllowedError') {\n          this.emit(TrackEvent.AudioPlaybackFailed, e);\n        } else {\n          livekitLogger.warn('could not playback audio', e);\n        }\n        // If audio playback isn't allowed make sure we still play back the video\n        if (element && allMediaStreamTracks.some(tr => tr.kind === 'video') && e.name === 'NotAllowedError') {\n          element.muted = true;\n          element.play().catch(() => {\n            // catch for Safari, exceeded options at this point to automatically play the media element\n          });\n        }\n      });\n    }\n    this.emit(TrackEvent.ElementAttached, element);\n    return element;\n  }\n  detach(element) {\n    try {\n      // detach from a single element\n      if (element) {\n        detachTrack(this.mediaStreamTrack, element);\n        const idx = this.attachedElements.indexOf(element);\n        if (idx >= 0) {\n          this.attachedElements.splice(idx, 1);\n          this.recycleElement(element);\n          this.emit(TrackEvent.ElementDetached, element);\n        }\n        return element;\n      }\n      const detached = [];\n      this.attachedElements.forEach(elm => {\n        detachTrack(this.mediaStreamTrack, elm);\n        detached.push(elm);\n        this.recycleElement(elm);\n        this.emit(TrackEvent.ElementDetached, elm);\n      });\n      // remove all tracks\n      this.attachedElements = [];\n      return detached;\n    } finally {\n      if (this.attachedElements.length === 0) {\n        this.removeAppVisibilityListener();\n      }\n    }\n  }\n  stop() {\n    this.stopMonitor();\n    this._mediaStreamTrack.stop();\n  }\n  enable() {\n    this._mediaStreamTrack.enabled = true;\n  }\n  disable() {\n    this._mediaStreamTrack.enabled = false;\n  }\n  /* @internal */\n  stopMonitor() {\n    if (this.monitorInterval) {\n      clearInterval(this.monitorInterval);\n    }\n  }\n  recycleElement(element) {\n    if (element instanceof HTMLAudioElement) {\n      // we only need to re-use a single element\n      let shouldCache = true;\n      element.pause();\n      recycledElements.forEach(e => {\n        if (!e.parentElement) {\n          shouldCache = false;\n        }\n      });\n      if (shouldCache) {\n        recycledElements.push(element);\n      }\n    }\n  }\n  handleAppVisibilityChanged() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.isInBackground = document.visibilityState === 'hidden';\n    });\n  }\n  addAppVisibilityListener() {\n    if (isWeb()) {\n      this.isInBackground = document.visibilityState === 'hidden';\n      document.addEventListener('visibilitychange', this.appVisibilityChangedListener);\n    } else {\n      this.isInBackground = false;\n    }\n  }\n  removeAppVisibilityListener() {\n    if (isWeb()) {\n      document.removeEventListener('visibilitychange', this.appVisibilityChangedListener);\n    }\n  }\n}\n/** @internal */\nfunction attachToElement(track, element) {\n  let mediaStream;\n  if (element.srcObject instanceof MediaStream) {\n    mediaStream = element.srcObject;\n  } else {\n    mediaStream = new MediaStream();\n  }\n  // check if track matches existing track\n  let existingTracks;\n  if (track.kind === 'audio') {\n    existingTracks = mediaStream.getAudioTracks();\n  } else {\n    existingTracks = mediaStream.getVideoTracks();\n  }\n  if (!existingTracks.includes(track)) {\n    existingTracks.forEach(et => {\n      mediaStream.removeTrack(et);\n    });\n    mediaStream.addTrack(track);\n  }\n  if (!isSafari() || !(element instanceof HTMLVideoElement)) {\n    // when in low power mode (applies to both macOS and iOS), Safari will show a play/pause overlay\n    // when a video starts that has the `autoplay` attribute is set.\n    // we work around this by _not_ setting the autoplay attribute on safari and instead call `setTimeout(() => el.play(),0)` further down\n    element.autoplay = true;\n  }\n  // In case there are no audio tracks present on the mediastream, we set the element as muted to ensure autoplay works\n  element.muted = mediaStream.getAudioTracks().length === 0;\n  if (element instanceof HTMLVideoElement) {\n    element.playsInline = true;\n  }\n  // avoid flicker\n  if (element.srcObject !== mediaStream) {\n    element.srcObject = mediaStream;\n    if ((isSafari() || isFireFox()) && element instanceof HTMLVideoElement) {\n      // Firefox also has a timing issue where video doesn't actually get attached unless\n      // performed out-of-band\n      // Safari 15 has a bug where in certain layouts, video element renders\n      // black until the page is resized or other changes take place.\n      // Resetting the src triggers it to render.\n      // https://developer.apple.com/forums/thread/690523\n      setTimeout(() => {\n        element.srcObject = mediaStream;\n        // Safari 15 sometimes fails to start a video\n        // when the window is backgrounded before the first frame is drawn\n        // manually calling play here seems to fix that\n        element.play().catch(() => {\n          /* do nothing */\n        });\n      }, 0);\n    }\n  }\n}\n/** @internal */\nfunction detachTrack(track, element) {\n  if (element.srcObject instanceof MediaStream) {\n    const mediaStream = element.srcObject;\n    mediaStream.removeTrack(track);\n    if (mediaStream.getTracks().length > 0) {\n      element.srcObject = mediaStream;\n    } else {\n      element.srcObject = null;\n    }\n  }\n}\n(function (Track) {\n  let Kind;\n  (function (Kind) {\n    Kind[\"Audio\"] = \"audio\";\n    Kind[\"Video\"] = \"video\";\n    Kind[\"Unknown\"] = \"unknown\";\n  })(Kind = Track.Kind || (Track.Kind = {}));\n  let Source;\n  (function (Source) {\n    Source[\"Camera\"] = \"camera\";\n    Source[\"Microphone\"] = \"microphone\";\n    Source[\"ScreenShare\"] = \"screen_share\";\n    Source[\"ScreenShareAudio\"] = \"screen_share_audio\";\n    Source[\"Unknown\"] = \"unknown\";\n  })(Source = Track.Source || (Track.Source = {}));\n  let StreamState$1;\n  (function (StreamState) {\n    StreamState[\"Active\"] = \"active\";\n    StreamState[\"Paused\"] = \"paused\";\n    StreamState[\"Unknown\"] = \"unknown\";\n  })(StreamState$1 = Track.StreamState || (Track.StreamState = {}));\n  /** @internal */\n  function kindToProto(k) {\n    switch (k) {\n      case Kind.Audio:\n        return TrackType.AUDIO;\n      case Kind.Video:\n        return TrackType.VIDEO;\n      default:\n        // FIXME this was UNRECOGNIZED before\n        return TrackType.DATA;\n    }\n  }\n  Track.kindToProto = kindToProto;\n  /** @internal */\n  function kindFromProto(t) {\n    switch (t) {\n      case TrackType.AUDIO:\n        return Kind.Audio;\n      case TrackType.VIDEO:\n        return Kind.Video;\n      default:\n        return Kind.Unknown;\n    }\n  }\n  Track.kindFromProto = kindFromProto;\n  /** @internal */\n  function sourceToProto(s) {\n    switch (s) {\n      case Source.Camera:\n        return TrackSource.CAMERA;\n      case Source.Microphone:\n        return TrackSource.MICROPHONE;\n      case Source.ScreenShare:\n        return TrackSource.SCREEN_SHARE;\n      case Source.ScreenShareAudio:\n        return TrackSource.SCREEN_SHARE_AUDIO;\n      default:\n        return TrackSource.UNKNOWN;\n    }\n  }\n  Track.sourceToProto = sourceToProto;\n  /** @internal */\n  function sourceFromProto(s) {\n    switch (s) {\n      case TrackSource.CAMERA:\n        return Source.Camera;\n      case TrackSource.MICROPHONE:\n        return Source.Microphone;\n      case TrackSource.SCREEN_SHARE:\n        return Source.ScreenShare;\n      case TrackSource.SCREEN_SHARE_AUDIO:\n        return Source.ScreenShareAudio;\n      default:\n        return Source.Unknown;\n    }\n  }\n  Track.sourceFromProto = sourceFromProto;\n  /** @internal */\n  function streamStateFromProto(s) {\n    switch (s) {\n      case StreamState.ACTIVE:\n        return StreamState$1.Active;\n      case StreamState.PAUSED:\n        return StreamState$1.Paused;\n      default:\n        return StreamState$1.Unknown;\n    }\n  }\n  Track.streamStateFromProto = streamStateFromProto;\n})(Track || (Track = {}));\n\nfunction mergeDefaultOptions(options, audioDefaults, videoDefaults) {\n  var _a;\n  const opts = (_a = cloneDeep(options)) !== null && _a !== void 0 ? _a : {};\n  if (opts.audio === true) opts.audio = {};\n  if (opts.video === true) opts.video = {};\n  // use defaults\n  if (opts.audio) {\n    mergeObjectWithoutOverwriting(opts.audio, audioDefaults);\n  }\n  if (opts.video) {\n    mergeObjectWithoutOverwriting(opts.video, videoDefaults);\n  }\n  return opts;\n}\nfunction mergeObjectWithoutOverwriting(mainObject, objectToMerge) {\n  Object.keys(objectToMerge).forEach(key => {\n    if (mainObject[key] === undefined) mainObject[key] = objectToMerge[key];\n  });\n  return mainObject;\n}\nfunction constraintsForOptions(options) {\n  const constraints = {};\n  if (options.video) {\n    // default video options\n    if (typeof options.video === 'object') {\n      const videoOptions = {};\n      const target = videoOptions;\n      const source = options.video;\n      Object.keys(source).forEach(key => {\n        switch (key) {\n          case 'resolution':\n            // flatten VideoResolution fields\n            mergeObjectWithoutOverwriting(target, source.resolution);\n            break;\n          default:\n            target[key] = source[key];\n        }\n      });\n      constraints.video = videoOptions;\n    } else {\n      constraints.video = options.video;\n    }\n  } else {\n    constraints.video = false;\n  }\n  if (options.audio) {\n    if (typeof options.audio === 'object') {\n      constraints.audio = options.audio;\n    } else {\n      constraints.audio = true;\n    }\n  } else {\n    constraints.audio = false;\n  }\n  return constraints;\n}\n/**\n * This function detects silence on a given [[Track]] instance.\n * Returns true if the track seems to be entirely silent.\n */\nfunction detectSilence(track) {\n  let timeOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  return __awaiter(this, void 0, void 0, function* () {\n    const ctx = getNewAudioContext();\n    if (ctx) {\n      const analyser = ctx.createAnalyser();\n      analyser.fftSize = 2048;\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n      const source = ctx.createMediaStreamSource(new MediaStream([track.mediaStreamTrack]));\n      source.connect(analyser);\n      yield sleep(timeOffset);\n      analyser.getByteTimeDomainData(dataArray);\n      const someNoise = dataArray.some(sample => sample !== 128 && sample !== 0);\n      ctx.close();\n      return !someNoise;\n    }\n    return false;\n  });\n}\n/**\n * @internal\n */\nfunction getNewAudioContext() {\n  const AudioContext =\n  // @ts-ignore\n  typeof window !== 'undefined' && (window.AudioContext || window.webkitAudioContext);\n  if (AudioContext) {\n    return new AudioContext({\n      latencyHint: 'interactive'\n    });\n  }\n}\n/**\n * @internal\n */\nfunction sourceToKind(source) {\n  if (source === Track.Source.Microphone) {\n    return 'audioinput';\n  } else if (source === Track.Source.Camera) {\n    return 'videoinput';\n  } else {\n    return undefined;\n  }\n}\n/**\n * @internal\n */\nfunction screenCaptureToDisplayMediaStreamOptions(options) {\n  var _a, _b;\n  let videoConstraints = (_a = options.video) !== null && _a !== void 0 ? _a : true;\n  if (options.resolution) {\n    videoConstraints = typeof videoConstraints === 'boolean' ? {} : videoConstraints;\n    if (isSafari()) {\n      videoConstraints = Object.assign(Object.assign({}, videoConstraints), {\n        width: {\n          max: options.resolution.width\n        },\n        height: {\n          max: options.resolution.height\n        },\n        frameRate: options.resolution.frameRate\n      });\n    } else {\n      videoConstraints = Object.assign(Object.assign({}, videoConstraints), {\n        width: {\n          ideal: options.resolution.width\n        },\n        height: {\n          ideal: options.resolution.height\n        },\n        frameRate: options.resolution.frameRate\n      });\n    }\n  }\n  return {\n    audio: (_b = options.audio) !== null && _b !== void 0 ? _b : false,\n    video: videoConstraints,\n    // @ts-expect-error support for experimental display media features\n    controller: options.controller,\n    selfBrowserSurface: options.selfBrowserSurface,\n    surfaceSwitching: options.surfaceSwitching,\n    systemAudio: options.systemAudio\n  };\n}\nfunction mimeTypeToVideoCodecString(mimeType) {\n  const codec = mimeType.split('/')[1].toLowerCase();\n  if (!videoCodecs.includes(codec)) {\n    throw Error(\"Video codec not supported: \".concat(codec));\n  }\n  return codec;\n}\n\nconst separator = '|';\nconst ddExtensionURI = 'https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension';\nfunction unpackStreamId(packed) {\n  const parts = packed.split(separator);\n  if (parts.length > 1) {\n    return [parts[0], packed.substr(parts[0].length + 1)];\n  }\n  return [packed, ''];\n}\nfunction sleep(duration) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise(resolve => setTimeout(resolve, duration));\n  });\n}\n/** @internal */\nfunction supportsTransceiver() {\n  return 'addTransceiver' in RTCPeerConnection.prototype;\n}\n/** @internal */\nfunction supportsAddTrack() {\n  return 'addTrack' in RTCPeerConnection.prototype;\n}\nfunction supportsAdaptiveStream() {\n  return typeof ResizeObserver !== undefined && typeof IntersectionObserver !== undefined;\n}\nfunction supportsDynacast() {\n  return supportsTransceiver();\n}\nfunction supportsAV1() {\n  if (!('getCapabilities' in RTCRtpSender)) {\n    return false;\n  }\n  const capabilities = RTCRtpSender.getCapabilities('video');\n  let hasAV1 = false;\n  if (capabilities) {\n    for (const codec of capabilities.codecs) {\n      if (codec.mimeType === 'video/AV1') {\n        hasAV1 = true;\n        break;\n      }\n    }\n  }\n  return hasAV1;\n}\nfunction supportsVP9() {\n  if (!('getCapabilities' in RTCRtpSender)) {\n    return false;\n  }\n  if (isFireFox()) {\n    // technically speaking FireFox supports VP9, but SVC publishing is broken\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1633876\n    return false;\n  }\n  const capabilities = RTCRtpSender.getCapabilities('video');\n  let hasVP9 = false;\n  if (capabilities) {\n    for (const codec of capabilities.codecs) {\n      if (codec.mimeType === 'video/VP9') {\n        hasVP9 = true;\n        break;\n      }\n    }\n  }\n  return hasVP9;\n}\nfunction isSVCCodec(codec) {\n  return codec === 'av1' || codec === 'vp9';\n}\nfunction supportsSetSinkId(elm) {\n  if (!document) {\n    return false;\n  }\n  if (!elm) {\n    elm = document.createElement('audio');\n  }\n  return 'setSinkId' in elm;\n}\nconst setCodecPreferencesVersions = {\n  Chrome: '100',\n  Safari: '15',\n  Firefox: '100'\n};\nfunction supportsSetCodecPreferences(transceiver) {\n  if (!isWeb()) {\n    return false;\n  }\n  if (!('setCodecPreferences' in transceiver)) {\n    return false;\n  }\n  const browser = getBrowser();\n  if (!(browser === null || browser === void 0 ? void 0 : browser.name) || !browser.version) {\n    // version is required\n    return false;\n  }\n  const v = setCodecPreferencesVersions[browser.name];\n  if (v) {\n    return compareVersions(browser.version, v) >= 0;\n  }\n  return false;\n}\nfunction isBrowserSupported() {\n  return supportsTransceiver() || supportsAddTrack();\n}\nfunction isFireFox() {\n  var _a;\n  return ((_a = getBrowser()) === null || _a === void 0 ? void 0 : _a.name) === 'Firefox';\n}\nfunction isChromiumBased() {\n  var _a;\n  return ((_a = getBrowser()) === null || _a === void 0 ? void 0 : _a.name) === 'Chrome';\n}\nfunction isSafari() {\n  var _a;\n  return ((_a = getBrowser()) === null || _a === void 0 ? void 0 : _a.name) === 'Safari';\n}\nfunction isMobile() {\n  if (!isWeb()) return false;\n  return /Tablet|iPad|Mobile|Android|BlackBerry/.test(navigator.userAgent);\n}\nfunction isWeb() {\n  return typeof document !== 'undefined';\n}\nfunction isReactNative() {\n  // navigator.product is deprecated on browsers, but will be set appropriately for react-native.\n  return navigator.product == 'ReactNative';\n}\nfunction isCloud(serverUrl) {\n  return serverUrl.hostname.endsWith('.livekit.cloud') || serverUrl.hostname.endsWith('.livekit.run');\n}\nfunction getLKReactNativeInfo() {\n  // global defined only for ReactNative.\n  // @ts-ignore\n  if (global && global.LiveKitReactNativeGlobal) {\n    // @ts-ignore\n    return global.LiveKitReactNativeGlobal;\n  }\n  return undefined;\n}\nfunction getReactNativeOs() {\n  if (!isReactNative()) {\n    return undefined;\n  }\n  let info = getLKReactNativeInfo();\n  if (info) {\n    return info.platform;\n  }\n  return undefined;\n}\nfunction getDevicePixelRatio() {\n  if (isWeb()) {\n    return window.devicePixelRatio;\n  }\n  if (isReactNative()) {\n    let info = getLKReactNativeInfo();\n    if (info) {\n      return info.devicePixelRatio;\n    }\n  }\n  return 1;\n}\nfunction compareVersions(v1, v2) {\n  const parts1 = v1.split('.');\n  const parts2 = v2.split('.');\n  const k = Math.min(parts1.length, parts2.length);\n  for (let i = 0; i < k; ++i) {\n    const p1 = parseInt(parts1[i], 10);\n    const p2 = parseInt(parts2[i], 10);\n    if (p1 > p2) return 1;\n    if (p1 < p2) return -1;\n    if (i === k - 1 && p1 === p2) return 0;\n  }\n  if (v1 === '' && v2 !== '') {\n    return -1;\n  } else if (v2 === '') {\n    return 1;\n  }\n  return parts1.length == parts2.length ? 0 : parts1.length < parts2.length ? -1 : 1;\n}\nfunction roDispatchCallback(entries) {\n  for (const entry of entries) {\n    entry.target.handleResize(entry);\n  }\n}\nfunction ioDispatchCallback(entries) {\n  for (const entry of entries) {\n    entry.target.handleVisibilityChanged(entry);\n  }\n}\nlet resizeObserver = null;\nconst getResizeObserver = () => {\n  if (!resizeObserver) resizeObserver = new ResizeObserver(roDispatchCallback);\n  return resizeObserver;\n};\nlet intersectionObserver = null;\nconst getIntersectionObserver = () => {\n  if (!intersectionObserver) {\n    intersectionObserver = new IntersectionObserver(ioDispatchCallback, {\n      root: null,\n      rootMargin: '0px'\n    });\n  }\n  return intersectionObserver;\n};\nfunction getClientInfo() {\n  var _a;\n  const info = new ClientInfo({\n    sdk: ClientInfo_SDK.JS,\n    protocol: protocolVersion,\n    version\n  });\n  if (isReactNative()) {\n    info.os = (_a = getReactNativeOs()) !== null && _a !== void 0 ? _a : '';\n  }\n  return info;\n}\nlet emptyVideoStreamTrack;\nfunction getEmptyVideoStreamTrack() {\n  if (!emptyVideoStreamTrack) {\n    emptyVideoStreamTrack = createDummyVideoStreamTrack();\n  }\n  return emptyVideoStreamTrack.clone();\n}\nfunction createDummyVideoStreamTrack() {\n  let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;\n  let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  let enabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let paintContent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const canvas = document.createElement('canvas');\n  // the canvas size is set to 16 by default, because electron apps seem to fail with smaller values\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  ctx === null || ctx === void 0 ? void 0 : ctx.fillRect(0, 0, canvas.width, canvas.height);\n  if (paintContent && ctx) {\n    ctx.beginPath();\n    ctx.arc(width / 2, height / 2, 50, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fillStyle = 'grey';\n    ctx.fill();\n  }\n  // @ts-ignore\n  const dummyStream = canvas.captureStream();\n  const [dummyTrack] = dummyStream.getTracks();\n  if (!dummyTrack) {\n    throw Error('Could not get empty media stream video track');\n  }\n  dummyTrack.enabled = enabled;\n  return dummyTrack;\n}\nlet emptyAudioStreamTrack;\nfunction getEmptyAudioStreamTrack() {\n  if (!emptyAudioStreamTrack) {\n    // implementation adapted from https://blog.mozilla.org/webrtc/warm-up-with-replacetrack/\n    const ctx = new AudioContext();\n    const oscillator = ctx.createOscillator();\n    const gain = ctx.createGain();\n    gain.gain.setValueAtTime(0, 0);\n    const dst = ctx.createMediaStreamDestination();\n    oscillator.connect(gain);\n    gain.connect(dst);\n    oscillator.start();\n    [emptyAudioStreamTrack] = dst.stream.getAudioTracks();\n    if (!emptyAudioStreamTrack) {\n      throw Error('Could not get empty media stream audio track');\n    }\n    emptyAudioStreamTrack.enabled = false;\n  }\n  return emptyAudioStreamTrack.clone();\n}\nclass Future {\n  constructor(futureBase, onFinally) {\n    this.onFinally = onFinally;\n    this.promise = new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n      this.resolve = resolve;\n      this.reject = reject;\n      if (futureBase) {\n        yield futureBase(resolve, reject);\n      }\n    })).finally(() => {\n      var _a;\n      return (_a = this.onFinally) === null || _a === void 0 ? void 0 : _a.call(this);\n    });\n  }\n}\n/**\n * Creates and returns an analyser web audio node that is attached to the provided track.\n * Additionally returns a convenience method `calculateVolume` to perform instant volume readings on that track.\n * Call the returned `cleanup` function to close the audioContext that has been created for the instance of this helper\n */\nfunction createAudioAnalyser(track, options) {\n  const opts = Object.assign({\n    cloneTrack: false,\n    fftSize: 2048,\n    smoothingTimeConstant: 0.8,\n    minDecibels: -100,\n    maxDecibels: -80\n  }, options);\n  const audioContext = getNewAudioContext();\n  if (!audioContext) {\n    throw new Error('Audio Context not supported on this browser');\n  }\n  const streamTrack = opts.cloneTrack ? track.mediaStreamTrack.clone() : track.mediaStreamTrack;\n  const mediaStreamSource = audioContext.createMediaStreamSource(new MediaStream([streamTrack]));\n  const analyser = audioContext.createAnalyser();\n  analyser.minDecibels = opts.minDecibels;\n  analyser.maxDecibels = opts.maxDecibels;\n  analyser.fftSize = opts.fftSize;\n  analyser.smoothingTimeConstant = opts.smoothingTimeConstant;\n  mediaStreamSource.connect(analyser);\n  const dataArray = new Uint8Array(analyser.frequencyBinCount);\n  /**\n   * Calculates the current volume of the track in the range from 0 to 1\n   */\n  const calculateVolume = () => {\n    analyser.getByteFrequencyData(dataArray);\n    let sum = 0;\n    for (const amplitude of dataArray) {\n      sum += Math.pow(amplitude / 255, 2);\n    }\n    const volume = Math.sqrt(sum / dataArray.length);\n    return volume;\n  };\n  const cleanup = () => __awaiter(this, void 0, void 0, function* () {\n    yield audioContext.close();\n    if (opts.cloneTrack) {\n      streamTrack.stop();\n    }\n  });\n  return {\n    calculateVolume,\n    analyser,\n    cleanup\n  };\n}\nclass Mutex {\n  constructor() {\n    this._locking = Promise.resolve();\n    this._locks = 0;\n  }\n  isLocked() {\n    return this._locks > 0;\n  }\n  lock() {\n    this._locks += 1;\n    let unlockNext;\n    const willLock = new Promise(resolve => unlockNext = () => {\n      this._locks -= 1;\n      resolve();\n    });\n    const willUnlock = this._locking.then(() => unlockNext);\n    this._locking = this._locking.then(() => willLock);\n    return willUnlock;\n  }\n}\nfunction isVideoCodec(maybeCodec) {\n  return videoCodecs.includes(maybeCodec);\n}\nfunction unwrapConstraint(constraint) {\n  if (typeof constraint === 'string') {\n    return constraint;\n  }\n  if (Array.isArray(constraint)) {\n    return constraint[0];\n  }\n  if (constraint.exact) {\n    if (Array.isArray(constraint.exact)) {\n      return constraint.exact[0];\n    }\n    return constraint.exact;\n  }\n  if (constraint.ideal) {\n    if (Array.isArray(constraint.ideal)) {\n      return constraint.ideal[0];\n    }\n    return constraint.ideal;\n  }\n  throw Error('could not unwrap constraint');\n}\nfunction toWebsocketUrl(url) {\n  if (url.startsWith('http')) {\n    return url.replace(/^(http)/, 'ws');\n  }\n  return url;\n}\nfunction toHttpUrl(url) {\n  if (url.startsWith('ws')) {\n    return url.replace(/^(ws)/, 'http');\n  }\n  return url;\n}\n\nvar QueueTaskStatus;\n(function (QueueTaskStatus) {\n  QueueTaskStatus[QueueTaskStatus[\"WAITING\"] = 0] = \"WAITING\";\n  QueueTaskStatus[QueueTaskStatus[\"RUNNING\"] = 1] = \"RUNNING\";\n  QueueTaskStatus[QueueTaskStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\n})(QueueTaskStatus || (QueueTaskStatus = {}));\nclass AsyncQueue {\n  constructor() {\n    this.pendingTasks = new Map();\n    this.taskMutex = new Mutex();\n    this.nextTaskIndex = 0;\n  }\n  run(task) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const taskInfo = {\n        id: this.nextTaskIndex++,\n        enqueuedAt: Date.now(),\n        status: QueueTaskStatus.WAITING\n      };\n      this.pendingTasks.set(taskInfo.id, taskInfo);\n      const unlock = yield this.taskMutex.lock();\n      try {\n        taskInfo.executedAt = Date.now();\n        taskInfo.status = QueueTaskStatus.RUNNING;\n        return yield task();\n      } finally {\n        taskInfo.status = QueueTaskStatus.COMPLETED;\n        this.pendingTasks.delete(taskInfo.id);\n        unlock();\n      }\n    });\n  }\n  flush() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.run(() => __awaiter(this, void 0, void 0, function* () {}));\n    });\n  }\n  snapshot() {\n    return Array.from(this.pendingTasks.values());\n  }\n}\n\nconst passThroughQueueSignals = ['syncState', 'trickle', 'offer', 'answer', 'simulate', 'leave'];\nfunction canPassThroughQueue(req) {\n  const canPass = passThroughQueueSignals.indexOf(req.case) >= 0;\n  livekitLogger.trace('request allowed to bypass queue:', {\n    canPass,\n    req\n  });\n  return canPass;\n}\n/** @internal */\nclass SignalClient {\n  constructor() {\n    let useJSON = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    /** signal rtt in milliseconds */\n    this.rtt = 0;\n    /** @internal */\n    this.resetCallbacks = () => {\n      this.onAnswer = undefined;\n      this.onLeave = undefined;\n      this.onLocalTrackPublished = undefined;\n      this.onLocalTrackUnpublished = undefined;\n      this.onNegotiateRequested = undefined;\n      this.onOffer = undefined;\n      this.onRemoteMuteChanged = undefined;\n      this.onSubscribedQualityUpdate = undefined;\n      this.onTokenRefresh = undefined;\n      this.onTrickle = undefined;\n      this.onClose = undefined;\n    };\n    this.isConnected = false;\n    this.isReconnecting = false;\n    this.useJSON = useJSON;\n    this.requestQueue = new AsyncQueue();\n    this.queuedRequests = [];\n    this.closingLock = new Mutex();\n  }\n  join(url, token, opts, abortSignal) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // during a full reconnect, we'd want to start the sequence even if currently\n      // connected\n      this.isConnected = false;\n      this.options = opts;\n      const res = yield this.connect(url, token, opts, abortSignal);\n      return res;\n    });\n  }\n  reconnect(url, token, sid, reason) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.options) {\n        livekitLogger.warn('attempted to reconnect without signal options being set, ignoring');\n        return;\n      }\n      this.isReconnecting = true;\n      // clear ping interval and restart it once reconnected\n      this.clearPingInterval();\n      const res = yield this.connect(url, token, Object.assign(Object.assign({}, this.options), {\n        reconnect: true,\n        sid,\n        reconnectReason: reason\n      }));\n      return res;\n    });\n  }\n  connect(url, token, opts, abortSignal) {\n    this.connectOptions = opts;\n    url = toWebsocketUrl(url);\n    // strip trailing slash\n    url = url.replace(/\\/$/, '');\n    url += '/rtc';\n    const clientInfo = getClientInfo();\n    const params = createConnectionParams(token, clientInfo, opts);\n    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n      const abortHandler = () => __awaiter(this, void 0, void 0, function* () {\n        this.close();\n        clearTimeout(wsTimeout);\n        reject(new ConnectionError('room connection has been cancelled (signal)'));\n      });\n      const wsTimeout = setTimeout(() => {\n        this.close();\n        reject(new ConnectionError('room connection has timed out (signal)'));\n      }, opts.websocketTimeout);\n      if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n        abortHandler();\n      }\n      abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener('abort', abortHandler);\n      livekitLogger.debug(\"connecting to \".concat(url + params));\n      if (this.ws) {\n        yield this.close();\n      }\n      this.ws = new WebSocket(url + params);\n      this.ws.binaryType = 'arraybuffer';\n      this.ws.onopen = () => {\n        clearTimeout(wsTimeout);\n      };\n      this.ws.onerror = ev => __awaiter(this, void 0, void 0, function* () {\n        if (!this.isConnected) {\n          clearTimeout(wsTimeout);\n          try {\n            const resp = yield fetch(\"http\".concat(url.substring(2), \"/validate\").concat(params));\n            if (resp.status.toFixed(0).startsWith('4')) {\n              const msg = yield resp.text();\n              reject(new ConnectionError(msg, 0 /* ConnectionErrorReason.NotAllowed */, resp.status));\n            } else {\n              reject(new ConnectionError('Internal error', 2 /* ConnectionErrorReason.InternalError */, resp.status));\n            }\n          } catch (e) {\n            reject(new ConnectionError('server was not reachable', 1 /* ConnectionErrorReason.ServerUnreachable */));\n          }\n\n          return;\n        }\n        // other errors, handle\n        this.handleWSError(ev);\n      });\n      this.ws.onmessage = ev => __awaiter(this, void 0, void 0, function* () {\n        var _a, _b, _c, _d;\n        // not considered connected until JoinResponse is received\n        let resp;\n        if (typeof ev.data === 'string') {\n          const json = JSON.parse(ev.data);\n          resp = SignalResponse.fromJson(json);\n        } else if (ev.data instanceof ArrayBuffer) {\n          resp = SignalResponse.fromBinary(new Uint8Array(ev.data));\n        } else {\n          livekitLogger.error(\"could not decode websocket message: \".concat(typeof ev.data));\n          return;\n        }\n        if (!this.isConnected) {\n          let shouldProcessMessage = false;\n          // handle join message only\n          if (((_a = resp.message) === null || _a === void 0 ? void 0 : _a.case) === 'join') {\n            this.isConnected = true;\n            abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener('abort', abortHandler);\n            this.pingTimeoutDuration = resp.message.value.pingTimeout;\n            this.pingIntervalDuration = resp.message.value.pingInterval;\n            if (this.pingTimeoutDuration && this.pingTimeoutDuration > 0) {\n              livekitLogger.debug('ping config', {\n                timeout: this.pingTimeoutDuration,\n                interval: this.pingIntervalDuration\n              });\n              this.startPingInterval();\n            }\n            resolve(resp.message.value);\n          } else if (opts.reconnect) {\n            // in reconnecting, any message received means signal reconnected\n            this.isConnected = true;\n            abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener('abort', abortHandler);\n            this.startPingInterval();\n            if (((_b = resp.message) === null || _b === void 0 ? void 0 : _b.case) === 'reconnect') {\n              resolve((_c = resp.message) === null || _c === void 0 ? void 0 : _c.value);\n            } else {\n              resolve();\n              shouldProcessMessage = true;\n            }\n          } else if (!opts.reconnect) {\n            // non-reconnect case, should receive join response first\n            reject(new ConnectionError(\"did not receive join response, got \".concat((_d = resp.message) === null || _d === void 0 ? void 0 : _d.case, \" instead\")));\n          }\n          if (!shouldProcessMessage) {\n            return;\n          }\n        }\n        if (this.signalLatency) {\n          yield sleep(this.signalLatency);\n        }\n        this.handleSignalResponse(resp);\n      });\n      this.ws.onclose = ev => {\n        livekitLogger.warn(\"websocket closed\", {\n          ev\n        });\n        this.handleOnClose(ev.reason);\n      };\n    }));\n  }\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const unlock = yield this.closingLock.lock();\n      try {\n        this.isConnected = false;\n        if (this.ws) {\n          this.ws.onmessage = null;\n          this.ws.onopen = null;\n          this.ws.onclose = null;\n          // calling `ws.close()` only starts the closing handshake (CLOSING state), prefer to wait until state is actually CLOSED\n          const closePromise = new Promise(resolve => {\n            if (this.ws) {\n              this.ws.onclose = () => {\n                resolve();\n              };\n            } else {\n              resolve();\n            }\n          });\n          if (this.ws.readyState < this.ws.CLOSING) {\n            this.ws.close();\n            // 250ms grace period for ws to close gracefully\n            yield Promise.race([closePromise, sleep(250)]);\n          }\n          this.ws = undefined;\n        }\n      } finally {\n        this.clearPingInterval();\n        unlock();\n      }\n    });\n  }\n  // initial offer after joining\n  sendOffer(offer) {\n    livekitLogger.debug('sending offer', offer);\n    this.sendRequest({\n      case: 'offer',\n      value: toProtoSessionDescription(offer)\n    });\n  }\n  // answer a server-initiated offer\n  sendAnswer(answer) {\n    livekitLogger.debug('sending answer');\n    return this.sendRequest({\n      case: 'answer',\n      value: toProtoSessionDescription(answer)\n    });\n  }\n  sendIceCandidate(candidate, target) {\n    livekitLogger.trace('sending ice candidate', candidate);\n    return this.sendRequest({\n      case: 'trickle',\n      value: new TrickleRequest({\n        candidateInit: JSON.stringify(candidate),\n        target\n      })\n    });\n  }\n  sendMuteTrack(trackSid, muted) {\n    return this.sendRequest({\n      case: 'mute',\n      value: new MuteTrackRequest({\n        sid: trackSid,\n        muted\n      })\n    });\n  }\n  sendAddTrack(req) {\n    return this.sendRequest({\n      case: 'addTrack',\n      value: req\n    });\n  }\n  sendUpdateLocalMetadata(metadata, name) {\n    return this.sendRequest({\n      case: 'updateMetadata',\n      value: new UpdateParticipantMetadata({\n        metadata,\n        name\n      })\n    });\n  }\n  sendUpdateTrackSettings(settings) {\n    this.sendRequest({\n      case: 'trackSetting',\n      value: settings\n    });\n  }\n  sendUpdateSubscription(sub) {\n    return this.sendRequest({\n      case: 'subscription',\n      value: sub\n    });\n  }\n  sendSyncState(sync) {\n    return this.sendRequest({\n      case: 'syncState',\n      value: sync\n    });\n  }\n  sendUpdateVideoLayers(trackSid, layers) {\n    return this.sendRequest({\n      case: 'updateLayers',\n      value: new UpdateVideoLayers({\n        trackSid,\n        layers\n      })\n    });\n  }\n  sendUpdateSubscriptionPermissions(allParticipants, trackPermissions) {\n    return this.sendRequest({\n      case: 'subscriptionPermission',\n      value: new SubscriptionPermission({\n        allParticipants,\n        trackPermissions\n      })\n    });\n  }\n  sendSimulateScenario(scenario) {\n    return this.sendRequest({\n      case: 'simulate',\n      value: scenario\n    });\n  }\n  sendPing() {\n    /** send both of ping and pingReq for compatibility to old and new server */\n    return Promise.all([this.sendRequest({\n      case: 'ping',\n      value: protoInt64.parse(Date.now())\n    }), this.sendRequest({\n      case: 'pingReq',\n      value: new Ping({\n        timestamp: protoInt64.parse(Date.now()),\n        rtt: protoInt64.parse(this.rtt)\n      })\n    })]);\n  }\n  sendLeave() {\n    return this.sendRequest({\n      case: 'leave',\n      value: new LeaveRequest({\n        canReconnect: false,\n        reason: DisconnectReason.CLIENT_INITIATED\n      })\n    });\n  }\n  sendRequest(message) {\n    let fromQueue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return __awaiter(this, void 0, void 0, function* () {\n      // capture all requests while reconnecting and put them in a queue\n      // unless the request originates from the queue, then don't enqueue again\n      const canQueue = !fromQueue && !canPassThroughQueue(message);\n      if (canQueue && this.isReconnecting) {\n        this.queuedRequests.push(() => __awaiter(this, void 0, void 0, function* () {\n          yield this.sendRequest(message, true);\n        }));\n        return;\n      }\n      // make sure previously queued requests are being sent first\n      if (!fromQueue) {\n        yield this.requestQueue.flush();\n      }\n      if (this.signalLatency) {\n        yield sleep(this.signalLatency);\n      }\n      if (!this.ws || this.ws.readyState !== this.ws.OPEN) {\n        livekitLogger.error(\"cannot send signal request before connected, type: \".concat(message === null || message === void 0 ? void 0 : message.case));\n        return;\n      }\n      const req = new SignalRequest({\n        message\n      });\n      try {\n        if (this.useJSON) {\n          this.ws.send(req.toJsonString());\n        } else {\n          this.ws.send(req.toBinary());\n        }\n      } catch (e) {\n        livekitLogger.error('error sending signal message', {\n          error: e\n        });\n      }\n    });\n  }\n  handleSignalResponse(res) {\n    var _a, _b;\n    const msg = res.message;\n    if (msg == undefined) {\n      livekitLogger.debug('received unsupported message');\n      return;\n    }\n    if (msg.case === 'answer') {\n      const sd = fromProtoSessionDescription(msg.value);\n      if (this.onAnswer) {\n        this.onAnswer(sd);\n      }\n    } else if (msg.case === 'offer') {\n      const sd = fromProtoSessionDescription(msg.value);\n      if (this.onOffer) {\n        this.onOffer(sd);\n      }\n    } else if (msg.case === 'trickle') {\n      const candidate = JSON.parse(msg.value.candidateInit);\n      if (this.onTrickle) {\n        this.onTrickle(candidate, msg.value.target);\n      }\n    } else if (msg.case === 'update') {\n      if (this.onParticipantUpdate) {\n        this.onParticipantUpdate((_a = msg.value.participants) !== null && _a !== void 0 ? _a : []);\n      }\n    } else if (msg.case === 'trackPublished') {\n      if (this.onLocalTrackPublished) {\n        this.onLocalTrackPublished(msg.value);\n      }\n    } else if (msg.case === 'speakersChanged') {\n      if (this.onSpeakersChanged) {\n        this.onSpeakersChanged((_b = msg.value.speakers) !== null && _b !== void 0 ? _b : []);\n      }\n    } else if (msg.case === 'leave') {\n      if (this.onLeave) {\n        this.onLeave(msg.value);\n      }\n    } else if (msg.case === 'mute') {\n      if (this.onRemoteMuteChanged) {\n        this.onRemoteMuteChanged(msg.value.sid, msg.value.muted);\n      }\n    } else if (msg.case === 'roomUpdate') {\n      if (this.onRoomUpdate && msg.value.room) {\n        this.onRoomUpdate(msg.value.room);\n      }\n    } else if (msg.case === 'connectionQuality') {\n      if (this.onConnectionQuality) {\n        this.onConnectionQuality(msg.value);\n      }\n    } else if (msg.case === 'streamStateUpdate') {\n      if (this.onStreamStateUpdate) {\n        this.onStreamStateUpdate(msg.value);\n      }\n    } else if (msg.case === 'subscribedQualityUpdate') {\n      if (this.onSubscribedQualityUpdate) {\n        this.onSubscribedQualityUpdate(msg.value);\n      }\n    } else if (msg.case === 'subscriptionPermissionUpdate') {\n      if (this.onSubscriptionPermissionUpdate) {\n        this.onSubscriptionPermissionUpdate(msg.value);\n      }\n    } else if (msg.case === 'refreshToken') {\n      if (this.onTokenRefresh) {\n        this.onTokenRefresh(msg.value);\n      }\n    } else if (msg.case === 'trackUnpublished') {\n      if (this.onLocalTrackUnpublished) {\n        this.onLocalTrackUnpublished(msg.value);\n      }\n    } else if (msg.case === 'subscriptionResponse') {\n      if (this.onSubscriptionError) {\n        this.onSubscriptionError(msg.value);\n      }\n    } else if (msg.case === 'pong') {\n      this.resetPingTimeout();\n    } else if (msg.case === 'pongResp') {\n      this.rtt = Date.now() - Number.parseInt(msg.value.lastPingTimestamp.toString());\n      this.resetPingTimeout();\n    } else {\n      livekitLogger.debug('unsupported message', msg);\n    }\n  }\n  setReconnected() {\n    while (this.queuedRequests.length > 0) {\n      const req = this.queuedRequests.shift();\n      if (req) {\n        this.requestQueue.run(req);\n      }\n    }\n    this.isReconnecting = false;\n  }\n  handleOnClose(reason) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.isConnected) return;\n      const onCloseCallback = this.onClose;\n      yield this.close();\n      livekitLogger.debug(\"websocket connection closed: \".concat(reason));\n      if (onCloseCallback) {\n        onCloseCallback(reason);\n      }\n    });\n  }\n  handleWSError(ev) {\n    livekitLogger.error('websocket error', ev);\n  }\n  /**\n   * Resets the ping timeout and starts a new timeout.\n   * Call this after receiving a pong message\n   */\n  resetPingTimeout() {\n    this.clearPingTimeout();\n    if (!this.pingTimeoutDuration) {\n      livekitLogger.warn('ping timeout duration not set');\n      return;\n    }\n    this.pingTimeout = CriticalTimers.setTimeout(() => {\n      livekitLogger.warn(\"ping timeout triggered. last pong received at: \".concat(new Date(Date.now() - this.pingTimeoutDuration * 1000).toUTCString()));\n      this.handleOnClose('ping timeout');\n    }, this.pingTimeoutDuration * 1000);\n  }\n  /**\n   * Clears ping timeout (does not start a new timeout)\n   */\n  clearPingTimeout() {\n    if (this.pingTimeout) {\n      CriticalTimers.clearTimeout(this.pingTimeout);\n    }\n  }\n  startPingInterval() {\n    this.clearPingInterval();\n    this.resetPingTimeout();\n    if (!this.pingIntervalDuration) {\n      livekitLogger.warn('ping interval duration not set');\n      return;\n    }\n    livekitLogger.debug('start ping interval');\n    this.pingInterval = CriticalTimers.setInterval(() => {\n      this.sendPing();\n    }, this.pingIntervalDuration * 1000);\n  }\n  clearPingInterval() {\n    livekitLogger.debug('clearing ping interval');\n    this.clearPingTimeout();\n    if (this.pingInterval) {\n      CriticalTimers.clearInterval(this.pingInterval);\n    }\n  }\n}\nfunction fromProtoSessionDescription(sd) {\n  const rsd = {\n    type: 'offer',\n    sdp: sd.sdp\n  };\n  switch (sd.type) {\n    case 'answer':\n    case 'offer':\n    case 'pranswer':\n    case 'rollback':\n      rsd.type = sd.type;\n      break;\n  }\n  return rsd;\n}\nfunction toProtoSessionDescription(rsd) {\n  const sd = new SessionDescription({\n    sdp: rsd.sdp,\n    type: rsd.type\n  });\n  return sd;\n}\nfunction createConnectionParams(token, info, opts) {\n  var _a;\n  const params = new URLSearchParams();\n  params.set('access_token', token);\n  // opts\n  if (opts.reconnect) {\n    params.set('reconnect', '1');\n    if (opts.sid) {\n      params.set('sid', opts.sid);\n    }\n  }\n  params.set('auto_subscribe', opts.autoSubscribe ? '1' : '0');\n  // ClientInfo\n  params.set('sdk', isReactNative() ? 'reactnative' : 'js');\n  params.set('version', info.version);\n  params.set('protocol', info.protocol.toString());\n  if (info.deviceModel) {\n    params.set('device_model', info.deviceModel);\n  }\n  if (info.os) {\n    params.set('os', info.os);\n  }\n  if (info.osVersion) {\n    params.set('os_version', info.osVersion);\n  }\n  if (info.browser) {\n    params.set('browser', info.browser);\n  }\n  if (info.browserVersion) {\n    params.set('browser_version', info.browserVersion);\n  }\n  if (opts.publishOnly !== undefined) {\n    params.set('publish', opts.publishOnly);\n  }\n  if (opts.adaptiveStream) {\n    params.set('adaptive_stream', '1');\n  }\n  if (opts.reconnectReason) {\n    params.set('reconnect_reason', opts.reconnectReason.toString());\n  }\n  // @ts-ignore\n  if ((_a = navigator.connection) === null || _a === void 0 ? void 0 : _a.type) {\n    // @ts-ignore\n    params.set('network', navigator.connection.type);\n  }\n  return \"?\".concat(params.toString());\n}\n\nconst ENCRYPTION_ALGORITHM = 'AES-GCM';\n// How many consecutive frames can fail decrypting before a particular key gets marked as invalid\nconst DECRYPTION_FAILURE_TOLERANCE = 10;\n// flag set to indicate that e2ee has been setup for sender/receiver;\nconst E2EE_FLAG = 'lk_e2ee';\nconst SALT = 'LKFrameEncryptionKey';\nconst KEY_PROVIDER_DEFAULTS = {\n  sharedKey: false,\n  ratchetSalt: SALT,\n  ratchetWindowSize: 8,\n  failureTolerance: DECRYPTION_FAILURE_TOLERANCE\n};\n\nvar KeyProviderEvent;\n(function (KeyProviderEvent) {\n  KeyProviderEvent[\"SetKey\"] = \"setKey\";\n  KeyProviderEvent[\"RatchetRequest\"] = \"ratchetRequest\";\n  KeyProviderEvent[\"KeyRatcheted\"] = \"keyRatcheted\";\n})(KeyProviderEvent || (KeyProviderEvent = {}));\nvar KeyHandlerEvent;\n(function (KeyHandlerEvent) {\n  KeyHandlerEvent[\"KeyRatcheted\"] = \"keyRatcheted\";\n})(KeyHandlerEvent || (KeyHandlerEvent = {}));\nvar EncryptionEvent;\n(function (EncryptionEvent) {\n  EncryptionEvent[\"ParticipantEncryptionStatusChanged\"] = \"participantEncryptionStatusChanged\";\n  EncryptionEvent[\"EncryptionError\"] = \"encryptionError\";\n})(EncryptionEvent || (EncryptionEvent = {}));\nvar CryptorEvent;\n(function (CryptorEvent) {\n  CryptorEvent[\"Error\"] = \"cryptorError\";\n})(CryptorEvent || (CryptorEvent = {}));\n\nfunction isE2EESupported() {\n  return isInsertableStreamSupported() || isScriptTransformSupported();\n}\nfunction isScriptTransformSupported() {\n  // @ts-ignore\n  return typeof window.RTCRtpScriptTransform !== 'undefined';\n}\nfunction isInsertableStreamSupported() {\n  return typeof window.RTCRtpSender !== 'undefined' &&\n  // @ts-ignore\n  typeof window.RTCRtpSender.prototype.createEncodedStreams !== 'undefined';\n}\nfunction isVideoFrame(frame) {\n  return 'type' in frame;\n}\nfunction importKey(keyBytes) {\n  let algorithm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    name: ENCRYPTION_ALGORITHM\n  };\n  let usage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'encrypt';\n  return __awaiter(this, void 0, void 0, function* () {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, algorithm, false, usage === 'derive' ? ['deriveBits', 'deriveKey'] : ['encrypt', 'decrypt']);\n  });\n}\nfunction createKeyMaterialFromString(password) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let enc = new TextEncoder();\n    const keyMaterial = yield crypto.subtle.importKey('raw', enc.encode(password), {\n      name: 'PBKDF2'\n    }, false, ['deriveBits', 'deriveKey']);\n    return keyMaterial;\n  });\n}\nfunction createKeyMaterialFromBuffer(cryptoBuffer) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const keyMaterial = yield crypto.subtle.importKey('raw', cryptoBuffer, 'HKDF', false, ['deriveBits', 'deriveKey']);\n    return keyMaterial;\n  });\n}\nfunction getAlgoOptions(algorithmName, salt) {\n  const textEncoder = new TextEncoder();\n  const encodedSalt = textEncoder.encode(salt);\n  switch (algorithmName) {\n    case 'HKDF':\n      return {\n        name: 'HKDF',\n        salt: encodedSalt,\n        hash: 'SHA-256',\n        info: new ArrayBuffer(128)\n      };\n    case 'PBKDF2':\n      {\n        return {\n          name: 'PBKDF2',\n          salt: encodedSalt,\n          hash: 'SHA-256',\n          iterations: 100000\n        };\n      }\n    default:\n      throw new Error(\"algorithm \".concat(algorithmName, \" is currently unsupported\"));\n  }\n}\n/**\n * Derives a set of keys from the master key.\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nfunction deriveKeys(material, salt) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const algorithmOptions = getAlgoOptions(material.algorithm.name, salt);\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = yield crypto.subtle.deriveKey(algorithmOptions, material, {\n      name: ENCRYPTION_ALGORITHM,\n      length: 128\n    }, false, ['encrypt', 'decrypt']);\n    return {\n      material,\n      encryptionKey\n    };\n  });\n}\nfunction createE2EEKey() {\n  return window.crypto.getRandomValues(new Uint8Array(32));\n}\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n */\nfunction ratchet(material, salt) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const algorithmOptions = getAlgoOptions(material.algorithm.name, salt);\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits(algorithmOptions, material, 256);\n  });\n}\nfunction needsRbspUnescaping(frameData) {\n  for (var i = 0; i < frameData.length - 3; i++) {\n    if (frameData[i] == 0 && frameData[i + 1] == 0 && frameData[i + 2] == 3) return true;\n  }\n  return false;\n}\nfunction parseRbsp(stream) {\n  const dataOut = [];\n  var length = stream.length;\n  for (var i = 0; i < stream.length;) {\n    // Be careful about over/underflow here. byte_length_ - 3 can underflow, and\n    // i + 3 can overflow, but byte_length_ - i can't, because i < byte_length_\n    // above, and that expression will produce the number of bytes left in\n    // the stream including the byte at i.\n    if (length - i >= 3 && !stream[i] && !stream[i + 1] && stream[i + 2] == 3) {\n      // Two rbsp bytes.\n      dataOut.push(stream[i++]);\n      dataOut.push(stream[i++]);\n      // Skip the emulation byte.\n      i++;\n    } else {\n      // Single rbsp byte.\n      dataOut.push(stream[i++]);\n    }\n  }\n  return new Uint8Array(dataOut);\n}\nconst kZerosInStartSequence = 2;\nconst kEmulationByte = 3;\nfunction writeRbsp(data_in) {\n  const dataOut = [];\n  var numConsecutiveZeros = 0;\n  for (var i = 0; i < data_in.length; ++i) {\n    var byte = data_in[i];\n    if (byte <= kEmulationByte && numConsecutiveZeros >= kZerosInStartSequence) {\n      // Need to escape.\n      dataOut.push(kEmulationByte);\n      numConsecutiveZeros = 0;\n    }\n    dataOut.push(byte);\n    if (byte == 0) {\n      ++numConsecutiveZeros;\n    } else {\n      numConsecutiveZeros = 0;\n    }\n  }\n  return new Uint8Array(dataOut);\n}\n\n/**\n * @experimental\n */\nclass BaseKeyProvider extends eventsExports.EventEmitter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * callback being invoked after a ratchet request has been performed on a participant\n     * that surfaces the new key material.\n     * @param material\n     * @param keyIndex\n     */\n    this.onKeyRatcheted = (material, keyIndex) => {\n      livekitLogger.debug('key ratcheted event received', {\n        material,\n        keyIndex\n      });\n    };\n    this.keyInfoMap = new Map();\n    this.options = Object.assign(Object.assign({}, KEY_PROVIDER_DEFAULTS), options);\n    this.on(KeyProviderEvent.KeyRatcheted, this.onKeyRatcheted);\n  }\n  /**\n   * callback to invoke once a key has been set for a participant\n   * @param key\n   * @param participantIdentity\n   * @param keyIndex\n   */\n  onSetEncryptionKey(key, participantIdentity, keyIndex) {\n    const keyInfo = {\n      key,\n      participantIdentity,\n      keyIndex\n    };\n    this.keyInfoMap.set(\"\".concat(participantIdentity !== null && participantIdentity !== void 0 ? participantIdentity : 'shared', \"-\").concat(keyIndex !== null && keyIndex !== void 0 ? keyIndex : 0), keyInfo);\n    this.emit(KeyProviderEvent.SetKey, keyInfo);\n  }\n  getKeys() {\n    return Array.from(this.keyInfoMap.values());\n  }\n  getOptions() {\n    return this.options;\n  }\n  ratchetKey(participantIdentity, keyIndex) {\n    this.emit(KeyProviderEvent.RatchetRequest, participantIdentity, keyIndex);\n  }\n}\n/**\n * A basic KeyProvider implementation intended for a single shared\n * passphrase between all participants\n * @experimental\n */\nclass ExternalE2EEKeyProvider extends BaseKeyProvider {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const opts = Object.assign(Object.assign({}, options), {\n      sharedKey: true,\n      // for a shared key provider failing to decrypt for a specific participant\n      // should not mark the key as invalid, so we accept wrong keys forever\n      // and won't try to auto-ratchet\n      ratchetWindowSize: 0,\n      failureTolerance: -1\n    });\n    super(opts);\n  }\n  /**\n   * Accepts a passphrase that's used to create the crypto keys.\n   * When passing in a string, PBKDF2 is used.\n   * When passing in an Array buffer of cryptographically random numbers, HKDF is being used. (recommended)\n   * @param key\n   */\n  setKey(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const derivedKey = typeof key === 'string' ? yield createKeyMaterialFromString(key) : yield createKeyMaterialFromBuffer(key);\n      this.onSetEncryptionKey(derivedKey);\n    });\n  }\n}\n\nfunction r(r, e, n) {\n  var i, t, o;\n  void 0 === e && (e = 50), void 0 === n && (n = {});\n  var a = null != (i = n.isImmediate) && i,\n    u = null != (t = n.callback) && t,\n    c = n.maxWait,\n    v = Date.now(),\n    l = [];\n  function f() {\n    if (void 0 !== c) {\n      var r = Date.now() - v;\n      if (r + e >= c) return c - r;\n    }\n    return e;\n  }\n  var d = function () {\n    var e = [].slice.call(arguments),\n      n = this;\n    return new Promise(function (i, t) {\n      var c = a && void 0 === o;\n      if (void 0 !== o && clearTimeout(o), o = setTimeout(function () {\n        if (o = void 0, v = Date.now(), !a) {\n          var i = r.apply(n, e);\n          u && u(i), l.forEach(function (r) {\n            return (0, r.resolve)(i);\n          }), l = [];\n        }\n      }, f()), c) {\n        var d = r.apply(n, e);\n        return u && u(d), i(d);\n      }\n      l.push({\n        resolve: i,\n        reject: t\n      });\n    });\n  };\n  return d.cancel = function (r) {\n    void 0 !== o && clearTimeout(o), l.forEach(function (e) {\n      return (0, e.reject)(r);\n    }), l = [];\n  }, d;\n}\n\nconst defaultId = 'default';\nclass DeviceManager {\n  static getInstance() {\n    if (this.instance === undefined) {\n      this.instance = new DeviceManager();\n    }\n    return this.instance;\n  }\n  getDevices(kind) {\n    let requestPermissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (((_a = DeviceManager.userMediaPromiseMap) === null || _a === void 0 ? void 0 : _a.size) > 0) {\n        livekitLogger.debug('awaiting getUserMedia promise');\n        try {\n          if (kind) {\n            yield DeviceManager.userMediaPromiseMap.get(kind);\n          } else {\n            yield Promise.all(DeviceManager.userMediaPromiseMap.values());\n          }\n        } catch (e) {\n          livekitLogger.warn('error waiting for media permissons');\n        }\n      }\n      let devices = yield navigator.mediaDevices.enumerateDevices();\n      if (requestPermissions &&\n      // for safari we need to skip this check, as otherwise it will re-acquire user media and fail on iOS https://bugs.webkit.org/show_bug.cgi?id=179363\n      !(isSafari() && this.hasDeviceInUse(kind))) {\n        const isDummyDeviceOrEmpty = devices.length === 0 || devices.some(device => {\n          const noLabel = device.label === '';\n          const isRelevant = kind ? device.kind === kind : true;\n          return noLabel && isRelevant;\n        });\n        if (isDummyDeviceOrEmpty) {\n          const permissionsToAcquire = {\n            video: kind !== 'audioinput' && kind !== 'audiooutput',\n            audio: kind !== 'videoinput'\n          };\n          const stream = yield navigator.mediaDevices.getUserMedia(permissionsToAcquire);\n          devices = yield navigator.mediaDevices.enumerateDevices();\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n        }\n      }\n      if (kind) {\n        devices = devices.filter(device => device.kind === kind);\n      }\n      return devices;\n    });\n  }\n  normalizeDeviceId(kind, deviceId, groupId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (deviceId !== defaultId) {\n        return deviceId;\n      }\n      // resolve actual device id if it's 'default': Chrome returns it when no\n      // device has been chosen\n      const devices = yield this.getDevices(kind);\n      const device = devices.find(d => d.groupId === groupId && d.deviceId !== defaultId);\n      return device === null || device === void 0 ? void 0 : device.deviceId;\n    });\n  }\n  hasDeviceInUse(kind) {\n    return kind ? DeviceManager.userMediaPromiseMap.has(kind) : DeviceManager.userMediaPromiseMap.size > 0;\n  }\n}\nDeviceManager.mediaDeviceKinds = ['audioinput', 'audiooutput', 'videoinput'];\nDeviceManager.userMediaPromiseMap = new Map();\n\nconst defaultDimensionsTimeout = 1000;\nclass LocalTrack extends Track {\n  get constraints() {\n    return this._constraints;\n  }\n  /**\n   *\n   * @param mediaTrack\n   * @param kind\n   * @param constraints MediaTrackConstraints that are being used when restarting or reacquiring tracks\n   * @param userProvidedTrack Signals to the SDK whether or not the mediaTrack should be managed (i.e. released and reacquired) internally by the SDK\n   */\n  constructor(mediaTrack, kind, constraints) {\n    let userProvidedTrack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    super(mediaTrack, kind);\n    this._isUpstreamPaused = false;\n    this.handleTrackMuteEvent = () => this.debouncedTrackMuteHandler().catch(() => livekitLogger.debug('track mute bounce got cancelled by an unmute event'));\n    this.debouncedTrackMuteHandler = r(() => __awaiter(this, void 0, void 0, function* () {\n      yield this.pauseUpstream();\n    }), 5000);\n    this.handleTrackUnmuteEvent = () => __awaiter(this, void 0, void 0, function* () {\n      this.debouncedTrackMuteHandler.cancel('unmute');\n      yield this.resumeUpstream();\n    });\n    this.handleEnded = () => {\n      if (this.isInBackground) {\n        this.reacquireTrack = true;\n      }\n      this._mediaStreamTrack.removeEventListener('mute', this.handleTrackMuteEvent);\n      this._mediaStreamTrack.removeEventListener('unmute', this.handleTrackUnmuteEvent);\n      this.emit(TrackEvent.Ended, this);\n    };\n    this.reacquireTrack = false;\n    this.providedByUser = userProvidedTrack;\n    this.muteLock = new Mutex();\n    this.pauseUpstreamLock = new Mutex();\n    this.processorLock = new Mutex();\n    this.setMediaStreamTrack(mediaTrack, true);\n    // added to satisfy TS compiler, constraints are synced with MediaStreamTrack\n    this._constraints = mediaTrack.getConstraints();\n    if (constraints) {\n      this._constraints = constraints;\n    }\n  }\n  get id() {\n    return this._mediaStreamTrack.id;\n  }\n  get dimensions() {\n    if (this.kind !== Track.Kind.Video) {\n      return undefined;\n    }\n    const {\n      width,\n      height\n    } = this._mediaStreamTrack.getSettings();\n    if (width && height) {\n      return {\n        width,\n        height\n      };\n    }\n    return undefined;\n  }\n  get isUpstreamPaused() {\n    return this._isUpstreamPaused;\n  }\n  get isUserProvided() {\n    return this.providedByUser;\n  }\n  get mediaStreamTrack() {\n    var _a, _b;\n    return (_b = (_a = this.processor) === null || _a === void 0 ? void 0 : _a.processedTrack) !== null && _b !== void 0 ? _b : this._mediaStreamTrack;\n  }\n  setMediaStreamTrack(newTrack, force) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (newTrack === this._mediaStreamTrack && !force) {\n        return;\n      }\n      if (this._mediaStreamTrack) {\n        // detach\n        this.attachedElements.forEach(el => {\n          detachTrack(this._mediaStreamTrack, el);\n        });\n        this._mediaStreamTrack.removeEventListener('ended', this.handleEnded);\n        this._mediaStreamTrack.removeEventListener('mute', this.handleTrackMuteEvent);\n        this._mediaStreamTrack.removeEventListener('unmute', this.handleTrackUnmuteEvent);\n        if (!this.providedByUser && this._mediaStreamTrack !== newTrack) {\n          this._mediaStreamTrack.stop();\n        }\n      }\n      this.mediaStream = new MediaStream([newTrack]);\n      if (newTrack) {\n        newTrack.addEventListener('ended', this.handleEnded);\n        // when underlying track emits mute, it indicates that the device is unable\n        // to produce media. In this case we'll need to signal with remote that\n        // the track is \"muted\"\n        // note this is different from LocalTrack.mute because we do not want to\n        // touch MediaStreamTrack.enabled\n        newTrack.addEventListener('mute', this.handleTrackMuteEvent);\n        newTrack.addEventListener('unmute', this.handleTrackUnmuteEvent);\n        this._constraints = newTrack.getConstraints();\n      }\n      let processedTrack;\n      if (this.processor && newTrack && this.processorElement) {\n        livekitLogger.debug('restarting processor');\n        if (this.kind === 'unknown') {\n          throw TypeError('cannot set processor on track of unknown kind');\n        }\n        attachToElement(newTrack, this.processorElement);\n        yield this.processor.restart({\n          track: newTrack,\n          kind: this.kind,\n          element: this.processorElement\n        });\n        processedTrack = this.processor.processedTrack;\n      }\n      if (this.sender) {\n        yield this.sender.replaceTrack(processedTrack !== null && processedTrack !== void 0 ? processedTrack : newTrack);\n      }\n      this._mediaStreamTrack = newTrack;\n      if (newTrack) {\n        // sync muted state with the enabled state of the newly provided track\n        this._mediaStreamTrack.enabled = !this.isMuted;\n        // when a valid track is replace, we'd want to start producing\n        yield this.resumeUpstream();\n        this.attachedElements.forEach(el => {\n          attachToElement(processedTrack !== null && processedTrack !== void 0 ? processedTrack : newTrack, el);\n        });\n      }\n    });\n  }\n  waitForDimensions() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultDimensionsTimeout;\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.kind === Track.Kind.Audio) {\n        throw new Error('cannot get dimensions for audio tracks');\n      }\n      if (((_a = getBrowser()) === null || _a === void 0 ? void 0 : _a.os) === 'iOS') {\n        // browsers report wrong initial resolution on iOS.\n        // when slightly delaying the call to .getSettings(), the correct resolution is being reported\n        yield sleep(10);\n      }\n      const started = Date.now();\n      while (Date.now() - started < timeout) {\n        const dims = this.dimensions;\n        if (dims) {\n          return dims;\n        }\n        yield sleep(50);\n      }\n      throw new TrackInvalidError('unable to get track dimensions after timeout');\n    });\n  }\n  /**\n   * @returns DeviceID of the device that is currently being used for this track\n   */\n  getDeviceId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // screen share doesn't have a usable device id\n      if (this.source === Track.Source.ScreenShare) {\n        return;\n      }\n      const {\n        deviceId,\n        groupId\n      } = this._mediaStreamTrack.getSettings();\n      const kind = this.kind === Track.Kind.Audio ? 'audioinput' : 'videoinput';\n      return DeviceManager.getInstance().normalizeDeviceId(kind, deviceId, groupId);\n    });\n  }\n  mute() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.setTrackMuted(true);\n      return this;\n    });\n  }\n  unmute() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.setTrackMuted(false);\n      return this;\n    });\n  }\n  replaceTrack(track) {\n    let userProvidedTrack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.sender) {\n        throw new TrackInvalidError('unable to replace an unpublished track');\n      }\n      livekitLogger.debug('replace MediaStreamTrack');\n      yield this.setMediaStreamTrack(track);\n      // this must be synced *after* setting mediaStreamTrack above, since it relies\n      // on the previous state in order to cleanup\n      this.providedByUser = userProvidedTrack;\n      if (this.processor) {\n        yield this.stopProcessor();\n      }\n      return this;\n    });\n  }\n  restart(constraints) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!constraints) {\n        constraints = this._constraints;\n      }\n      livekitLogger.debug('restarting track with constraints', constraints);\n      const streamConstraints = {\n        audio: false,\n        video: false\n      };\n      if (this.kind === Track.Kind.Video) {\n        streamConstraints.video = constraints;\n      } else {\n        streamConstraints.audio = constraints;\n      }\n      // these steps are duplicated from setMediaStreamTrack because we must stop\n      // the previous tracks before new tracks can be acquired\n      this.attachedElements.forEach(el => {\n        detachTrack(this.mediaStreamTrack, el);\n      });\n      this._mediaStreamTrack.removeEventListener('ended', this.handleEnded);\n      // on Safari, the old audio track must be stopped before attempting to acquire\n      // the new track, otherwise the new track will stop with\n      // 'A MediaStreamTrack ended due to a capture failure`\n      this._mediaStreamTrack.stop();\n      // create new track and attach\n      const mediaStream = yield navigator.mediaDevices.getUserMedia(streamConstraints);\n      const newTrack = mediaStream.getTracks()[0];\n      newTrack.addEventListener('ended', this.handleEnded);\n      livekitLogger.debug('re-acquired MediaStreamTrack');\n      yield this.setMediaStreamTrack(newTrack);\n      this._constraints = constraints;\n      this.emit(TrackEvent.Restarted, this);\n      return this;\n    });\n  }\n  setTrackMuted(muted) {\n    livekitLogger.debug(\"setting \".concat(this.kind, \" track \").concat(muted ? 'muted' : 'unmuted'));\n    if (this.isMuted === muted && this._mediaStreamTrack.enabled !== muted) {\n      return;\n    }\n    this.isMuted = muted;\n    this._mediaStreamTrack.enabled = !muted;\n    this.emit(muted ? TrackEvent.Muted : TrackEvent.Unmuted, this);\n  }\n  get needsReAcquisition() {\n    return this._mediaStreamTrack.readyState !== 'live' || this._mediaStreamTrack.muted || !this._mediaStreamTrack.enabled || this.reacquireTrack;\n  }\n  handleAppVisibilityChanged() {\n    const _super = Object.create(null, {\n      handleAppVisibilityChanged: {\n        get: () => super.handleAppVisibilityChanged\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      yield _super.handleAppVisibilityChanged.call(this);\n      if (!isMobile()) return;\n      livekitLogger.debug(\"visibility changed, is in Background: \".concat(this.isInBackground));\n      if (!this.isInBackground && this.needsReAcquisition && !this.isUserProvided && !this.isMuted) {\n        livekitLogger.debug(\"track needs to be reacquired, restarting \".concat(this.source));\n        yield this.restart();\n        this.reacquireTrack = false;\n      }\n    });\n  }\n  stop() {\n    var _a;\n    super.stop();\n    this._mediaStreamTrack.removeEventListener('ended', this.handleEnded);\n    this._mediaStreamTrack.removeEventListener('mute', this.handleTrackMuteEvent);\n    this._mediaStreamTrack.removeEventListener('unmute', this.handleTrackUnmuteEvent);\n    (_a = this.processor) === null || _a === void 0 ? void 0 : _a.destroy();\n    this.processor = undefined;\n  }\n  /**\n   * pauses publishing to the server without disabling the local MediaStreamTrack\n   * this is used to display a user's own video locally while pausing publishing to\n   * the server.\n   * this API is unsupported on Safari < 12 due to a bug\n   **/\n  pauseUpstream() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const unlock = yield this.pauseUpstreamLock.lock();\n      try {\n        if (this._isUpstreamPaused === true) {\n          return;\n        }\n        if (!this.sender) {\n          livekitLogger.warn('unable to pause upstream for an unpublished track');\n          return;\n        }\n        this._isUpstreamPaused = true;\n        this.emit(TrackEvent.UpstreamPaused, this);\n        const browser = getBrowser();\n        if ((browser === null || browser === void 0 ? void 0 : browser.name) === 'Safari' && compareVersions(browser.version, '12.0') < 0) {\n          // https://bugs.webkit.org/show_bug.cgi?id=184911\n          throw new DeviceUnsupportedError('pauseUpstream is not supported on Safari < 12.');\n        }\n        yield this.sender.replaceTrack(null);\n      } finally {\n        unlock();\n      }\n    });\n  }\n  resumeUpstream() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const unlock = yield this.pauseUpstreamLock.lock();\n      try {\n        if (this._isUpstreamPaused === false) {\n          return;\n        }\n        if (!this.sender) {\n          livekitLogger.warn('unable to resume upstream for an unpublished track');\n          return;\n        }\n        this._isUpstreamPaused = false;\n        this.emit(TrackEvent.UpstreamResumed, this);\n        // this operation is noop if mediastreamtrack is already being sent\n        yield this.sender.replaceTrack(this._mediaStreamTrack);\n      } finally {\n        unlock();\n      }\n    });\n  }\n  /**\n   * Gets the RTCStatsReport for the LocalTrack's underlying RTCRtpSender\n   * See https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport\n   *\n   * @returns Promise<RTCStatsReport> | undefined\n   */\n  getRTCStatsReport() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!((_a = this.sender) === null || _a === void 0 ? void 0 : _a.getStats)) {\n        return;\n      }\n      const statsReport = yield this.sender.getStats();\n      return statsReport;\n    });\n  }\n  /**\n   * Sets a processor on this track.\n   * See https://github.com/livekit/track-processors-js for example usage\n   *\n   * @experimental\n   *\n   * @param processor\n   * @param showProcessedStreamLocally\n   * @returns\n   */\n  setProcessor(processor) {\n    let showProcessedStreamLocally = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      const unlock = yield this.processorLock.lock();\n      try {\n        livekitLogger.debug('setting up processor');\n        if (this.processor) {\n          yield this.stopProcessor();\n        }\n        if (this.kind === 'unknown') {\n          throw TypeError('cannot set processor on track of unknown kind');\n        }\n        this.processorElement = (_a = this.processorElement) !== null && _a !== void 0 ? _a : document.createElement(this.kind);\n        this.processorElement.muted = true;\n        attachToElement(this._mediaStreamTrack, this.processorElement);\n        this.processorElement.play().catch(error => livekitLogger.error('failed to play processor element', {\n          error\n        }));\n        const processorOptions = {\n          kind: this.kind,\n          track: this._mediaStreamTrack,\n          element: this.processorElement\n        };\n        yield processor.init(processorOptions);\n        this.processor = processor;\n        if (this.processor.processedTrack) {\n          for (const el of this.attachedElements) {\n            if (el !== this.processorElement && showProcessedStreamLocally) {\n              detachTrack(this._mediaStreamTrack, el);\n              attachToElement(this.processor.processedTrack, el);\n            }\n          }\n          yield (_b = this.sender) === null || _b === void 0 ? void 0 : _b.replaceTrack(this.processor.processedTrack);\n        }\n      } finally {\n        unlock();\n      }\n    });\n  }\n  getProcessor() {\n    return this.processor;\n  }\n  /**\n   * Stops the track processor\n   * See https://github.com/livekit/track-processors-js for example usage\n   *\n   * @experimental\n   * @returns\n   */\n  stopProcessor() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.processor) return;\n      livekitLogger.debug('stopping processor');\n      (_a = this.processor.processedTrack) === null || _a === void 0 ? void 0 : _a.stop();\n      yield this.processor.destroy();\n      this.processor = undefined;\n      (_b = this.processorElement) === null || _b === void 0 ? void 0 : _b.remove();\n      this.processorElement = undefined;\n      yield this.restart();\n    });\n  }\n}\n\n/**\n * @experimental\n */\nclass E2EEManager extends eventsExports.EventEmitter {\n  constructor(options) {\n    super();\n    this.onWorkerMessage = ev => {\n      var _a, _b;\n      const {\n        kind,\n        data\n      } = ev.data;\n      switch (kind) {\n        case 'error':\n          livekitLogger.error(data.error.message);\n          this.emit(EncryptionEvent.EncryptionError, data.error);\n          break;\n        case 'initAck':\n          if (data.enabled) {\n            this.keyProvider.getKeys().forEach(keyInfo => {\n              this.postKey(keyInfo);\n            });\n          }\n          break;\n        case 'enable':\n          if (this.encryptionEnabled !== data.enabled && data.participantIdentity === ((_a = this.room) === null || _a === void 0 ? void 0 : _a.localParticipant.identity)) {\n            this.emit(EncryptionEvent.ParticipantEncryptionStatusChanged, data.enabled, this.room.localParticipant);\n            this.encryptionEnabled = data.enabled;\n          } else if (data.participantIdentity) {\n            const participant = (_b = this.room) === null || _b === void 0 ? void 0 : _b.getParticipantByIdentity(data.participantIdentity);\n            if (!participant) {\n              throw TypeError(\"couldn't set encryption status, participant not found\".concat(data.participantIdentity));\n            }\n            this.emit(EncryptionEvent.ParticipantEncryptionStatusChanged, data.enabled, participant);\n          }\n          if (this.encryptionEnabled) {\n            this.keyProvider.getKeys().forEach(keyInfo => {\n              this.postKey(keyInfo);\n            });\n          }\n          break;\n        case 'ratchetKey':\n          this.keyProvider.emit(KeyProviderEvent.KeyRatcheted, data.material, data.keyIndex);\n          break;\n      }\n    };\n    this.onWorkerError = ev => {\n      livekitLogger.error('e2ee worker encountered an error:', {\n        error: ev.error\n      });\n      this.emit(EncryptionEvent.EncryptionError, ev.error);\n    };\n    this.keyProvider = options.keyProvider;\n    this.worker = options.worker;\n    this.encryptionEnabled = false;\n  }\n  /**\n   * @internal\n   */\n  setup(room) {\n    if (!isE2EESupported()) {\n      throw new DeviceUnsupportedError('tried to setup end-to-end encryption on an unsupported browser');\n    }\n    livekitLogger.info('setting up e2ee');\n    if (room !== this.room) {\n      this.room = room;\n      this.setupEventListeners(room, this.keyProvider);\n      // this.worker = new Worker('');\n      const msg = {\n        kind: 'init',\n        data: {\n          keyProviderOptions: this.keyProvider.getOptions()\n        }\n      };\n      if (this.worker) {\n        livekitLogger.info(\"initializing worker\", {\n          worker: this.worker\n        });\n        this.worker.onmessage = this.onWorkerMessage;\n        this.worker.onerror = this.onWorkerError;\n        this.worker.postMessage(msg);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  setParticipantCryptorEnabled(enabled, participantIdentity) {\n    livekitLogger.debug(\"set e2ee to \".concat(enabled, \" for participant \").concat(participantIdentity));\n    this.postEnable(enabled, participantIdentity);\n  }\n  /**\n   * @internal\n   */\n  setSifTrailer(trailer) {\n    if (!trailer || trailer.length === 0) {\n      livekitLogger.warn(\"ignoring server sent trailer as it's empty\");\n    } else {\n      this.postSifTrailer(trailer);\n    }\n  }\n  setupEngine(engine) {\n    engine.on(EngineEvent.RTPVideoMapUpdate, rtpMap => {\n      this.postRTPMap(rtpMap);\n    });\n  }\n  setupEventListeners(room, keyProvider) {\n    room.on(RoomEvent.TrackPublished, (pub, participant) => this.setParticipantCryptorEnabled(pub.trackInfo.encryption !== Encryption_Type.NONE, participant.identity));\n    room.on(RoomEvent.ConnectionStateChanged, state => {\n      if (state === ConnectionState.Connected) {\n        room.participants.forEach(participant => {\n          participant.tracks.forEach(pub => {\n            this.setParticipantCryptorEnabled(pub.trackInfo.encryption !== Encryption_Type.NONE, participant.identity);\n          });\n        });\n      }\n    }).on(RoomEvent.TrackUnsubscribed, (track, _, participant) => {\n      var _a;\n      const msg = {\n        kind: 'removeTransform',\n        data: {\n          participantIdentity: participant.identity,\n          trackId: track.mediaStreamID\n        }\n      };\n      (_a = this.worker) === null || _a === void 0 ? void 0 : _a.postMessage(msg);\n    }).on(RoomEvent.TrackSubscribed, (track, pub, participant) => {\n      this.setupE2EEReceiver(track, participant.identity, pub.trackInfo);\n    }).on(RoomEvent.SignalConnected, () => {\n      if (!this.room) {\n        throw new TypeError(\"expected room to be present on signal connect\");\n      }\n      this.setParticipantCryptorEnabled(this.room.localParticipant.isE2EEEnabled, this.room.localParticipant.identity);\n      keyProvider.getKeys().forEach(keyInfo => {\n        this.postKey(keyInfo);\n      });\n    });\n    room.localParticipant.on(ParticipantEvent.LocalTrackPublished, publication => __awaiter(this, void 0, void 0, function* () {\n      this.setupE2EESender(publication.track, publication.track.sender);\n    }));\n    keyProvider.on(KeyProviderEvent.SetKey, keyInfo => this.postKey(keyInfo)).on(KeyProviderEvent.RatchetRequest, (participantId, keyIndex) => this.postRatchetRequest(participantId, keyIndex));\n  }\n  postRatchetRequest(participantIdentity, keyIndex) {\n    if (!this.worker) {\n      throw Error('could not ratchet key, worker is missing');\n    }\n    const msg = {\n      kind: 'ratchetRequest',\n      data: {\n        participantIdentity: participantIdentity,\n        keyIndex\n      }\n    };\n    this.worker.postMessage(msg);\n  }\n  postKey(_ref) {\n    let {\n      key,\n      participantIdentity,\n      keyIndex\n    } = _ref;\n    var _a;\n    if (!this.worker) {\n      throw Error('could not set key, worker is missing');\n    }\n    const msg = {\n      kind: 'setKey',\n      data: {\n        participantIdentity: participantIdentity,\n        isPublisher: participantIdentity === ((_a = this.room) === null || _a === void 0 ? void 0 : _a.localParticipant.identity),\n        key,\n        keyIndex\n      }\n    };\n    this.worker.postMessage(msg);\n  }\n  postEnable(enabled, participantIdentity) {\n    if (this.worker) {\n      const enableMsg = {\n        kind: 'enable',\n        data: {\n          enabled,\n          participantIdentity\n        }\n      };\n      this.worker.postMessage(enableMsg);\n    } else {\n      throw new ReferenceError('failed to enable e2ee, worker is not ready');\n    }\n  }\n  postRTPMap(map) {\n    var _a;\n    if (!this.worker) {\n      throw TypeError('could not post rtp map, worker is missing');\n    }\n    if (!((_a = this.room) === null || _a === void 0 ? void 0 : _a.localParticipant.identity)) {\n      throw TypeError('could not post rtp map, local participant identity is missing');\n    }\n    const msg = {\n      kind: 'setRTPMap',\n      data: {\n        map,\n        participantIdentity: this.room.localParticipant.identity\n      }\n    };\n    this.worker.postMessage(msg);\n  }\n  postSifTrailer(trailer) {\n    if (!this.worker) {\n      throw Error('could not post SIF trailer, worker is missing');\n    }\n    const msg = {\n      kind: 'setSifTrailer',\n      data: {\n        trailer\n      }\n    };\n    this.worker.postMessage(msg);\n  }\n  setupE2EEReceiver(track, remoteId, trackInfo) {\n    if (!track.receiver) {\n      return;\n    }\n    if (!(trackInfo === null || trackInfo === void 0 ? void 0 : trackInfo.mimeType) || trackInfo.mimeType === '') {\n      throw new TypeError('MimeType missing from trackInfo, cannot set up E2EE cryptor');\n    }\n    this.handleReceiver(track.receiver, track.mediaStreamID, remoteId, track.kind === 'video' ? mimeTypeToVideoCodecString(trackInfo.mimeType) : undefined);\n  }\n  setupE2EESender(track, sender) {\n    if (!(track instanceof LocalTrack) || !sender) {\n      if (!sender) livekitLogger.warn('early return because sender is not ready');\n      return;\n    }\n    this.handleSender(sender, track.mediaStreamID, undefined);\n  }\n  /**\n   * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n   * a frame decoder.\n   *\n   */\n  handleReceiver(receiver, trackId, participantIdentity, codec) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.worker) {\n        return;\n      }\n      if (isScriptTransformSupported()) {\n        const options = {\n          kind: 'decode',\n          participantIdentity,\n          trackId,\n          codec\n        };\n        // @ts-ignore\n        receiver.transform = new RTCRtpScriptTransform(this.worker, options);\n      } else {\n        if (E2EE_FLAG in receiver && codec) {\n          // only update codec\n          const msg = {\n            kind: 'updateCodec',\n            data: {\n              trackId,\n              codec,\n              participantIdentity: participantIdentity\n            }\n          };\n          this.worker.postMessage(msg);\n          return;\n        }\n        // @ts-ignore\n        let writable = receiver.writableStream;\n        // @ts-ignore\n        let readable = receiver.readableStream;\n        if (!writable || !readable) {\n          // @ts-ignore\n          const receiverStreams = receiver.createEncodedStreams();\n          // @ts-ignore\n          receiver.writableStream = receiverStreams.writable;\n          writable = receiverStreams.writable;\n          // @ts-ignore\n          receiver.readableStream = receiverStreams.readable;\n          readable = receiverStreams.readable;\n        }\n        const msg = {\n          kind: 'decode',\n          data: {\n            readableStream: readable,\n            writableStream: writable,\n            trackId: trackId,\n            codec,\n            participantIdentity: participantIdentity\n          }\n        };\n        this.worker.postMessage(msg, [readable, writable]);\n      }\n      // @ts-ignore\n      receiver[E2EE_FLAG] = true;\n    });\n  }\n  /**\n   * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n   * a frame encoder.\n   *\n   */\n  handleSender(sender, trackId, codec) {\n    var _a;\n    if (E2EE_FLAG in sender || !this.worker) {\n      return;\n    }\n    if (!((_a = this.room) === null || _a === void 0 ? void 0 : _a.localParticipant.identity) || this.room.localParticipant.identity === '') {\n      throw TypeError('local identity needs to be known in order to set up encrypted sender');\n    }\n    if (isScriptTransformSupported()) {\n      livekitLogger.info('initialize script transform');\n      const options = {\n        kind: 'encode',\n        participantIdentity: this.room.localParticipant.identity,\n        trackId,\n        codec\n      };\n      // @ts-ignore\n      sender.transform = new RTCRtpScriptTransform(this.worker, options);\n    } else {\n      livekitLogger.info('initialize encoded streams');\n      // @ts-ignore\n      const senderStreams = sender.createEncodedStreams();\n      const msg = {\n        kind: 'encode',\n        data: {\n          readableStream: senderStreams.readable,\n          writableStream: senderStreams.writable,\n          codec,\n          trackId,\n          participantIdentity: this.room.localParticipant.identity\n        }\n      };\n      this.worker.postMessage(msg, [senderStreams.readable, senderStreams.writable]);\n    }\n    // @ts-ignore\n    sender[E2EE_FLAG] = true;\n  }\n}\n\nvar parser$1 = {};\n\nvar grammar$2 = {exports: {}};\n\nvar grammar$1 = grammar$2.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{\n    name: 'name'\n  }],\n  i: [{\n    name: 'description'\n  }],\n  u: [{\n    name: 'uri'\n  }],\n  e: [{\n    name: 'email'\n  }],\n  p: [{\n    name: 'phone'\n  }],\n  z: [{\n    name: 'timezones'\n  }],\n  // TODO: this one can actually be parsed properly...\n  r: [{\n    name: 'repeats'\n  }],\n  // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [{\n    // a=rtpmap:110 opus/48000/2\n    push: 'rtp',\n    reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n    names: ['payload', 'codec', 'rate', 'encoding'],\n    format: function (o) {\n      return o.encoding ? 'rtpmap:%d %s/%s/%s' : o.rate ? 'rtpmap:%d %s/%s' : 'rtpmap:%d %s';\n    }\n  }, {\n    // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n    // a=fmtp:111 minptime=10; useinbandfec=1\n    push: 'fmtp',\n    reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n    names: ['payload', 'config'],\n    format: 'fmtp:%d %s'\n  }, {\n    // a=control:streamid=0\n    name: 'control',\n    reg: /^control:(.*)/,\n    format: 'control:%s'\n  }, {\n    // a=rtcp:65179 IN IP4 193.84.77.194\n    name: 'rtcp',\n    reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n    names: ['port', 'netType', 'ipVer', 'address'],\n    format: function (o) {\n      return o.address != null ? 'rtcp:%d %s IP%d %s' : 'rtcp:%d';\n    }\n  }, {\n    // a=rtcp-fb:98 trr-int 100\n    push: 'rtcpFbTrrInt',\n    reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n    names: ['payload', 'value'],\n    format: 'rtcp-fb:%s trr-int %d'\n  }, {\n    // a=rtcp-fb:98 nack rpsi\n    push: 'rtcpFb',\n    reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n    names: ['payload', 'type', 'subtype'],\n    format: function (o) {\n      return o.subtype != null ? 'rtcp-fb:%s %s %s' : 'rtcp-fb:%s %s';\n    }\n  }, {\n    // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n    // a=extmap:1/recvonly URI-gps-string\n    // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n    push: 'ext',\n    reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n    names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n    format: function (o) {\n      return 'extmap:%d' + (o.direction ? '/%s' : '%v') + (o['encrypt-uri'] ? ' %s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n    }\n  }, {\n    // a=extmap-allow-mixed\n    name: 'extmapAllowMixed',\n    reg: /^(extmap-allow-mixed)/\n  }, {\n    // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n    push: 'crypto',\n    reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n    names: ['id', 'suite', 'config', 'sessionConfig'],\n    format: function (o) {\n      return o.sessionConfig != null ? 'crypto:%d %s %s %s' : 'crypto:%d %s %s';\n    }\n  }, {\n    // a=setup:actpass\n    name: 'setup',\n    reg: /^setup:(\\w*)/,\n    format: 'setup:%s'\n  }, {\n    // a=connection:new\n    name: 'connectionType',\n    reg: /^connection:(new|existing)/,\n    format: 'connection:%s'\n  }, {\n    // a=mid:1\n    name: 'mid',\n    reg: /^mid:([^\\s]*)/,\n    format: 'mid:%s'\n  }, {\n    // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n    name: 'msid',\n    reg: /^msid:(.*)/,\n    format: 'msid:%s'\n  }, {\n    // a=ptime:20\n    name: 'ptime',\n    reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n    format: 'ptime:%d'\n  }, {\n    // a=maxptime:60\n    name: 'maxptime',\n    reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n    format: 'maxptime:%d'\n  }, {\n    // a=sendrecv\n    name: 'direction',\n    reg: /^(sendrecv|recvonly|sendonly|inactive)/\n  }, {\n    // a=ice-lite\n    name: 'icelite',\n    reg: /^(ice-lite)/\n  }, {\n    // a=ice-ufrag:F7gI\n    name: 'iceUfrag',\n    reg: /^ice-ufrag:(\\S*)/,\n    format: 'ice-ufrag:%s'\n  }, {\n    // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n    name: 'icePwd',\n    reg: /^ice-pwd:(\\S*)/,\n    format: 'ice-pwd:%s'\n  }, {\n    // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n    name: 'fingerprint',\n    reg: /^fingerprint:(\\S*) (\\S*)/,\n    names: ['type', 'hash'],\n    format: 'fingerprint:%s %s'\n  }, {\n    // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n    // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n    // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n    // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n    // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n    push: 'candidates',\n    reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n    names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n    format: function (o) {\n      var str = 'candidate:%s %d %s %d %s %d typ %s';\n      str += o.raddr != null ? ' raddr %s rport %d' : '%v%v';\n\n      // NB: candidate has three optional chunks, so %void middles one if it's missing\n      str += o.tcptype != null ? ' tcptype %s' : '%v';\n      if (o.generation != null) {\n        str += ' generation %d';\n      }\n      str += o['network-id'] != null ? ' network-id %d' : '%v';\n      str += o['network-cost'] != null ? ' network-cost %d' : '%v';\n      return str;\n    }\n  }, {\n    // a=end-of-candidates (keep after the candidates line for readability)\n    name: 'endOfCandidates',\n    reg: /^(end-of-candidates)/\n  }, {\n    // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n    name: 'remoteCandidates',\n    reg: /^remote-candidates:(.*)/,\n    format: 'remote-candidates:%s'\n  }, {\n    // a=ice-options:google-ice\n    name: 'iceOptions',\n    reg: /^ice-options:(\\S*)/,\n    format: 'ice-options:%s'\n  }, {\n    // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n    push: 'ssrcs',\n    reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n    names: ['id', 'attribute', 'value'],\n    format: function (o) {\n      var str = 'ssrc:%d';\n      if (o.attribute != null) {\n        str += ' %s';\n        if (o.value != null) {\n          str += ':%s';\n        }\n      }\n      return str;\n    }\n  }, {\n    // a=ssrc-group:FEC 1 2\n    // a=ssrc-group:FEC-FR 3004364195 1080772241\n    push: 'ssrcGroups',\n    // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n    reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n    names: ['semantics', 'ssrcs'],\n    format: 'ssrc-group:%s %s'\n  }, {\n    // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n    name: 'msidSemantic',\n    reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n    names: ['semantic', 'token'],\n    format: 'msid-semantic: %s %s' // space after ':' is not accidental\n  }, {\n    // a=group:BUNDLE audio video\n    push: 'groups',\n    reg: /^group:(\\w*) (.*)/,\n    names: ['type', 'mids'],\n    format: 'group:%s %s'\n  }, {\n    // a=rtcp-mux\n    name: 'rtcpMux',\n    reg: /^(rtcp-mux)/\n  }, {\n    // a=rtcp-rsize\n    name: 'rtcpRsize',\n    reg: /^(rtcp-rsize)/\n  }, {\n    // a=sctpmap:5000 webrtc-datachannel 1024\n    name: 'sctpmap',\n    reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n    names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n    format: function (o) {\n      return o.maxMessageSize != null ? 'sctpmap:%s %s %s' : 'sctpmap:%s %s';\n    }\n  }, {\n    // a=x-google-flag:conference\n    name: 'xGoogleFlag',\n    reg: /^x-google-flag:([^\\s]*)/,\n    format: 'x-google-flag:%s'\n  }, {\n    // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n    push: 'rids',\n    reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n    names: ['id', 'direction', 'params'],\n    format: function (o) {\n      return o.params ? 'rid:%s %s %s' : 'rid:%s %s';\n    }\n  }, {\n    // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n    // a=imageattr:* send [x=800,y=640] recv *\n    // a=imageattr:100 recv [x=320,y=240]\n    push: 'imageattrs',\n    reg: new RegExp(\n    // a=imageattr:97\n    '^imageattr:(\\\\d+|\\\\*)' +\n    // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n    '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n    // recv [x=330,y=250]\n    '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'),\n    names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n    format: function (o) {\n      return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n    }\n  }, {\n    // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n    // a=simulcast:recv 1;4,5 send 6;7\n    name: 'simulcast',\n    reg: new RegExp(\n    // a=simulcast:\n    '^simulcast:' +\n    // send 1,2,3;~4,~5\n    '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n    // space + recv 6;~7,~8\n    '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n    // end\n    '$'),\n    names: ['dir1', 'list1', 'dir2', 'list2'],\n    format: function (o) {\n      return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n    }\n  }, {\n    // old simulcast draft 03 (implemented by Firefox)\n    //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n    // a=simulcast: recv pt=97;98 send pt=97\n    // a=simulcast: send rid=5;6;7 paused=6,7\n    name: 'simulcast_03',\n    reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n    names: ['value'],\n    format: 'simulcast: %s'\n  }, {\n    // a=framerate:25\n    // a=framerate:29.97\n    name: 'framerate',\n    reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n    format: 'framerate:%s'\n  }, {\n    // RFC4570\n    // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n    name: 'sourceFilter',\n    reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n    names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n    format: 'source-filter: %s %s %s %s %s'\n  }, {\n    // a=bundle-only\n    name: 'bundleOnly',\n    reg: /^(bundle-only)/\n  }, {\n    // a=label:1\n    name: 'label',\n    reg: /^label:(.+)/,\n    format: 'label:%s'\n  }, {\n    // RFC version 26 for SCTP over DTLS\n    // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n    name: 'sctpPort',\n    reg: /^sctp-port:(\\d+)$/,\n    format: 'sctp-port:%s'\n  }, {\n    // RFC version 26 for SCTP over DTLS\n    // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n    name: 'maxMessageSize',\n    reg: /^max-message-size:(\\d+)$/,\n    format: 'max-message-size:%s'\n  }, {\n    // RFC7273\n    // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n    push: 'tsRefClocks',\n    reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n    names: ['clksrc', 'clksrcExt'],\n    format: function (o) {\n      return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n    }\n  }, {\n    // RFC7273\n    // a=mediaclk:direct=963214424\n    name: 'mediaClk',\n    reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n    names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n    format: function (o) {\n      var str = 'mediaclk:';\n      str += o.id != null ? 'id=%s %s' : '%v%s';\n      str += o.mediaClockValue != null ? '=%s' : '';\n      str += o.rateNumerator != null ? ' rate=%s' : '';\n      str += o.rateDenominator != null ? '/%s' : '';\n      return str;\n    }\n  }, {\n    // a=keywds:keywords\n    name: 'keywords',\n    reg: /^keywds:(.+)$/,\n    format: 'keywds:%s'\n  }, {\n    // a=content:main\n    name: 'content',\n    reg: /^content:(.+)/,\n    format: 'content:%s'\n  },\n  // BFCP https://tools.ietf.org/html/rfc4583\n  {\n    // a=floorctrl:c-s\n    name: 'bfcpFloorCtrl',\n    reg: /^floorctrl:(c-only|s-only|c-s)/,\n    format: 'floorctrl:%s'\n  }, {\n    // a=confid:1\n    name: 'bfcpConfId',\n    reg: /^confid:(\\d+)/,\n    format: 'confid:%s'\n  }, {\n    // a=userid:1\n    name: 'bfcpUserId',\n    reg: /^userid:(\\d+)/,\n    format: 'userid:%s'\n  }, {\n    // a=floorid:1\n    name: 'bfcpFloorId',\n    reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n    names: ['id', 'mStream'],\n    format: 'floorid:%s mstrm:%s'\n  }, {\n    // any a= that we don't understand is kept verbatim on media.invalid\n    push: 'invalid',\n    names: ['value']\n  }]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar$1).forEach(function (key) {\n  var objs = grammar$1[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\nvar grammarExports = grammar$2.exports;\n\n(function (exports) {\n  var toIntIfInt = function (v) {\n    return String(Number(v)) === v ? Number(v) : v;\n  };\n  var attachProperties = function (match, location, names, rawName) {\n    if (rawName && !names) {\n      location[rawName] = toIntIfInt(match[1]);\n    } else {\n      for (var i = 0; i < names.length; i += 1) {\n        if (match[i + 1] != null) {\n          location[names[i]] = toIntIfInt(match[i + 1]);\n        }\n      }\n    }\n  };\n  var parseReg = function (obj, location, content) {\n    var needsBlank = obj.name && obj.names;\n    if (obj.push && !location[obj.push]) {\n      location[obj.push] = [];\n    } else if (needsBlank && !location[obj.name]) {\n      location[obj.name] = {};\n    }\n    var keyLocation = obj.push ? {} :\n    // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n    attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n    if (obj.push) {\n      location[obj.push].push(keyLocation);\n    }\n  };\n  var grammar = grammarExports;\n  var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n  exports.parse = function (sdp) {\n    var session = {},\n      media = [],\n      location = session; // points at where properties go under (one of the above)\n\n    // parse lines we understand\n    sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n      var type = l[0];\n      var content = l.slice(2);\n      if (type === 'm') {\n        media.push({\n          rtp: [],\n          fmtp: []\n        });\n        location = media[media.length - 1]; // point at latest media line\n      }\n\n      for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n        var obj = grammar[type][j];\n        if (obj.reg.test(content)) {\n          return parseReg(obj, location, content);\n        }\n      }\n    });\n    session.media = media; // link it up\n    return session;\n  };\n  var paramReducer = function (acc, expr) {\n    var s = expr.split(/=(.+)/, 2);\n    if (s.length === 2) {\n      acc[s[0]] = toIntIfInt(s[1]);\n    } else if (s.length === 1 && expr.length > 1) {\n      acc[s[0]] = undefined;\n    }\n    return acc;\n  };\n  exports.parseParams = function (str) {\n    return str.split(/;\\s?/).reduce(paramReducer, {});\n  };\n\n  // For backward compatibility - alias will be removed in 3.0.0\n  exports.parseFmtpConfig = exports.parseParams;\n  exports.parsePayloads = function (str) {\n    return str.toString().split(' ').map(Number);\n  };\n  exports.parseRemoteCandidates = function (str) {\n    var candidates = [];\n    var parts = str.split(' ').map(toIntIfInt);\n    for (var i = 0; i < parts.length; i += 3) {\n      candidates.push({\n        component: parts[i],\n        ip: parts[i + 1],\n        port: parts[i + 2]\n      });\n    }\n    return candidates;\n  };\n  exports.parseImageAttributes = function (str) {\n    return str.split(' ').map(function (item) {\n      return item.substring(1, item.length - 1).split(',').reduce(paramReducer, {});\n    });\n  };\n  exports.parseSimulcastStreamList = function (str) {\n    return str.split(';').map(function (stream) {\n      return stream.split(',').map(function (format) {\n        var scid,\n          paused = false;\n        if (format[0] !== '~') {\n          scid = toIntIfInt(format);\n        } else {\n          scid = toIntIfInt(format.substring(1, format.length));\n          paused = true;\n        }\n        return {\n          scid: scid,\n          paused: paused\n        };\n      });\n    });\n  };\n})(parser$1);\n\nvar grammar = grammarExports;\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n      case '%%':\n        return '%';\n      case '%s':\n        return String(arg);\n      case '%d':\n        return Number(arg);\n      case '%v':\n        return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ? obj.format(obj.push ? location : location[obj.name]) : obj.format;\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      } else {\n        // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  } else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = ['v', 'o', 's', 'i', 'u', 'e', 'p', 'c', 'b', 't', 'r', 'z', 'a'];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\nvar writer$1 = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      } else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        } else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n\nvar parser = parser$1;\nvar writer = writer$1;\nvar write = writer;\nvar parse = parser.parse;\nparser.parseParams;\nparser.parseFmtpConfig; // Alias of parseParams().\nparser.parsePayloads;\nparser.parseRemoteCandidates;\nparser.parseImageAttributes;\nparser.parseSimulcastStreamList;\n\n/* The svc codec (av1/vp9) would use a very low bitrate at the begining and\nincrease slowly by the bandwidth estimator until it reach the target bitrate. The\nprocess commonly cost more than 10 seconds cause subscriber will get blur video at\nthe first few seconds. So we use a 70% of target bitrate here as the start bitrate to\neliminate this issue.\n*/\nconst startBitrateForSVC = 0.7;\nconst PCEvents = {\n  NegotiationStarted: 'negotiationStarted',\n  NegotiationComplete: 'negotiationComplete',\n  RTPVideoPayloadTypes: 'rtpVideoPayloadTypes'\n};\n/** @internal */\nclass PCTransport extends eventsExports.EventEmitter {\n  get pc() {\n    if (this._pc) return this._pc;\n    throw new UnexpectedConnectionState('Expected peer connection to be available');\n  }\n  constructor(config) {\n    let mediaConstraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this.pendingCandidates = [];\n    this.restartingIce = false;\n    this.renegotiate = false;\n    this.trackBitrates = [];\n    this.remoteStereoMids = [];\n    this.remoteNackMids = [];\n    // debounced negotiate interface\n    this.negotiate = r(onError => {\n      this.emit(PCEvents.NegotiationStarted);\n      try {\n        this.createAndSendOffer();\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          throw e;\n        }\n      }\n    }, 100);\n    this._pc = isChromiumBased() ?\n    // @ts-expect-error chrome allows additional media constraints to be passed into the RTCPeerConnection constructor\n    new RTCPeerConnection(config, mediaConstraints) : new RTCPeerConnection(config);\n    this._pc.onicecandidate = ev => {\n      var _a;\n      if (!ev.candidate) return;\n      (_a = this.onIceCandidate) === null || _a === void 0 ? void 0 : _a.call(this, ev.candidate);\n    };\n    this._pc.onicecandidateerror = ev => {\n      var _a;\n      (_a = this.onIceCandidateError) === null || _a === void 0 ? void 0 : _a.call(this, ev);\n    };\n    this._pc.onconnectionstatechange = () => {\n      var _a, _b, _c;\n      (_a = this.onConnectionStateChange) === null || _a === void 0 ? void 0 : _a.call(this, (_c = (_b = this._pc) === null || _b === void 0 ? void 0 : _b.connectionState) !== null && _c !== void 0 ? _c : 'closed');\n    };\n    this._pc.ondatachannel = ev => {\n      var _a;\n      (_a = this.onDataChannel) === null || _a === void 0 ? void 0 : _a.call(this, ev);\n    };\n    this._pc.ontrack = ev => {\n      var _a;\n      (_a = this.onTrack) === null || _a === void 0 ? void 0 : _a.call(this, ev);\n    };\n  }\n  get isICEConnected() {\n    return this._pc !== null && (this.pc.iceConnectionState === 'connected' || this.pc.iceConnectionState === 'completed');\n  }\n  addIceCandidate(candidate) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.pc.remoteDescription && !this.restartingIce) {\n        return this.pc.addIceCandidate(candidate);\n      }\n      this.pendingCandidates.push(candidate);\n    });\n  }\n  setRemoteDescription(sd) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      let mungedSDP = undefined;\n      if (sd.type === 'offer') {\n        let {\n          stereoMids,\n          nackMids\n        } = extractStereoAndNackAudioFromOffer(sd);\n        this.remoteStereoMids = stereoMids;\n        this.remoteNackMids = nackMids;\n      } else if (sd.type === 'answer') {\n        const sdpParsed = parse((_a = sd.sdp) !== null && _a !== void 0 ? _a : '');\n        sdpParsed.media.forEach(media => {\n          if (media.type === 'audio') {\n            // mung sdp for opus bitrate settings\n            this.trackBitrates.some(trackbr => {\n              if (!trackbr.transceiver || media.mid != trackbr.transceiver.mid) {\n                return false;\n              }\n              let codecPayload = 0;\n              media.rtp.some(rtp => {\n                if (rtp.codec.toUpperCase() === trackbr.codec.toUpperCase()) {\n                  codecPayload = rtp.payload;\n                  return true;\n                }\n                return false;\n              });\n              if (codecPayload === 0) {\n                return true;\n              }\n              let fmtpFound = false;\n              for (const fmtp of media.fmtp) {\n                if (fmtp.payload === codecPayload) {\n                  fmtp.config = fmtp.config.split(';').filter(attr => !attr.includes('maxaveragebitrate')).join(';');\n                  if (trackbr.maxbr > 0) {\n                    fmtp.config += \";maxaveragebitrate=\".concat(trackbr.maxbr * 1000);\n                  }\n                  fmtpFound = true;\n                  break;\n                }\n              }\n              if (!fmtpFound) {\n                if (trackbr.maxbr > 0) {\n                  media.fmtp.push({\n                    payload: codecPayload,\n                    config: \"maxaveragebitrate=\".concat(trackbr.maxbr * 1000)\n                  });\n                }\n              }\n              return true;\n            });\n          }\n        });\n        mungedSDP = write(sdpParsed);\n      }\n      yield this.setMungedSDP(sd, mungedSDP, true);\n      this.pendingCandidates.forEach(candidate => {\n        this.pc.addIceCandidate(candidate);\n      });\n      this.pendingCandidates = [];\n      this.restartingIce = false;\n      if (this.renegotiate) {\n        this.renegotiate = false;\n        this.createAndSendOffer();\n      } else if (sd.type === 'answer') {\n        this.emit(PCEvents.NegotiationComplete);\n        if (sd.sdp) {\n          const sdpParsed = parse(sd.sdp);\n          sdpParsed.media.forEach(media => {\n            if (media.type === 'video') {\n              this.emit(PCEvents.RTPVideoPayloadTypes, media.rtp);\n            }\n          });\n        }\n      }\n    });\n  }\n  createAndSendOffer(options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.onOffer === undefined) {\n        return;\n      }\n      if (options === null || options === void 0 ? void 0 : options.iceRestart) {\n        livekitLogger.debug('restarting ICE');\n        this.restartingIce = true;\n      }\n      if (this._pc && this._pc.signalingState === 'have-local-offer') {\n        // we're waiting for the peer to accept our offer, so we'll just wait\n        // the only exception to this is when ICE restart is needed\n        const currentSD = this.pc.remoteDescription;\n        if ((options === null || options === void 0 ? void 0 : options.iceRestart) && currentSD) {\n          // TODO: handle when ICE restart is needed but we don't have a remote description\n          // the best thing to do is to recreate the peerconnection\n          yield this.pc.setRemoteDescription(currentSD);\n        } else {\n          this.renegotiate = true;\n          return;\n        }\n      } else if (!this._pc || this._pc.signalingState === 'closed') {\n        livekitLogger.warn('could not createOffer with closed peer connection');\n        return;\n      }\n      // actually negotiate\n      livekitLogger.debug('starting to negotiate');\n      const offer = yield this.pc.createOffer(options);\n      const sdpParsed = parse((_a = offer.sdp) !== null && _a !== void 0 ? _a : '');\n      sdpParsed.media.forEach(media => {\n        if (media.type === 'audio') {\n          ensureAudioNackAndStereo(media, [], []);\n        } else if (media.type === 'video') {\n          ensureVideoDDExtensionForSVC(media);\n          // mung sdp for codec bitrate setting that can't apply by sendEncoding\n          this.trackBitrates.some(trackbr => {\n            if (!media.msid || !trackbr.cid || !media.msid.includes(trackbr.cid)) {\n              return false;\n            }\n            let codecPayload = 0;\n            media.rtp.some(rtp => {\n              if (rtp.codec.toUpperCase() === trackbr.codec.toUpperCase()) {\n                codecPayload = rtp.payload;\n                return true;\n              }\n              return false;\n            });\n            if (codecPayload === 0) {\n              return true;\n            }\n            let fmtpFound = false;\n            for (const fmtp of media.fmtp) {\n              if (fmtp.payload === codecPayload) {\n                if (!fmtp.config.includes('x-google-start-bitrate')) {\n                  fmtp.config += \";x-google-start-bitrate=\".concat(Math.round(trackbr.maxbr * startBitrateForSVC));\n                }\n                if (!fmtp.config.includes('x-google-max-bitrate')) {\n                  fmtp.config += \";x-google-max-bitrate=\".concat(trackbr.maxbr);\n                }\n                fmtpFound = true;\n                break;\n              }\n            }\n            if (!fmtpFound) {\n              media.fmtp.push({\n                payload: codecPayload,\n                config: \"x-google-start-bitrate=\".concat(Math.round(trackbr.maxbr * startBitrateForSVC), \";x-google-max-bitrate=\").concat(trackbr.maxbr)\n              });\n            }\n            return true;\n          });\n        }\n      });\n      yield this.setMungedSDP(offer, write(sdpParsed));\n      this.onOffer(offer);\n    });\n  }\n  createAndSetAnswer() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const answer = yield this.pc.createAnswer();\n      const sdpParsed = parse((_a = answer.sdp) !== null && _a !== void 0 ? _a : '');\n      sdpParsed.media.forEach(media => {\n        if (media.type === 'audio') {\n          ensureAudioNackAndStereo(media, this.remoteStereoMids, this.remoteNackMids);\n        }\n      });\n      yield this.setMungedSDP(answer, write(sdpParsed));\n      return answer;\n    });\n  }\n  createDataChannel(label, dataChannelDict) {\n    return this.pc.createDataChannel(label, dataChannelDict);\n  }\n  addTransceiver(mediaStreamTrack, transceiverInit) {\n    return this.pc.addTransceiver(mediaStreamTrack, transceiverInit);\n  }\n  addTrack(track) {\n    return this.pc.addTrack(track);\n  }\n  setTrackCodecBitrate(info) {\n    this.trackBitrates.push(info);\n  }\n  setConfiguration(rtcConfig) {\n    return this.pc.setConfiguration(rtcConfig);\n  }\n  canRemoveTrack() {\n    return !!this.pc.removeTrack;\n  }\n  removeTrack(sender) {\n    return this.pc.removeTrack(sender);\n  }\n  getConnectionState() {\n    return this.pc.connectionState;\n  }\n  getICEConnectionState() {\n    return this.pc.iceConnectionState;\n  }\n  getSignallingState() {\n    return this.pc.signalingState;\n  }\n  getTransceivers() {\n    return this.pc.getTransceivers();\n  }\n  getSenders() {\n    return this.pc.getSenders();\n  }\n  getLocalDescription() {\n    return this.pc.localDescription;\n  }\n  getRemoteDescription() {\n    return this.pc.remoteDescription;\n  }\n  getConnectedAddress() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._pc) {\n        return;\n      }\n      let selectedCandidatePairId = '';\n      const candidatePairs = new Map();\n      // id -> candidate ip\n      const candidates = new Map();\n      const stats = yield this._pc.getStats();\n      stats.forEach(v => {\n        switch (v.type) {\n          case 'transport':\n            selectedCandidatePairId = v.selectedCandidatePairId;\n            break;\n          case 'candidate-pair':\n            if (selectedCandidatePairId === '' && v.selected) {\n              selectedCandidatePairId = v.id;\n            }\n            candidatePairs.set(v.id, v);\n            break;\n          case 'remote-candidate':\n            candidates.set(v.id, \"\".concat(v.address, \":\").concat(v.port));\n            break;\n        }\n      });\n      if (selectedCandidatePairId === '') {\n        return undefined;\n      }\n      const selectedID = (_a = candidatePairs.get(selectedCandidatePairId)) === null || _a === void 0 ? void 0 : _a.remoteCandidateId;\n      if (selectedID === undefined) {\n        return undefined;\n      }\n      return candidates.get(selectedID);\n    });\n  }\n  close() {\n    if (!this._pc) {\n      return;\n    }\n    this._pc.close();\n    this._pc.onconnectionstatechange = null;\n    this._pc.oniceconnectionstatechange = null;\n    this._pc.onicegatheringstatechange = null;\n    this._pc.ondatachannel = null;\n    this._pc.onnegotiationneeded = null;\n    this._pc.onsignalingstatechange = null;\n    this._pc.onicecandidate = null;\n    this._pc.ondatachannel = null;\n    this._pc.ontrack = null;\n    this._pc.onconnectionstatechange = null;\n    this._pc.oniceconnectionstatechange = null;\n    this._pc = null;\n  }\n  setMungedSDP(sd, munged, remote) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (munged) {\n        const originalSdp = sd.sdp;\n        sd.sdp = munged;\n        try {\n          livekitLogger.debug(\"setting munged \".concat(remote ? 'remote' : 'local', \" description\"));\n          if (remote) {\n            yield this.pc.setRemoteDescription(sd);\n          } else {\n            yield this.pc.setLocalDescription(sd);\n          }\n          return;\n        } catch (e) {\n          livekitLogger.warn(\"not able to set \".concat(sd.type, \", falling back to unmodified sdp\"), {\n            error: e,\n            sdp: munged\n          });\n          sd.sdp = originalSdp;\n        }\n      }\n      try {\n        if (remote) {\n          yield this.pc.setRemoteDescription(sd);\n        } else {\n          yield this.pc.setLocalDescription(sd);\n        }\n      } catch (e) {\n        // this error cannot always be caught.\n        // If the local description has a setCodecPreferences error, this error will be uncaught\n        let msg = 'unknown error';\n        if (e instanceof Error) {\n          msg = e.message;\n        } else if (typeof e === 'string') {\n          msg = e;\n        }\n        const fields = {\n          error: msg,\n          sdp: sd.sdp\n        };\n        if (!remote && this.pc.remoteDescription) {\n          fields.remoteSdp = this.pc.remoteDescription;\n        }\n        livekitLogger.error(\"unable to set \".concat(sd.type), fields);\n        throw new NegotiationError(msg);\n      }\n    });\n  }\n}\nfunction ensureAudioNackAndStereo(media, stereoMids, nackMids) {\n  // found opus codec to add nack fb\n  let opusPayload = 0;\n  media.rtp.some(rtp => {\n    if (rtp.codec === 'opus') {\n      opusPayload = rtp.payload;\n      return true;\n    }\n    return false;\n  });\n  // add nack rtcpfb if not exist\n  if (opusPayload > 0) {\n    if (!media.rtcpFb) {\n      media.rtcpFb = [];\n    }\n    if (nackMids.includes(media.mid) && !media.rtcpFb.some(fb => fb.payload === opusPayload && fb.type === 'nack')) {\n      media.rtcpFb.push({\n        payload: opusPayload,\n        type: 'nack'\n      });\n    }\n    if (stereoMids.includes(media.mid)) {\n      media.fmtp.some(fmtp => {\n        if (fmtp.payload === opusPayload) {\n          if (!fmtp.config.includes('stereo=1')) {\n            fmtp.config += ';stereo=1';\n          }\n          return true;\n        }\n        return false;\n      });\n    }\n  }\n}\nfunction ensureVideoDDExtensionForSVC(media) {\n  var _a, _b, _c, _d;\n  const codec = (_b = (_a = media.rtp[0]) === null || _a === void 0 ? void 0 : _a.codec) === null || _b === void 0 ? void 0 : _b.toLowerCase();\n  if (!isSVCCodec(codec)) {\n    return;\n  }\n  let maxID = 0;\n  const ddFound = (_c = media.ext) === null || _c === void 0 ? void 0 : _c.some(ext => {\n    if (ext.uri === ddExtensionURI) {\n      return true;\n    }\n    if (ext.value > maxID) {\n      maxID = ext.value;\n    }\n    return false;\n  });\n  if (!ddFound) {\n    (_d = media.ext) === null || _d === void 0 ? void 0 : _d.push({\n      value: maxID + 1,\n      uri: ddExtensionURI\n    });\n  }\n}\nfunction extractStereoAndNackAudioFromOffer(offer) {\n  var _a;\n  const stereoMids = [];\n  const nackMids = [];\n  const sdpParsed = parse((_a = offer.sdp) !== null && _a !== void 0 ? _a : '');\n  let opusPayload = 0;\n  sdpParsed.media.forEach(media => {\n    var _a;\n    if (media.type === 'audio') {\n      media.rtp.some(rtp => {\n        if (rtp.codec === 'opus') {\n          opusPayload = rtp.payload;\n          return true;\n        }\n        return false;\n      });\n      if ((_a = media.rtcpFb) === null || _a === void 0 ? void 0 : _a.some(fb => fb.payload === opusPayload && fb.type === 'nack')) {\n        nackMids.push(media.mid);\n      }\n      media.fmtp.some(fmtp => {\n        if (fmtp.payload === opusPayload) {\n          if (fmtp.config.includes('sprop-stereo=1')) {\n            stereoMids.push(media.mid);\n          }\n          return true;\n        }\n        return false;\n      });\n    }\n  });\n  return {\n    stereoMids,\n    nackMids\n  };\n}\n\nconst defaultVideoCodec = 'vp8';\nconst publishDefaults = {\n  /**\n   * @deprecated\n   */\n  audioBitrate: AudioPresets.music.maxBitrate,\n  audioPreset: AudioPresets.music,\n  dtx: true,\n  red: true,\n  forceStereo: false,\n  simulcast: true,\n  screenShareEncoding: ScreenSharePresets.h1080fps15.encoding,\n  stopMicTrackOnMute: false,\n  videoCodec: defaultVideoCodec,\n  backupCodec: false\n};\nconst audioDefaults = {\n  autoGainControl: true,\n  echoCancellation: true,\n  noiseSuppression: true\n};\nconst videoDefaults = {\n  resolution: VideoPresets.h720.resolution\n};\nconst roomOptionDefaults = {\n  adaptiveStream: false,\n  dynacast: false,\n  stopLocalTrackOnUnpublish: true,\n  reconnectPolicy: new DefaultReconnectPolicy(),\n  disconnectOnPageLeave: true,\n  expWebAudioMix: false\n};\nconst roomConnectOptionDefaults = {\n  autoSubscribe: true,\n  maxRetries: 1,\n  peerConnectionTimeout: 15000,\n  websocketTimeout: 15000\n};\n\nconst lossyDataChannel = '_lossy';\nconst reliableDataChannel = '_reliable';\nconst minReconnectWait = 2 * 1000;\nconst leaveReconnect = 'leave-reconnect';\nvar PCState;\n(function (PCState) {\n  PCState[PCState[\"New\"] = 0] = \"New\";\n  PCState[PCState[\"Connected\"] = 1] = \"Connected\";\n  PCState[PCState[\"Disconnected\"] = 2] = \"Disconnected\";\n  PCState[PCState[\"Reconnecting\"] = 3] = \"Reconnecting\";\n  PCState[PCState[\"Closed\"] = 4] = \"Closed\";\n})(PCState || (PCState = {}));\n/** @internal */\nclass RTCEngine extends eventsExports.EventEmitter {\n  get isClosed() {\n    return this._isClosed;\n  }\n  constructor(options) {\n    super();\n    this.options = options;\n    this.rtcConfig = {};\n    this.peerConnectionTimeout = roomConnectOptionDefaults.peerConnectionTimeout;\n    this.fullReconnectOnNext = false;\n    this.subscriberPrimary = false;\n    this.pcState = PCState.New;\n    this._isClosed = true;\n    this.pendingTrackResolvers = {};\n    // true if publisher connection has already been established.\n    // this is helpful to know if we need to restart ICE on the publisher connection\n    this.hasPublished = false;\n    this.reconnectAttempts = 0;\n    this.reconnectStart = 0;\n    this.attemptingReconnect = false;\n    /** keeps track of how often an initial join connection has been tried */\n    this.joinAttempts = 0;\n    /** specifies how often an initial join connection is allowed to retry */\n    this.maxJoinAttempts = 1;\n    this.shouldFailNext = false;\n    this.handleDataChannel = _ref => {\n      let {\n        channel\n      } = _ref;\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!channel) {\n          return;\n        }\n        if (channel.label === reliableDataChannel) {\n          this.reliableDCSub = channel;\n        } else if (channel.label === lossyDataChannel) {\n          this.lossyDCSub = channel;\n        } else {\n          return;\n        }\n        livekitLogger.debug(\"on data channel \".concat(channel.id, \", \").concat(channel.label));\n        channel.onmessage = this.handleDataMessage;\n      });\n    };\n    this.handleDataMessage = message => __awaiter(this, void 0, void 0, function* () {\n      var _a, _b;\n      // make sure to respect incoming data message order by processing message events one after the other\n      const unlock = yield this.dataProcessLock.lock();\n      try {\n        // decode\n        let buffer;\n        if (message.data instanceof ArrayBuffer) {\n          buffer = message.data;\n        } else if (message.data instanceof Blob) {\n          buffer = yield message.data.arrayBuffer();\n        } else {\n          livekitLogger.error('unsupported data type', message.data);\n          return;\n        }\n        const dp = DataPacket.fromBinary(new Uint8Array(buffer));\n        if (((_a = dp.value) === null || _a === void 0 ? void 0 : _a.case) === 'speaker') {\n          // dispatch speaker updates\n          this.emit(EngineEvent.ActiveSpeakersUpdate, dp.value.value.speakers);\n        } else if (((_b = dp.value) === null || _b === void 0 ? void 0 : _b.case) === 'user') {\n          this.emit(EngineEvent.DataPacketReceived, dp.value.value, dp.kind);\n        }\n      } finally {\n        unlock();\n      }\n    });\n    this.handleDataError = event => {\n      const channel = event.currentTarget;\n      const channelKind = channel.maxRetransmits === 0 ? 'lossy' : 'reliable';\n      if (event instanceof ErrorEvent && event.error) {\n        const {\n          error\n        } = event.error;\n        livekitLogger.error(\"DataChannel error on \".concat(channelKind, \": \").concat(event.message), error);\n      } else {\n        livekitLogger.error(\"Unknown DataChannel error on \".concat(channelKind), event);\n      }\n    };\n    this.handleBufferedAmountLow = event => {\n      const channel = event.currentTarget;\n      const channelKind = channel.maxRetransmits === 0 ? DataPacket_Kind.LOSSY : DataPacket_Kind.RELIABLE;\n      this.updateAndEmitDCBufferStatus(channelKind);\n    };\n    // websocket reconnect behavior. if websocket is interrupted, and the PeerConnection\n    // continues to work, we can reconnect to websocket to continue the session\n    // after a number of retries, we'll close and give up permanently\n    this.handleDisconnect = (connection, disconnectReason) => {\n      if (this._isClosed) {\n        return;\n      }\n      livekitLogger.warn(\"\".concat(connection, \" disconnected\"));\n      if (this.reconnectAttempts === 0) {\n        // only reset start time on the first try\n        this.reconnectStart = Date.now();\n      }\n      const disconnect = duration => {\n        livekitLogger.warn(\"could not recover connection after \".concat(this.reconnectAttempts, \" attempts, \").concat(duration, \"ms. giving up\"));\n        this.emit(EngineEvent.Disconnected);\n        this.close();\n      };\n      const duration = Date.now() - this.reconnectStart;\n      let delay = this.getNextRetryDelay({\n        elapsedMs: duration,\n        retryCount: this.reconnectAttempts\n      });\n      if (delay === null) {\n        disconnect(duration);\n        return;\n      }\n      if (connection === leaveReconnect) {\n        delay = 0;\n      }\n      livekitLogger.debug(\"reconnecting in \".concat(delay, \"ms\"));\n      this.clearReconnectTimeout();\n      if (this.token && this.regionUrlProvider) {\n        // token may have been refreshed, we do not want to recreate the regionUrlProvider\n        // since the current engine may have inherited a regional url\n        this.regionUrlProvider.updateToken(this.token);\n      }\n      this.reconnectTimeout = CriticalTimers.setTimeout(() => this.attemptReconnect(disconnectReason), delay);\n    };\n    this.waitForRestarted = () => {\n      return new Promise((resolve, reject) => {\n        if (this.pcState === PCState.Connected) {\n          resolve();\n        }\n        const onRestarted = () => {\n          this.off(EngineEvent.Disconnected, onDisconnected);\n          resolve();\n        };\n        const onDisconnected = () => {\n          this.off(EngineEvent.Restarted, onRestarted);\n          reject();\n        };\n        this.once(EngineEvent.Restarted, onRestarted);\n        this.once(EngineEvent.Disconnected, onDisconnected);\n      });\n    };\n    this.updateAndEmitDCBufferStatus = kind => {\n      const status = this.isBufferStatusLow(kind);\n      if (typeof status !== 'undefined' && status !== this.dcBufferStatus.get(kind)) {\n        this.dcBufferStatus.set(kind, status);\n        this.emit(EngineEvent.DCBufferStatusChanged, status, kind);\n      }\n    };\n    this.isBufferStatusLow = kind => {\n      const dc = this.dataChannelForKind(kind);\n      if (dc) {\n        return dc.bufferedAmount <= dc.bufferedAmountLowThreshold;\n      }\n    };\n    this.handleBrowserOnLine = () => {\n      // in case the engine is currently reconnecting, attempt a reconnect immediately after the browser state has changed to 'onLine'\n      if (this.client.isReconnecting) {\n        this.clearReconnectTimeout();\n        this.attemptReconnect(ReconnectReason.RR_SIGNAL_DISCONNECTED);\n      }\n    };\n    this.client = new SignalClient();\n    this.client.signalLatency = this.options.expSignalLatency;\n    this.reconnectPolicy = this.options.reconnectPolicy;\n    this.registerOnLineListener();\n    this.closingLock = new Mutex();\n    this.dataProcessLock = new Mutex();\n    this.dcBufferStatus = new Map([[DataPacket_Kind.LOSSY, true], [DataPacket_Kind.RELIABLE, true]]);\n    this.client.onParticipantUpdate = updates => this.emit(EngineEvent.ParticipantUpdate, updates);\n    this.client.onConnectionQuality = update => this.emit(EngineEvent.ConnectionQualityUpdate, update);\n    this.client.onRoomUpdate = update => this.emit(EngineEvent.RoomUpdate, update);\n    this.client.onSubscriptionError = resp => this.emit(EngineEvent.SubscriptionError, resp);\n    this.client.onSubscriptionPermissionUpdate = update => this.emit(EngineEvent.SubscriptionPermissionUpdate, update);\n    this.client.onSpeakersChanged = update => this.emit(EngineEvent.SpeakersChanged, update);\n    this.client.onStreamStateUpdate = update => this.emit(EngineEvent.StreamStateChanged, update);\n  }\n  join(url, token, opts, abortSignal) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.url = url;\n      this.token = token;\n      this.signalOpts = opts;\n      this.maxJoinAttempts = opts.maxRetries;\n      try {\n        this.joinAttempts += 1;\n        this.setupSignalClientCallbacks();\n        const joinResponse = yield this.client.join(url, token, opts, abortSignal);\n        this._isClosed = false;\n        this.latestJoinResponse = joinResponse;\n        this.subscriberPrimary = joinResponse.subscriberPrimary;\n        if (!this.publisher) {\n          this.configure(joinResponse);\n        }\n        // create offer\n        if (!this.subscriberPrimary) {\n          this.negotiate();\n        }\n        this.clientConfiguration = joinResponse.clientConfiguration;\n        return joinResponse;\n      } catch (e) {\n        if (e instanceof ConnectionError) {\n          if (e.reason === 1 /* ConnectionErrorReason.ServerUnreachable */) {\n            livekitLogger.warn(\"Couldn't connect to server, attempt \".concat(this.joinAttempts, \" of \").concat(this.maxJoinAttempts));\n            if (this.joinAttempts < this.maxJoinAttempts) {\n              return this.join(url, token, opts, abortSignal);\n            }\n          }\n        }\n        throw e;\n      }\n    });\n  }\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const unlock = yield this.closingLock.lock();\n      if (this.isClosed) {\n        unlock();\n        return;\n      }\n      try {\n        this._isClosed = true;\n        this.emit(EngineEvent.Closing);\n        this.removeAllListeners();\n        this.deregisterOnLineListener();\n        this.clearPendingReconnect();\n        yield this.cleanupPeerConnections();\n        yield this.cleanupClient();\n      } finally {\n        unlock();\n      }\n    });\n  }\n  cleanupPeerConnections() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.publisher && this.publisher.getSignallingState() !== 'closed') {\n        this.publisher.getSenders().forEach(sender => {\n          var _a, _b;\n          try {\n            // TODO: react-native-webrtc doesn't have removeTrack yet.\n            if ((_a = this.publisher) === null || _a === void 0 ? void 0 : _a.canRemoveTrack()) {\n              (_b = this.publisher) === null || _b === void 0 ? void 0 : _b.removeTrack(sender);\n            }\n          } catch (e) {\n            livekitLogger.warn('could not removeTrack', {\n              error: e\n            });\n          }\n        });\n      }\n      if (this.publisher) {\n        this.publisher.close();\n        this.publisher = undefined;\n      }\n      if (this.subscriber) {\n        this.subscriber.close();\n        this.subscriber = undefined;\n      }\n      this.hasPublished = false;\n      this.primaryTransport = undefined;\n      const dcCleanup = dc => {\n        if (!dc) return;\n        dc.close();\n        dc.onbufferedamountlow = null;\n        dc.onclose = null;\n        dc.onclosing = null;\n        dc.onerror = null;\n        dc.onmessage = null;\n        dc.onopen = null;\n      };\n      dcCleanup(this.lossyDC);\n      dcCleanup(this.lossyDCSub);\n      dcCleanup(this.reliableDC);\n      dcCleanup(this.reliableDCSub);\n      this.lossyDC = undefined;\n      this.lossyDCSub = undefined;\n      this.reliableDC = undefined;\n      this.reliableDCSub = undefined;\n    });\n  }\n  cleanupClient() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.client.close();\n      this.client.resetCallbacks();\n    });\n  }\n  addTrack(req) {\n    if (this.pendingTrackResolvers[req.cid]) {\n      throw new TrackInvalidError('a track with the same ID has already been published');\n    }\n    return new Promise((resolve, reject) => {\n      const publicationTimeout = setTimeout(() => {\n        delete this.pendingTrackResolvers[req.cid];\n        reject(new ConnectionError('publication of local track timed out, no response from server'));\n      }, 10000);\n      this.pendingTrackResolvers[req.cid] = {\n        resolve: info => {\n          clearTimeout(publicationTimeout);\n          resolve(info);\n        },\n        reject: () => {\n          clearTimeout(publicationTimeout);\n          reject(new Error('Cancelled publication by calling unpublish'));\n        }\n      };\n      this.client.sendAddTrack(req);\n    });\n  }\n  /**\n   * Removes sender from PeerConnection, returning true if it was removed successfully\n   * and a negotiation is necessary\n   * @param sender\n   * @returns\n   */\n  removeTrack(sender) {\n    var _a;\n    if (sender.track && this.pendingTrackResolvers[sender.track.id]) {\n      const {\n        reject\n      } = this.pendingTrackResolvers[sender.track.id];\n      if (reject) {\n        reject();\n      }\n      delete this.pendingTrackResolvers[sender.track.id];\n    }\n    try {\n      (_a = this.publisher) === null || _a === void 0 ? void 0 : _a.removeTrack(sender);\n      return true;\n    } catch (e) {\n      livekitLogger.warn('failed to remove track', {\n        error: e,\n        method: 'removeTrack'\n      });\n    }\n    return false;\n  }\n  updateMuteStatus(trackSid, muted) {\n    this.client.sendMuteTrack(trackSid, muted);\n  }\n  get dataSubscriberReadyState() {\n    var _a;\n    return (_a = this.reliableDCSub) === null || _a === void 0 ? void 0 : _a.readyState;\n  }\n  getConnectedServerAddress() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.primaryTransport === undefined) {\n        return undefined;\n      }\n      return this.primaryTransport.getConnectedAddress();\n    });\n  }\n  /* @internal */\n  setRegionUrlProvider(provider) {\n    this.regionUrlProvider = provider;\n  }\n  configure(joinResponse) {\n    var _a;\n    // already configured\n    if (this.publisher || this.subscriber) {\n      return;\n    }\n    this.participantSid = (_a = joinResponse.participant) === null || _a === void 0 ? void 0 : _a.sid;\n    const rtcConfig = this.makeRTCConfiguration(joinResponse);\n    const googConstraints = {\n      optional: [{\n        googDscp: true\n      }]\n    };\n    this.publisher = new PCTransport(rtcConfig, googConstraints);\n    this.subscriber = new PCTransport(rtcConfig);\n    this.emit(EngineEvent.TransportsCreated, this.publisher, this.subscriber);\n    this.publisher.onIceCandidate = candidate => {\n      livekitLogger.trace('adding ICE candidate for peer', candidate);\n      this.client.sendIceCandidate(candidate, SignalTarget.PUBLISHER);\n    };\n    this.subscriber.onIceCandidate = candidate => {\n      this.client.sendIceCandidate(candidate, SignalTarget.SUBSCRIBER);\n    };\n    this.publisher.onOffer = offer => {\n      this.client.sendOffer(offer);\n    };\n    let primaryTransport = this.publisher;\n    let secondaryTransport = this.subscriber;\n    let subscriberPrimary = joinResponse.subscriberPrimary;\n    if (subscriberPrimary) {\n      primaryTransport = this.subscriber;\n      secondaryTransport = this.publisher;\n      // in subscriber primary mode, server side opens sub data channels.\n      this.subscriber.onDataChannel = this.handleDataChannel;\n    }\n    this.primaryTransport = primaryTransport;\n    primaryTransport.onConnectionStateChange = connectionState => __awaiter(this, void 0, void 0, function* () {\n      livekitLogger.debug(\"primary PC state changed \".concat(connectionState));\n      if (connectionState === 'connected') {\n        const shouldEmit = this.pcState === PCState.New;\n        this.pcState = PCState.Connected;\n        if (shouldEmit) {\n          this.emit(EngineEvent.Connected, joinResponse);\n        }\n      } else if (connectionState === 'failed') {\n        // on Safari, PeerConnection will switch to 'disconnected' during renegotiation\n        if (this.pcState === PCState.Connected) {\n          this.pcState = PCState.Disconnected;\n          this.handleDisconnect('primary peerconnection', subscriberPrimary ? ReconnectReason.RR_SUBSCRIBER_FAILED : ReconnectReason.RR_PUBLISHER_FAILED);\n        }\n      }\n    });\n    secondaryTransport.onConnectionStateChange = connectionState => __awaiter(this, void 0, void 0, function* () {\n      livekitLogger.debug(\"secondary PC state changed \".concat(connectionState));\n      // also reconnect if secondary peerconnection fails\n      if (connectionState === 'failed') {\n        this.handleDisconnect('secondary peerconnection', subscriberPrimary ? ReconnectReason.RR_PUBLISHER_FAILED : ReconnectReason.RR_SUBSCRIBER_FAILED);\n      }\n    });\n    this.subscriber.onTrack = ev => {\n      this.emit(EngineEvent.MediaTrackAdded, ev.track, ev.streams[0], ev.receiver);\n    };\n    this.createDataChannels();\n  }\n  setupSignalClientCallbacks() {\n    // configure signaling client\n    this.client.onAnswer = sd => __awaiter(this, void 0, void 0, function* () {\n      if (!this.publisher) {\n        return;\n      }\n      livekitLogger.debug('received server answer', {\n        RTCSdpType: sd.type,\n        signalingState: this.publisher.getSignallingState().toString()\n      });\n      yield this.publisher.setRemoteDescription(sd);\n    });\n    // add candidate on trickle\n    this.client.onTrickle = (candidate, target) => {\n      if (!this.publisher || !this.subscriber) {\n        return;\n      }\n      livekitLogger.trace('got ICE candidate from peer', {\n        candidate,\n        target\n      });\n      if (target === SignalTarget.PUBLISHER) {\n        this.publisher.addIceCandidate(candidate);\n      } else {\n        this.subscriber.addIceCandidate(candidate);\n      }\n    };\n    // when server creates an offer for the client\n    this.client.onOffer = sd => __awaiter(this, void 0, void 0, function* () {\n      if (!this.subscriber) {\n        return;\n      }\n      livekitLogger.debug('received server offer', {\n        RTCSdpType: sd.type,\n        signalingState: this.subscriber.getSignallingState().toString()\n      });\n      yield this.subscriber.setRemoteDescription(sd);\n      // answer the offer\n      const answer = yield this.subscriber.createAndSetAnswer();\n      this.client.sendAnswer(answer);\n    });\n    this.client.onLocalTrackPublished = res => {\n      livekitLogger.debug('received trackPublishedResponse', res);\n      if (!this.pendingTrackResolvers[res.cid]) {\n        livekitLogger.error(\"missing track resolver for \".concat(res.cid));\n        return;\n      }\n      const {\n        resolve\n      } = this.pendingTrackResolvers[res.cid];\n      delete this.pendingTrackResolvers[res.cid];\n      resolve(res.track);\n    };\n    this.client.onTokenRefresh = token => {\n      this.token = token;\n    };\n    this.client.onClose = () => {\n      this.handleDisconnect('signal', ReconnectReason.RR_SIGNAL_DISCONNECTED);\n    };\n    this.client.onLeave = leave => {\n      if (leave === null || leave === void 0 ? void 0 : leave.canReconnect) {\n        this.fullReconnectOnNext = true;\n        this.primaryTransport = undefined;\n        // reconnect immediately instead of waiting for next attempt\n        this.handleDisconnect(leaveReconnect);\n      } else {\n        this.emit(EngineEvent.Disconnected, leave === null || leave === void 0 ? void 0 : leave.reason);\n        this.close();\n      }\n      livekitLogger.trace('leave request', {\n        leave\n      });\n    };\n  }\n  makeRTCConfiguration(serverResponse) {\n    var _a;\n    const rtcConfig = Object.assign({}, this.rtcConfig);\n    if ((_a = this.signalOpts) === null || _a === void 0 ? void 0 : _a.e2eeEnabled) {\n      livekitLogger.debug('E2EE - setting up transports with insertable streams');\n      //  this makes sure that no data is sent before the transforms are ready\n      // @ts-ignore\n      rtcConfig.encodedInsertableStreams = true;\n    }\n    // update ICE servers before creating PeerConnection\n    if (serverResponse.iceServers && !rtcConfig.iceServers) {\n      const rtcIceServers = [];\n      serverResponse.iceServers.forEach(iceServer => {\n        const rtcIceServer = {\n          urls: iceServer.urls\n        };\n        if (iceServer.username) rtcIceServer.username = iceServer.username;\n        if (iceServer.credential) {\n          rtcIceServer.credential = iceServer.credential;\n        }\n        rtcIceServers.push(rtcIceServer);\n      });\n      rtcConfig.iceServers = rtcIceServers;\n    }\n    if (serverResponse.clientConfiguration && serverResponse.clientConfiguration.forceRelay === ClientConfigSetting.ENABLED) {\n      rtcConfig.iceTransportPolicy = 'relay';\n    }\n    // @ts-ignore\n    rtcConfig.sdpSemantics = 'unified-plan';\n    // @ts-ignore\n    rtcConfig.continualGatheringPolicy = 'gather_continually';\n    return rtcConfig;\n  }\n  createDataChannels() {\n    if (!this.publisher) {\n      return;\n    }\n    // clear old data channel callbacks if recreate\n    if (this.lossyDC) {\n      this.lossyDC.onmessage = null;\n      this.lossyDC.onerror = null;\n    }\n    if (this.reliableDC) {\n      this.reliableDC.onmessage = null;\n      this.reliableDC.onerror = null;\n    }\n    // create data channels\n    this.lossyDC = this.publisher.createDataChannel(lossyDataChannel, {\n      // will drop older packets that arrive\n      ordered: true,\n      maxRetransmits: 0\n    });\n    this.reliableDC = this.publisher.createDataChannel(reliableDataChannel, {\n      ordered: true\n    });\n    // also handle messages over the pub channel, for backwards compatibility\n    this.lossyDC.onmessage = this.handleDataMessage;\n    this.reliableDC.onmessage = this.handleDataMessage;\n    // handle datachannel errors\n    this.lossyDC.onerror = this.handleDataError;\n    this.reliableDC.onerror = this.handleDataError;\n    // set up dc buffer threshold, set to 64kB (otherwise 0 by default)\n    this.lossyDC.bufferedAmountLowThreshold = 65535;\n    this.reliableDC.bufferedAmountLowThreshold = 65535;\n    // handle buffer amount low events\n    this.lossyDC.onbufferedamountlow = this.handleBufferedAmountLow;\n    this.reliableDC.onbufferedamountlow = this.handleBufferedAmountLow;\n  }\n  setPreferredCodec(transceiver, kind, videoCodec) {\n    if (!('getCapabilities' in RTCRtpSender)) {\n      return;\n    }\n    const cap = RTCRtpSender.getCapabilities(kind);\n    if (!cap) return;\n    livekitLogger.debug('get capabilities', cap);\n    const matched = [];\n    const partialMatched = [];\n    const unmatched = [];\n    cap.codecs.forEach(c => {\n      const codec = c.mimeType.toLowerCase();\n      if (codec === 'audio/opus') {\n        matched.push(c);\n        return;\n      }\n      const matchesVideoCodec = codec === \"video/\".concat(videoCodec);\n      if (!matchesVideoCodec) {\n        unmatched.push(c);\n        return;\n      }\n      // for h264 codecs that have sdpFmtpLine available, use only if the\n      // profile-level-id is 42e01f for cross-browser compatibility\n      if (videoCodec === 'h264') {\n        if (c.sdpFmtpLine && c.sdpFmtpLine.includes('profile-level-id=42e01f')) {\n          matched.push(c);\n        } else {\n          partialMatched.push(c);\n        }\n        return;\n      }\n      matched.push(c);\n    });\n    if (supportsSetCodecPreferences(transceiver)) {\n      transceiver.setCodecPreferences(matched.concat(partialMatched, unmatched));\n    }\n  }\n  createSender(track, opts, encodings) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (supportsTransceiver()) {\n        const sender = yield this.createTransceiverRTCRtpSender(track, opts, encodings);\n        return sender;\n      }\n      if (supportsAddTrack()) {\n        livekitLogger.warn('using add-track fallback');\n        const sender = yield this.createRTCRtpSender(track.mediaStreamTrack);\n        return sender;\n      }\n      throw new UnexpectedConnectionState('Required webRTC APIs not supported on this device');\n    });\n  }\n  createSimulcastSender(track, simulcastTrack, opts, encodings) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // store RTCRtpSender\n      if (supportsTransceiver()) {\n        return this.createSimulcastTransceiverSender(track, simulcastTrack, opts, encodings);\n      }\n      if (supportsAddTrack()) {\n        livekitLogger.debug('using add-track fallback');\n        return this.createRTCRtpSender(track.mediaStreamTrack);\n      }\n      throw new UnexpectedConnectionState('Cannot stream on this device');\n    });\n  }\n  createTransceiverRTCRtpSender(track, opts, encodings) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.publisher) {\n        throw new UnexpectedConnectionState('publisher is closed');\n      }\n      const streams = [];\n      if (track.mediaStream) {\n        streams.push(track.mediaStream);\n      }\n      const transceiverInit = {\n        direction: 'sendonly',\n        streams\n      };\n      if (encodings) {\n        transceiverInit.sendEncodings = encodings;\n      }\n      // addTransceiver for react-native is async. web is synchronous, but await won't effect it.\n      const transceiver = yield this.publisher.addTransceiver(track.mediaStreamTrack, transceiverInit);\n      if (track.kind === Track.Kind.Video && opts.videoCodec) {\n        this.setPreferredCodec(transceiver, track.kind, opts.videoCodec);\n        track.codec = opts.videoCodec;\n      }\n      return transceiver.sender;\n    });\n  }\n  createSimulcastTransceiverSender(track, simulcastTrack, opts, encodings) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.publisher) {\n        throw new UnexpectedConnectionState('publisher is closed');\n      }\n      const transceiverInit = {\n        direction: 'sendonly'\n      };\n      if (encodings) {\n        transceiverInit.sendEncodings = encodings;\n      }\n      // addTransceiver for react-native is async. web is synchronous, but await won't effect it.\n      const transceiver = yield this.publisher.addTransceiver(simulcastTrack.mediaStreamTrack, transceiverInit);\n      if (!opts.videoCodec) {\n        return;\n      }\n      this.setPreferredCodec(transceiver, track.kind, opts.videoCodec);\n      track.setSimulcastTrackSender(opts.videoCodec, transceiver.sender);\n      return transceiver.sender;\n    });\n  }\n  createRTCRtpSender(track) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.publisher) {\n        throw new UnexpectedConnectionState('publisher is closed');\n      }\n      return this.publisher.addTrack(track);\n    });\n  }\n  attemptReconnect(reason) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._isClosed) {\n        return;\n      }\n      // guard for attempting reconnection multiple times while one attempt is still not finished\n      if (this.attemptingReconnect) {\n        return;\n      }\n      if (((_a = this.clientConfiguration) === null || _a === void 0 ? void 0 : _a.resumeConnection) === ClientConfigSetting.DISABLED ||\n      // signaling state could change to closed due to hardware sleep\n      // those connections cannot be resumed\n      ((_c = (_b = this.primaryTransport) === null || _b === void 0 ? void 0 : _b.getSignallingState()) !== null && _c !== void 0 ? _c : 'closed') === 'closed') {\n        this.fullReconnectOnNext = true;\n      }\n      try {\n        this.attemptingReconnect = true;\n        if (this.fullReconnectOnNext) {\n          yield this.restartConnection();\n        } else {\n          yield this.resumeConnection(reason);\n        }\n        this.clearPendingReconnect();\n        this.fullReconnectOnNext = false;\n      } catch (e) {\n        this.reconnectAttempts += 1;\n        let recoverable = true;\n        if (e instanceof UnexpectedConnectionState) {\n          livekitLogger.debug('received unrecoverable error', {\n            error: e\n          });\n          // unrecoverable\n          recoverable = false;\n        } else if (!(e instanceof SignalReconnectError)) {\n          // cannot resume\n          this.fullReconnectOnNext = true;\n        }\n        if (recoverable) {\n          this.handleDisconnect('reconnect', ReconnectReason.RR_UNKNOWN);\n        } else {\n          livekitLogger.info(\"could not recover connection after \".concat(this.reconnectAttempts, \" attempts, \").concat(Date.now() - this.reconnectStart, \"ms. giving up\"));\n          this.emit(EngineEvent.Disconnected);\n          yield this.close();\n        }\n      } finally {\n        this.attemptingReconnect = false;\n      }\n    });\n  }\n  getNextRetryDelay(context) {\n    try {\n      return this.reconnectPolicy.nextRetryDelayInMs(context);\n    } catch (e) {\n      livekitLogger.warn('encountered error in reconnect policy', {\n        error: e\n      });\n    }\n    // error in user code with provided reconnect policy, stop reconnecting\n    return null;\n  }\n  restartConnection(regionUrl) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!this.url || !this.token) {\n          // permanent failure, don't attempt reconnection\n          throw new UnexpectedConnectionState('could not reconnect, url or token not saved');\n        }\n        livekitLogger.info(\"reconnecting, attempt: \".concat(this.reconnectAttempts));\n        this.emit(EngineEvent.Restarting);\n        if (this.client.isConnected) {\n          yield this.client.sendLeave();\n        }\n        yield this.cleanupPeerConnections();\n        yield this.cleanupClient();\n        let joinResponse;\n        try {\n          if (!this.signalOpts) {\n            livekitLogger.warn('attempted connection restart, without signal options present');\n            throw new SignalReconnectError();\n          }\n          // in case a regionUrl is passed, the region URL takes precedence\n          joinResponse = yield this.join(regionUrl !== null && regionUrl !== void 0 ? regionUrl : this.url, this.token, this.signalOpts);\n        } catch (e) {\n          if (e instanceof ConnectionError && e.reason === 0 /* ConnectionErrorReason.NotAllowed */) {\n            throw new UnexpectedConnectionState('could not reconnect, token might be expired');\n          }\n          throw new SignalReconnectError();\n        }\n        if (this.shouldFailNext) {\n          this.shouldFailNext = false;\n          throw new Error('simulated failure');\n        }\n        this.client.setReconnected();\n        this.emit(EngineEvent.SignalRestarted, joinResponse);\n        yield this.waitForPCReconnected();\n        (_a = this.regionUrlProvider) === null || _a === void 0 ? void 0 : _a.resetAttempts();\n        // reconnect success\n        this.emit(EngineEvent.Restarted);\n      } catch (error) {\n        const nextRegionUrl = yield (_b = this.regionUrlProvider) === null || _b === void 0 ? void 0 : _b.getNextBestRegionUrl();\n        if (nextRegionUrl) {\n          yield this.restartConnection(nextRegionUrl);\n          return;\n        } else {\n          // no more regions to try (or we're not on cloud)\n          (_c = this.regionUrlProvider) === null || _c === void 0 ? void 0 : _c.resetAttempts();\n          throw error;\n        }\n      }\n    });\n  }\n  resumeConnection(reason) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.url || !this.token) {\n        // permanent failure, don't attempt reconnection\n        throw new UnexpectedConnectionState('could not reconnect, url or token not saved');\n      }\n      // trigger publisher reconnect\n      if (!this.publisher || !this.subscriber) {\n        throw new UnexpectedConnectionState('publisher and subscriber connections unset');\n      }\n      livekitLogger.info(\"resuming signal connection, attempt \".concat(this.reconnectAttempts));\n      this.emit(EngineEvent.Resuming);\n      try {\n        this.setupSignalClientCallbacks();\n        const res = yield this.client.reconnect(this.url, this.token, this.participantSid, reason);\n        if (res) {\n          const rtcConfig = this.makeRTCConfiguration(res);\n          this.publisher.setConfiguration(rtcConfig);\n          this.subscriber.setConfiguration(rtcConfig);\n        }\n      } catch (e) {\n        let message = '';\n        if (e instanceof Error) {\n          message = e.message;\n          livekitLogger.error(e.message);\n        }\n        if (e instanceof ConnectionError && e.reason === 0 /* ConnectionErrorReason.NotAllowed */) {\n          throw new UnexpectedConnectionState('could not reconnect, token might be expired');\n        }\n        throw new SignalReconnectError(message);\n      }\n      this.emit(EngineEvent.SignalResumed);\n      if (this.shouldFailNext) {\n        this.shouldFailNext = false;\n        throw new Error('simulated failure');\n      }\n      this.subscriber.restartingIce = true;\n      // only restart publisher if it's needed\n      if (this.hasPublished) {\n        yield this.publisher.createAndSendOffer({\n          iceRestart: true\n        });\n      }\n      yield this.waitForPCReconnected();\n      this.client.setReconnected();\n      // recreate publish datachannel if it's id is null\n      // (for safari https://bugs.webkit.org/show_bug.cgi?id=184688)\n      if (((_a = this.reliableDC) === null || _a === void 0 ? void 0 : _a.readyState) === 'open' && this.reliableDC.id === null) {\n        this.createDataChannels();\n      }\n      // resume success\n      this.emit(EngineEvent.Resumed);\n    });\n  }\n  waitForPCInitialConnection(timeout, abortController) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.pcState === PCState.Connected) {\n        return;\n      }\n      if (this.pcState !== PCState.New) {\n        throw new UnexpectedConnectionState('Expected peer connection to be new on initial connection');\n      }\n      return new Promise((resolve, reject) => {\n        const abortHandler = () => {\n          livekitLogger.warn('closing engine');\n          CriticalTimers.clearTimeout(connectTimeout);\n          reject(new ConnectionError('room connection has been cancelled', 3 /* ConnectionErrorReason.Cancelled */));\n        };\n\n        if (abortController === null || abortController === void 0 ? void 0 : abortController.signal.aborted) {\n          abortHandler();\n        }\n        abortController === null || abortController === void 0 ? void 0 : abortController.signal.addEventListener('abort', abortHandler);\n        const onConnected = () => {\n          CriticalTimers.clearTimeout(connectTimeout);\n          abortController === null || abortController === void 0 ? void 0 : abortController.signal.removeEventListener('abort', abortHandler);\n          resolve();\n        };\n        const connectTimeout = CriticalTimers.setTimeout(() => {\n          this.off(EngineEvent.Connected, onConnected);\n          reject(new ConnectionError('could not establish pc connection'));\n        }, timeout !== null && timeout !== void 0 ? timeout : this.peerConnectionTimeout);\n        this.once(EngineEvent.Connected, onConnected);\n      });\n    });\n  }\n  waitForPCReconnected() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      const startTime = Date.now();\n      let now = startTime;\n      this.pcState = PCState.Reconnecting;\n      livekitLogger.debug('waiting for peer connection to reconnect');\n      while (now - startTime < this.peerConnectionTimeout) {\n        if (this.primaryTransport === undefined) {\n          // we can abort early, connection is hosed\n          break;\n        } else if (\n        // on Safari, we don't get a connectionstatechanged event during ICE restart\n        // this means we'd have to check its status manually and update address\n        // manually\n        now - startTime > minReconnectWait && ((_a = this.primaryTransport) === null || _a === void 0 ? void 0 : _a.getConnectionState()) === 'connected' && (!this.hasPublished || ((_b = this.publisher) === null || _b === void 0 ? void 0 : _b.getConnectionState()) === 'connected')) {\n          this.pcState = PCState.Connected;\n        }\n        if (this.pcState === PCState.Connected) {\n          return;\n        }\n        yield sleep(100);\n        now = Date.now();\n      }\n      // have not reconnected, throw\n      throw new ConnectionError('could not establish PC connection');\n    });\n  }\n  /* @internal */\n  sendDataPacket(packet, kind) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const msg = packet.toBinary();\n      // make sure we do have a data connection\n      yield this.ensurePublisherConnected(kind);\n      const dc = this.dataChannelForKind(kind);\n      if (dc) {\n        dc.send(msg);\n      }\n      this.updateAndEmitDCBufferStatus(kind);\n    });\n  }\n  /**\n   * @internal\n   */\n  ensureDataTransportConnected(kind) {\n    let subscriber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.subscriberPrimary;\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n      const transport = subscriber ? this.subscriber : this.publisher;\n      const transportName = subscriber ? 'Subscriber' : 'Publisher';\n      if (!transport) {\n        throw new ConnectionError(\"\".concat(transportName, \" connection not set\"));\n      }\n      if (!subscriber && !((_a = this.publisher) === null || _a === void 0 ? void 0 : _a.isICEConnected) && ((_b = this.publisher) === null || _b === void 0 ? void 0 : _b.getICEConnectionState()) !== 'checking') {\n        // start negotiation\n        this.negotiate();\n      }\n      const targetChannel = this.dataChannelForKind(kind, subscriber);\n      if ((targetChannel === null || targetChannel === void 0 ? void 0 : targetChannel.readyState) === 'open') {\n        return;\n      }\n      // wait until ICE connected\n      const endTime = new Date().getTime() + this.peerConnectionTimeout;\n      while (new Date().getTime() < endTime) {\n        if (transport.isICEConnected && ((_c = this.dataChannelForKind(kind, subscriber)) === null || _c === void 0 ? void 0 : _c.readyState) === 'open') {\n          return;\n        }\n        yield sleep(50);\n      }\n      throw new ConnectionError(\"could not establish \".concat(transportName, \" connection, state: \").concat(transport.getICEConnectionState()));\n    });\n  }\n  ensurePublisherConnected(kind) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ensureDataTransportConnected(kind, false);\n    });\n  }\n  /* @internal */\n  verifyTransport() {\n    // primary connection\n    if (!this.primaryTransport) {\n      return false;\n    }\n    if (this.primaryTransport.getConnectionState() === 'closed' || this.primaryTransport.getConnectionState() === 'failed') {\n      return false;\n    }\n    // also verify publisher connection if it's needed or different\n    if (this.hasPublished && this.subscriberPrimary) {\n      if (!this.publisher) {\n        return false;\n      }\n      if (this.publisher.getConnectionState() === 'closed' || this.publisher.getConnectionState() === 'failed') {\n        return false;\n      }\n    }\n    // ensure signal is connected\n    if (!this.client.ws || this.client.ws.readyState === WebSocket.CLOSED) {\n      return false;\n    }\n    return true;\n  }\n  /** @internal */\n  negotiate() {\n    // observe signal state\n    return new Promise((resolve, reject) => {\n      if (!this.publisher) {\n        reject(new NegotiationError('publisher is not defined'));\n        return;\n      }\n      this.hasPublished = true;\n      const handleClosed = () => {\n        livekitLogger.debug('engine disconnected while negotiation was ongoing');\n        cleanup();\n        resolve();\n        return;\n      };\n      if (this.isClosed) {\n        reject('cannot negotiate on closed engine');\n      }\n      this.on(EngineEvent.Closing, handleClosed);\n      const negotiationTimeout = setTimeout(() => {\n        reject('negotiation timed out');\n        this.handleDisconnect('negotiation', ReconnectReason.RR_SIGNAL_DISCONNECTED);\n      }, this.peerConnectionTimeout);\n      const cleanup = () => {\n        clearTimeout(negotiationTimeout);\n        this.off(EngineEvent.Closing, handleClosed);\n      };\n      this.publisher.once(PCEvents.NegotiationStarted, () => {\n        var _a;\n        (_a = this.publisher) === null || _a === void 0 ? void 0 : _a.once(PCEvents.NegotiationComplete, () => {\n          cleanup();\n          resolve();\n        });\n      });\n      this.publisher.once(PCEvents.RTPVideoPayloadTypes, rtpTypes => {\n        const rtpMap = new Map();\n        rtpTypes.forEach(rtp => {\n          const codec = rtp.codec.toLowerCase();\n          if (isVideoCodec(codec)) {\n            rtpMap.set(rtp.payload, codec);\n          }\n        });\n        this.emit(EngineEvent.RTPVideoMapUpdate, rtpMap);\n      });\n      this.publisher.negotiate(e => {\n        cleanup();\n        reject(e);\n        if (e instanceof NegotiationError) {\n          this.fullReconnectOnNext = true;\n        }\n        this.handleDisconnect('negotiation', ReconnectReason.RR_UNKNOWN);\n      });\n    });\n  }\n  dataChannelForKind(kind, sub) {\n    if (!sub) {\n      if (kind === DataPacket_Kind.LOSSY) {\n        return this.lossyDC;\n      }\n      if (kind === DataPacket_Kind.RELIABLE) {\n        return this.reliableDC;\n      }\n    } else {\n      if (kind === DataPacket_Kind.LOSSY) {\n        return this.lossyDCSub;\n      }\n      if (kind === DataPacket_Kind.RELIABLE) {\n        return this.reliableDCSub;\n      }\n    }\n  }\n  /* @internal */\n  failNext() {\n    // debugging method to fail the next reconnect/resume attempt\n    this.shouldFailNext = true;\n  }\n  clearReconnectTimeout() {\n    if (this.reconnectTimeout) {\n      CriticalTimers.clearTimeout(this.reconnectTimeout);\n    }\n  }\n  clearPendingReconnect() {\n    this.clearReconnectTimeout();\n    this.reconnectAttempts = 0;\n  }\n  registerOnLineListener() {\n    if (isWeb()) {\n      window.addEventListener('online', this.handleBrowserOnLine);\n    }\n  }\n  deregisterOnLineListener() {\n    if (isWeb()) {\n      window.removeEventListener('online', this.handleBrowserOnLine);\n    }\n  }\n}\nclass SignalReconnectError extends Error {}\n\nclass RegionUrlProvider {\n  constructor(url, token) {\n    this.lastUpdateAt = 0;\n    this.settingsCacheTime = 3000;\n    this.attemptedRegions = [];\n    this.serverUrl = new URL(url);\n    this.token = token;\n  }\n  updateToken(token) {\n    this.token = token;\n  }\n  isCloud() {\n    return isCloud(this.serverUrl);\n  }\n  getServerUrl() {\n    return this.serverUrl;\n  }\n  getNextBestRegionUrl(abortSignal) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.isCloud()) {\n        throw Error('region availability is only supported for LiveKit Cloud domains');\n      }\n      if (!this.regionSettings || Date.now() - this.lastUpdateAt > this.settingsCacheTime) {\n        this.regionSettings = yield this.fetchRegionSettings(abortSignal);\n      }\n      const regionsLeft = this.regionSettings.regions.filter(region => !this.attemptedRegions.find(attempted => attempted.url === region.url));\n      if (regionsLeft.length > 0) {\n        const nextRegion = regionsLeft[0];\n        this.attemptedRegions.push(nextRegion);\n        livekitLogger.debug(\"next region: \".concat(nextRegion.region));\n        return nextRegion.url;\n      } else {\n        return null;\n      }\n    });\n  }\n  resetAttempts() {\n    this.attemptedRegions = [];\n  }\n  /* @internal */\n  fetchRegionSettings(signal) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const regionSettingsResponse = yield fetch(\"\".concat(getCloudConfigUrl(this.serverUrl), \"/regions\"), {\n        headers: {\n          authorization: \"Bearer \".concat(this.token)\n        },\n        signal\n      });\n      if (regionSettingsResponse.ok) {\n        const regionSettings = yield regionSettingsResponse.json();\n        this.lastUpdateAt = Date.now();\n        return regionSettings;\n      } else {\n        throw new ConnectionError(\"Could not fetch region settings: \".concat(regionSettingsResponse.statusText), regionSettingsResponse.status === 401 ? 0 /* ConnectionErrorReason.NotAllowed */ : undefined, regionSettingsResponse.status);\n      }\n    });\n  }\n}\nfunction getCloudConfigUrl(serverUrl) {\n  return \"\".concat(serverUrl.protocol.replace('ws', 'http'), \"//\").concat(serverUrl.host, \"/settings\");\n}\n\nconst monitorFrequency = 2000;\nfunction computeBitrate(currentStats, prevStats) {\n  if (!prevStats) {\n    return 0;\n  }\n  let bytesNow;\n  let bytesPrev;\n  if ('bytesReceived' in currentStats) {\n    bytesNow = currentStats.bytesReceived;\n    bytesPrev = prevStats.bytesReceived;\n  } else if ('bytesSent' in currentStats) {\n    bytesNow = currentStats.bytesSent;\n    bytesPrev = prevStats.bytesSent;\n  }\n  if (bytesNow === undefined || bytesPrev === undefined || currentStats.timestamp === undefined || prevStats.timestamp === undefined) {\n    return 0;\n  }\n  return (bytesNow - bytesPrev) * 8 * 1000 / (currentStats.timestamp - prevStats.timestamp);\n}\n\nclass LocalAudioTrack extends LocalTrack {\n  /**\n   *\n   * @param mediaTrack\n   * @param constraints MediaTrackConstraints that are being used when restarting or reacquiring tracks\n   * @param userProvidedTrack Signals to the SDK whether or not the mediaTrack should be managed (i.e. released and reacquired) internally by the SDK\n   */\n  constructor(mediaTrack, constraints) {\n    let userProvidedTrack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let audioContext = arguments.length > 3 ? arguments[3] : undefined;\n    super(mediaTrack, Track.Kind.Audio, constraints, userProvidedTrack);\n    /** @internal */\n    this.stopOnMute = false;\n    this.monitorSender = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.sender) {\n        this._currentBitrate = 0;\n        return;\n      }\n      let stats;\n      try {\n        stats = yield this.getSenderStats();\n      } catch (e) {\n        livekitLogger.error('could not get audio sender stats', {\n          error: e\n        });\n        return;\n      }\n      if (stats && this.prevStats) {\n        this._currentBitrate = computeBitrate(stats, this.prevStats);\n      }\n      this.prevStats = stats;\n    });\n    this.audioContext = audioContext;\n    this.checkForSilence();\n  }\n  setDeviceId(deviceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._constraints.deviceId === deviceId) {\n        return true;\n      }\n      this._constraints.deviceId = deviceId;\n      if (!this.isMuted) {\n        yield this.restartTrack();\n      }\n      return this.isMuted || unwrapConstraint(deviceId) === this.mediaStreamTrack.getSettings().deviceId;\n    });\n  }\n  mute() {\n    const _super = Object.create(null, {\n      mute: {\n        get: () => super.mute\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const unlock = yield this.muteLock.lock();\n      try {\n        // disabled special handling as it will cause BT headsets to switch communication modes\n        if (this.source === Track.Source.Microphone && this.stopOnMute && !this.isUserProvided) {\n          livekitLogger.debug('stopping mic track');\n          // also stop the track, so that microphone indicator is turned off\n          this._mediaStreamTrack.stop();\n        }\n        yield _super.mute.call(this);\n        return this;\n      } finally {\n        unlock();\n      }\n    });\n  }\n  unmute() {\n    const _super = Object.create(null, {\n      unmute: {\n        get: () => super.unmute\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const unlock = yield this.muteLock.lock();\n      try {\n        const deviceHasChanged = this._constraints.deviceId && this._mediaStreamTrack.getSettings().deviceId !== unwrapConstraint(this._constraints.deviceId);\n        if (this.source === Track.Source.Microphone && (this.stopOnMute || this._mediaStreamTrack.readyState === 'ended' || deviceHasChanged) && !this.isUserProvided) {\n          livekitLogger.debug('reacquiring mic track');\n          yield this.restartTrack();\n        }\n        yield _super.unmute.call(this);\n        return this;\n      } finally {\n        unlock();\n      }\n    });\n  }\n  restartTrack(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let constraints;\n      if (options) {\n        const streamConstraints = constraintsForOptions({\n          audio: options\n        });\n        if (typeof streamConstraints.audio !== 'boolean') {\n          constraints = streamConstraints.audio;\n        }\n      }\n      yield this.restart(constraints);\n    });\n  }\n  restart(constraints) {\n    const _super = Object.create(null, {\n      restart: {\n        get: () => super.restart\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const track = yield _super.restart.call(this, constraints);\n      this.checkForSilence();\n      return track;\n    });\n  }\n  /* @internal */\n  startMonitor() {\n    if (!isWeb()) {\n      return;\n    }\n    if (this.monitorInterval) {\n      return;\n    }\n    this.monitorInterval = setInterval(() => {\n      this.monitorSender();\n    }, monitorFrequency);\n  }\n  setProcessor(processor) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const unlock = yield this.processorLock.lock();\n      try {\n        if (!this.audioContext) {\n          throw Error('Audio context needs to be set on LocalAudioTrack in order to enable processors');\n        }\n        if (this.processor) {\n          yield this.stopProcessor();\n        }\n        if (this.kind === 'unknown') {\n          throw TypeError('cannot set processor on track of unknown kind');\n        }\n        const processorOptions = {\n          kind: this.kind,\n          track: this._mediaStreamTrack,\n          audioContext: this.audioContext\n        };\n        livekitLogger.debug(\"setting up audio processor \".concat(processor.name));\n        yield processor.init(processorOptions);\n        this.processor = processor;\n        if (this.processor.processedTrack) {\n          yield (_a = this.sender) === null || _a === void 0 ? void 0 : _a.replaceTrack(this.processor.processedTrack);\n        }\n      } finally {\n        unlock();\n      }\n    });\n  }\n  /**\n   * @internal\n   * @experimental\n   */\n  setAudioContext(audioContext) {\n    this.audioContext = audioContext;\n  }\n  getSenderStats() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!((_a = this.sender) === null || _a === void 0 ? void 0 : _a.getStats)) {\n        return undefined;\n      }\n      const stats = yield this.sender.getStats();\n      let audioStats;\n      stats.forEach(v => {\n        if (v.type === 'outbound-rtp') {\n          audioStats = {\n            type: 'audio',\n            streamId: v.id,\n            packetsSent: v.packetsSent,\n            packetsLost: v.packetsLost,\n            bytesSent: v.bytesSent,\n            timestamp: v.timestamp,\n            roundTripTime: v.roundTripTime,\n            jitter: v.jitter\n          };\n        }\n      });\n      return audioStats;\n    });\n  }\n  checkForSilence() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const trackIsSilent = yield detectSilence(this);\n      if (trackIsSilent) {\n        if (!this.isMuted) {\n          livekitLogger.warn('silence detected on local audio track');\n        }\n        this.emit(TrackEvent.AudioSilenceDetected);\n      }\n      return trackIsSilent;\n    });\n  }\n}\n\n/** @internal */\nfunction mediaTrackToLocalTrack(mediaStreamTrack, constraints) {\n  switch (mediaStreamTrack.kind) {\n    case 'audio':\n      return new LocalAudioTrack(mediaStreamTrack, constraints, false);\n    case 'video':\n      return new LocalVideoTrack(mediaStreamTrack, constraints, false);\n    default:\n      throw new TrackInvalidError(\"unsupported track type: \".concat(mediaStreamTrack.kind));\n  }\n}\n/* @internal */\nconst presets169 = Object.values(VideoPresets);\n/* @internal */\nconst presets43 = Object.values(VideoPresets43);\n/* @internal */\nconst presetsScreenShare = Object.values(ScreenSharePresets);\n/* @internal */\nconst defaultSimulcastPresets169 = [VideoPresets.h180, VideoPresets.h360];\n/* @internal */\nconst defaultSimulcastPresets43 = [VideoPresets43.h180, VideoPresets43.h360];\n/* @internal */\nconst computeDefaultScreenShareSimulcastPresets = fromPreset => {\n  const layers = [{\n    scaleResolutionDownBy: 2,\n    fps: 3\n  }];\n  return layers.map(t => {\n    var _a;\n    return new VideoPreset(Math.floor(fromPreset.width / t.scaleResolutionDownBy), Math.floor(fromPreset.height / t.scaleResolutionDownBy), Math.max(150000, Math.floor(fromPreset.encoding.maxBitrate / (Math.pow(t.scaleResolutionDownBy, 2) * (((_a = fromPreset.encoding.maxFramerate) !== null && _a !== void 0 ? _a : 30) / t.fps)))), t.fps, fromPreset.encoding.priority);\n  });\n};\n// /**\n//  *\n//  * @internal\n//  * @experimental\n//  */\n// const computeDefaultMultiCodecSimulcastEncodings = (width: number, height: number) => {\n//   // use vp8 as a default\n//   const vp8 = determineAppropriateEncoding(false, width, height);\n//   const vp9 = { ...vp8, maxBitrate: vp8.maxBitrate * 0.9 };\n//   const h264 = { ...vp8, maxBitrate: vp8.maxBitrate * 1.1 };\n//   const av1 = { ...vp8, maxBitrate: vp8.maxBitrate * 0.7 };\n//   return {\n//     vp8,\n//     vp9,\n//     h264,\n//     av1,\n//   };\n// };\nconst videoRids = ['q', 'h', 'f'];\n/* @internal */\nfunction computeVideoEncodings(isScreenShare, width, height, options) {\n  var _a, _b;\n  let videoEncoding = options === null || options === void 0 ? void 0 : options.videoEncoding;\n  if (isScreenShare) {\n    videoEncoding = options === null || options === void 0 ? void 0 : options.screenShareEncoding;\n  }\n  const useSimulcast = options === null || options === void 0 ? void 0 : options.simulcast;\n  const scalabilityMode = options === null || options === void 0 ? void 0 : options.scalabilityMode;\n  const videoCodec = options === null || options === void 0 ? void 0 : options.videoCodec;\n  if (!videoEncoding && !useSimulcast && !scalabilityMode || !width || !height) {\n    // when we aren't simulcasting or svc, will need to return a single encoding without\n    // capping bandwidth. we always require a encoding for dynacast\n    return [{}];\n  }\n  if (!videoEncoding) {\n    // find the right encoding based on width/height\n    videoEncoding = determineAppropriateEncoding(isScreenShare, width, height, videoCodec);\n    livekitLogger.debug('using video encoding', videoEncoding);\n  }\n  const original = new VideoPreset(width, height, videoEncoding.maxBitrate, videoEncoding.maxFramerate, videoEncoding.priority);\n  if (scalabilityMode && isSVCCodec(videoCodec)) {\n    livekitLogger.debug(\"using svc with scalabilityMode \".concat(scalabilityMode));\n    const sm = new ScalabilityMode(scalabilityMode);\n    const encodings = [];\n    if (sm.spatial > 3) {\n      throw new Error(\"unsupported scalabilityMode: \".concat(scalabilityMode));\n    }\n    for (let i = 0; i < sm.spatial; i += 1) {\n      encodings.push({\n        rid: videoRids[2 - i],\n        maxBitrate: videoEncoding.maxBitrate / Math.pow(3, i),\n        /* @ts-ignore */\n        maxFramerate: original.encoding.maxFramerate\n      });\n    }\n    /* @ts-ignore */\n    encodings[0].scalabilityMode = scalabilityMode;\n    livekitLogger.debug('encodings', encodings);\n    return encodings;\n  }\n  if (!useSimulcast) {\n    return [videoEncoding];\n  }\n  let presets = [];\n  if (isScreenShare) {\n    presets = (_a = sortPresets(options === null || options === void 0 ? void 0 : options.screenShareSimulcastLayers)) !== null && _a !== void 0 ? _a : defaultSimulcastLayers(isScreenShare, original);\n  } else {\n    presets = (_b = sortPresets(options === null || options === void 0 ? void 0 : options.videoSimulcastLayers)) !== null && _b !== void 0 ? _b : defaultSimulcastLayers(isScreenShare, original);\n  }\n  let midPreset;\n  if (presets.length > 0) {\n    const lowPreset = presets[0];\n    if (presets.length > 1) {\n      [, midPreset] = presets;\n    }\n    // NOTE:\n    //   1. Ordering of these encodings is important. Chrome seems\n    //      to use the index into encodings to decide which layer\n    //      to disable when CPU constrained.\n    //      So encodings should be ordered in increasing spatial\n    //      resolution order.\n    //   2. ion-sfu translates rids into layers. So, all encodings\n    //      should have the base layer `q` and then more added\n    //      based on other conditions.\n    const size = Math.max(width, height);\n    if (size >= 960 && midPreset) {\n      return encodingsFromPresets(width, height, [lowPreset, midPreset, original]);\n    }\n    if (size >= 480) {\n      return encodingsFromPresets(width, height, [lowPreset, original]);\n    }\n  }\n  return encodingsFromPresets(width, height, [original]);\n}\nfunction computeTrackBackupEncodings(track, videoCodec, opts) {\n  var _a, _b, _c, _d;\n  // backupCodec should not be true anymore, default codec is set in LocalParticipant.publish\n  if (!opts.backupCodec || opts.backupCodec === true || opts.backupCodec.codec === opts.videoCodec) {\n    // backup codec publishing is disabled\n    return;\n  }\n  if (videoCodec !== opts.backupCodec.codec) {\n    livekitLogger.warn('requested a different codec than specified as backup', {\n      serverRequested: videoCodec,\n      backup: opts.backupCodec.codec\n    });\n  }\n  opts.videoCodec = videoCodec;\n  // use backup encoding setting as videoEncoding for backup codec publishing\n  opts.videoEncoding = opts.backupCodec.encoding;\n  const settings = track.mediaStreamTrack.getSettings();\n  const width = (_a = settings.width) !== null && _a !== void 0 ? _a : (_b = track.dimensions) === null || _b === void 0 ? void 0 : _b.width;\n  const height = (_c = settings.height) !== null && _c !== void 0 ? _c : (_d = track.dimensions) === null || _d === void 0 ? void 0 : _d.height;\n  const encodings = computeVideoEncodings(track.source === Track.Source.ScreenShare, width, height, opts);\n  return encodings;\n}\n/* @internal */\nfunction determineAppropriateEncoding(isScreenShare, width, height, codec) {\n  const presets = presetsForResolution(isScreenShare, width, height);\n  let {\n    encoding\n  } = presets[0];\n  // handle portrait by swapping dimensions\n  const size = Math.max(width, height);\n  for (let i = 0; i < presets.length; i += 1) {\n    const preset = presets[i];\n    encoding = preset.encoding;\n    if (preset.width >= size) {\n      break;\n    }\n  }\n  // presets are based on the assumption of vp8 as a codec\n  // for other codecs we adjust the maxBitrate if no specific videoEncoding has been provided\n  // users should override these with ones that are optimized for their use case\n  // NOTE: SVC codec bitrates are inclusive of all scalability layers. while\n  // bitrate for non-SVC codecs does not include other simulcast layers.\n  if (codec) {\n    switch (codec) {\n      case 'av1':\n        encoding = Object.assign({}, encoding);\n        encoding.maxBitrate = encoding.maxBitrate * 0.7;\n        break;\n      case 'vp9':\n        encoding = Object.assign({}, encoding);\n        encoding.maxBitrate = encoding.maxBitrate * 0.85;\n        break;\n    }\n  }\n  return encoding;\n}\n/* @internal */\nfunction presetsForResolution(isScreenShare, width, height) {\n  if (isScreenShare) {\n    return presetsScreenShare;\n  }\n  const aspect = width > height ? width / height : height / width;\n  if (Math.abs(aspect - 16.0 / 9) < Math.abs(aspect - 4.0 / 3)) {\n    return presets169;\n  }\n  return presets43;\n}\n/* @internal */\nfunction defaultSimulcastLayers(isScreenShare, original) {\n  if (isScreenShare) {\n    return computeDefaultScreenShareSimulcastPresets(original);\n  }\n  const {\n    width,\n    height\n  } = original;\n  const aspect = width > height ? width / height : height / width;\n  if (Math.abs(aspect - 16.0 / 9) < Math.abs(aspect - 4.0 / 3)) {\n    return defaultSimulcastPresets169;\n  }\n  return defaultSimulcastPresets43;\n}\n// presets should be ordered by low, medium, high\nfunction encodingsFromPresets(width, height, presets) {\n  const encodings = [];\n  presets.forEach((preset, idx) => {\n    if (idx >= videoRids.length) {\n      return;\n    }\n    const size = Math.min(width, height);\n    const rid = videoRids[idx];\n    const encoding = {\n      rid,\n      scaleResolutionDownBy: Math.max(1, size / Math.min(preset.width, preset.height)),\n      maxBitrate: preset.encoding.maxBitrate\n    };\n    if (preset.encoding.maxFramerate) {\n      encoding.maxFramerate = preset.encoding.maxFramerate;\n    }\n    const canSetPriority = isFireFox() || idx === 0;\n    if (preset.encoding.priority && canSetPriority) {\n      encoding.priority = preset.encoding.priority;\n      encoding.networkPriority = preset.encoding.priority;\n    }\n    encodings.push(encoding);\n  });\n  // RN ios simulcast requires all same framerates.\n  if (isReactNative() && getReactNativeOs() === 'ios') {\n    let topFramerate = undefined;\n    encodings.forEach(encoding => {\n      if (!topFramerate) {\n        topFramerate = encoding.maxFramerate;\n      } else if (encoding.maxFramerate && encoding.maxFramerate > topFramerate) {\n        topFramerate = encoding.maxFramerate;\n      }\n    });\n    let notifyOnce = true;\n    encodings.forEach(encoding => {\n      var _a;\n      if (encoding.maxFramerate != topFramerate) {\n        if (notifyOnce) {\n          notifyOnce = false;\n          livekitLogger.info(\"Simulcast on iOS React-Native requires all encodings to share the same framerate.\");\n        }\n        livekitLogger.info(\"Setting framerate of encoding \\\"\".concat((_a = encoding.rid) !== null && _a !== void 0 ? _a : '', \"\\\" to \").concat(topFramerate));\n        encoding.maxFramerate = topFramerate;\n      }\n    });\n  }\n  return encodings;\n}\n/** @internal */\nfunction sortPresets(presets) {\n  if (!presets) return;\n  return presets.sort((a, b) => {\n    const {\n      encoding: aEnc\n    } = a;\n    const {\n      encoding: bEnc\n    } = b;\n    if (aEnc.maxBitrate > bEnc.maxBitrate) {\n      return 1;\n    }\n    if (aEnc.maxBitrate < bEnc.maxBitrate) return -1;\n    if (aEnc.maxBitrate === bEnc.maxBitrate && aEnc.maxFramerate && bEnc.maxFramerate) {\n      return aEnc.maxFramerate > bEnc.maxFramerate ? 1 : -1;\n    }\n    return 0;\n  });\n}\n/** @internal */\nclass ScalabilityMode {\n  constructor(scalabilityMode) {\n    const results = scalabilityMode.match(/^L(\\d)T(\\d)(h|_KEY|_KEY_SHIFT){0,1}$/);\n    if (!results) {\n      throw new Error('invalid scalability mode');\n    }\n    this.spatial = parseInt(results[1]);\n    this.temporal = parseInt(results[2]);\n    if (results.length > 3) {\n      switch (results[3]) {\n        case 'h':\n        case '_KEY':\n        case '_KEY_SHIFT':\n          this.suffix = results[3];\n      }\n    }\n  }\n  toString() {\n    var _a;\n    return \"L\".concat(this.spatial, \"T\").concat(this.temporal).concat((_a = this.suffix) !== null && _a !== void 0 ? _a : '');\n  }\n}\n\nconst refreshSubscribedCodecAfterNewCodec = 5000;\nclass LocalVideoTrack extends LocalTrack {\n  /**\n   *\n   * @param mediaTrack\n   * @param constraints MediaTrackConstraints that are being used when restarting or reacquiring tracks\n   * @param userProvidedTrack Signals to the SDK whether or not the mediaTrack should be managed (i.e. released and reacquired) internally by the SDK\n   */\n  constructor(mediaTrack, constraints) {\n    let userProvidedTrack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    super(mediaTrack, Track.Kind.Video, constraints, userProvidedTrack);\n    /* @internal */\n    this.simulcastCodecs = new Map();\n    this.monitorSender = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.sender) {\n        this._currentBitrate = 0;\n        return;\n      }\n      let stats;\n      try {\n        stats = yield this.getSenderStats();\n      } catch (e) {\n        livekitLogger.error('could not get audio sender stats', {\n          error: e\n        });\n        return;\n      }\n      const statsMap = new Map(stats.map(s => [s.rid, s]));\n      if (this.prevStats) {\n        let totalBitrate = 0;\n        statsMap.forEach((s, key) => {\n          var _a;\n          const prev = (_a = this.prevStats) === null || _a === void 0 ? void 0 : _a.get(key);\n          totalBitrate += computeBitrate(s, prev);\n        });\n        this._currentBitrate = totalBitrate;\n      }\n      this.prevStats = statsMap;\n    });\n    this.senderLock = new Mutex();\n  }\n  get isSimulcast() {\n    if (this.sender && this.sender.getParameters().encodings.length > 1) {\n      return true;\n    }\n    return false;\n  }\n  /* @internal */\n  startMonitor(signalClient) {\n    var _a;\n    this.signalClient = signalClient;\n    if (!isWeb()) {\n      return;\n    }\n    // save original encodings\n    // TODO : merge simulcast tracks stats\n    const params = (_a = this.sender) === null || _a === void 0 ? void 0 : _a.getParameters();\n    if (params) {\n      this.encodings = params.encodings;\n    }\n    if (this.monitorInterval) {\n      return;\n    }\n    this.monitorInterval = setInterval(() => {\n      this.monitorSender();\n    }, monitorFrequency);\n  }\n  stop() {\n    this._mediaStreamTrack.getConstraints();\n    this.simulcastCodecs.forEach(trackInfo => {\n      trackInfo.mediaStreamTrack.stop();\n    });\n    super.stop();\n  }\n  pauseUpstream() {\n    const _super = Object.create(null, {\n      pauseUpstream: {\n        get: () => super.pauseUpstream\n      }\n    });\n    var _a, e_1, _b, _c;\n    var _d;\n    return __awaiter(this, void 0, void 0, function* () {\n      yield _super.pauseUpstream.call(this);\n      try {\n        for (var _e = true, _f = __asyncValues(this.simulcastCodecs.values()), _g; _g = yield _f.next(), _a = _g.done, !_a; _e = true) {\n          _c = _g.value;\n          _e = false;\n          const sc = _c;\n          yield (_d = sc.sender) === null || _d === void 0 ? void 0 : _d.replaceTrack(null);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (!_e && !_a && (_b = _f.return)) yield _b.call(_f);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    });\n  }\n  resumeUpstream() {\n    const _super = Object.create(null, {\n      resumeUpstream: {\n        get: () => super.resumeUpstream\n      }\n    });\n    var _a, e_2, _b, _c;\n    var _d;\n    return __awaiter(this, void 0, void 0, function* () {\n      yield _super.resumeUpstream.call(this);\n      try {\n        for (var _e = true, _f = __asyncValues(this.simulcastCodecs.values()), _g; _g = yield _f.next(), _a = _g.done, !_a; _e = true) {\n          _c = _g.value;\n          _e = false;\n          const sc = _c;\n          yield (_d = sc.sender) === null || _d === void 0 ? void 0 : _d.replaceTrack(sc.mediaStreamTrack);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (!_e && !_a && (_b = _f.return)) yield _b.call(_f);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    });\n  }\n  mute() {\n    const _super = Object.create(null, {\n      mute: {\n        get: () => super.mute\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const unlock = yield this.muteLock.lock();\n      try {\n        if (this.source === Track.Source.Camera && !this.isUserProvided) {\n          livekitLogger.debug('stopping camera track');\n          // also stop the track, so that camera indicator is turned off\n          this._mediaStreamTrack.stop();\n        }\n        yield _super.mute.call(this);\n        return this;\n      } finally {\n        unlock();\n      }\n    });\n  }\n  unmute() {\n    const _super = Object.create(null, {\n      unmute: {\n        get: () => super.unmute\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const unlock = yield this.muteLock.lock();\n      try {\n        if (this.source === Track.Source.Camera && !this.isUserProvided) {\n          livekitLogger.debug('reacquiring camera track');\n          yield this.restartTrack();\n        }\n        yield _super.unmute.call(this);\n        return this;\n      } finally {\n        unlock();\n      }\n    });\n  }\n  setTrackMuted(muted) {\n    super.setTrackMuted(muted);\n    for (const sc of this.simulcastCodecs.values()) {\n      sc.mediaStreamTrack.enabled = !muted;\n    }\n  }\n  getSenderStats() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!((_a = this.sender) === null || _a === void 0 ? void 0 : _a.getStats)) {\n        return [];\n      }\n      const items = [];\n      const stats = yield this.sender.getStats();\n      stats.forEach(v => {\n        var _a;\n        if (v.type === 'outbound-rtp') {\n          const vs = {\n            type: 'video',\n            streamId: v.id,\n            frameHeight: v.frameHeight,\n            frameWidth: v.frameWidth,\n            firCount: v.firCount,\n            pliCount: v.pliCount,\n            nackCount: v.nackCount,\n            packetsSent: v.packetsSent,\n            bytesSent: v.bytesSent,\n            framesSent: v.framesSent,\n            timestamp: v.timestamp,\n            rid: (_a = v.rid) !== null && _a !== void 0 ? _a : v.id,\n            retransmittedPacketsSent: v.retransmittedPacketsSent,\n            qualityLimitationReason: v.qualityLimitationReason,\n            qualityLimitationResolutionChanges: v.qualityLimitationResolutionChanges\n          };\n          // locate the appropriate remote-inbound-rtp item\n          const r = stats.get(v.remoteId);\n          if (r) {\n            vs.jitter = r.jitter;\n            vs.packetsLost = r.packetsLost;\n            vs.roundTripTime = r.roundTripTime;\n          }\n          items.push(vs);\n        }\n      });\n      return items;\n    });\n  }\n  setPublishingQuality(maxQuality) {\n    const qualities = [];\n    for (let q = VideoQuality.LOW; q <= VideoQuality.HIGH; q += 1) {\n      qualities.push(new SubscribedQuality({\n        quality: q,\n        enabled: q <= maxQuality\n      }));\n    }\n    livekitLogger.debug(\"setting publishing quality. max quality \".concat(maxQuality));\n    this.setPublishingLayers(qualities);\n  }\n  setDeviceId(deviceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._constraints.deviceId === deviceId && this._mediaStreamTrack.getSettings().deviceId === unwrapConstraint(deviceId)) {\n        return true;\n      }\n      this._constraints.deviceId = deviceId;\n      // when video is muted, underlying media stream track is stopped and\n      // will be restarted later\n      if (!this.isMuted) {\n        yield this.restartTrack();\n      }\n      return this.isMuted || unwrapConstraint(deviceId) === this._mediaStreamTrack.getSettings().deviceId;\n    });\n  }\n  restartTrack(options) {\n    var _a, e_3, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n      let constraints;\n      if (options) {\n        const streamConstraints = constraintsForOptions({\n          video: options\n        });\n        if (typeof streamConstraints.video !== 'boolean') {\n          constraints = streamConstraints.video;\n        }\n      }\n      yield this.restart(constraints);\n      try {\n        for (var _d = true, _e = __asyncValues(this.simulcastCodecs.values()), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {\n          _c = _f.value;\n          _d = false;\n          const sc = _c;\n          if (sc.sender) {\n            sc.mediaStreamTrack = this.mediaStreamTrack.clone();\n            yield sc.sender.replaceTrack(sc.mediaStreamTrack);\n          }\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n    });\n  }\n  setProcessor(processor) {\n    let showProcessedStreamLocally = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const _super = Object.create(null, {\n      setProcessor: {\n        get: () => super.setProcessor\n      }\n    });\n    var _a, e_4, _b, _c;\n    var _d, _e;\n    return __awaiter(this, void 0, void 0, function* () {\n      yield _super.setProcessor.call(this, processor, showProcessedStreamLocally);\n      if ((_d = this.processor) === null || _d === void 0 ? void 0 : _d.processedTrack) {\n        try {\n          for (var _f = true, _g = __asyncValues(this.simulcastCodecs.values()), _h; _h = yield _g.next(), _a = _h.done, !_a; _f = true) {\n            _c = _h.value;\n            _f = false;\n            const sc = _c;\n            yield (_e = sc.sender) === null || _e === void 0 ? void 0 : _e.replaceTrack(this.processor.processedTrack);\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (!_f && !_a && (_b = _g.return)) yield _b.call(_g);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    });\n  }\n  addSimulcastTrack(codec, encodings) {\n    if (this.simulcastCodecs.has(codec)) {\n      throw new Error(\"\".concat(codec, \" already added\"));\n    }\n    const simulcastCodecInfo = {\n      codec,\n      mediaStreamTrack: this.mediaStreamTrack.clone(),\n      sender: undefined,\n      encodings\n    };\n    this.simulcastCodecs.set(codec, simulcastCodecInfo);\n    return simulcastCodecInfo;\n  }\n  setSimulcastTrackSender(codec, sender) {\n    const simulcastCodecInfo = this.simulcastCodecs.get(codec);\n    if (!simulcastCodecInfo) {\n      return;\n    }\n    simulcastCodecInfo.sender = sender;\n    // browser will reenable disabled codec/layers after new codec has been published,\n    // so refresh subscribedCodecs after publish a new codec\n    setTimeout(() => {\n      if (this.subscribedCodecs) {\n        this.setPublishingCodecs(this.subscribedCodecs);\n      }\n    }, refreshSubscribedCodecAfterNewCodec);\n  }\n  /**\n   * @internal\n   * Sets codecs that should be publishing, returns new codecs that have not yet\n   * been published\n   */\n  setPublishingCodecs(codecs) {\n    var _a, codecs_1, codecs_1_1;\n    var _b, e_5, _c, _d;\n    return __awaiter(this, void 0, void 0, function* () {\n      livekitLogger.debug('setting publishing codecs', {\n        codecs,\n        currentCodec: this.codec\n      });\n      // only enable simulcast codec for preference codec setted\n      if (!this.codec && codecs.length > 0) {\n        yield this.setPublishingLayers(codecs[0].qualities);\n        return [];\n      }\n      this.subscribedCodecs = codecs;\n      const newCodecs = [];\n      try {\n        for (_a = true, codecs_1 = __asyncValues(codecs); codecs_1_1 = yield codecs_1.next(), _b = codecs_1_1.done, !_b; _a = true) {\n          _d = codecs_1_1.value;\n          _a = false;\n          const codec = _d;\n          if (!this.codec || this.codec === codec.codec) {\n            yield this.setPublishingLayers(codec.qualities);\n          } else {\n            const simulcastCodecInfo = this.simulcastCodecs.get(codec.codec);\n            livekitLogger.debug(\"try setPublishingCodec for \".concat(codec.codec), simulcastCodecInfo);\n            if (!simulcastCodecInfo || !simulcastCodecInfo.sender) {\n              for (const q of codec.qualities) {\n                if (q.enabled) {\n                  newCodecs.push(codec.codec);\n                  break;\n                }\n              }\n            } else if (simulcastCodecInfo.encodings) {\n              livekitLogger.debug(\"try setPublishingLayersForSender \".concat(codec.codec));\n              yield setPublishingLayersForSender(simulcastCodecInfo.sender, simulcastCodecInfo.encodings, codec.qualities, this.senderLock);\n            }\n          }\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (!_a && !_b && (_c = codecs_1.return)) yield _c.call(codecs_1);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n      return newCodecs;\n    });\n  }\n  /**\n   * @internal\n   * Sets layers that should be publishing\n   */\n  setPublishingLayers(qualities) {\n    return __awaiter(this, void 0, void 0, function* () {\n      livekitLogger.debug('setting publishing layers', qualities);\n      if (!this.sender || !this.encodings) {\n        return;\n      }\n      yield setPublishingLayersForSender(this.sender, this.encodings, qualities, this.senderLock);\n    });\n  }\n  handleAppVisibilityChanged() {\n    const _super = Object.create(null, {\n      handleAppVisibilityChanged: {\n        get: () => super.handleAppVisibilityChanged\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      yield _super.handleAppVisibilityChanged.call(this);\n      if (!isMobile()) return;\n      if (this.isInBackground && this.source === Track.Source.Camera) {\n        this._mediaStreamTrack.enabled = false;\n      }\n    });\n  }\n}\nfunction setPublishingLayersForSender(sender, senderEncodings, qualities, senderLock) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const unlock = yield senderLock.lock();\n    livekitLogger.debug('setPublishingLayersForSender', {\n      sender,\n      qualities,\n      senderEncodings\n    });\n    try {\n      const params = sender.getParameters();\n      const {\n        encodings\n      } = params;\n      if (!encodings) {\n        return;\n      }\n      if (encodings.length !== senderEncodings.length) {\n        livekitLogger.warn('cannot set publishing layers, encodings mismatch');\n        return;\n      }\n      let hasChanged = false;\n      /* disable closable spatial layer as it has video blur / frozen issue with current server / client\n      1. chrome 113: when switching to up layer with scalability Mode change, it will generate a\n            low resolution frame and recover very quickly, but noticable\n      2. livekit sfu: additional pli request cause video frozen for a few frames, also noticable */\n      const closableSpatial = false;\n      /* @ts-ignore */\n      if (closableSpatial && encodings[0].scalabilityMode) ; else {\n        // simulcast dynacast encodings\n        encodings.forEach((encoding, idx) => {\n          var _a;\n          let rid = (_a = encoding.rid) !== null && _a !== void 0 ? _a : '';\n          if (rid === '') {\n            rid = 'q';\n          }\n          const quality = videoQualityForRid(rid);\n          const subscribedQuality = qualities.find(q => q.quality === quality);\n          if (!subscribedQuality) {\n            return;\n          }\n          if (encoding.active !== subscribedQuality.enabled) {\n            hasChanged = true;\n            encoding.active = subscribedQuality.enabled;\n            livekitLogger.debug(\"setting layer \".concat(subscribedQuality.quality, \" to \").concat(encoding.active ? 'enabled' : 'disabled'));\n            // FireFox does not support setting encoding.active to false, so we\n            // have a workaround of lowering its bitrate and resolution to the min.\n            if (isFireFox()) {\n              if (subscribedQuality.enabled) {\n                encoding.scaleResolutionDownBy = senderEncodings[idx].scaleResolutionDownBy;\n                encoding.maxBitrate = senderEncodings[idx].maxBitrate;\n                /* @ts-ignore */\n                encoding.maxFrameRate = senderEncodings[idx].maxFrameRate;\n              } else {\n                encoding.scaleResolutionDownBy = 4;\n                encoding.maxBitrate = 10;\n                /* @ts-ignore */\n                encoding.maxFrameRate = 2;\n              }\n            }\n          }\n        });\n      }\n      if (hasChanged) {\n        params.encodings = encodings;\n        livekitLogger.debug(\"setting encodings\", params.encodings);\n        yield sender.setParameters(params);\n      }\n    } finally {\n      unlock();\n    }\n  });\n}\nfunction videoQualityForRid(rid) {\n  switch (rid) {\n    case 'f':\n      return VideoQuality.HIGH;\n    case 'h':\n      return VideoQuality.MEDIUM;\n    case 'q':\n      return VideoQuality.LOW;\n    default:\n      return VideoQuality.HIGH;\n  }\n}\nfunction videoLayersFromEncodings(width, height, encodings, svc) {\n  // default to a single layer, HQ\n  if (!encodings) {\n    return [new VideoLayer({\n      quality: VideoQuality.HIGH,\n      width,\n      height,\n      bitrate: 0,\n      ssrc: 0\n    })];\n  }\n  if (svc) {\n    // svc layers\n    /* @ts-ignore */\n    const encodingSM = encodings[0].scalabilityMode;\n    const sm = new ScalabilityMode(encodingSM);\n    const layers = [];\n    for (let i = 0; i < sm.spatial; i += 1) {\n      layers.push(new VideoLayer({\n        quality: VideoQuality.HIGH - i,\n        width: Math.ceil(width / Math.pow(2, i)),\n        height: Math.ceil(height / Math.pow(2, i)),\n        bitrate: encodings[0].maxBitrate ? Math.ceil(encodings[0].maxBitrate / Math.pow(3, i)) : 0,\n        ssrc: 0\n      }));\n    }\n    return layers;\n  }\n  return encodings.map(encoding => {\n    var _a, _b, _c;\n    const scale = (_a = encoding.scaleResolutionDownBy) !== null && _a !== void 0 ? _a : 1;\n    let quality = videoQualityForRid((_b = encoding.rid) !== null && _b !== void 0 ? _b : '');\n    return new VideoLayer({\n      quality,\n      width: Math.ceil(width / scale),\n      height: Math.ceil(height / scale),\n      bitrate: (_c = encoding.maxBitrate) !== null && _c !== void 0 ? _c : 0,\n      ssrc: 0\n    });\n  });\n}\n\nclass RemoteTrack extends Track {\n  constructor(mediaTrack, sid, kind, receiver) {\n    super(mediaTrack, kind);\n    this.sid = sid;\n    this.receiver = receiver;\n  }\n  /** @internal */\n  setMuted(muted) {\n    if (this.isMuted !== muted) {\n      this.isMuted = muted;\n      this._mediaStreamTrack.enabled = !muted;\n      this.emit(muted ? TrackEvent.Muted : TrackEvent.Unmuted, this);\n    }\n  }\n  /** @internal */\n  setMediaStream(stream) {\n    // this is needed to determine when the track is finished\n    this.mediaStream = stream;\n    const onRemoveTrack = event => {\n      if (event.track === this._mediaStreamTrack) {\n        stream.removeEventListener('removetrack', onRemoveTrack);\n        this.receiver = undefined;\n        this._currentBitrate = 0;\n        this.emit(TrackEvent.Ended, this);\n      }\n    };\n    stream.addEventListener('removetrack', onRemoveTrack);\n  }\n  start() {\n    this.startMonitor();\n    // use `enabled` of track to enable re-use of transceiver\n    super.enable();\n  }\n  stop() {\n    this.stopMonitor();\n    // use `enabled` of track to enable re-use of transceiver\n    super.disable();\n  }\n  /**\n   * Gets the RTCStatsReport for the RemoteTrack's underlying RTCRtpReceiver\n   * See https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport\n   *\n   * @returns Promise<RTCStatsReport> | undefined\n   */\n  getRTCStatsReport() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!((_a = this.receiver) === null || _a === void 0 ? void 0 : _a.getStats)) {\n        return;\n      }\n      const statsReport = yield this.receiver.getStats();\n      return statsReport;\n    });\n  }\n  /* @internal */\n  startMonitor() {\n    if (!this.monitorInterval) {\n      this.monitorInterval = setInterval(() => this.monitorReceiver(), monitorFrequency);\n    }\n  }\n}\n\nclass RemoteAudioTrack extends RemoteTrack {\n  constructor(mediaTrack, sid, receiver, audioContext, audioOutput) {\n    super(mediaTrack, sid, Track.Kind.Audio, receiver);\n    this.monitorReceiver = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.receiver) {\n        this._currentBitrate = 0;\n        return;\n      }\n      const stats = yield this.getReceiverStats();\n      if (stats && this.prevStats && this.receiver) {\n        this._currentBitrate = computeBitrate(stats, this.prevStats);\n      }\n      this.prevStats = stats;\n    });\n    this.audioContext = audioContext;\n    this.webAudioPluginNodes = [];\n    if (audioOutput) {\n      this.sinkId = audioOutput.deviceId;\n    }\n  }\n  /**\n   * sets the volume for all attached audio elements\n   */\n  setVolume(volume) {\n    var _a;\n    for (const el of this.attachedElements) {\n      if (this.audioContext) {\n        (_a = this.gainNode) === null || _a === void 0 ? void 0 : _a.gain.setTargetAtTime(volume, 0, 0.1);\n      } else {\n        el.volume = volume;\n      }\n    }\n    if (isReactNative()) {\n      // @ts-ignore\n      this._mediaStreamTrack._setVolume(volume);\n    }\n    this.elementVolume = volume;\n  }\n  /**\n   * gets the volume of attached audio elements (loudest)\n   */\n  getVolume() {\n    if (this.elementVolume) {\n      return this.elementVolume;\n    }\n    if (isReactNative()) {\n      // RN volume value defaults to 1.0 if hasn't been changed.\n      return 1.0;\n    }\n    let highestVolume = 0;\n    this.attachedElements.forEach(element => {\n      if (element.volume > highestVolume) {\n        highestVolume = element.volume;\n      }\n    });\n    return highestVolume;\n  }\n  /**\n   * calls setSinkId on all attached elements, if supported\n   * @param deviceId audio output device\n   */\n  setSinkId(deviceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.sinkId = deviceId;\n      yield Promise.all(this.attachedElements.map(elm => {\n        if (!supportsSetSinkId(elm)) {\n          return;\n        }\n        /* @ts-ignore */\n        return elm.setSinkId(deviceId);\n      }));\n    });\n  }\n  attach(element) {\n    const needsNewWebAudioConnection = this.attachedElements.length === 0;\n    if (!element) {\n      element = super.attach();\n    } else {\n      super.attach(element);\n    }\n    if (this.sinkId && supportsSetSinkId(element)) {\n      /* @ts-ignore */\n      element.setSinkId(this.sinkId);\n    }\n    if (this.audioContext && needsNewWebAudioConnection) {\n      livekitLogger.debug('using audio context mapping');\n      this.connectWebAudio(this.audioContext, element);\n      element.volume = 0;\n      element.muted = true;\n    }\n    if (this.elementVolume) {\n      // make sure volume setting is being applied to the newly attached element\n      this.setVolume(this.elementVolume);\n    }\n    return element;\n  }\n  detach(element) {\n    let detached;\n    if (!element) {\n      detached = super.detach();\n      this.disconnectWebAudio();\n    } else {\n      detached = super.detach(element);\n      // if there are still any attached elements after detaching, connect webaudio to the first element that's left\n      // disconnect webaudio otherwise\n      if (this.audioContext) {\n        if (this.attachedElements.length > 0) {\n          this.connectWebAudio(this.audioContext, this.attachedElements[0]);\n        } else {\n          this.disconnectWebAudio();\n        }\n      }\n    }\n    return detached;\n  }\n  /**\n   * @internal\n   * @experimental\n   */\n  setAudioContext(audioContext) {\n    this.audioContext = audioContext;\n    if (audioContext && this.attachedElements.length > 0) {\n      this.connectWebAudio(audioContext, this.attachedElements[0]);\n    } else if (!audioContext) {\n      this.disconnectWebAudio();\n    }\n  }\n  /**\n   * @internal\n   * @experimental\n   * @param {AudioNode[]} nodes - An array of WebAudio nodes. These nodes should not be connected to each other when passed, as the sdk will take care of connecting them in the order of the array.\n   */\n  setWebAudioPlugins(nodes) {\n    this.webAudioPluginNodes = nodes;\n    if (this.attachedElements.length > 0 && this.audioContext) {\n      this.connectWebAudio(this.audioContext, this.attachedElements[0]);\n    }\n  }\n  connectWebAudio(context, element) {\n    this.disconnectWebAudio();\n    // @ts-ignore attached elements always have a srcObject set\n    this.sourceNode = context.createMediaStreamSource(element.srcObject);\n    let lastNode = this.sourceNode;\n    this.webAudioPluginNodes.forEach(node => {\n      lastNode.connect(node);\n      lastNode = node;\n    });\n    this.gainNode = context.createGain();\n    lastNode.connect(this.gainNode);\n    this.gainNode.connect(context.destination);\n    if (this.elementVolume) {\n      this.gainNode.gain.setTargetAtTime(this.elementVolume, 0, 0.1);\n    }\n    // try to resume the context if it isn't running already\n    if (context.state !== 'running') {\n      context.resume().then(() => {\n        if (context.state !== 'running') {\n          this.emit(TrackEvent.AudioPlaybackFailed, new Error(\"Audio Context couldn't be started automatically\"));\n        }\n      }).catch(e => {\n        this.emit(TrackEvent.AudioPlaybackFailed, e);\n      });\n    }\n  }\n  disconnectWebAudio() {\n    var _a, _b;\n    (_a = this.gainNode) === null || _a === void 0 ? void 0 : _a.disconnect();\n    (_b = this.sourceNode) === null || _b === void 0 ? void 0 : _b.disconnect();\n    this.gainNode = undefined;\n    this.sourceNode = undefined;\n  }\n  getReceiverStats() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.receiver || !this.receiver.getStats) {\n        return;\n      }\n      const stats = yield this.receiver.getStats();\n      let receiverStats;\n      stats.forEach(v => {\n        if (v.type === 'inbound-rtp') {\n          receiverStats = {\n            type: 'audio',\n            timestamp: v.timestamp,\n            jitter: v.jitter,\n            bytesReceived: v.bytesReceived,\n            concealedSamples: v.concealedSamples,\n            concealmentEvents: v.concealmentEvents,\n            silentConcealedSamples: v.silentConcealedSamples,\n            silentConcealmentEvents: v.silentConcealmentEvents,\n            totalAudioEnergy: v.totalAudioEnergy,\n            totalSamplesDuration: v.totalSamplesDuration\n          };\n        }\n      });\n      return receiverStats;\n    });\n  }\n}\n\nconst REACTION_DELAY = 100;\nclass RemoteVideoTrack extends RemoteTrack {\n  constructor(mediaTrack, sid, receiver, adaptiveStreamSettings) {\n    super(mediaTrack, sid, Track.Kind.Video, receiver);\n    this.elementInfos = [];\n    this.monitorReceiver = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.receiver) {\n        this._currentBitrate = 0;\n        return;\n      }\n      const stats = yield this.getReceiverStats();\n      if (stats && this.prevStats && this.receiver) {\n        this._currentBitrate = computeBitrate(stats, this.prevStats);\n      }\n      this.prevStats = stats;\n    });\n    this.debouncedHandleResize = r(() => {\n      this.updateDimensions();\n    }, REACTION_DELAY);\n    this.adaptiveStreamSettings = adaptiveStreamSettings;\n  }\n  get isAdaptiveStream() {\n    return this.adaptiveStreamSettings !== undefined;\n  }\n  /**\n   * Note: When using adaptiveStream, you need to use remoteVideoTrack.attach() to add the track to a HTMLVideoElement, otherwise your video tracks might never start\n   */\n  get mediaStreamTrack() {\n    return this._mediaStreamTrack;\n  }\n  /** @internal */\n  setMuted(muted) {\n    super.setMuted(muted);\n    this.attachedElements.forEach(element => {\n      // detach or attach\n      if (muted) {\n        detachTrack(this._mediaStreamTrack, element);\n      } else {\n        attachToElement(this._mediaStreamTrack, element);\n      }\n    });\n  }\n  attach(element) {\n    if (!element) {\n      element = super.attach();\n    } else {\n      super.attach(element);\n    }\n    // It's possible attach is called multiple times on an element. When that's\n    // the case, we'd want to avoid adding duplicate elementInfos\n    if (this.adaptiveStreamSettings && this.elementInfos.find(info => info.element === element) === undefined) {\n      const elementInfo = new HTMLElementInfo(element);\n      this.observeElementInfo(elementInfo);\n    }\n    return element;\n  }\n  /**\n   * Observe an ElementInfo for changes when adaptive streaming.\n   * @param elementInfo\n   * @internal\n   */\n  observeElementInfo(elementInfo) {\n    if (this.adaptiveStreamSettings && this.elementInfos.find(info => info === elementInfo) === undefined) {\n      elementInfo.handleResize = () => {\n        this.debouncedHandleResize();\n      };\n      elementInfo.handleVisibilityChanged = () => {\n        this.updateVisibility();\n      };\n      this.elementInfos.push(elementInfo);\n      elementInfo.observe();\n      // trigger the first resize update cycle\n      // if the tab is backgrounded, the initial resize event does not fire until\n      // the tab comes into focus for the first time.\n      this.debouncedHandleResize();\n      this.updateVisibility();\n    } else {\n      livekitLogger.warn('visibility resize observer not triggered');\n    }\n  }\n  /**\n   * Stop observing an ElementInfo for changes.\n   * @param elementInfo\n   * @internal\n   */\n  stopObservingElementInfo(elementInfo) {\n    if (!this.isAdaptiveStream) {\n      livekitLogger.warn('stopObservingElementInfo ignored');\n      return;\n    }\n    const stopElementInfos = this.elementInfos.filter(info => info === elementInfo);\n    for (const info of stopElementInfos) {\n      info.stopObserving();\n    }\n    this.elementInfos = this.elementInfos.filter(info => info !== elementInfo);\n    this.updateVisibility();\n    this.debouncedHandleResize();\n  }\n  detach(element) {\n    let detachedElements = [];\n    if (element) {\n      this.stopObservingElement(element);\n      return super.detach(element);\n    }\n    detachedElements = super.detach();\n    for (const e of detachedElements) {\n      this.stopObservingElement(e);\n    }\n    return detachedElements;\n  }\n  /** @internal */\n  getDecoderImplementation() {\n    var _a;\n    return (_a = this.prevStats) === null || _a === void 0 ? void 0 : _a.decoderImplementation;\n  }\n  getReceiverStats() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.receiver || !this.receiver.getStats) {\n        return;\n      }\n      const stats = yield this.receiver.getStats();\n      let receiverStats;\n      stats.forEach(v => {\n        if (v.type === 'inbound-rtp') {\n          receiverStats = {\n            type: 'video',\n            framesDecoded: v.framesDecoded,\n            framesDropped: v.framesDropped,\n            framesReceived: v.framesReceived,\n            packetsReceived: v.packetsReceived,\n            packetsLost: v.packetsLost,\n            frameWidth: v.frameWidth,\n            frameHeight: v.frameHeight,\n            pliCount: v.pliCount,\n            firCount: v.firCount,\n            nackCount: v.nackCount,\n            jitter: v.jitter,\n            timestamp: v.timestamp,\n            bytesReceived: v.bytesReceived,\n            decoderImplementation: v.decoderImplementation\n          };\n        }\n      });\n      return receiverStats;\n    });\n  }\n  stopObservingElement(element) {\n    const stopElementInfos = this.elementInfos.filter(info => info.element === element);\n    for (const info of stopElementInfos) {\n      this.stopObservingElementInfo(info);\n    }\n  }\n  handleAppVisibilityChanged() {\n    const _super = Object.create(null, {\n      handleAppVisibilityChanged: {\n        get: () => super.handleAppVisibilityChanged\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      yield _super.handleAppVisibilityChanged.call(this);\n      if (!this.isAdaptiveStream) return;\n      this.updateVisibility();\n    });\n  }\n  updateVisibility() {\n    var _a, _b;\n    const lastVisibilityChange = this.elementInfos.reduce((prev, info) => Math.max(prev, info.visibilityChangedAt || 0), 0);\n    const backgroundPause = ((_b = (_a = this.adaptiveStreamSettings) === null || _a === void 0 ? void 0 : _a.pauseVideoInBackground) !== null && _b !== void 0 ? _b : true // default to true\n    ) ? this.isInBackground : false;\n    const isPiPMode = this.elementInfos.some(info => info.pictureInPicture);\n    const isVisible = this.elementInfos.some(info => info.visible) && !backgroundPause || isPiPMode;\n    if (this.lastVisible === isVisible) {\n      return;\n    }\n    if (!isVisible && Date.now() - lastVisibilityChange < REACTION_DELAY) {\n      // delay hidden events\n      CriticalTimers.setTimeout(() => {\n        this.updateVisibility();\n      }, REACTION_DELAY);\n      return;\n    }\n    this.lastVisible = isVisible;\n    this.emit(TrackEvent.VisibilityChanged, isVisible, this);\n  }\n  updateDimensions() {\n    var _a, _b;\n    let maxWidth = 0;\n    let maxHeight = 0;\n    const pixelDensity = this.getPixelDensity();\n    for (const info of this.elementInfos) {\n      const currentElementWidth = info.width() * pixelDensity;\n      const currentElementHeight = info.height() * pixelDensity;\n      if (currentElementWidth + currentElementHeight > maxWidth + maxHeight) {\n        maxWidth = currentElementWidth;\n        maxHeight = currentElementHeight;\n      }\n    }\n    if (((_a = this.lastDimensions) === null || _a === void 0 ? void 0 : _a.width) === maxWidth && ((_b = this.lastDimensions) === null || _b === void 0 ? void 0 : _b.height) === maxHeight) {\n      return;\n    }\n    this.lastDimensions = {\n      width: maxWidth,\n      height: maxHeight\n    };\n    this.emit(TrackEvent.VideoDimensionsChanged, this.lastDimensions, this);\n  }\n  getPixelDensity() {\n    var _a;\n    const pixelDensity = (_a = this.adaptiveStreamSettings) === null || _a === void 0 ? void 0 : _a.pixelDensity;\n    if (pixelDensity === 'screen') {\n      return getDevicePixelRatio();\n    } else if (!pixelDensity) {\n      // when unset, we'll pick a sane default here.\n      // for higher pixel density devices (mobile phones, etc), we'll use 2\n      // otherwise it defaults to 1\n      const devicePixelRatio = getDevicePixelRatio();\n      if (devicePixelRatio > 2) {\n        return 2;\n      } else {\n        return 1;\n      }\n    }\n    return pixelDensity;\n  }\n}\nclass HTMLElementInfo {\n  get visible() {\n    return this.isPiP || this.isIntersecting;\n  }\n  get pictureInPicture() {\n    return this.isPiP;\n  }\n  constructor(element, visible) {\n    this.onVisibilityChanged = entry => {\n      var _a;\n      const {\n        target,\n        isIntersecting\n      } = entry;\n      if (target === this.element) {\n        this.isIntersecting = isIntersecting;\n        this.visibilityChangedAt = Date.now();\n        (_a = this.handleVisibilityChanged) === null || _a === void 0 ? void 0 : _a.call(this);\n      }\n    };\n    this.onEnterPiP = () => {\n      var _a;\n      this.isPiP = true;\n      (_a = this.handleVisibilityChanged) === null || _a === void 0 ? void 0 : _a.call(this);\n    };\n    this.onLeavePiP = () => {\n      var _a;\n      this.isPiP = false;\n      (_a = this.handleVisibilityChanged) === null || _a === void 0 ? void 0 : _a.call(this);\n    };\n    this.element = element;\n    this.isIntersecting = visible !== null && visible !== void 0 ? visible : isElementInViewport(element);\n    this.isPiP = isWeb() && document.pictureInPictureElement === element;\n    this.visibilityChangedAt = 0;\n  }\n  width() {\n    return this.element.clientWidth;\n  }\n  height() {\n    return this.element.clientHeight;\n  }\n  observe() {\n    // make sure we update the current visible state once we start to observe\n    this.isIntersecting = isElementInViewport(this.element);\n    this.isPiP = document.pictureInPictureElement === this.element;\n    this.element.handleResize = () => {\n      var _a;\n      (_a = this.handleResize) === null || _a === void 0 ? void 0 : _a.call(this);\n    };\n    this.element.handleVisibilityChanged = this.onVisibilityChanged;\n    getIntersectionObserver().observe(this.element);\n    getResizeObserver().observe(this.element);\n    this.element.addEventListener('enterpictureinpicture', this.onEnterPiP);\n    this.element.addEventListener('leavepictureinpicture', this.onLeavePiP);\n  }\n  stopObserving() {\n    var _a, _b;\n    (_a = getIntersectionObserver()) === null || _a === void 0 ? void 0 : _a.unobserve(this.element);\n    (_b = getResizeObserver()) === null || _b === void 0 ? void 0 : _b.unobserve(this.element);\n    this.element.removeEventListener('enterpictureinpicture', this.onEnterPiP);\n    this.element.removeEventListener('leavepictureinpicture', this.onLeavePiP);\n  }\n}\n// does not account for occlusion by other elements\nfunction isElementInViewport(el) {\n  let top = el.offsetTop;\n  let left = el.offsetLeft;\n  const width = el.offsetWidth;\n  const height = el.offsetHeight;\n  const {\n    hidden\n  } = el;\n  const {\n    opacity,\n    display\n  } = getComputedStyle(el);\n  while (el.offsetParent) {\n    el = el.offsetParent;\n    top += el.offsetTop;\n    left += el.offsetLeft;\n  }\n  return top < window.pageYOffset + window.innerHeight && left < window.pageXOffset + window.innerWidth && top + height > window.pageYOffset && left + width > window.pageXOffset && !hidden && (opacity !== '' ? parseFloat(opacity) > 0 : true) && display !== 'none';\n}\n\nclass TrackPublication extends eventsExports.EventEmitter {\n  constructor(kind, id, name) {\n    super();\n    this.metadataMuted = false;\n    this.encryption = Encryption_Type.NONE;\n    this.handleMuted = () => {\n      this.emit(TrackEvent.Muted);\n    };\n    this.handleUnmuted = () => {\n      this.emit(TrackEvent.Unmuted);\n    };\n    this.setMaxListeners(100);\n    this.kind = kind;\n    this.trackSid = id;\n    this.trackName = name;\n    this.source = Track.Source.Unknown;\n  }\n  /** @internal */\n  setTrack(track) {\n    if (this.track) {\n      this.track.off(TrackEvent.Muted, this.handleMuted);\n      this.track.off(TrackEvent.Unmuted, this.handleUnmuted);\n    }\n    this.track = track;\n    if (track) {\n      // forward events\n      track.on(TrackEvent.Muted, this.handleMuted);\n      track.on(TrackEvent.Unmuted, this.handleUnmuted);\n    }\n  }\n  get isMuted() {\n    return this.metadataMuted;\n  }\n  get isEnabled() {\n    return true;\n  }\n  get isSubscribed() {\n    return this.track !== undefined;\n  }\n  get isEncrypted() {\n    return this.encryption !== Encryption_Type.NONE;\n  }\n  /**\n   * an [AudioTrack] if this publication holds an audio track\n   */\n  get audioTrack() {\n    if (this.track instanceof LocalAudioTrack || this.track instanceof RemoteAudioTrack) {\n      return this.track;\n    }\n  }\n  /**\n   * an [VideoTrack] if this publication holds a video track\n   */\n  get videoTrack() {\n    if (this.track instanceof LocalVideoTrack || this.track instanceof RemoteVideoTrack) {\n      return this.track;\n    }\n  }\n  /** @internal */\n  updateInfo(info) {\n    this.trackSid = info.sid;\n    this.trackName = info.name;\n    this.source = Track.sourceFromProto(info.source);\n    this.mimeType = info.mimeType;\n    if (this.kind === Track.Kind.Video && info.width > 0) {\n      this.dimensions = {\n        width: info.width,\n        height: info.height\n      };\n      this.simulcasted = info.simulcast;\n    }\n    this.encryption = info.encryption;\n    this.trackInfo = info;\n    livekitLogger.debug('update publication info', {\n      info\n    });\n  }\n}\n(function (TrackPublication) {\n  (function (SubscriptionStatus) {\n    SubscriptionStatus[\"Desired\"] = \"desired\";\n    SubscriptionStatus[\"Subscribed\"] = \"subscribed\";\n    SubscriptionStatus[\"Unsubscribed\"] = \"unsubscribed\";\n  })(TrackPublication.SubscriptionStatus || (TrackPublication.SubscriptionStatus = {}));\n  (function (PermissionStatus) {\n    PermissionStatus[\"Allowed\"] = \"allowed\";\n    PermissionStatus[\"NotAllowed\"] = \"not_allowed\";\n  })(TrackPublication.PermissionStatus || (TrackPublication.PermissionStatus = {}));\n})(TrackPublication || (TrackPublication = {}));\n\nclass LocalTrackPublication extends TrackPublication {\n  get isUpstreamPaused() {\n    var _a;\n    return (_a = this.track) === null || _a === void 0 ? void 0 : _a.isUpstreamPaused;\n  }\n  constructor(kind, ti, track) {\n    super(kind, ti.sid, ti.name);\n    this.track = undefined;\n    this.handleTrackEnded = () => {\n      this.emit(TrackEvent.Ended);\n    };\n    this.updateInfo(ti);\n    this.setTrack(track);\n  }\n  setTrack(track) {\n    if (this.track) {\n      this.track.off(TrackEvent.Ended, this.handleTrackEnded);\n    }\n    super.setTrack(track);\n    if (track) {\n      track.on(TrackEvent.Ended, this.handleTrackEnded);\n    }\n  }\n  get isMuted() {\n    if (this.track) {\n      return this.track.isMuted;\n    }\n    return super.isMuted;\n  }\n  get audioTrack() {\n    return super.audioTrack;\n  }\n  get videoTrack() {\n    return super.videoTrack;\n  }\n  /**\n   * Mute the track associated with this publication\n   */\n  mute() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      return (_a = this.track) === null || _a === void 0 ? void 0 : _a.mute();\n    });\n  }\n  /**\n   * Unmute track associated with this publication\n   */\n  unmute() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      return (_a = this.track) === null || _a === void 0 ? void 0 : _a.unmute();\n    });\n  }\n  /**\n   * Pauses the media stream track associated with this publication from being sent to the server\n   * and signals \"muted\" event to other participants\n   * Useful if you want to pause the stream without pausing the local media stream track\n   */\n  pauseUpstream() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      yield (_a = this.track) === null || _a === void 0 ? void 0 : _a.pauseUpstream();\n    });\n  }\n  /**\n   * Resumes sending the media stream track associated with this publication to the server after a call to [[pauseUpstream()]]\n   * and signals \"unmuted\" event to other participants (unless the track is explicitly muted)\n   */\n  resumeUpstream() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      yield (_a = this.track) === null || _a === void 0 ? void 0 : _a.resumeUpstream();\n    });\n  }\n}\n\nvar ConnectionQuality;\n(function (ConnectionQuality) {\n  ConnectionQuality[\"Excellent\"] = \"excellent\";\n  ConnectionQuality[\"Good\"] = \"good\";\n  ConnectionQuality[\"Poor\"] = \"poor\";\n  ConnectionQuality[\"Unknown\"] = \"unknown\";\n})(ConnectionQuality || (ConnectionQuality = {}));\nfunction qualityFromProto(q) {\n  switch (q) {\n    case ConnectionQuality$1.EXCELLENT:\n      return ConnectionQuality.Excellent;\n    case ConnectionQuality$1.GOOD:\n      return ConnectionQuality.Good;\n    case ConnectionQuality$1.POOR:\n      return ConnectionQuality.Poor;\n    default:\n      return ConnectionQuality.Unknown;\n  }\n}\nclass Participant extends eventsExports.EventEmitter {\n  get isEncrypted() {\n    return this.tracks.size > 0 && Array.from(this.tracks.values()).every(tr => tr.isEncrypted);\n  }\n  /** @internal */\n  constructor(sid, identity, name, metadata) {\n    super();\n    /** audio level between 0-1.0, 1 being loudest, 0 being softest */\n    this.audioLevel = 0;\n    /** if participant is currently speaking */\n    this.isSpeaking = false;\n    this._connectionQuality = ConnectionQuality.Unknown;\n    this.setMaxListeners(100);\n    this.sid = sid;\n    this.identity = identity;\n    this.name = name;\n    this.metadata = metadata;\n    this.audioTracks = new Map();\n    this.videoTracks = new Map();\n    this.tracks = new Map();\n  }\n  getTracks() {\n    return Array.from(this.tracks.values());\n  }\n  /**\n   * Finds the first track that matches the source filter, for example, getting\n   * the user's camera track with getTrackBySource(Track.Source.Camera).\n   * @param source\n   * @returns\n   */\n  getTrack(source) {\n    for (const [, pub] of this.tracks) {\n      if (pub.source === source) {\n        return pub;\n      }\n    }\n  }\n  /**\n   * Finds the first track that matches the track's name.\n   * @param name\n   * @returns\n   */\n  getTrackByName(name) {\n    for (const [, pub] of this.tracks) {\n      if (pub.trackName === name) {\n        return pub;\n      }\n    }\n  }\n  get connectionQuality() {\n    return this._connectionQuality;\n  }\n  get isCameraEnabled() {\n    var _a;\n    const track = this.getTrack(Track.Source.Camera);\n    return !((_a = track === null || track === void 0 ? void 0 : track.isMuted) !== null && _a !== void 0 ? _a : true);\n  }\n  get isMicrophoneEnabled() {\n    var _a;\n    const track = this.getTrack(Track.Source.Microphone);\n    return !((_a = track === null || track === void 0 ? void 0 : track.isMuted) !== null && _a !== void 0 ? _a : true);\n  }\n  get isScreenShareEnabled() {\n    const track = this.getTrack(Track.Source.ScreenShare);\n    return !!track;\n  }\n  get isLocal() {\n    return false;\n  }\n  /** when participant joined the room */\n  get joinedAt() {\n    if (this.participantInfo) {\n      return new Date(Number.parseInt(this.participantInfo.joinedAt.toString()) * 1000);\n    }\n    return new Date();\n  }\n  /** @internal */\n  updateInfo(info) {\n    // it's possible the update could be applied out of order due to await\n    // during reconnect sequences. when that happens, it's possible for server\n    // to have sent more recent version of participant info while JS is waiting\n    // to process the existing payload.\n    // when the participant sid remains the same, and we already have a later version\n    // of the payload, they can be safely skipped\n    if (this.participantInfo && this.participantInfo.sid === info.sid && this.participantInfo.version > info.version) {\n      return false;\n    }\n    this.identity = info.identity;\n    this.sid = info.sid;\n    this._setName(info.name);\n    this._setMetadata(info.metadata);\n    if (info.permission) {\n      this.setPermissions(info.permission);\n    }\n    // set this last so setMetadata can detect changes\n    this.participantInfo = info;\n    livekitLogger.trace('update participant info', {\n      info\n    });\n    return true;\n  }\n  /**\n   * Updates metadata from server\n   **/\n  _setMetadata(md) {\n    const changed = this.metadata !== md;\n    const prevMetadata = this.metadata;\n    this.metadata = md;\n    if (changed) {\n      this.emit(ParticipantEvent.ParticipantMetadataChanged, prevMetadata);\n    }\n  }\n  _setName(name) {\n    const changed = this.name !== name;\n    this.name = name;\n    if (changed) {\n      this.emit(ParticipantEvent.ParticipantNameChanged, name);\n    }\n  }\n  /** @internal */\n  setPermissions(permissions) {\n    var _a, _b, _c, _d, _e;\n    const prevPermissions = this.permissions;\n    const changed = permissions.canPublish !== ((_a = this.permissions) === null || _a === void 0 ? void 0 : _a.canPublish) || permissions.canSubscribe !== ((_b = this.permissions) === null || _b === void 0 ? void 0 : _b.canSubscribe) || permissions.canPublishData !== ((_c = this.permissions) === null || _c === void 0 ? void 0 : _c.canPublishData) || permissions.hidden !== ((_d = this.permissions) === null || _d === void 0 ? void 0 : _d.hidden) || permissions.recorder !== ((_e = this.permissions) === null || _e === void 0 ? void 0 : _e.recorder) || permissions.canPublishSources.length !== this.permissions.canPublishSources.length || permissions.canPublishSources.some((value, index) => {\n      var _a;\n      return value !== ((_a = this.permissions) === null || _a === void 0 ? void 0 : _a.canPublishSources[index]);\n    });\n    this.permissions = permissions;\n    if (changed) {\n      this.emit(ParticipantEvent.ParticipantPermissionsChanged, prevPermissions);\n    }\n    return changed;\n  }\n  /** @internal */\n  setIsSpeaking(speaking) {\n    if (speaking === this.isSpeaking) {\n      return;\n    }\n    this.isSpeaking = speaking;\n    if (speaking) {\n      this.lastSpokeAt = new Date();\n    }\n    this.emit(ParticipantEvent.IsSpeakingChanged, speaking);\n  }\n  /** @internal */\n  setConnectionQuality(q) {\n    const prevQuality = this._connectionQuality;\n    this._connectionQuality = qualityFromProto(q);\n    if (prevQuality !== this._connectionQuality) {\n      this.emit(ParticipantEvent.ConnectionQualityChanged, this._connectionQuality);\n    }\n  }\n  /**\n   * @internal\n   */\n  setAudioContext(ctx) {\n    this.audioContext = ctx;\n    this.audioTracks.forEach(track => (track.track instanceof RemoteAudioTrack || track.track instanceof LocalAudioTrack) && track.track.setAudioContext(ctx));\n  }\n  addTrackPublication(publication) {\n    // forward publication driven events\n    publication.on(TrackEvent.Muted, () => {\n      this.emit(ParticipantEvent.TrackMuted, publication);\n    });\n    publication.on(TrackEvent.Unmuted, () => {\n      this.emit(ParticipantEvent.TrackUnmuted, publication);\n    });\n    const pub = publication;\n    if (pub.track) {\n      pub.track.sid = publication.trackSid;\n    }\n    this.tracks.set(publication.trackSid, publication);\n    switch (publication.kind) {\n      case Track.Kind.Audio:\n        this.audioTracks.set(publication.trackSid, publication);\n        break;\n      case Track.Kind.Video:\n        this.videoTracks.set(publication.trackSid, publication);\n        break;\n    }\n  }\n}\n\nfunction trackPermissionToProto(perms) {\n  var _a, _b, _c;\n  if (!perms.participantSid && !perms.participantIdentity) {\n    throw new Error('Invalid track permission, must provide at least one of participantIdentity and participantSid');\n  }\n  return new TrackPermission({\n    participantIdentity: (_a = perms.participantIdentity) !== null && _a !== void 0 ? _a : '',\n    participantSid: (_b = perms.participantSid) !== null && _b !== void 0 ? _b : '',\n    allTracks: (_c = perms.allowAll) !== null && _c !== void 0 ? _c : false,\n    trackSids: perms.allowedTrackSids || []\n  });\n}\n\nclass RemoteTrackPublication extends TrackPublication {\n  constructor(kind, ti, autoSubscribe) {\n    super(kind, ti.sid, ti.name);\n    this.track = undefined;\n    /** @internal */\n    this.allowed = true;\n    this.disabled = false;\n    this.currentVideoQuality = VideoQuality.HIGH;\n    this.handleEnded = track => {\n      this.setTrack(undefined);\n      this.emit(TrackEvent.Ended, track);\n    };\n    this.handleVisibilityChange = visible => {\n      livekitLogger.debug(\"adaptivestream video visibility \".concat(this.trackSid, \", visible=\").concat(visible), {\n        trackSid: this.trackSid\n      });\n      this.disabled = !visible;\n      this.emitTrackUpdate();\n    };\n    this.handleVideoDimensionsChange = dimensions => {\n      livekitLogger.debug(\"adaptivestream video dimensions \".concat(dimensions.width, \"x\").concat(dimensions.height), {\n        trackSid: this.trackSid\n      });\n      this.videoDimensions = dimensions;\n      this.emitTrackUpdate();\n    };\n    this.subscribed = autoSubscribe;\n    this.updateInfo(ti);\n  }\n  /**\n   * Subscribe or unsubscribe to this remote track\n   * @param subscribed true to subscribe to a track, false to unsubscribe\n   */\n  setSubscribed(subscribed) {\n    const prevStatus = this.subscriptionStatus;\n    const prevPermission = this.permissionStatus;\n    this.subscribed = subscribed;\n    // reset allowed status when desired subscription state changes\n    // server will notify client via signal message if it's not allowed\n    if (subscribed) {\n      this.allowed = true;\n    }\n    const sub = new UpdateSubscription({\n      trackSids: [this.trackSid],\n      subscribe: this.subscribed,\n      participantTracks: [new ParticipantTracks({\n        // sending an empty participant id since TrackPublication doesn't keep it\n        // this is filled in by the participant that receives this message\n        participantSid: '',\n        trackSids: [this.trackSid]\n      })]\n    });\n    this.emit(TrackEvent.UpdateSubscription, sub);\n    this.emitSubscriptionUpdateIfChanged(prevStatus);\n    this.emitPermissionUpdateIfChanged(prevPermission);\n  }\n  get subscriptionStatus() {\n    if (this.subscribed === false) {\n      return TrackPublication.SubscriptionStatus.Unsubscribed;\n    }\n    if (!super.isSubscribed) {\n      return TrackPublication.SubscriptionStatus.Desired;\n    }\n    return TrackPublication.SubscriptionStatus.Subscribed;\n  }\n  get permissionStatus() {\n    return this.allowed ? TrackPublication.PermissionStatus.Allowed : TrackPublication.PermissionStatus.NotAllowed;\n  }\n  /**\n   * Returns true if track is subscribed, and ready for playback\n   */\n  get isSubscribed() {\n    if (this.subscribed === false) {\n      return false;\n    }\n    return super.isSubscribed;\n  }\n  // returns client's desire to subscribe to a track, also true if autoSubscribe is enabled\n  get isDesired() {\n    return this.subscribed !== false;\n  }\n  get isEnabled() {\n    return !this.disabled;\n  }\n  /**\n   * disable server from sending down data for this track. this is useful when\n   * the participant is off screen, you may disable streaming down their video\n   * to reduce bandwidth requirements\n   * @param enabled\n   */\n  setEnabled(enabled) {\n    if (!this.isManualOperationAllowed() || this.disabled === !enabled) {\n      return;\n    }\n    this.disabled = !enabled;\n    this.emitTrackUpdate();\n  }\n  /**\n   * for tracks that support simulcasting, adjust subscribed quality\n   *\n   * This indicates the highest quality the client can accept. if network\n   * bandwidth does not allow, server will automatically reduce quality to\n   * optimize for uninterrupted video\n   */\n  setVideoQuality(quality) {\n    if (!this.isManualOperationAllowed() || this.currentVideoQuality === quality) {\n      return;\n    }\n    this.currentVideoQuality = quality;\n    this.videoDimensions = undefined;\n    this.emitTrackUpdate();\n  }\n  setVideoDimensions(dimensions) {\n    var _a, _b;\n    if (!this.isManualOperationAllowed()) {\n      return;\n    }\n    if (((_a = this.videoDimensions) === null || _a === void 0 ? void 0 : _a.width) === dimensions.width && ((_b = this.videoDimensions) === null || _b === void 0 ? void 0 : _b.height) === dimensions.height) {\n      return;\n    }\n    if (this.track instanceof RemoteVideoTrack) {\n      this.videoDimensions = dimensions;\n    }\n    this.currentVideoQuality = undefined;\n    this.emitTrackUpdate();\n  }\n  setVideoFPS(fps) {\n    if (!this.isManualOperationAllowed()) {\n      return;\n    }\n    if (!(this.track instanceof RemoteVideoTrack)) {\n      return;\n    }\n    if (this.fps === fps) {\n      return;\n    }\n    this.fps = fps;\n    this.emitTrackUpdate();\n  }\n  get videoQuality() {\n    return this.currentVideoQuality;\n  }\n  /** @internal */\n  setTrack(track) {\n    const prevStatus = this.subscriptionStatus;\n    const prevPermission = this.permissionStatus;\n    const prevTrack = this.track;\n    if (prevTrack === track) {\n      return;\n    }\n    if (prevTrack) {\n      // unregister listener\n      prevTrack.off(TrackEvent.VideoDimensionsChanged, this.handleVideoDimensionsChange);\n      prevTrack.off(TrackEvent.VisibilityChanged, this.handleVisibilityChange);\n      prevTrack.off(TrackEvent.Ended, this.handleEnded);\n      prevTrack.detach();\n      prevTrack.stopMonitor();\n      this.emit(TrackEvent.Unsubscribed, prevTrack);\n    }\n    super.setTrack(track);\n    if (track) {\n      track.sid = this.trackSid;\n      track.on(TrackEvent.VideoDimensionsChanged, this.handleVideoDimensionsChange);\n      track.on(TrackEvent.VisibilityChanged, this.handleVisibilityChange);\n      track.on(TrackEvent.Ended, this.handleEnded);\n      this.emit(TrackEvent.Subscribed, track);\n    }\n    this.emitPermissionUpdateIfChanged(prevPermission);\n    this.emitSubscriptionUpdateIfChanged(prevStatus);\n  }\n  /** @internal */\n  setAllowed(allowed) {\n    const prevStatus = this.subscriptionStatus;\n    const prevPermission = this.permissionStatus;\n    this.allowed = allowed;\n    this.emitPermissionUpdateIfChanged(prevPermission);\n    this.emitSubscriptionUpdateIfChanged(prevStatus);\n  }\n  /** @internal */\n  setSubscriptionError(error) {\n    this.emit(TrackEvent.SubscriptionFailed, error);\n  }\n  /** @internal */\n  updateInfo(info) {\n    super.updateInfo(info);\n    const prevMetadataMuted = this.metadataMuted;\n    this.metadataMuted = info.muted;\n    if (this.track) {\n      this.track.setMuted(info.muted);\n    } else if (prevMetadataMuted !== info.muted) {\n      this.emit(info.muted ? TrackEvent.Muted : TrackEvent.Unmuted);\n    }\n  }\n  emitSubscriptionUpdateIfChanged(previousStatus) {\n    const currentStatus = this.subscriptionStatus;\n    if (previousStatus === currentStatus) {\n      return;\n    }\n    this.emit(TrackEvent.SubscriptionStatusChanged, currentStatus, previousStatus);\n  }\n  emitPermissionUpdateIfChanged(previousPermissionStatus) {\n    const currentPermissionStatus = this.permissionStatus;\n    if (currentPermissionStatus !== previousPermissionStatus) {\n      this.emit(TrackEvent.SubscriptionPermissionChanged, this.permissionStatus, previousPermissionStatus);\n    }\n  }\n  isManualOperationAllowed() {\n    if (this.kind === Track.Kind.Video && this.isAdaptiveStream) {\n      livekitLogger.warn('adaptive stream is enabled, cannot change video track settings', {\n        trackSid: this.trackSid\n      });\n      return false;\n    }\n    if (!this.isDesired) {\n      livekitLogger.warn('cannot update track settings when not subscribed', {\n        trackSid: this.trackSid\n      });\n      return false;\n    }\n    return true;\n  }\n  get isAdaptiveStream() {\n    return this.track instanceof RemoteVideoTrack && this.track.isAdaptiveStream;\n  }\n  /* @internal */\n  emitTrackUpdate() {\n    const settings = new UpdateTrackSettings({\n      trackSids: [this.trackSid],\n      disabled: this.disabled,\n      fps: this.fps\n    });\n    if (this.videoDimensions) {\n      settings.width = Math.ceil(this.videoDimensions.width);\n      settings.height = Math.ceil(this.videoDimensions.height);\n    } else if (this.currentVideoQuality !== undefined) {\n      settings.quality = this.currentVideoQuality;\n    } else {\n      // defaults to high quality\n      settings.quality = VideoQuality.HIGH;\n    }\n    this.emit(TrackEvent.UpdateSettings, settings);\n  }\n}\n\nclass RemoteParticipant extends Participant {\n  /** @internal */\n  static fromParticipantInfo(signalClient, pi) {\n    return new RemoteParticipant(signalClient, pi.sid, pi.identity, pi.name, pi.metadata);\n  }\n  /** @internal */\n  constructor(signalClient, sid, identity, name, metadata) {\n    super(sid, identity || '', name, metadata);\n    this.signalClient = signalClient;\n    this.tracks = new Map();\n    this.audioTracks = new Map();\n    this.videoTracks = new Map();\n    this.volumeMap = new Map();\n  }\n  addTrackPublication(publication) {\n    super.addTrackPublication(publication);\n    // register action events\n    publication.on(TrackEvent.UpdateSettings, settings => {\n      livekitLogger.debug('send update settings', settings);\n      this.signalClient.sendUpdateTrackSettings(settings);\n    });\n    publication.on(TrackEvent.UpdateSubscription, sub => {\n      sub.participantTracks.forEach(pt => {\n        pt.participantSid = this.sid;\n      });\n      this.signalClient.sendUpdateSubscription(sub);\n    });\n    publication.on(TrackEvent.SubscriptionPermissionChanged, status => {\n      this.emit(ParticipantEvent.TrackSubscriptionPermissionChanged, publication, status);\n    });\n    publication.on(TrackEvent.SubscriptionStatusChanged, status => {\n      this.emit(ParticipantEvent.TrackSubscriptionStatusChanged, publication, status);\n    });\n    publication.on(TrackEvent.Subscribed, track => {\n      this.emit(ParticipantEvent.TrackSubscribed, track, publication);\n    });\n    publication.on(TrackEvent.Unsubscribed, previousTrack => {\n      this.emit(ParticipantEvent.TrackUnsubscribed, previousTrack, publication);\n    });\n    publication.on(TrackEvent.SubscriptionFailed, error => {\n      this.emit(ParticipantEvent.TrackSubscriptionFailed, publication.trackSid, error);\n    });\n  }\n  getTrack(source) {\n    const track = super.getTrack(source);\n    if (track) {\n      return track;\n    }\n  }\n  getTrackByName(name) {\n    const track = super.getTrackByName(name);\n    if (track) {\n      return track;\n    }\n  }\n  /**\n   * sets the volume on the participant's audio track\n   * by default, this affects the microphone publication\n   * a different source can be passed in as a second argument\n   * if no track exists the volume will be applied when the microphone track is added\n   */\n  setVolume(volume) {\n    let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Track.Source.Microphone;\n    this.volumeMap.set(source, volume);\n    const audioPublication = this.getTrack(source);\n    if (audioPublication && audioPublication.track) {\n      audioPublication.track.setVolume(volume);\n    }\n  }\n  /**\n   * gets the volume on the participant's microphone track\n   */\n  getVolume() {\n    let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Track.Source.Microphone;\n    const audioPublication = this.getTrack(source);\n    if (audioPublication && audioPublication.track) {\n      return audioPublication.track.getVolume();\n    }\n    return this.volumeMap.get(source);\n  }\n  /** @internal */\n  addSubscribedMediaTrack(mediaTrack, sid, mediaStream, receiver, adaptiveStreamSettings, triesLeft) {\n    // find the track publication\n    // it's possible for the media track to arrive before participant info\n    let publication = this.getTrackPublication(sid);\n    // it's also possible that the browser didn't honor our original track id\n    // FireFox would use its own local uuid instead of server track id\n    if (!publication) {\n      if (!sid.startsWith('TR')) {\n        // find the first track that matches type\n        this.tracks.forEach(p => {\n          if (!publication && mediaTrack.kind === p.kind.toString()) {\n            publication = p;\n          }\n        });\n      }\n    }\n    // when we couldn't locate the track, it's possible that the metadata hasn't\n    // yet arrived. Wait a bit longer for it to arrive, or fire an error\n    if (!publication) {\n      if (triesLeft === 0) {\n        livekitLogger.error('could not find published track', {\n          participant: this.sid,\n          trackSid: sid\n        });\n        this.emit(ParticipantEvent.TrackSubscriptionFailed, sid);\n        return;\n      }\n      if (triesLeft === undefined) triesLeft = 20;\n      setTimeout(() => {\n        this.addSubscribedMediaTrack(mediaTrack, sid, mediaStream, receiver, adaptiveStreamSettings, triesLeft - 1);\n      }, 150);\n      return;\n    }\n    if (mediaTrack.readyState === 'ended') {\n      livekitLogger.error('unable to subscribe because MediaStreamTrack is ended. Do not call MediaStreamTrack.stop()', {\n        participant: this.sid,\n        trackSid: sid\n      });\n      this.emit(ParticipantEvent.TrackSubscriptionFailed, sid);\n      return;\n    }\n    const isVideo = mediaTrack.kind === 'video';\n    let track;\n    if (isVideo) {\n      track = new RemoteVideoTrack(mediaTrack, sid, receiver, adaptiveStreamSettings);\n    } else {\n      track = new RemoteAudioTrack(mediaTrack, sid, receiver, this.audioContext, this.audioOutput);\n    }\n    // set track info\n    track.source = publication.source;\n    // keep publication's muted status\n    track.isMuted = publication.isMuted;\n    track.setMediaStream(mediaStream);\n    track.start();\n    publication.setTrack(track);\n    // set participant volumes on new audio tracks\n    if (this.volumeMap.has(publication.source) && track instanceof RemoteAudioTrack) {\n      track.setVolume(this.volumeMap.get(publication.source));\n    }\n    return publication;\n  }\n  /** @internal */\n  get hasMetadata() {\n    return !!this.participantInfo;\n  }\n  getTrackPublication(sid) {\n    return this.tracks.get(sid);\n  }\n  /** @internal */\n  updateInfo(info) {\n    if (!super.updateInfo(info)) {\n      return false;\n    }\n    // we are getting a list of all available tracks, reconcile in here\n    // and send out events for changes\n    // reconcile track publications, publish events only if metadata is already there\n    // i.e. changes since the local participant has joined\n    const validTracks = new Map();\n    const newTracks = new Map();\n    info.tracks.forEach(ti => {\n      var _a;\n      let publication = this.getTrackPublication(ti.sid);\n      if (!publication) {\n        // new publication\n        const kind = Track.kindFromProto(ti.type);\n        if (!kind) {\n          return;\n        }\n        publication = new RemoteTrackPublication(kind, ti, (_a = this.signalClient.connectOptions) === null || _a === void 0 ? void 0 : _a.autoSubscribe);\n        publication.updateInfo(ti);\n        newTracks.set(ti.sid, publication);\n        const existingTrackOfSource = Array.from(this.tracks.values()).find(publishedTrack => publishedTrack.source === (publication === null || publication === void 0 ? void 0 : publication.source));\n        if (existingTrackOfSource && publication.source !== Track.Source.Unknown) {\n          livekitLogger.debug(\"received a second track publication for \".concat(this.identity, \" with the same source: \").concat(publication.source), {\n            oldTrack: existingTrackOfSource,\n            newTrack: publication,\n            participant: this,\n            participantInfo: info\n          });\n        }\n        this.addTrackPublication(publication);\n      } else {\n        publication.updateInfo(ti);\n      }\n      validTracks.set(ti.sid, publication);\n    });\n    // detect removed tracks\n    this.tracks.forEach(publication => {\n      if (!validTracks.has(publication.trackSid)) {\n        livekitLogger.trace('detected removed track on remote participant, unpublishing', {\n          publication,\n          participantSid: this.sid\n        });\n        this.unpublishTrack(publication.trackSid, true);\n      }\n    });\n    // always emit events for new publications, Room will not forward them unless it's ready\n    newTracks.forEach(publication => {\n      this.emit(ParticipantEvent.TrackPublished, publication);\n    });\n    return true;\n  }\n  /** @internal */\n  unpublishTrack(sid, sendUnpublish) {\n    const publication = this.tracks.get(sid);\n    if (!publication) {\n      return;\n    }\n    // also send unsubscribe, if track is actively subscribed\n    const {\n      track\n    } = publication;\n    if (track) {\n      track.stop();\n      publication.setTrack(undefined);\n    }\n    // remove track from maps only after unsubscribed has been fired\n    this.tracks.delete(sid);\n    // remove from the right type map\n    switch (publication.kind) {\n      case Track.Kind.Audio:\n        this.audioTracks.delete(sid);\n        break;\n      case Track.Kind.Video:\n        this.videoTracks.delete(sid);\n        break;\n    }\n    if (sendUnpublish) {\n      this.emit(ParticipantEvent.TrackUnpublished, publication);\n    }\n  }\n  /**\n   * @internal\n   */\n  setAudioOutput(output) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.audioOutput = output;\n      const promises = [];\n      this.audioTracks.forEach(pub => {\n        var _a;\n        if (pub.track instanceof RemoteAudioTrack) {\n          promises.push(pub.track.setSinkId((_a = output.deviceId) !== null && _a !== void 0 ? _a : 'default'));\n        }\n      });\n      yield Promise.all(promises);\n    });\n  }\n  /** @internal */\n  emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    livekitLogger.trace('participant event', {\n      participant: this.sid,\n      event,\n      args\n    });\n    return super.emit(event, ...args);\n  }\n}\n\nclass LocalParticipant extends Participant {\n  /** @internal */\n  constructor(sid, identity, engine, options) {\n    super(sid, identity);\n    this.pendingPublishing = new Set();\n    this.pendingPublishPromises = new Map();\n    this.participantTrackPermissions = [];\n    this.allParticipantsAllowedToSubscribe = true;\n    this.encryptionType = Encryption_Type.NONE;\n    this.handleReconnecting = () => {\n      if (!this.reconnectFuture) {\n        this.reconnectFuture = new Future();\n      }\n    };\n    this.handleReconnected = () => {\n      var _a, _b;\n      (_b = (_a = this.reconnectFuture) === null || _a === void 0 ? void 0 : _a.resolve) === null || _b === void 0 ? void 0 : _b.call(_a);\n      this.reconnectFuture = undefined;\n      this.updateTrackSubscriptionPermissions();\n    };\n    this.handleDisconnected = () => {\n      var _a, _b;\n      if (this.reconnectFuture) {\n        this.reconnectFuture.promise.catch(e => livekitLogger.warn(e));\n        (_b = (_a = this.reconnectFuture) === null || _a === void 0 ? void 0 : _a.reject) === null || _b === void 0 ? void 0 : _b.call(_a, 'Got disconnected during reconnection attempt');\n        this.reconnectFuture = undefined;\n      }\n    };\n    this.updateTrackSubscriptionPermissions = () => {\n      livekitLogger.debug('updating track subscription permissions', {\n        allParticipantsAllowed: this.allParticipantsAllowedToSubscribe,\n        participantTrackPermissions: this.participantTrackPermissions\n      });\n      this.engine.client.sendUpdateSubscriptionPermissions(this.allParticipantsAllowedToSubscribe, this.participantTrackPermissions.map(p => trackPermissionToProto(p)));\n    };\n    /** @internal */\n    this.onTrackUnmuted = track => {\n      this.onTrackMuted(track, track.isUpstreamPaused);\n    };\n    // when the local track changes in mute status, we'll notify server as such\n    /** @internal */\n    this.onTrackMuted = (track, muted) => {\n      if (muted === undefined) {\n        muted = true;\n      }\n      if (!track.sid) {\n        livekitLogger.error('could not update mute status for unpublished track', track);\n        return;\n      }\n      this.engine.updateMuteStatus(track.sid, muted);\n    };\n    this.onTrackUpstreamPaused = track => {\n      livekitLogger.debug('upstream paused');\n      this.onTrackMuted(track, true);\n    };\n    this.onTrackUpstreamResumed = track => {\n      livekitLogger.debug('upstream resumed');\n      this.onTrackMuted(track, track.isMuted);\n    };\n    this.handleSubscribedQualityUpdate = update => __awaiter(this, void 0, void 0, function* () {\n      var _a, e_1, _b, _c;\n      var _d, _e;\n      if (!((_d = this.roomOptions) === null || _d === void 0 ? void 0 : _d.dynacast)) {\n        return;\n      }\n      const pub = this.videoTracks.get(update.trackSid);\n      if (!pub) {\n        livekitLogger.warn('received subscribed quality update for unknown track', {\n          method: 'handleSubscribedQualityUpdate',\n          sid: update.trackSid\n        });\n        return;\n      }\n      if (update.subscribedCodecs.length > 0) {\n        if (!pub.videoTrack) {\n          return;\n        }\n        const newCodecs = yield pub.videoTrack.setPublishingCodecs(update.subscribedCodecs);\n        try {\n          for (var _f = true, newCodecs_1 = __asyncValues(newCodecs), newCodecs_1_1; newCodecs_1_1 = yield newCodecs_1.next(), _a = newCodecs_1_1.done, !_a; _f = true) {\n            _c = newCodecs_1_1.value;\n            _f = false;\n            const codec = _c;\n            if (isBackupCodec(codec)) {\n              livekitLogger.debug(\"publish \".concat(codec, \" for \").concat(pub.videoTrack.sid));\n              yield this.publishAdditionalCodecForTrack(pub.videoTrack, codec, pub.options);\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (!_f && !_a && (_b = newCodecs_1.return)) yield _b.call(newCodecs_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      } else if (update.subscribedQualities.length > 0) {\n        yield (_e = pub.videoTrack) === null || _e === void 0 ? void 0 : _e.setPublishingLayers(update.subscribedQualities);\n      }\n    });\n    this.handleLocalTrackUnpublished = unpublished => {\n      const track = this.tracks.get(unpublished.trackSid);\n      if (!track) {\n        livekitLogger.warn('received unpublished event for unknown track', {\n          method: 'handleLocalTrackUnpublished',\n          trackSid: unpublished.trackSid\n        });\n        return;\n      }\n      this.unpublishTrack(track.track);\n    };\n    this.handleTrackEnded = track => __awaiter(this, void 0, void 0, function* () {\n      if (track.source === Track.Source.ScreenShare || track.source === Track.Source.ScreenShareAudio) {\n        livekitLogger.debug('unpublishing local track due to TrackEnded', {\n          track: track.sid\n        });\n        this.unpublishTrack(track);\n      } else if (track.isUserProvided) {\n        yield track.mute();\n      } else if (track instanceof LocalAudioTrack || track instanceof LocalVideoTrack) {\n        try {\n          if (isWeb()) {\n            try {\n              const currentPermissions = yield navigator === null || navigator === void 0 ? void 0 : navigator.permissions.query({\n                // the permission query for camera and microphone currently not supported in Safari and Firefox\n                // @ts-ignore\n                name: track.source === Track.Source.Camera ? 'camera' : 'microphone'\n              });\n              if (currentPermissions && currentPermissions.state === 'denied') {\n                livekitLogger.warn(\"user has revoked access to \".concat(track.source));\n                // detect granted change after permissions were denied to try and resume then\n                currentPermissions.onchange = () => {\n                  if (currentPermissions.state !== 'denied') {\n                    if (!track.isMuted) {\n                      track.restartTrack();\n                    }\n                    currentPermissions.onchange = null;\n                  }\n                };\n                throw new Error('GetUserMedia Permission denied');\n              }\n            } catch (e) {\n              // permissions query fails for firefox, we continue and try to restart the track\n            }\n          }\n          if (!track.isMuted) {\n            livekitLogger.debug('track ended, attempting to use a different device');\n            yield track.restartTrack();\n          }\n        } catch (e) {\n          livekitLogger.warn(\"could not restart track, muting instead\");\n          yield track.mute();\n        }\n      }\n    });\n    this.audioTracks = new Map();\n    this.videoTracks = new Map();\n    this.tracks = new Map();\n    this.engine = engine;\n    this.roomOptions = options;\n    this.setupEngine(engine);\n    this.activeDeviceMap = new Map();\n  }\n  get lastCameraError() {\n    return this.cameraError;\n  }\n  get lastMicrophoneError() {\n    return this.microphoneError;\n  }\n  get isE2EEEnabled() {\n    return this.encryptionType !== Encryption_Type.NONE;\n  }\n  getTrack(source) {\n    const track = super.getTrack(source);\n    if (track) {\n      return track;\n    }\n  }\n  getTrackByName(name) {\n    const track = super.getTrackByName(name);\n    if (track) {\n      return track;\n    }\n  }\n  /**\n   * @internal\n   */\n  setupEngine(engine) {\n    this.engine = engine;\n    this.engine.client.onRemoteMuteChanged = (trackSid, muted) => {\n      const pub = this.tracks.get(trackSid);\n      if (!pub || !pub.track) {\n        return;\n      }\n      if (muted) {\n        pub.mute();\n      } else {\n        pub.unmute();\n      }\n    };\n    this.engine.client.onSubscribedQualityUpdate = this.handleSubscribedQualityUpdate;\n    this.engine.client.onLocalTrackUnpublished = this.handleLocalTrackUnpublished;\n    this.engine.on(EngineEvent.Connected, this.handleReconnected).on(EngineEvent.SignalRestarted, this.handleReconnected).on(EngineEvent.SignalResumed, this.handleReconnected).on(EngineEvent.Restarting, this.handleReconnecting).on(EngineEvent.Resuming, this.handleReconnecting).on(EngineEvent.Disconnected, this.handleDisconnected);\n  }\n  /**\n   * Sets and updates the metadata of the local participant.\n   * The change does not take immediate effect.\n   * If successful, a `ParticipantEvent.MetadataChanged` event will be emitted on the local participant.\n   * Note: this requires `canUpdateOwnMetadata` permission.\n   * @param metadata\n   */\n  setMetadata(metadata) {\n    var _a;\n    this.engine.client.sendUpdateLocalMetadata(metadata, (_a = this.name) !== null && _a !== void 0 ? _a : '');\n  }\n  /**\n   * Sets and updates the name of the local participant.\n   * The change does not take immediate effect.\n   * If successful, a `ParticipantEvent.ParticipantNameChanged` event will be emitted on the local participant.\n   * Note: this requires `canUpdateOwnMetadata` permission.\n   * @param metadata\n   */\n  setName(name) {\n    var _a;\n    this.engine.client.sendUpdateLocalMetadata((_a = this.metadata) !== null && _a !== void 0 ? _a : '', name);\n  }\n  /**\n   * Enable or disable a participant's camera track.\n   *\n   * If a track has already published, it'll mute or unmute the track.\n   * Resolves with a `LocalTrackPublication` instance if successful and `undefined` otherwise\n   */\n  setCameraEnabled(enabled, options, publishOptions) {\n    return this.setTrackEnabled(Track.Source.Camera, enabled, options, publishOptions);\n  }\n  /**\n   * Enable or disable a participant's microphone track.\n   *\n   * If a track has already published, it'll mute or unmute the track.\n   * Resolves with a `LocalTrackPublication` instance if successful and `undefined` otherwise\n   */\n  setMicrophoneEnabled(enabled, options, publishOptions) {\n    return this.setTrackEnabled(Track.Source.Microphone, enabled, options, publishOptions);\n  }\n  /**\n   * Start or stop sharing a participant's screen\n   * Resolves with a `LocalTrackPublication` instance if successful and `undefined` otherwise\n   */\n  setScreenShareEnabled(enabled, options, publishOptions) {\n    return this.setTrackEnabled(Track.Source.ScreenShare, enabled, options, publishOptions);\n  }\n  /** @internal */\n  setPermissions(permissions) {\n    const prevPermissions = this.permissions;\n    const changed = super.setPermissions(permissions);\n    if (changed && prevPermissions) {\n      this.emit(ParticipantEvent.ParticipantPermissionsChanged, prevPermissions);\n    }\n    return changed;\n  }\n  /** @internal */\n  setE2EEEnabled(enabled) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.encryptionType = enabled ? Encryption_Type.GCM : Encryption_Type.NONE;\n      yield this.republishAllTracks(undefined, false);\n    });\n  }\n  setTrackEnabled(source, enabled, options, publishOptions) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      livekitLogger.debug('setTrackEnabled', {\n        source,\n        enabled\n      });\n      let track = this.getTrack(source);\n      if (enabled) {\n        if (track) {\n          yield track.unmute();\n        } else {\n          let localTracks;\n          if (this.pendingPublishing.has(source)) {\n            livekitLogger.info('skipping duplicate published source', {\n              source\n            });\n            // no-op it's already been requested\n            return;\n          }\n          this.pendingPublishing.add(source);\n          try {\n            switch (source) {\n              case Track.Source.Camera:\n                localTracks = yield this.createTracks({\n                  video: (_a = options) !== null && _a !== void 0 ? _a : true\n                });\n                break;\n              case Track.Source.Microphone:\n                localTracks = yield this.createTracks({\n                  audio: (_b = options) !== null && _b !== void 0 ? _b : true\n                });\n                break;\n              case Track.Source.ScreenShare:\n                localTracks = yield this.createScreenTracks(Object.assign({}, options));\n                break;\n              default:\n                throw new TrackInvalidError(source);\n            }\n            const publishPromises = [];\n            for (const localTrack of localTracks) {\n              livekitLogger.info('publishing track', {\n                localTrack\n              });\n              publishPromises.push(this.publishTrack(localTrack, publishOptions));\n            }\n            const publishedTracks = yield Promise.all(publishPromises);\n            // for screen share publications including audio, this will only return the screen share publication, not the screen share audio one\n            // revisit if we want to return an array of tracks instead for v2\n            [track] = publishedTracks;\n          } catch (e) {\n            localTracks === null || localTracks === void 0 ? void 0 : localTracks.forEach(tr => {\n              tr.stop();\n            });\n            if (e instanceof Error && !(e instanceof TrackInvalidError)) {\n              this.emit(ParticipantEvent.MediaDevicesError, e);\n            }\n            throw e;\n          } finally {\n            this.pendingPublishing.delete(source);\n          }\n        }\n      } else if (track && track.track) {\n        // screenshare cannot be muted, unpublish instead\n        if (source === Track.Source.ScreenShare) {\n          track = yield this.unpublishTrack(track.track);\n          const screenAudioTrack = this.getTrack(Track.Source.ScreenShareAudio);\n          if (screenAudioTrack && screenAudioTrack.track) {\n            this.unpublishTrack(screenAudioTrack.track);\n          }\n        } else {\n          yield track.mute();\n        }\n      }\n      return track;\n    });\n  }\n  /**\n   * Publish both camera and microphone at the same time. This is useful for\n   * displaying a single Permission Dialog box to the end user.\n   */\n  enableCameraAndMicrophone() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.pendingPublishing.has(Track.Source.Camera) || this.pendingPublishing.has(Track.Source.Microphone)) {\n        // no-op it's already been requested\n        return;\n      }\n      this.pendingPublishing.add(Track.Source.Camera);\n      this.pendingPublishing.add(Track.Source.Microphone);\n      try {\n        const tracks = yield this.createTracks({\n          audio: true,\n          video: true\n        });\n        yield Promise.all(tracks.map(track => this.publishTrack(track)));\n      } finally {\n        this.pendingPublishing.delete(Track.Source.Camera);\n        this.pendingPublishing.delete(Track.Source.Microphone);\n      }\n    });\n  }\n  /**\n   * Create local camera and/or microphone tracks\n   * @param options\n   * @returns\n   */\n  createTracks(options) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      const opts = mergeDefaultOptions(options, (_a = this.roomOptions) === null || _a === void 0 ? void 0 : _a.audioCaptureDefaults, (_b = this.roomOptions) === null || _b === void 0 ? void 0 : _b.videoCaptureDefaults);\n      const constraints = constraintsForOptions(opts);\n      let stream;\n      try {\n        stream = yield navigator.mediaDevices.getUserMedia(constraints);\n      } catch (err) {\n        if (err instanceof Error) {\n          if (constraints.audio) {\n            this.microphoneError = err;\n          }\n          if (constraints.video) {\n            this.cameraError = err;\n          }\n        }\n        throw err;\n      }\n      if (constraints.audio) {\n        this.microphoneError = undefined;\n        this.emit(ParticipantEvent.AudioStreamAcquired);\n      }\n      if (constraints.video) {\n        this.cameraError = undefined;\n      }\n      return stream.getTracks().map(mediaStreamTrack => {\n        const isAudio = mediaStreamTrack.kind === 'audio';\n        isAudio ? options.audio : options.video;\n        let trackConstraints;\n        const conOrBool = isAudio ? constraints.audio : constraints.video;\n        if (typeof conOrBool !== 'boolean') {\n          trackConstraints = conOrBool;\n        }\n        const track = mediaTrackToLocalTrack(mediaStreamTrack, trackConstraints);\n        if (track.kind === Track.Kind.Video) {\n          track.source = Track.Source.Camera;\n        } else if (track.kind === Track.Kind.Audio) {\n          track.source = Track.Source.Microphone;\n        }\n        track.mediaStream = stream;\n        return track;\n      });\n    });\n  }\n  /**\n   * Creates a screen capture tracks with getDisplayMedia().\n   * A LocalVideoTrack is always created and returned.\n   * If { audio: true }, and the browser supports audio capture, a LocalAudioTrack is also created.\n   */\n  createScreenTracks(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (options === undefined) {\n        options = {};\n      }\n      if (navigator.mediaDevices.getDisplayMedia === undefined) {\n        throw new DeviceUnsupportedError('getDisplayMedia not supported');\n      }\n      const constraints = screenCaptureToDisplayMediaStreamOptions(options);\n      const stream = yield navigator.mediaDevices.getDisplayMedia(constraints);\n      const tracks = stream.getVideoTracks();\n      if (tracks.length === 0) {\n        throw new TrackInvalidError('no video track found');\n      }\n      const screenVideo = new LocalVideoTrack(tracks[0], undefined, false);\n      screenVideo.source = Track.Source.ScreenShare;\n      const localTracks = [screenVideo];\n      if (stream.getAudioTracks().length > 0) {\n        this.emit(ParticipantEvent.AudioStreamAcquired);\n        const screenAudio = new LocalAudioTrack(stream.getAudioTracks()[0], undefined, false, this.audioContext);\n        screenAudio.source = Track.Source.ScreenShareAudio;\n        localTracks.push(screenAudio);\n      }\n      return localTracks;\n    });\n  }\n  /**\n   * Publish a new track to the room\n   * @param track\n   * @param options\n   */\n  publishTrack(track, options) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function* () {\n      yield (_a = this.reconnectFuture) === null || _a === void 0 ? void 0 : _a.promise;\n      if (track instanceof LocalTrack && this.pendingPublishPromises.has(track)) {\n        yield this.pendingPublishPromises.get(track);\n      }\n      let defaultConstraints;\n      if (track instanceof MediaStreamTrack) {\n        defaultConstraints = track.getConstraints();\n      } else {\n        // we want to access constraints directly as `track.mediaStreamTrack`\n        // might be pointing to a non-device track (e.g. processed track) already\n        defaultConstraints = track.constraints;\n        let deviceKind = undefined;\n        switch (track.source) {\n          case Track.Source.Microphone:\n            deviceKind = 'audioinput';\n            break;\n          case Track.Source.Camera:\n            deviceKind = 'videoinput';\n        }\n        if (deviceKind && this.activeDeviceMap.has(deviceKind)) {\n          defaultConstraints = Object.assign(Object.assign({}, defaultConstraints), {\n            deviceId: this.activeDeviceMap.get(deviceKind)\n          });\n        }\n      }\n      // convert raw media track into audio or video track\n      if (track instanceof MediaStreamTrack) {\n        switch (track.kind) {\n          case 'audio':\n            track = new LocalAudioTrack(track, defaultConstraints, true, this.audioContext);\n            break;\n          case 'video':\n            track = new LocalVideoTrack(track, defaultConstraints, true);\n            break;\n          default:\n            throw new TrackInvalidError(\"unsupported MediaStreamTrack kind \".concat(track.kind));\n        }\n      }\n      if (track instanceof LocalAudioTrack) {\n        track.setAudioContext(this.audioContext);\n      }\n      // is it already published? if so skip\n      let existingPublication;\n      this.tracks.forEach(publication => {\n        if (!publication.track) {\n          return;\n        }\n        if (publication.track === track) {\n          existingPublication = publication;\n        }\n      });\n      if (existingPublication) {\n        livekitLogger.warn('track has already been published, skipping');\n        return existingPublication;\n      }\n      const isStereoInput = 'channelCount' in track.mediaStreamTrack.getSettings() &&\n      // @ts-ignore `channelCount` on getSettings() is currently only available for Safari, but is generally the best way to determine a stereo track https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/channelCount\n      track.mediaStreamTrack.getSettings().channelCount === 2 || track.mediaStreamTrack.getConstraints().channelCount === 2;\n      const isStereo = (_b = options === null || options === void 0 ? void 0 : options.forceStereo) !== null && _b !== void 0 ? _b : isStereoInput;\n      // disable dtx for stereo track if not enabled explicitly\n      if (isStereo) {\n        if (!options) {\n          options = {};\n        }\n        if (options.dtx === undefined) {\n          livekitLogger.info(\"Opus DTX will be disabled for stereo tracks by default. Enable them explicitly to make it work.\");\n        }\n        if (options.red === undefined) {\n          livekitLogger.info(\"Opus RED will be disabled for stereo tracks by default. Enable them explicitly to make it work.\");\n        }\n        (_c = options.dtx) !== null && _c !== void 0 ? _c : options.dtx = false;\n        (_d = options.red) !== null && _d !== void 0 ? _d : options.red = false;\n      }\n      const opts = Object.assign(Object.assign({}, this.roomOptions.publishDefaults), options);\n      // disable simulcast if e2ee is set on safari\n      if (isSafari() && this.roomOptions.e2ee) {\n        livekitLogger.info(\"End-to-end encryption is set up, simulcast publishing will be disabled on Safari\");\n        opts.simulcast = false;\n      }\n      if (opts.source) {\n        track.source = opts.source;\n      }\n      const publishPromise = this.publish(track, opts, isStereo);\n      this.pendingPublishPromises.set(track, publishPromise);\n      try {\n        const publication = yield publishPromise;\n        return publication;\n      } catch (e) {\n        throw e;\n      } finally {\n        this.pendingPublishPromises.delete(track);\n      }\n    });\n  }\n  publish(track, opts, isStereo) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n    return __awaiter(this, void 0, void 0, function* () {\n      const existingTrackOfSource = Array.from(this.tracks.values()).find(publishedTrack => track instanceof LocalTrack && publishedTrack.source === track.source);\n      if (existingTrackOfSource && track.source !== Track.Source.Unknown) {\n        livekitLogger.info(\"publishing a second track with the same source: \".concat(track.source));\n      }\n      if (opts.stopMicTrackOnMute && track instanceof LocalAudioTrack) {\n        track.stopOnMute = true;\n      }\n      if (track.source === Track.Source.ScreenShare && isFireFox()) {\n        // Firefox does not work well with simulcasted screen share\n        // we frequently get no data on layer 0 when enabled\n        opts.simulcast = false;\n      }\n      // require full AV1/VP9 SVC support prior to using it\n      if (opts.videoCodec === 'av1' && !supportsAV1()) {\n        opts.videoCodec = undefined;\n      }\n      if (opts.videoCodec === 'vp9' && !supportsVP9()) {\n        opts.videoCodec = undefined;\n      }\n      if (opts.videoCodec === undefined) {\n        opts.videoCodec = defaultVideoCodec;\n      }\n      const videoCodec = opts.videoCodec;\n      // handle track actions\n      track.on(TrackEvent.Muted, this.onTrackMuted);\n      track.on(TrackEvent.Unmuted, this.onTrackUnmuted);\n      track.on(TrackEvent.Ended, this.handleTrackEnded);\n      track.on(TrackEvent.UpstreamPaused, this.onTrackUpstreamPaused);\n      track.on(TrackEvent.UpstreamResumed, this.onTrackUpstreamResumed);\n      // create track publication from track\n      const req = new AddTrackRequest({\n        // get local track id for use during publishing\n        cid: track.mediaStreamTrack.id,\n        name: opts.name,\n        type: Track.kindToProto(track.kind),\n        muted: track.isMuted,\n        source: Track.sourceToProto(track.source),\n        disableDtx: !((_a = opts.dtx) !== null && _a !== void 0 ? _a : true),\n        encryption: this.encryptionType,\n        stereo: isStereo,\n        disableRed: this.isE2EEEnabled || !((_b = opts.red) !== null && _b !== void 0 ? _b : true),\n        stream: opts === null || opts === void 0 ? void 0 : opts.stream\n      });\n      // compute encodings and layers for video\n      let encodings;\n      if (track.kind === Track.Kind.Video) {\n        let dims = {\n          width: 0,\n          height: 0\n        };\n        try {\n          dims = yield track.waitForDimensions();\n        } catch (e) {\n          // use defaults, it's quite painful for congestion control without simulcast\n          // so using default dims according to publish settings\n          const defaultRes = (_d = (_c = this.roomOptions.videoCaptureDefaults) === null || _c === void 0 ? void 0 : _c.resolution) !== null && _d !== void 0 ? _d : VideoPresets.h720.resolution;\n          dims = {\n            width: defaultRes.width,\n            height: defaultRes.height\n          };\n          // log failure\n          livekitLogger.error('could not determine track dimensions, using defaults', dims);\n        }\n        // width and height should be defined for video\n        req.width = dims.width;\n        req.height = dims.height;\n        // for svc codecs, disable simulcast and use vp8 for backup codec\n        if (track instanceof LocalVideoTrack) {\n          if (isSVCCodec(videoCodec)) {\n            // vp9 svc with screenshare has problem to encode, always use L1T3 here\n            if (track.source === Track.Source.ScreenShare && videoCodec === 'vp9') {\n              opts.scalabilityMode = 'L1T3';\n            }\n            // set scalabilityMode to 'L3T3_KEY' by default\n            opts.scalabilityMode = (_e = opts.scalabilityMode) !== null && _e !== void 0 ? _e : 'L3T3_KEY';\n          }\n          req.simulcastCodecs = [new SimulcastCodec({\n            codec: videoCodec,\n            cid: track.mediaStreamTrack.id\n          })];\n          // set up backup\n          if (opts.backupCodec === true) {\n            opts.backupCodec = {\n              codec: defaultVideoCodec\n            };\n          }\n          if (opts.backupCodec && videoCodec !== opts.backupCodec.codec) {\n            // multi-codec simulcast requires dynacast\n            if (!this.roomOptions.dynacast) {\n              this.roomOptions.dynacast = true;\n            }\n            req.simulcastCodecs.push(new SimulcastCodec({\n              codec: opts.backupCodec.codec,\n              cid: ''\n            }));\n          }\n        }\n        encodings = computeVideoEncodings(track.source === Track.Source.ScreenShare, req.width, req.height, opts);\n        req.layers = videoLayersFromEncodings(req.width, req.height, encodings, isSVCCodec(opts.videoCodec));\n      } else if (track.kind === Track.Kind.Audio) {\n        encodings = [{\n          maxBitrate: (_g = (_f = opts.audioPreset) === null || _f === void 0 ? void 0 : _f.maxBitrate) !== null && _g !== void 0 ? _g : opts.audioBitrate,\n          priority: (_j = (_h = opts.audioPreset) === null || _h === void 0 ? void 0 : _h.priority) !== null && _j !== void 0 ? _j : 'high',\n          networkPriority: (_l = (_k = opts.audioPreset) === null || _k === void 0 ? void 0 : _k.priority) !== null && _l !== void 0 ? _l : 'high'\n        }];\n      }\n      if (!this.engine || this.engine.isClosed) {\n        throw new UnexpectedConnectionState('cannot publish track when not connected');\n      }\n      const ti = yield this.engine.addTrack(req);\n      // server might not support the codec the client has requested, in that case, fallback\n      // to a supported codec\n      let primaryCodecMime;\n      ti.codecs.forEach(codec => {\n        if (primaryCodecMime === undefined) {\n          primaryCodecMime = codec.mimeType;\n        }\n      });\n      if (primaryCodecMime && track.kind === Track.Kind.Video) {\n        const updatedCodec = mimeTypeToVideoCodecString(primaryCodecMime);\n        if (updatedCodec !== videoCodec) {\n          livekitLogger.debug('falling back to server selected codec', {\n            codec: updatedCodec\n          });\n          /* @ts-ignore */\n          opts.videoCodec = updatedCodec;\n          // recompute encodings since bitrates/etc could have changed\n          encodings = computeVideoEncodings(track.source === Track.Source.ScreenShare, req.width, req.height, opts);\n        }\n      }\n      const publication = new LocalTrackPublication(track.kind, ti, track);\n      // save options for when it needs to be republished again\n      publication.options = opts;\n      track.sid = ti.sid;\n      if (!this.engine.publisher) {\n        throw new UnexpectedConnectionState('publisher is closed');\n      }\n      livekitLogger.debug(\"publishing \".concat(track.kind, \" with encodings\"), {\n        encodings,\n        trackInfo: ti\n      });\n      track.sender = yield this.engine.createSender(track, opts, encodings);\n      if (encodings) {\n        if (isFireFox() && track.kind === Track.Kind.Audio) {\n          /* Refer to RFC https://datatracker.ietf.org/doc/html/rfc7587#section-6.1,\n             livekit-server uses maxaveragebitrate=510000 in the answer sdp to permit client to\n             publish high quality audio track. But firefox always uses this value as the actual\n             bitrates, causing the audio bitrates to rise to 510Kbps in any stereo case unexpectedly.\n             So the client need to modify maxaverragebitrates in answer sdp to user provided value to\n             fix the issue.\n           */\n          let trackTransceiver = undefined;\n          for (const transceiver of this.engine.publisher.getTransceivers()) {\n            if (transceiver.sender === track.sender) {\n              trackTransceiver = transceiver;\n              break;\n            }\n          }\n          if (trackTransceiver) {\n            this.engine.publisher.setTrackCodecBitrate({\n              transceiver: trackTransceiver,\n              codec: 'opus',\n              maxbr: ((_m = encodings[0]) === null || _m === void 0 ? void 0 : _m.maxBitrate) ? encodings[0].maxBitrate / 1000 : 0\n            });\n          }\n        } else if (track.codec && isSVCCodec(track.codec) && ((_o = encodings[0]) === null || _o === void 0 ? void 0 : _o.maxBitrate)) {\n          this.engine.publisher.setTrackCodecBitrate({\n            cid: req.cid,\n            codec: track.codec,\n            maxbr: encodings[0].maxBitrate / 1000\n          });\n        }\n      }\n      yield this.engine.negotiate();\n      if (track instanceof LocalVideoTrack) {\n        track.startMonitor(this.engine.client);\n      } else if (track instanceof LocalAudioTrack) {\n        track.startMonitor();\n      }\n      this.addTrackPublication(publication);\n      // send event for publication\n      this.emit(ParticipantEvent.LocalTrackPublished, publication);\n      return publication;\n    });\n  }\n  get isLocal() {\n    return true;\n  }\n  /** @internal\n   * publish additional codec to existing track\n   */\n  publishAdditionalCodecForTrack(track, videoCodec, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      // is it not published? if so skip\n      let existingPublication;\n      this.tracks.forEach(publication => {\n        if (!publication.track) {\n          return;\n        }\n        if (publication.track === track) {\n          existingPublication = publication;\n        }\n      });\n      if (!existingPublication) {\n        throw new TrackInvalidError('track is not published');\n      }\n      if (!(track instanceof LocalVideoTrack)) {\n        throw new TrackInvalidError('track is not a video track');\n      }\n      const opts = Object.assign(Object.assign({}, (_a = this.roomOptions) === null || _a === void 0 ? void 0 : _a.publishDefaults), options);\n      const encodings = computeTrackBackupEncodings(track, videoCodec, opts);\n      if (!encodings) {\n        livekitLogger.info(\"backup codec has been disabled, ignoring request to add additional codec for track\");\n        return;\n      }\n      const simulcastTrack = track.addSimulcastTrack(videoCodec, encodings);\n      const req = new AddTrackRequest({\n        cid: simulcastTrack.mediaStreamTrack.id,\n        type: Track.kindToProto(track.kind),\n        muted: track.isMuted,\n        source: Track.sourceToProto(track.source),\n        sid: track.sid,\n        simulcastCodecs: [{\n          codec: opts.videoCodec,\n          cid: simulcastTrack.mediaStreamTrack.id\n        }]\n      });\n      req.layers = videoLayersFromEncodings(req.width, req.height, encodings);\n      if (!this.engine || this.engine.isClosed) {\n        throw new UnexpectedConnectionState('cannot publish track when not connected');\n      }\n      const ti = yield this.engine.addTrack(req);\n      yield this.engine.createSimulcastSender(track, simulcastTrack, opts, encodings);\n      yield this.engine.negotiate();\n      livekitLogger.debug(\"published \".concat(videoCodec, \" for track \").concat(track.sid), {\n        encodings,\n        trackInfo: ti\n      });\n    });\n  }\n  unpublishTrack(track, stopOnUnpublish) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      // look through all published tracks to find the right ones\n      const publication = this.getPublicationForTrack(track);\n      livekitLogger.debug('unpublishing track', {\n        track,\n        method: 'unpublishTrack'\n      });\n      if (!publication || !publication.track) {\n        livekitLogger.warn('track was not unpublished because no publication was found', {\n          track,\n          method: 'unpublishTrack'\n        });\n        return undefined;\n      }\n      track = publication.track;\n      track.off(TrackEvent.Muted, this.onTrackMuted);\n      track.off(TrackEvent.Unmuted, this.onTrackUnmuted);\n      track.off(TrackEvent.Ended, this.handleTrackEnded);\n      track.off(TrackEvent.UpstreamPaused, this.onTrackUpstreamPaused);\n      track.off(TrackEvent.UpstreamResumed, this.onTrackUpstreamResumed);\n      if (stopOnUnpublish === undefined) {\n        stopOnUnpublish = (_b = (_a = this.roomOptions) === null || _a === void 0 ? void 0 : _a.stopLocalTrackOnUnpublish) !== null && _b !== void 0 ? _b : true;\n      }\n      if (stopOnUnpublish) {\n        track.stop();\n      }\n      let negotiationNeeded = false;\n      const trackSender = track.sender;\n      track.sender = undefined;\n      if (this.engine.publisher && this.engine.publisher.getConnectionState() !== 'closed' && trackSender) {\n        try {\n          for (const transceiver of this.engine.publisher.getTransceivers()) {\n            // if sender is not currently sending (after replaceTrack(null))\n            // removeTrack would have no effect.\n            // to ensure we end up successfully removing the track, manually set\n            // the transceiver to inactive\n            if (transceiver.sender === trackSender) {\n              transceiver.direction = 'inactive';\n              negotiationNeeded = true;\n            }\n          }\n          if (this.engine.removeTrack(trackSender)) {\n            negotiationNeeded = true;\n          }\n          if (track instanceof LocalVideoTrack) {\n            for (const [, trackInfo] of track.simulcastCodecs) {\n              if (trackInfo.sender) {\n                if (this.engine.removeTrack(trackInfo.sender)) {\n                  negotiationNeeded = true;\n                }\n                trackInfo.sender = undefined;\n              }\n            }\n            track.simulcastCodecs.clear();\n          }\n        } catch (e) {\n          livekitLogger.warn('failed to unpublish track', {\n            error: e,\n            method: 'unpublishTrack'\n          });\n        }\n      }\n      // remove from our maps\n      this.tracks.delete(publication.trackSid);\n      switch (publication.kind) {\n        case Track.Kind.Audio:\n          this.audioTracks.delete(publication.trackSid);\n          break;\n        case Track.Kind.Video:\n          this.videoTracks.delete(publication.trackSid);\n          break;\n      }\n      this.emit(ParticipantEvent.LocalTrackUnpublished, publication);\n      publication.setTrack(undefined);\n      if (negotiationNeeded) {\n        yield this.engine.negotiate();\n      }\n      return publication;\n    });\n  }\n  unpublishTracks(tracks) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const results = yield Promise.all(tracks.map(track => this.unpublishTrack(track)));\n      return results.filter(track => track instanceof LocalTrackPublication);\n    });\n  }\n  republishAllTracks(options) {\n    let restartTracks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return __awaiter(this, void 0, void 0, function* () {\n      const localPubs = [];\n      this.tracks.forEach(pub => {\n        if (pub.track) {\n          if (options) {\n            pub.options = Object.assign(Object.assign({}, pub.options), options);\n          }\n          localPubs.push(pub);\n        }\n      });\n      yield Promise.all(localPubs.map(pub => __awaiter(this, void 0, void 0, function* () {\n        const track = pub.track;\n        yield this.unpublishTrack(track, false);\n        if (restartTracks && !track.isMuted && (track instanceof LocalAudioTrack || track instanceof LocalVideoTrack) && !track.isUserProvided) {\n          // generally we need to restart the track before publishing, often a full reconnect\n          // is necessary because computer had gone to sleep.\n          livekitLogger.debug('restarting existing track', {\n            track: pub.trackSid\n          });\n          yield track.restartTrack();\n        }\n        yield this.publishTrack(track, pub.options);\n      })));\n    });\n  }\n  publishData(data, kind) {\n    let publishOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      const destination = Array.isArray(publishOptions) ? publishOptions : publishOptions === null || publishOptions === void 0 ? void 0 : publishOptions.destination;\n      const destinationSids = [];\n      const topic = !Array.isArray(publishOptions) ? publishOptions.topic : undefined;\n      if (destination !== undefined) {\n        destination.forEach(val => {\n          if (val instanceof RemoteParticipant) {\n            destinationSids.push(val.sid);\n          } else {\n            destinationSids.push(val);\n          }\n        });\n      }\n      const packet = new DataPacket({\n        kind,\n        value: {\n          case: 'user',\n          value: new UserPacket({\n            participantSid: this.sid,\n            payload: data,\n            destinationSids: destinationSids,\n            topic\n          })\n        }\n      });\n      yield this.engine.sendDataPacket(packet, kind);\n    });\n  }\n  /**\n   * Control who can subscribe to LocalParticipant's published tracks.\n   *\n   * By default, all participants can subscribe. This allows fine-grained control over\n   * who is able to subscribe at a participant and track level.\n   *\n   * Note: if access is given at a track-level (i.e. both [allParticipantsAllowed] and\n   * [ParticipantTrackPermission.allTracksAllowed] are false), any newer published tracks\n   * will not grant permissions to any participants and will require a subsequent\n   * permissions update to allow subscription.\n   *\n   * @param allParticipantsAllowed Allows all participants to subscribe all tracks.\n   *  Takes precedence over [[participantTrackPermissions]] if set to true.\n   *  By default this is set to true.\n   * @param participantTrackPermissions Full list of individual permissions per\n   *  participant/track. Any omitted participants will not receive any permissions.\n   */\n  setTrackSubscriptionPermissions(allParticipantsAllowed) {\n    let participantTrackPermissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this.participantTrackPermissions = participantTrackPermissions;\n    this.allParticipantsAllowedToSubscribe = allParticipantsAllowed;\n    if (this.engine.client.isConnected) {\n      this.updateTrackSubscriptionPermissions();\n    }\n  }\n  /** @internal */\n  updateInfo(info) {\n    if (info.sid !== this.sid) {\n      // drop updates that specify a wrong sid.\n      // the sid for local participant is only explicitly set on join and full reconnect\n      return false;\n    }\n    if (!super.updateInfo(info)) {\n      return false;\n    }\n    // reconcile track mute status.\n    // if server's track mute status doesn't match actual, we'll have to update\n    // the server's copy\n    info.tracks.forEach(ti => {\n      var _a, _b;\n      const pub = this.tracks.get(ti.sid);\n      if (pub) {\n        const mutedOnServer = pub.isMuted || ((_b = (_a = pub.track) === null || _a === void 0 ? void 0 : _a.isUpstreamPaused) !== null && _b !== void 0 ? _b : false);\n        if (mutedOnServer !== ti.muted) {\n          livekitLogger.debug('updating server mute state after reconcile', {\n            sid: ti.sid,\n            muted: mutedOnServer\n          });\n          this.engine.client.sendMuteTrack(ti.sid, mutedOnServer);\n        }\n      }\n    });\n    return true;\n  }\n  getPublicationForTrack(track) {\n    let publication;\n    this.tracks.forEach(pub => {\n      const localTrack = pub.track;\n      if (!localTrack) {\n        return;\n      }\n      // this looks overly complicated due to this object tree\n      if (track instanceof MediaStreamTrack) {\n        if (localTrack instanceof LocalAudioTrack || localTrack instanceof LocalVideoTrack) {\n          if (localTrack.mediaStreamTrack === track) {\n            publication = pub;\n          }\n        }\n      } else if (track === localTrack) {\n        publication = pub;\n      }\n    });\n    return publication;\n  }\n  /** @internal */\n  publishedTracksInfo() {\n    const infos = [];\n    this.tracks.forEach(track => {\n      if (track.track !== undefined) {\n        infos.push(new TrackPublishedResponse({\n          cid: track.track.mediaStreamID,\n          track: track.trackInfo\n        }));\n      }\n    });\n    return infos;\n  }\n  /** @internal */\n  dataChannelsInfo() {\n    const infos = [];\n    const getInfo = (dc, target) => {\n      if ((dc === null || dc === void 0 ? void 0 : dc.id) !== undefined && dc.id !== null) {\n        infos.push(new DataChannelInfo({\n          label: dc.label,\n          id: dc.id,\n          target\n        }));\n      }\n    };\n    getInfo(this.engine.dataChannelForKind(DataPacket_Kind.LOSSY), SignalTarget.PUBLISHER);\n    getInfo(this.engine.dataChannelForKind(DataPacket_Kind.RELIABLE), SignalTarget.PUBLISHER);\n    getInfo(this.engine.dataChannelForKind(DataPacket_Kind.LOSSY, true), SignalTarget.SUBSCRIBER);\n    getInfo(this.engine.dataChannelForKind(DataPacket_Kind.RELIABLE, true), SignalTarget.SUBSCRIBER);\n    return infos;\n  }\n}\n\nvar ConnectionState;\n(function (ConnectionState) {\n  ConnectionState[\"Disconnected\"] = \"disconnected\";\n  ConnectionState[\"Connecting\"] = \"connecting\";\n  ConnectionState[\"Connected\"] = \"connected\";\n  ConnectionState[\"Reconnecting\"] = \"reconnecting\";\n})(ConnectionState || (ConnectionState = {}));\nconst connectionReconcileFrequency = 2 * 1000;\n/** @deprecated RoomState has been renamed to [[ConnectionState]] */\nconst RoomState = ConnectionState;\n/**\n * In LiveKit, a room is the logical grouping for a list of participants.\n * Participants in a room can publish tracks, and subscribe to others' tracks.\n *\n * a Room fires [[RoomEvent | RoomEvents]].\n *\n * @noInheritDoc\n */\nclass Room extends eventsExports.EventEmitter {\n  /**\n   * Creates a new Room, the primary construct for a LiveKit session.\n   * @param options\n   */\n  constructor(options) {\n    var _this;\n    var _a;\n    super();\n    _this = this;\n    this.state = ConnectionState.Disconnected;\n    /**\n     * list of participants that are actively speaking. when this changes\n     * a [[RoomEvent.ActiveSpeakersChanged]] event is fired\n     */\n    this.activeSpeakers = [];\n    /** reflects the sender encryption status of the local participant */\n    this.isE2EEEnabled = false;\n    this.audioEnabled = true;\n    this.connect = (url, token, opts) => __awaiter(this, void 0, void 0, function* () {\n      var _b;\n      // In case a disconnect called happened right before the connect call, make sure the disconnect is completed first by awaiting its lock\n      const unlockDisconnect = yield this.disconnectLock.lock();\n      if (this.state === ConnectionState.Connected) {\n        // when the state is reconnecting or connected, this function returns immediately\n        livekitLogger.info(\"already connected to room \".concat(this.name));\n        unlockDisconnect();\n        return Promise.resolve();\n      }\n      if (this.connectFuture) {\n        unlockDisconnect();\n        return this.connectFuture.promise;\n      }\n      this.setAndEmitConnectionState(ConnectionState.Connecting);\n      if (((_b = this.regionUrlProvider) === null || _b === void 0 ? void 0 : _b.getServerUrl().toString()) !== url) {\n        this.regionUrl = undefined;\n        this.regionUrlProvider = undefined;\n      }\n      if (isCloud(new URL(url))) {\n        if (this.regionUrlProvider === undefined) {\n          this.regionUrlProvider = new RegionUrlProvider(url, token);\n        } else {\n          this.regionUrlProvider.updateToken(token);\n        }\n        // trigger the first fetch without waiting for a response\n        // if initial connection fails, this will speed up picking regional url\n        // on subsequent runs\n        this.regionUrlProvider.fetchRegionSettings().catch(e => {\n          livekitLogger.warn('could not fetch region settings', {\n            error: e\n          });\n        });\n      }\n      const connectFn = (resolve, reject, regionUrl) => __awaiter(this, void 0, void 0, function* () {\n        var _c;\n        if (this.abortController) {\n          this.abortController.abort();\n        }\n        // explicit creation as local var needed to satisfy TS compiler when passing it to `attemptConnection` further down\n        const abortController = new AbortController();\n        this.abortController = abortController;\n        // at this point the intention to connect has been signalled so we can allow cancelling of the connection via disconnect() again\n        unlockDisconnect === null || unlockDisconnect === void 0 ? void 0 : unlockDisconnect();\n        try {\n          yield this.attemptConnection(regionUrl !== null && regionUrl !== void 0 ? regionUrl : url, token, opts, abortController);\n          this.abortController = undefined;\n          resolve();\n        } catch (e) {\n          if (this.regionUrlProvider && e instanceof ConnectionError && e.reason !== 3 /* ConnectionErrorReason.Cancelled */ && e.reason !== 0 /* ConnectionErrorReason.NotAllowed */) {\n            let nextUrl = null;\n            try {\n              nextUrl = yield this.regionUrlProvider.getNextBestRegionUrl((_c = this.abortController) === null || _c === void 0 ? void 0 : _c.signal);\n            } catch (error) {\n              if (error instanceof ConnectionError && (error.status === 401 || error.reason === 3 /* ConnectionErrorReason.Cancelled */)) {\n                this.handleDisconnect(this.options.stopLocalTrackOnUnpublish);\n                reject(error);\n                return;\n              }\n            }\n            if (nextUrl) {\n              livekitLogger.info(\"Initial connection failed with ConnectionError: \".concat(e.message, \". Retrying with another region: \").concat(nextUrl));\n              yield connectFn(resolve, reject, nextUrl);\n            } else {\n              this.handleDisconnect(this.options.stopLocalTrackOnUnpublish);\n              reject(e);\n            }\n          } else {\n            this.handleDisconnect(this.options.stopLocalTrackOnUnpublish);\n            reject(e);\n          }\n        }\n      });\n      const regionUrl = this.regionUrl;\n      this.regionUrl = undefined;\n      this.connectFuture = new Future((resolve, reject) => {\n        connectFn(resolve, reject, regionUrl);\n      }, () => {\n        this.clearConnectionFutures();\n      });\n      return this.connectFuture.promise;\n    });\n    this.connectSignal = (url, token, engine, connectOptions, roomOptions, abortController) => __awaiter(this, void 0, void 0, function* () {\n      const joinResponse = yield engine.join(url, token, {\n        autoSubscribe: connectOptions.autoSubscribe,\n        publishOnly: connectOptions.publishOnly,\n        adaptiveStream: typeof roomOptions.adaptiveStream === 'object' ? true : roomOptions.adaptiveStream,\n        maxRetries: connectOptions.maxRetries,\n        e2eeEnabled: !!this.e2eeManager,\n        websocketTimeout: connectOptions.websocketTimeout\n      }, abortController.signal);\n      let serverInfo = joinResponse.serverInfo;\n      if (!serverInfo) {\n        serverInfo = {\n          version: joinResponse.serverVersion,\n          region: joinResponse.serverRegion\n        };\n      }\n      livekitLogger.debug(\"connected to Livekit Server \".concat(Object.entries(serverInfo).map(_ref => {\n        let [key, value] = _ref;\n        return \"\".concat(key, \": \").concat(value);\n      }).join(', ')));\n      if (!joinResponse.serverVersion) {\n        throw new UnsupportedServer('unknown server version');\n      }\n      if (joinResponse.serverVersion === '0.15.1' && this.options.dynacast) {\n        livekitLogger.debug('disabling dynacast due to server version');\n        // dynacast has a bug in 0.15.1, so we cannot use it then\n        roomOptions.dynacast = false;\n      }\n      return joinResponse;\n    });\n    this.applyJoinResponse = joinResponse => {\n      const pi = joinResponse.participant;\n      this.localParticipant.sid = pi.sid;\n      this.localParticipant.identity = pi.identity;\n      // populate remote participants, these should not trigger new events\n      this.handleParticipantUpdates([pi, ...joinResponse.otherParticipants]);\n      if (joinResponse.room) {\n        this.handleRoomUpdate(joinResponse.room);\n      }\n      if (this.options.e2ee && this.e2eeManager) {\n        this.e2eeManager.setSifTrailer(joinResponse.sifTrailer);\n      }\n    };\n    this.attemptConnection = (url, token, opts, abortController) => __awaiter(this, void 0, void 0, function* () {\n      var _d, _e;\n      if (this.state === ConnectionState.Reconnecting) {\n        livekitLogger.info('Reconnection attempt replaced by new connection attempt');\n        // make sure we close and recreate the existing engine in order to get rid of any potentially ongoing reconnection attempts\n        this.recreateEngine();\n      } else {\n        // create engine if previously disconnected\n        this.maybeCreateEngine();\n      }\n      if ((_d = this.regionUrlProvider) === null || _d === void 0 ? void 0 : _d.isCloud()) {\n        this.engine.setRegionUrlProvider(this.regionUrlProvider);\n      }\n      this.acquireAudioContext();\n      this.connOptions = Object.assign(Object.assign({}, roomConnectOptionDefaults), opts);\n      if (this.connOptions.rtcConfig) {\n        this.engine.rtcConfig = this.connOptions.rtcConfig;\n      }\n      if (this.connOptions.peerConnectionTimeout) {\n        this.engine.peerConnectionTimeout = this.connOptions.peerConnectionTimeout;\n      }\n      try {\n        const joinResponse = yield this.connectSignal(url, token, this.engine, this.connOptions, this.options, abortController);\n        this.applyJoinResponse(joinResponse);\n        // forward metadata changed for the local participant\n        this.setupLocalParticipantEvents();\n        this.emit(RoomEvent.SignalConnected);\n      } catch (err) {\n        yield this.engine.close();\n        this.recreateEngine();\n        const resultingError = new ConnectionError(\"could not establish signal connection\");\n        if (err instanceof Error) {\n          resultingError.message = \"\".concat(resultingError.message, \": \").concat(err.message);\n        }\n        if (err instanceof ConnectionError) {\n          resultingError.reason = err.reason;\n          resultingError.status = err.status;\n        }\n        livekitLogger.debug(\"error trying to establish signal connection\", {\n          error: err\n        });\n        throw resultingError;\n      }\n      if (abortController.signal.aborted) {\n        yield this.engine.close();\n        this.recreateEngine();\n        throw new ConnectionError(\"Connection attempt aborted\");\n      }\n      try {\n        yield this.engine.waitForPCInitialConnection(this.connOptions.peerConnectionTimeout, abortController);\n      } catch (e) {\n        yield this.engine.close();\n        this.recreateEngine();\n        throw e;\n      }\n      // also hook unload event\n      if (isWeb() && this.options.disconnectOnPageLeave) {\n        // capturing both 'pagehide' and 'beforeunload' to capture broadest set of browser behaviors\n        window.addEventListener('pagehide', this.onPageLeave);\n        window.addEventListener('beforeunload', this.onPageLeave);\n      }\n      if (isWeb()) {\n        document.addEventListener('freeze', this.onPageLeave);\n        (_e = navigator.mediaDevices) === null || _e === void 0 ? void 0 : _e.addEventListener('devicechange', this.handleDeviceChange);\n      }\n      this.setAndEmitConnectionState(ConnectionState.Connected);\n      this.emit(RoomEvent.Connected);\n      this.registerConnectionReconcile();\n    });\n    /**\n     * disconnects the room, emits [[RoomEvent.Disconnected]]\n     */\n    this.disconnect = function () {\n      let stopTracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return __awaiter(_this, void 0, void 0, function* () {\n        var _f, _g, _h, _j;\n        const unlock = yield this.disconnectLock.lock();\n        try {\n          if (this.state === ConnectionState.Disconnected) {\n            livekitLogger.debug('already disconnected');\n            return;\n          }\n          livekitLogger.info('disconnect from room', {\n            identity: this.localParticipant.identity\n          });\n          if (this.state === ConnectionState.Connecting || this.state === ConnectionState.Reconnecting) {\n            // try aborting pending connection attempt\n            livekitLogger.warn('abort connection attempt');\n            (_f = this.abortController) === null || _f === void 0 ? void 0 : _f.abort();\n            // in case the abort controller didn't manage to cancel the connection attempt, reject the connect promise explicitly\n            (_h = (_g = this.connectFuture) === null || _g === void 0 ? void 0 : _g.reject) === null || _h === void 0 ? void 0 : _h.call(_g, new ConnectionError('Client initiated disconnect'));\n            this.connectFuture = undefined;\n          }\n          // send leave\n          if ((_j = this.engine) === null || _j === void 0 ? void 0 : _j.client.isConnected) {\n            yield this.engine.client.sendLeave();\n          }\n          // close engine (also closes client)\n          if (this.engine) {\n            yield this.engine.close();\n          }\n          this.handleDisconnect(stopTracks, DisconnectReason.CLIENT_INITIATED);\n          /* @ts-ignore */\n          this.engine = undefined;\n        } finally {\n          unlock();\n        }\n      });\n    };\n    this.onPageLeave = () => __awaiter(this, void 0, void 0, function* () {\n      yield this.disconnect();\n    });\n    /**\n     * Browsers have different policies regarding audio playback. Most requiring\n     * some form of user interaction (click/tap/etc).\n     * In those cases, audio will be silent until a click/tap triggering one of the following\n     * - `startAudio`\n     * - `getUserMedia`\n     */\n    this.startAudio = () => __awaiter(this, void 0, void 0, function* () {\n      const elements = [];\n      const browser = getBrowser();\n      if (browser && browser.os === 'iOS') {\n        /**\n         * iOS blocks audio element playback if\n         * - user is not publishing audio themselves and\n         * - no other audio source is playing\n         *\n         * as a workaround, we create an audio element with an empty track, so that\n         * silent audio is always playing\n         */\n        const audioId = 'livekit-dummy-audio-el';\n        let dummyAudioEl = document.getElementById(audioId);\n        if (!dummyAudioEl) {\n          dummyAudioEl = document.createElement('audio');\n          dummyAudioEl.id = audioId;\n          dummyAudioEl.autoplay = true;\n          dummyAudioEl.hidden = true;\n          const track = getEmptyAudioStreamTrack();\n          track.enabled = true;\n          const stream = new MediaStream([track]);\n          dummyAudioEl.srcObject = stream;\n          document.addEventListener('visibilitychange', () => {\n            if (!dummyAudioEl) {\n              return;\n            }\n            // set the srcObject to null on page hide in order to prevent lock screen controls to show up for it\n            dummyAudioEl.srcObject = document.hidden ? null : stream;\n          });\n          document.body.append(dummyAudioEl);\n          this.once(RoomEvent.Disconnected, () => {\n            dummyAudioEl === null || dummyAudioEl === void 0 ? void 0 : dummyAudioEl.remove();\n          });\n        }\n        elements.push(dummyAudioEl);\n      }\n      this.participants.forEach(p => {\n        p.audioTracks.forEach(t => {\n          if (t.track) {\n            t.track.attachedElements.forEach(e => {\n              elements.push(e);\n            });\n          }\n        });\n      });\n      try {\n        yield Promise.all([this.acquireAudioContext(), ...elements.map(e => {\n          e.muted = false;\n          return e.play();\n        })]);\n        this.handleAudioPlaybackStarted();\n      } catch (err) {\n        this.handleAudioPlaybackFailed(err);\n        throw err;\n      }\n    });\n    this.handleRestarting = () => {\n      this.clearConnectionReconcile();\n      // also unwind existing participants & existing subscriptions\n      for (const p of this.participants.values()) {\n        this.handleParticipantDisconnected(p.sid, p);\n      }\n      if (this.setAndEmitConnectionState(ConnectionState.Reconnecting)) {\n        this.emit(RoomEvent.Reconnecting);\n      }\n    };\n    this.handleSignalRestarted = joinResponse => __awaiter(this, void 0, void 0, function* () {\n      livekitLogger.debug(\"signal reconnected to server\", {\n        region: joinResponse.serverRegion\n      });\n      this.cachedParticipantSids = [];\n      this.applyJoinResponse(joinResponse);\n      try {\n        // unpublish & republish tracks\n        const localPubs = [];\n        this.localParticipant.tracks.forEach(pub => {\n          if (pub.track) {\n            localPubs.push(pub);\n          }\n        });\n        yield Promise.all(localPubs.map(pub => __awaiter(this, void 0, void 0, function* () {\n          const track = pub.track;\n          this.localParticipant.unpublishTrack(track, false);\n          if (!track.isMuted) {\n            if ((track instanceof LocalAudioTrack || track instanceof LocalVideoTrack) && track.source !== Track.Source.ScreenShare && track.source !== Track.Source.ScreenShareAudio && !track.isUserProvided) {\n              // we need to restart the track before publishing, often a full reconnect\n              // is necessary because computer had gone to sleep.\n              livekitLogger.debug('restarting existing track', {\n                track: pub.trackSid\n              });\n              yield track.restartTrack();\n            }\n            livekitLogger.debug('publishing new track', {\n              track: pub.trackSid\n            });\n            yield this.localParticipant.publishTrack(track, pub.options);\n          }\n        })));\n      } catch (error) {\n        livekitLogger.error('error trying to re-publish tracks after reconnection', {\n          error\n        });\n      }\n      try {\n        yield this.engine.waitForRestarted();\n        livekitLogger.debug(\"fully reconnected to server\", {\n          region: joinResponse.serverRegion\n        });\n      } catch (_k) {\n        // reconnection failed, handleDisconnect is being invoked already, just return here\n        return;\n      }\n      this.setAndEmitConnectionState(ConnectionState.Connected);\n      this.emit(RoomEvent.Reconnected);\n      this.registerConnectionReconcile();\n      // emit participant connected events after connection has been re-established\n      this.participants.forEach(participant => {\n        this.emit(RoomEvent.ParticipantConnected, participant);\n      });\n    });\n    this.handleParticipantUpdates = participantInfos => {\n      // handle changes to participant state, and send events\n      participantInfos.forEach(info => {\n        if (info.identity === this.localParticipant.identity) {\n          this.localParticipant.updateInfo(info);\n          return;\n        }\n        // ensure identity <=> sid mapping\n        const sid = this.identityToSid.get(info.identity);\n        if (sid && sid !== info.sid) {\n          // sid had changed, need to remove previous participant\n          this.handleParticipantDisconnected(sid, this.participants.get(sid));\n        }\n        let remoteParticipant = this.participants.get(info.sid);\n        const isNewParticipant = !remoteParticipant;\n        // when it's disconnected, send updates\n        if (info.state === ParticipantInfo_State.DISCONNECTED) {\n          this.handleParticipantDisconnected(info.sid, remoteParticipant);\n        } else {\n          // create participant if doesn't exist\n          remoteParticipant = this.getOrCreateParticipant(info.sid, info);\n          if (!isNewParticipant) {\n            // just update, no events\n            remoteParticipant.updateInfo(info);\n          }\n        }\n      });\n    };\n    // updates are sent only when there's a change to speaker ordering\n    this.handleActiveSpeakersUpdate = speakers => {\n      const activeSpeakers = [];\n      const seenSids = {};\n      speakers.forEach(speaker => {\n        seenSids[speaker.sid] = true;\n        if (speaker.sid === this.localParticipant.sid) {\n          this.localParticipant.audioLevel = speaker.level;\n          this.localParticipant.setIsSpeaking(true);\n          activeSpeakers.push(this.localParticipant);\n        } else {\n          const p = this.participants.get(speaker.sid);\n          if (p) {\n            p.audioLevel = speaker.level;\n            p.setIsSpeaking(true);\n            activeSpeakers.push(p);\n          }\n        }\n      });\n      if (!seenSids[this.localParticipant.sid]) {\n        this.localParticipant.audioLevel = 0;\n        this.localParticipant.setIsSpeaking(false);\n      }\n      this.participants.forEach(p => {\n        if (!seenSids[p.sid]) {\n          p.audioLevel = 0;\n          p.setIsSpeaking(false);\n        }\n      });\n      this.activeSpeakers = activeSpeakers;\n      this.emitWhenConnected(RoomEvent.ActiveSpeakersChanged, activeSpeakers);\n    };\n    // process list of changed speakers\n    this.handleSpeakersChanged = speakerUpdates => {\n      const lastSpeakers = new Map();\n      this.activeSpeakers.forEach(p => {\n        lastSpeakers.set(p.sid, p);\n      });\n      speakerUpdates.forEach(speaker => {\n        let p = this.participants.get(speaker.sid);\n        if (speaker.sid === this.localParticipant.sid) {\n          p = this.localParticipant;\n        }\n        if (!p) {\n          return;\n        }\n        p.audioLevel = speaker.level;\n        p.setIsSpeaking(speaker.active);\n        if (speaker.active) {\n          lastSpeakers.set(speaker.sid, p);\n        } else {\n          lastSpeakers.delete(speaker.sid);\n        }\n      });\n      const activeSpeakers = Array.from(lastSpeakers.values());\n      activeSpeakers.sort((a, b) => b.audioLevel - a.audioLevel);\n      this.activeSpeakers = activeSpeakers;\n      this.emitWhenConnected(RoomEvent.ActiveSpeakersChanged, activeSpeakers);\n    };\n    this.handleStreamStateUpdate = streamStateUpdate => {\n      streamStateUpdate.streamStates.forEach(streamState => {\n        const participant = this.participants.get(streamState.participantSid);\n        if (!participant) {\n          return;\n        }\n        const pub = participant.getTrackPublication(streamState.trackSid);\n        if (!pub || !pub.track) {\n          return;\n        }\n        pub.track.streamState = Track.streamStateFromProto(streamState.state);\n        participant.emit(ParticipantEvent.TrackStreamStateChanged, pub, pub.track.streamState);\n        this.emitWhenConnected(RoomEvent.TrackStreamStateChanged, pub, pub.track.streamState, participant);\n      });\n    };\n    this.handleSubscriptionPermissionUpdate = update => {\n      const participant = this.participants.get(update.participantSid);\n      if (!participant) {\n        return;\n      }\n      const pub = participant.getTrackPublication(update.trackSid);\n      if (!pub) {\n        return;\n      }\n      pub.setAllowed(update.allowed);\n    };\n    this.handleSubscriptionError = update => {\n      const participant = Array.from(this.participants.values()).find(p => p.tracks.has(update.trackSid));\n      if (!participant) {\n        return;\n      }\n      const pub = participant.getTrackPublication(update.trackSid);\n      if (!pub) {\n        return;\n      }\n      pub.setSubscriptionError(update.err);\n    };\n    this.handleDataPacket = (userPacket, kind) => {\n      // find the participant\n      const participant = this.participants.get(userPacket.participantSid);\n      this.emit(RoomEvent.DataReceived, userPacket.payload, participant, kind, userPacket.topic);\n      // also emit on the participant\n      participant === null || participant === void 0 ? void 0 : participant.emit(ParticipantEvent.DataReceived, userPacket.payload, kind);\n    };\n    this.handleAudioPlaybackStarted = () => {\n      if (this.canPlaybackAudio) {\n        return;\n      }\n      this.audioEnabled = true;\n      this.emit(RoomEvent.AudioPlaybackStatusChanged, true);\n    };\n    this.handleAudioPlaybackFailed = e => {\n      livekitLogger.warn('could not playback audio', e);\n      if (!this.canPlaybackAudio) {\n        return;\n      }\n      this.audioEnabled = false;\n      this.emit(RoomEvent.AudioPlaybackStatusChanged, false);\n    };\n    this.handleDeviceChange = () => __awaiter(this, void 0, void 0, function* () {\n      this.emit(RoomEvent.MediaDevicesChanged);\n    });\n    this.handleRoomUpdate = room => {\n      const oldRoom = this.roomInfo;\n      this.roomInfo = room;\n      if (oldRoom && oldRoom.metadata !== room.metadata) {\n        this.emitWhenConnected(RoomEvent.RoomMetadataChanged, room.metadata);\n      }\n      if ((oldRoom === null || oldRoom === void 0 ? void 0 : oldRoom.activeRecording) !== room.activeRecording) {\n        this.emitWhenConnected(RoomEvent.RecordingStatusChanged, room.activeRecording);\n      }\n    };\n    this.handleConnectionQualityUpdate = update => {\n      update.updates.forEach(info => {\n        if (info.participantSid === this.localParticipant.sid) {\n          this.localParticipant.setConnectionQuality(info.quality);\n          return;\n        }\n        const participant = this.participants.get(info.participantSid);\n        if (participant) {\n          participant.setConnectionQuality(info.quality);\n        }\n      });\n    };\n    this.onLocalParticipantMetadataChanged = metadata => {\n      this.emit(RoomEvent.ParticipantMetadataChanged, metadata, this.localParticipant);\n    };\n    this.onLocalParticipantNameChanged = name => {\n      this.emit(RoomEvent.ParticipantNameChanged, name, this.localParticipant);\n    };\n    this.onLocalTrackMuted = pub => {\n      this.emit(RoomEvent.TrackMuted, pub, this.localParticipant);\n    };\n    this.onLocalTrackUnmuted = pub => {\n      this.emit(RoomEvent.TrackUnmuted, pub, this.localParticipant);\n    };\n    this.onLocalTrackPublished = pub => __awaiter(this, void 0, void 0, function* () {\n      var _l;\n      this.emit(RoomEvent.LocalTrackPublished, pub, this.localParticipant);\n      if (pub.track instanceof LocalAudioTrack) {\n        const trackIsSilent = yield pub.track.checkForSilence();\n        if (trackIsSilent) {\n          this.emit(RoomEvent.LocalAudioSilenceDetected, pub);\n        }\n      }\n      const deviceId = yield (_l = pub.track) === null || _l === void 0 ? void 0 : _l.getDeviceId();\n      const deviceKind = sourceToKind(pub.source);\n      if (deviceKind && deviceId && deviceId !== this.localParticipant.activeDeviceMap.get(deviceKind)) {\n        this.localParticipant.activeDeviceMap.set(deviceKind, deviceId);\n        this.emit(RoomEvent.ActiveDeviceChanged, deviceKind, deviceId);\n      }\n    });\n    this.onLocalTrackUnpublished = pub => {\n      this.emit(RoomEvent.LocalTrackUnpublished, pub, this.localParticipant);\n    };\n    this.onLocalConnectionQualityChanged = quality => {\n      this.emit(RoomEvent.ConnectionQualityChanged, quality, this.localParticipant);\n    };\n    this.onMediaDevicesError = e => {\n      this.emit(RoomEvent.MediaDevicesError, e);\n    };\n    this.onLocalParticipantPermissionsChanged = prevPermissions => {\n      this.emit(RoomEvent.ParticipantPermissionsChanged, prevPermissions, this.localParticipant);\n    };\n    this.setMaxListeners(100);\n    this.participants = new Map();\n    this.cachedParticipantSids = [];\n    this.identityToSid = new Map();\n    this.options = Object.assign(Object.assign({}, roomOptionDefaults), options);\n    this.options.audioCaptureDefaults = Object.assign(Object.assign({}, audioDefaults), options === null || options === void 0 ? void 0 : options.audioCaptureDefaults);\n    this.options.videoCaptureDefaults = Object.assign(Object.assign({}, videoDefaults), options === null || options === void 0 ? void 0 : options.videoCaptureDefaults);\n    this.options.publishDefaults = Object.assign(Object.assign({}, publishDefaults), options === null || options === void 0 ? void 0 : options.publishDefaults);\n    this.maybeCreateEngine();\n    this.disconnectLock = new Mutex();\n    this.localParticipant = new LocalParticipant('', '', this.engine, this.options);\n    if (this.options.videoCaptureDefaults.deviceId) {\n      this.localParticipant.activeDeviceMap.set('videoinput', unwrapConstraint(this.options.videoCaptureDefaults.deviceId));\n    }\n    if (this.options.audioCaptureDefaults.deviceId) {\n      this.localParticipant.activeDeviceMap.set('audioinput', unwrapConstraint(this.options.audioCaptureDefaults.deviceId));\n    }\n    if ((_a = this.options.audioOutput) === null || _a === void 0 ? void 0 : _a.deviceId) {\n      this.switchActiveDevice('audiooutput', unwrapConstraint(this.options.audioOutput.deviceId));\n    }\n    if (this.options.e2ee) {\n      this.setupE2EE();\n    }\n  }\n  /**\n   * @experimental\n   */\n  setE2EEEnabled(enabled) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.e2eeManager) {\n        yield Promise.all([this.localParticipant.setE2EEEnabled(enabled)]);\n        if (this.localParticipant.identity !== '') {\n          this.e2eeManager.setParticipantCryptorEnabled(enabled, this.localParticipant.identity);\n        }\n      } else {\n        throw Error('e2ee not configured, please set e2ee settings within the room options');\n      }\n    });\n  }\n  setupE2EE() {\n    var _a;\n    if (this.options.e2ee) {\n      this.e2eeManager = new E2EEManager(this.options.e2ee);\n      this.e2eeManager.on(EncryptionEvent.ParticipantEncryptionStatusChanged, (enabled, participant) => {\n        if (participant instanceof LocalParticipant) {\n          this.isE2EEEnabled = enabled;\n        }\n        this.emit(RoomEvent.ParticipantEncryptionStatusChanged, enabled, participant);\n      });\n      this.e2eeManager.on(EncryptionEvent.EncryptionError, error => this.emit(RoomEvent.EncryptionError, error));\n      (_a = this.e2eeManager) === null || _a === void 0 ? void 0 : _a.setup(this);\n    }\n  }\n  /**\n   * if the current room has a participant with `recorder: true` in its JWT grant\n   **/\n  get isRecording() {\n    var _a, _b;\n    return (_b = (_a = this.roomInfo) === null || _a === void 0 ? void 0 : _a.activeRecording) !== null && _b !== void 0 ? _b : false;\n  }\n  /** server assigned unique room id */\n  get sid() {\n    var _a, _b;\n    return (_b = (_a = this.roomInfo) === null || _a === void 0 ? void 0 : _a.sid) !== null && _b !== void 0 ? _b : '';\n  }\n  /** user assigned name, derived from JWT token */\n  get name() {\n    var _a, _b;\n    return (_b = (_a = this.roomInfo) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : '';\n  }\n  /** room metadata */\n  get metadata() {\n    var _a;\n    return (_a = this.roomInfo) === null || _a === void 0 ? void 0 : _a.metadata;\n  }\n  get numParticipants() {\n    var _a, _b;\n    return (_b = (_a = this.roomInfo) === null || _a === void 0 ? void 0 : _a.numParticipants) !== null && _b !== void 0 ? _b : 0;\n  }\n  get numPublishers() {\n    var _a, _b;\n    return (_b = (_a = this.roomInfo) === null || _a === void 0 ? void 0 : _a.numPublishers) !== null && _b !== void 0 ? _b : 0;\n  }\n  maybeCreateEngine() {\n    if (this.engine && !this.engine.isClosed) {\n      return;\n    }\n    this.engine = new RTCEngine(this.options);\n    this.engine.on(EngineEvent.ParticipantUpdate, this.handleParticipantUpdates).on(EngineEvent.RoomUpdate, this.handleRoomUpdate).on(EngineEvent.SpeakersChanged, this.handleSpeakersChanged).on(EngineEvent.StreamStateChanged, this.handleStreamStateUpdate).on(EngineEvent.ConnectionQualityUpdate, this.handleConnectionQualityUpdate).on(EngineEvent.SubscriptionError, this.handleSubscriptionError).on(EngineEvent.SubscriptionPermissionUpdate, this.handleSubscriptionPermissionUpdate).on(EngineEvent.MediaTrackAdded, (mediaTrack, stream, receiver) => {\n      this.onTrackAdded(mediaTrack, stream, receiver);\n    }).on(EngineEvent.Disconnected, reason => {\n      this.handleDisconnect(this.options.stopLocalTrackOnUnpublish, reason);\n    }).on(EngineEvent.ActiveSpeakersUpdate, this.handleActiveSpeakersUpdate).on(EngineEvent.DataPacketReceived, this.handleDataPacket).on(EngineEvent.Resuming, () => {\n      this.clearConnectionReconcile();\n      if (this.setAndEmitConnectionState(ConnectionState.Reconnecting)) {\n        this.emit(RoomEvent.Reconnecting);\n      }\n      this.cachedParticipantSids = Array.from(this.participants.keys());\n    }).on(EngineEvent.Resumed, () => {\n      this.setAndEmitConnectionState(ConnectionState.Connected);\n      this.emit(RoomEvent.Reconnected);\n      this.registerConnectionReconcile();\n      this.updateSubscriptions();\n      // once reconnected, figure out if any participants connected during reconnect and emit events for it\n      const diffParticipants = Array.from(this.participants.values()).filter(p => !this.cachedParticipantSids.includes(p.sid));\n      diffParticipants.forEach(p => this.emit(RoomEvent.ParticipantConnected, p));\n      this.cachedParticipantSids = [];\n    }).on(EngineEvent.SignalResumed, () => {\n      if (this.state === ConnectionState.Reconnecting) {\n        this.sendSyncState();\n      }\n    }).on(EngineEvent.Restarting, this.handleRestarting).on(EngineEvent.SignalRestarted, this.handleSignalRestarted).on(EngineEvent.DCBufferStatusChanged, (status, kind) => {\n      this.emit(RoomEvent.DCBufferStatusChanged, status, kind);\n    });\n    if (this.localParticipant) {\n      this.localParticipant.setupEngine(this.engine);\n    }\n    if (this.e2eeManager) {\n      this.e2eeManager.setupEngine(this.engine);\n    }\n  }\n  /**\n   * getLocalDevices abstracts navigator.mediaDevices.enumerateDevices.\n   * In particular, it handles Chrome's unique behavior of creating `default`\n   * devices. When encountered, it'll be removed from the list of devices.\n   * The actual default device will be placed at top.\n   * @param kind\n   * @returns a list of available local devices\n   */\n  static getLocalDevices(kind) {\n    let requestPermissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return DeviceManager.getInstance().getDevices(kind, requestPermissions);\n  }\n  /**\n   * prepareConnection should be called as soon as the page is loaded, in order\n   * to speed up the connection attempt. This function will\n   * - perform DNS resolution and pre-warm the DNS cache\n   * - establish TLS connection and cache TLS keys\n   *\n   * With LiveKit Cloud, it will also determine the best edge data center for\n   * the current client to connect to if a token is provided.\n   */\n  prepareConnection(url, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.state !== ConnectionState.Disconnected) {\n        return;\n      }\n      livekitLogger.debug(\"prepareConnection to \".concat(url));\n      try {\n        if (isCloud(new URL(url)) && token) {\n          this.regionUrlProvider = new RegionUrlProvider(url, token);\n          const regionUrl = yield this.regionUrlProvider.getNextBestRegionUrl();\n          // we will not replace the regionUrl if an attempt had already started\n          // to avoid overriding regionUrl after a new connection attempt had started\n          if (regionUrl && this.state === ConnectionState.Disconnected) {\n            this.regionUrl = regionUrl;\n            yield fetch(toHttpUrl(regionUrl), {\n              method: 'HEAD'\n            });\n            livekitLogger.debug(\"prepared connection to \".concat(regionUrl));\n          }\n        } else {\n          yield fetch(toHttpUrl(url), {\n            method: 'HEAD'\n          });\n        }\n      } catch (e) {\n        livekitLogger.warn('could not prepare connection', {\n          error: e\n        });\n      }\n    });\n  }\n  /**\n   * retrieves a participant by identity\n   * @param identity\n   * @returns\n   */\n  getParticipantByIdentity(identity) {\n    if (this.localParticipant.identity === identity) {\n      return this.localParticipant;\n    }\n    const sid = this.identityToSid.get(identity);\n    if (sid) {\n      return this.participants.get(sid);\n    }\n  }\n  clearConnectionFutures() {\n    this.connectFuture = undefined;\n  }\n  /**\n   * @internal for testing\n   */\n  simulateScenario(scenario, arg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let postAction = () => {};\n      let req;\n      switch (scenario) {\n        case 'signal-reconnect':\n          // @ts-expect-error function is private\n          yield this.engine.client.handleOnClose('simulate disconnect');\n          break;\n        case 'speaker':\n          req = new SimulateScenario({\n            scenario: {\n              case: 'speakerUpdate',\n              value: 3\n            }\n          });\n          break;\n        case 'node-failure':\n          req = new SimulateScenario({\n            scenario: {\n              case: 'nodeFailure',\n              value: true\n            }\n          });\n          break;\n        case 'server-leave':\n          req = new SimulateScenario({\n            scenario: {\n              case: 'serverLeave',\n              value: true\n            }\n          });\n          break;\n        case 'migration':\n          req = new SimulateScenario({\n            scenario: {\n              case: 'migration',\n              value: true\n            }\n          });\n          break;\n        case 'resume-reconnect':\n          this.engine.failNext();\n          // @ts-expect-error function is private\n          yield this.engine.client.handleOnClose('simulate resume-disconnect');\n          break;\n        case 'full-reconnect':\n          this.engine.fullReconnectOnNext = true;\n          // @ts-expect-error function is private\n          yield this.engine.client.handleOnClose('simulate full-reconnect');\n          break;\n        case 'force-tcp':\n        case 'force-tls':\n          req = new SimulateScenario({\n            scenario: {\n              case: 'switchCandidateProtocol',\n              value: scenario === 'force-tls' ? 2 : 1\n            }\n          });\n          postAction = () => __awaiter(this, void 0, void 0, function* () {\n            const onLeave = this.engine.client.onLeave;\n            if (onLeave) {\n              onLeave(new LeaveRequest({\n                reason: DisconnectReason.CLIENT_INITIATED,\n                canReconnect: true\n              }));\n            }\n          });\n          break;\n        case 'subscriber-bandwidth':\n          if (arg === undefined || typeof arg !== 'number') {\n            throw new Error('subscriber-bandwidth requires a number as argument');\n          }\n          req = new SimulateScenario({\n            scenario: {\n              case: 'subscriberBandwidth',\n              value: BigInt(arg)\n            }\n          });\n          break;\n      }\n      if (req) {\n        this.engine.client.sendSimulateScenario(req);\n        postAction();\n      }\n    });\n  }\n  /**\n   * Returns true if audio playback is enabled\n   */\n  get canPlaybackAudio() {\n    return this.audioEnabled;\n  }\n  /**\n   * Returns the active audio output device used in this room.\n   * @return the previously successfully set audio output device ID or an empty string if the default device is used.\n   * @deprecated use `getActiveDevice('audiooutput')` instead\n   */\n  getActiveAudioOutputDevice() {\n    var _a, _b;\n    return (_b = (_a = this.options.audioOutput) === null || _a === void 0 ? void 0 : _a.deviceId) !== null && _b !== void 0 ? _b : '';\n  }\n  getActiveDevice(kind) {\n    return this.localParticipant.activeDeviceMap.get(kind);\n  }\n  /**\n   * Switches all active devices used in this room to the given device.\n   *\n   * Note: setting AudioOutput is not supported on some browsers. See [setSinkId](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId#browser_compatibility)\n   *\n   * @param kind use `videoinput` for camera track,\n   *  `audioinput` for microphone track,\n   *  `audiooutput` to set speaker for all incoming audio tracks\n   * @param deviceId\n   */\n  switchActiveDevice(kind, deviceId) {\n    let exact = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var _a, _b;\n    var _c;\n    return __awaiter(this, void 0, void 0, function* () {\n      let deviceHasChanged = false;\n      let success = true;\n      const deviceConstraint = exact ? {\n        exact: deviceId\n      } : deviceId;\n      if (kind === 'audioinput') {\n        const prevDeviceId = this.options.audioCaptureDefaults.deviceId;\n        this.options.audioCaptureDefaults.deviceId = deviceConstraint;\n        deviceHasChanged = prevDeviceId !== deviceConstraint;\n        const tracks = Array.from(this.localParticipant.audioTracks.values()).filter(track => track.source === Track.Source.Microphone);\n        try {\n          success = (yield Promise.all(tracks.map(t => {\n            var _a;\n            return (_a = t.audioTrack) === null || _a === void 0 ? void 0 : _a.setDeviceId(deviceConstraint);\n          }))).every(val => val === true);\n        } catch (e) {\n          this.options.audioCaptureDefaults.deviceId = prevDeviceId;\n          throw e;\n        }\n      } else if (kind === 'videoinput') {\n        const prevDeviceId = this.options.videoCaptureDefaults.deviceId;\n        this.options.videoCaptureDefaults.deviceId = deviceConstraint;\n        deviceHasChanged = prevDeviceId !== deviceConstraint;\n        const tracks = Array.from(this.localParticipant.videoTracks.values()).filter(track => track.source === Track.Source.Camera);\n        try {\n          success = (yield Promise.all(tracks.map(t => {\n            var _a;\n            return (_a = t.videoTrack) === null || _a === void 0 ? void 0 : _a.setDeviceId(deviceConstraint);\n          }))).every(val => val === true);\n        } catch (e) {\n          this.options.videoCaptureDefaults.deviceId = prevDeviceId;\n          throw e;\n        }\n      } else if (kind === 'audiooutput') {\n        if (!supportsSetSinkId() && !this.options.expWebAudioMix || this.options.expWebAudioMix && this.audioContext && !('setSinkId' in this.audioContext)) {\n          throw new Error('cannot switch audio output, setSinkId not supported');\n        }\n        (_a = (_c = this.options).audioOutput) !== null && _a !== void 0 ? _a : _c.audioOutput = {};\n        const prevDeviceId = this.options.audioOutput.deviceId;\n        this.options.audioOutput.deviceId = deviceId;\n        deviceHasChanged = prevDeviceId !== deviceConstraint;\n        try {\n          if (this.options.expWebAudioMix) {\n            // @ts-expect-error setSinkId is not yet in the typescript type of AudioContext\n            (_b = this.audioContext) === null || _b === void 0 ? void 0 : _b.setSinkId(deviceId);\n          } else {\n            yield Promise.all(Array.from(this.participants.values()).map(p => p.setAudioOutput({\n              deviceId\n            })));\n          }\n        } catch (e) {\n          this.options.audioOutput.deviceId = prevDeviceId;\n          throw e;\n        }\n      }\n      if (deviceHasChanged && success) {\n        this.localParticipant.activeDeviceMap.set(kind, deviceId);\n        this.emit(RoomEvent.ActiveDeviceChanged, kind, deviceId);\n      }\n      return success;\n    });\n  }\n  setupLocalParticipantEvents() {\n    this.localParticipant.on(ParticipantEvent.ParticipantMetadataChanged, this.onLocalParticipantMetadataChanged).on(ParticipantEvent.ParticipantNameChanged, this.onLocalParticipantNameChanged).on(ParticipantEvent.TrackMuted, this.onLocalTrackMuted).on(ParticipantEvent.TrackUnmuted, this.onLocalTrackUnmuted).on(ParticipantEvent.LocalTrackPublished, this.onLocalTrackPublished).on(ParticipantEvent.LocalTrackUnpublished, this.onLocalTrackUnpublished).on(ParticipantEvent.ConnectionQualityChanged, this.onLocalConnectionQualityChanged).on(ParticipantEvent.MediaDevicesError, this.onMediaDevicesError).on(ParticipantEvent.AudioStreamAcquired, this.startAudio).on(ParticipantEvent.ParticipantPermissionsChanged, this.onLocalParticipantPermissionsChanged);\n  }\n  recreateEngine() {\n    var _a;\n    (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n    /* @ts-ignore */\n    this.engine = undefined;\n    // clear out existing remote participants, since they may have attached\n    // the old engine\n    this.participants.clear();\n    this.maybeCreateEngine();\n  }\n  onTrackAdded(mediaTrack, stream, receiver) {\n    // don't fire onSubscribed when connecting\n    // WebRTC fires onTrack as soon as setRemoteDescription is called on the offer\n    // at that time, ICE connectivity has not been established so the track is not\n    // technically subscribed.\n    // We'll defer these events until when the room is connected or eventually disconnected.\n    if (this.state === ConnectionState.Connecting || this.state === ConnectionState.Reconnecting) {\n      const reconnectedHandler = () => {\n        this.onTrackAdded(mediaTrack, stream, receiver);\n        cleanup();\n      };\n      const cleanup = () => {\n        this.off(RoomEvent.Reconnected, reconnectedHandler);\n        this.off(RoomEvent.Connected, reconnectedHandler);\n        this.off(RoomEvent.Disconnected, cleanup);\n      };\n      this.once(RoomEvent.Reconnected, reconnectedHandler);\n      this.once(RoomEvent.Connected, reconnectedHandler);\n      this.once(RoomEvent.Disconnected, cleanup);\n      return;\n    }\n    if (this.state === ConnectionState.Disconnected) {\n      livekitLogger.warn('skipping incoming track after Room disconnected');\n      return;\n    }\n    const parts = unpackStreamId(stream.id);\n    const participantId = parts[0];\n    let streamId = parts[1];\n    let trackId = mediaTrack.id;\n    // firefox will get streamId (pID|trackId) instead of (pID|streamId) as it doesn't support sync tracks by stream\n    // and generates its own track id instead of infer from sdp track id.\n    if (streamId && streamId.startsWith('TR')) trackId = streamId;\n    if (participantId === this.localParticipant.sid) {\n      livekitLogger.warn('tried to create RemoteParticipant for local participant');\n      return;\n    }\n    const participant = this.participants.get(participantId);\n    if (!participant) {\n      livekitLogger.error(\"Tried to add a track for a participant, that's not present. Sid: \".concat(participantId));\n      return;\n    }\n    let adaptiveStreamSettings;\n    if (this.options.adaptiveStream) {\n      if (typeof this.options.adaptiveStream === 'object') {\n        adaptiveStreamSettings = this.options.adaptiveStream;\n      } else {\n        adaptiveStreamSettings = {};\n      }\n    }\n    participant.addSubscribedMediaTrack(mediaTrack, trackId, stream, receiver, adaptiveStreamSettings);\n  }\n  handleDisconnect() {\n    let shouldStopTracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let reason = arguments.length > 1 ? arguments[1] : undefined;\n    var _a;\n    this.clearConnectionReconcile();\n    if (this.state === ConnectionState.Disconnected) {\n      return;\n    }\n    this.regionUrl = undefined;\n    try {\n      this.participants.forEach(p => {\n        p.tracks.forEach(pub => {\n          p.unpublishTrack(pub.trackSid);\n        });\n      });\n      this.localParticipant.tracks.forEach(pub => {\n        var _a, _b;\n        if (pub.track) {\n          this.localParticipant.unpublishTrack(pub.track, shouldStopTracks);\n        }\n        if (shouldStopTracks) {\n          (_a = pub.track) === null || _a === void 0 ? void 0 : _a.detach();\n          (_b = pub.track) === null || _b === void 0 ? void 0 : _b.stop();\n        }\n      });\n      this.localParticipant.off(ParticipantEvent.ParticipantMetadataChanged, this.onLocalParticipantMetadataChanged).off(ParticipantEvent.ParticipantNameChanged, this.onLocalParticipantNameChanged).off(ParticipantEvent.TrackMuted, this.onLocalTrackMuted).off(ParticipantEvent.TrackUnmuted, this.onLocalTrackUnmuted).off(ParticipantEvent.LocalTrackPublished, this.onLocalTrackPublished).off(ParticipantEvent.LocalTrackUnpublished, this.onLocalTrackUnpublished).off(ParticipantEvent.ConnectionQualityChanged, this.onLocalConnectionQualityChanged).off(ParticipantEvent.MediaDevicesError, this.onMediaDevicesError).off(ParticipantEvent.AudioStreamAcquired, this.startAudio).off(ParticipantEvent.ParticipantPermissionsChanged, this.onLocalParticipantPermissionsChanged);\n      this.localParticipant.tracks.clear();\n      this.localParticipant.videoTracks.clear();\n      this.localParticipant.audioTracks.clear();\n      this.participants.clear();\n      this.activeSpeakers = [];\n      if (this.audioContext && typeof this.options.expWebAudioMix === 'boolean') {\n        this.audioContext.close();\n        this.audioContext = undefined;\n      }\n      if (isWeb()) {\n        window.removeEventListener('beforeunload', this.onPageLeave);\n        window.removeEventListener('pagehide', this.onPageLeave);\n        window.removeEventListener('freeze', this.onPageLeave);\n        (_a = navigator.mediaDevices) === null || _a === void 0 ? void 0 : _a.removeEventListener('devicechange', this.handleDeviceChange);\n      }\n    } finally {\n      this.setAndEmitConnectionState(ConnectionState.Disconnected);\n      this.emit(RoomEvent.Disconnected, reason);\n    }\n  }\n  handleParticipantDisconnected(sid, participant) {\n    // remove and send event\n    this.participants.delete(sid);\n    if (!participant) {\n      return;\n    }\n    this.identityToSid.delete(participant.identity);\n    participant.tracks.forEach(publication => {\n      participant.unpublishTrack(publication.trackSid, true);\n    });\n    this.emit(RoomEvent.ParticipantDisconnected, participant);\n  }\n  acquireAudioContext() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof this.options.expWebAudioMix !== 'boolean' && this.options.expWebAudioMix.audioContext) {\n        // override audio context with custom audio context if supplied by user\n        this.audioContext = this.options.expWebAudioMix.audioContext;\n      } else if (!this.audioContext || this.audioContext.state === 'closed') {\n        // by using an AudioContext, it reduces lag on audio elements\n        // https://stackoverflow.com/questions/9811429/html5-audio-tag-on-safari-has-a-delay/54119854#54119854\n        this.audioContext = (_a = getNewAudioContext()) !== null && _a !== void 0 ? _a : undefined;\n      }\n      if (this.audioContext && this.audioContext.state === 'suspended') {\n        // for iOS a newly created AudioContext is always in `suspended` state.\n        // we try our best to resume the context here, if that doesn't work, we just continue with regular processing\n        try {\n          yield this.audioContext.resume();\n        } catch (e) {\n          livekitLogger.warn(e);\n        }\n      }\n      if (this.options.expWebAudioMix) {\n        this.participants.forEach(participant => participant.setAudioContext(this.audioContext));\n      }\n      this.localParticipant.setAudioContext(this.audioContext);\n      const newContextIsRunning = ((_b = this.audioContext) === null || _b === void 0 ? void 0 : _b.state) === 'running';\n      if (newContextIsRunning !== this.canPlaybackAudio) {\n        this.audioEnabled = newContextIsRunning;\n        this.emit(RoomEvent.AudioPlaybackStatusChanged, newContextIsRunning);\n      }\n    });\n  }\n  createParticipant(id, info) {\n    let participant;\n    if (info) {\n      participant = RemoteParticipant.fromParticipantInfo(this.engine.client, info);\n    } else {\n      participant = new RemoteParticipant(this.engine.client, id, '', undefined, undefined);\n    }\n    if (this.options.expWebAudioMix) {\n      participant.setAudioContext(this.audioContext);\n    }\n    return participant;\n  }\n  getOrCreateParticipant(id, info) {\n    if (this.participants.has(id)) {\n      return this.participants.get(id);\n    }\n    const participant = this.createParticipant(id, info);\n    this.participants.set(id, participant);\n    this.identityToSid.set(info.identity, info.sid);\n    // if we have valid info and the participant wasn't in the map before, we can assume the participant is new\n    // firing here to make sure that `ParticipantConnected` fires before the initial track events\n    this.emitWhenConnected(RoomEvent.ParticipantConnected, participant);\n    // also forward events\n    // trackPublished is only fired for tracks added after both local participant\n    // and remote participant joined the room\n    participant.on(ParticipantEvent.TrackPublished, trackPublication => {\n      this.emitWhenConnected(RoomEvent.TrackPublished, trackPublication, participant);\n    }).on(ParticipantEvent.TrackSubscribed, (track, publication) => {\n      // monitor playback status\n      if (track.kind === Track.Kind.Audio) {\n        track.on(TrackEvent.AudioPlaybackStarted, this.handleAudioPlaybackStarted);\n        track.on(TrackEvent.AudioPlaybackFailed, this.handleAudioPlaybackFailed);\n      }\n      this.emit(RoomEvent.TrackSubscribed, track, publication, participant);\n    }).on(ParticipantEvent.TrackUnpublished, publication => {\n      this.emit(RoomEvent.TrackUnpublished, publication, participant);\n    }).on(ParticipantEvent.TrackUnsubscribed, (track, publication) => {\n      this.emit(RoomEvent.TrackUnsubscribed, track, publication, participant);\n    }).on(ParticipantEvent.TrackSubscriptionFailed, sid => {\n      this.emit(RoomEvent.TrackSubscriptionFailed, sid, participant);\n    }).on(ParticipantEvent.TrackMuted, pub => {\n      this.emitWhenConnected(RoomEvent.TrackMuted, pub, participant);\n    }).on(ParticipantEvent.TrackUnmuted, pub => {\n      this.emitWhenConnected(RoomEvent.TrackUnmuted, pub, participant);\n    }).on(ParticipantEvent.ParticipantMetadataChanged, metadata => {\n      this.emitWhenConnected(RoomEvent.ParticipantMetadataChanged, metadata, participant);\n    }).on(ParticipantEvent.ParticipantNameChanged, name => {\n      this.emitWhenConnected(RoomEvent.ParticipantNameChanged, name, participant);\n    }).on(ParticipantEvent.ConnectionQualityChanged, quality => {\n      this.emitWhenConnected(RoomEvent.ConnectionQualityChanged, quality, participant);\n    }).on(ParticipantEvent.ParticipantPermissionsChanged, prevPermissions => {\n      this.emitWhenConnected(RoomEvent.ParticipantPermissionsChanged, prevPermissions, participant);\n    }).on(ParticipantEvent.TrackSubscriptionStatusChanged, (pub, status) => {\n      this.emitWhenConnected(RoomEvent.TrackSubscriptionStatusChanged, pub, status, participant);\n    }).on(ParticipantEvent.TrackSubscriptionFailed, (trackSid, error) => {\n      this.emit(RoomEvent.TrackSubscriptionFailed, trackSid, participant, error);\n    }).on(ParticipantEvent.TrackSubscriptionPermissionChanged, (pub, status) => {\n      this.emitWhenConnected(RoomEvent.TrackSubscriptionPermissionChanged, pub, status, participant);\n    });\n    // update info at the end after callbacks have been set up\n    if (info) {\n      participant.updateInfo(info);\n    }\n    return participant;\n  }\n  sendSyncState() {\n    var _a, _b, _c, _d;\n    const previousAnswer = (_a = this.engine.subscriber) === null || _a === void 0 ? void 0 : _a.getLocalDescription();\n    const previousOffer = (_b = this.engine.subscriber) === null || _b === void 0 ? void 0 : _b.getRemoteDescription();\n    if (!previousAnswer) {\n      return;\n    }\n    /* 1. autosubscribe on, so subscribed tracks = all tracks - unsub tracks,\n          in this case, we send unsub tracks, so server add all tracks to this\n          subscribe pc and unsub special tracks from it.\n       2. autosubscribe off, we send subscribed tracks.\n    */\n    const autoSubscribe = (_d = (_c = this.connOptions) === null || _c === void 0 ? void 0 : _c.autoSubscribe) !== null && _d !== void 0 ? _d : true;\n    const trackSids = new Array();\n    this.participants.forEach(participant => {\n      participant.tracks.forEach(track => {\n        if (track.isDesired !== autoSubscribe) {\n          trackSids.push(track.trackSid);\n        }\n      });\n    });\n    this.engine.client.sendSyncState(new SyncState({\n      answer: toProtoSessionDescription({\n        sdp: previousAnswer.sdp,\n        type: previousAnswer.type\n      }),\n      offer: previousOffer ? toProtoSessionDescription({\n        sdp: previousOffer.sdp,\n        type: previousOffer.type\n      }) : undefined,\n      subscription: new UpdateSubscription({\n        trackSids,\n        subscribe: !autoSubscribe,\n        participantTracks: []\n      }),\n      publishTracks: this.localParticipant.publishedTracksInfo(),\n      dataChannels: this.localParticipant.dataChannelsInfo()\n    }));\n  }\n  /**\n   * After resuming, we'll need to notify the server of the current\n   * subscription settings.\n   */\n  updateSubscriptions() {\n    for (const p of this.participants.values()) {\n      for (const pub of p.videoTracks.values()) {\n        if (pub.isSubscribed && pub instanceof RemoteTrackPublication) {\n          pub.emitTrackUpdate();\n        }\n      }\n    }\n  }\n  registerConnectionReconcile() {\n    this.clearConnectionReconcile();\n    let consecutiveFailures = 0;\n    this.connectionReconcileInterval = CriticalTimers.setInterval(() => {\n      if (\n      // ensure we didn't tear it down\n      !this.engine ||\n      // engine detected close, but Room missed it\n      this.engine.isClosed ||\n      // transports failed without notifying engine\n      !this.engine.verifyTransport()) {\n        consecutiveFailures++;\n        livekitLogger.warn('detected connection state mismatch', {\n          numFailures: consecutiveFailures\n        });\n        if (consecutiveFailures >= 3) {\n          this.recreateEngine();\n          this.handleDisconnect(this.options.stopLocalTrackOnUnpublish, DisconnectReason.STATE_MISMATCH);\n        }\n      } else {\n        consecutiveFailures = 0;\n      }\n    }, connectionReconcileFrequency);\n  }\n  clearConnectionReconcile() {\n    if (this.connectionReconcileInterval) {\n      CriticalTimers.clearInterval(this.connectionReconcileInterval);\n    }\n  }\n  setAndEmitConnectionState(state) {\n    if (state === this.state) {\n      // unchanged\n      return false;\n    }\n    this.state = state;\n    this.emit(RoomEvent.ConnectionStateChanged, this.state);\n    return true;\n  }\n  emitWhenConnected(event) {\n    if (this.state === ConnectionState.Connected) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return this.emit(event, ...args);\n    }\n    return false;\n  }\n  /**\n   * Allows to populate a room with simulated participants.\n   * No actual connection to a server will be established, all state is\n   * @experimental\n   */\n  simulateParticipants(options) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      const publishOptions = Object.assign({\n        audio: true,\n        video: true,\n        useRealTracks: false\n      }, options.publish);\n      const participantOptions = Object.assign({\n        count: 9,\n        audio: false,\n        video: true,\n        aspectRatios: [1.66, 1.7, 1.3]\n      }, options.participants);\n      this.handleDisconnect();\n      this.roomInfo = new Room$1({\n        sid: 'RM_SIMULATED',\n        name: 'simulated-room',\n        emptyTimeout: 0,\n        maxParticipants: 0,\n        creationTime: protoInt64.parse(new Date().getTime()),\n        metadata: '',\n        numParticipants: 1,\n        numPublishers: 1,\n        turnPassword: '',\n        enabledCodecs: [],\n        activeRecording: false\n      });\n      this.localParticipant.updateInfo(new ParticipantInfo({\n        identity: 'simulated-local',\n        name: 'local-name'\n      }));\n      this.setupLocalParticipantEvents();\n      this.emit(RoomEvent.SignalConnected);\n      this.emit(RoomEvent.Connected);\n      this.setAndEmitConnectionState(ConnectionState.Connected);\n      if (publishOptions.video) {\n        const camPub = new LocalTrackPublication(Track.Kind.Video, new TrackInfo({\n          source: TrackSource.CAMERA,\n          sid: Math.floor(Math.random() * 10000).toString(),\n          type: TrackType.AUDIO,\n          name: 'video-dummy'\n        }), new LocalVideoTrack(publishOptions.useRealTracks ? (yield window.navigator.mediaDevices.getUserMedia({\n          video: true\n        })).getVideoTracks()[0] : createDummyVideoStreamTrack((_a = 160 * participantOptions.aspectRatios[0]) !== null && _a !== void 0 ? _a : 1, 160, true, true)));\n        // @ts-ignore\n        this.localParticipant.addTrackPublication(camPub);\n        this.localParticipant.emit(ParticipantEvent.LocalTrackPublished, camPub);\n      }\n      if (publishOptions.audio) {\n        const audioPub = new LocalTrackPublication(Track.Kind.Audio, new TrackInfo({\n          source: TrackSource.MICROPHONE,\n          sid: Math.floor(Math.random() * 10000).toString(),\n          type: TrackType.AUDIO\n        }), new LocalAudioTrack(publishOptions.useRealTracks ? (yield navigator.mediaDevices.getUserMedia({\n          audio: true\n        })).getAudioTracks()[0] : getEmptyAudioStreamTrack()));\n        // @ts-ignore\n        this.localParticipant.addTrackPublication(audioPub);\n        this.localParticipant.emit(ParticipantEvent.LocalTrackPublished, audioPub);\n      }\n      for (let i = 0; i < participantOptions.count - 1; i += 1) {\n        let info = new ParticipantInfo({\n          sid: Math.floor(Math.random() * 10000).toString(),\n          identity: \"simulated-\".concat(i),\n          state: ParticipantInfo_State.ACTIVE,\n          tracks: [],\n          joinedAt: protoInt64.parse(Date.now())\n        });\n        const p = this.getOrCreateParticipant(info.identity, info);\n        if (participantOptions.video) {\n          const dummyVideo = createDummyVideoStreamTrack((_b = 160 * participantOptions.aspectRatios[i % participantOptions.aspectRatios.length]) !== null && _b !== void 0 ? _b : 1, 160, false, true);\n          const videoTrack = new TrackInfo({\n            source: TrackSource.CAMERA,\n            sid: Math.floor(Math.random() * 10000).toString(),\n            type: TrackType.AUDIO\n          });\n          p.addSubscribedMediaTrack(dummyVideo, videoTrack.sid, new MediaStream([dummyVideo]));\n          info.tracks = [...info.tracks, videoTrack];\n        }\n        if (participantOptions.audio) {\n          const dummyTrack = getEmptyAudioStreamTrack();\n          const audioTrack = new TrackInfo({\n            source: TrackSource.MICROPHONE,\n            sid: Math.floor(Math.random() * 10000).toString(),\n            type: TrackType.AUDIO\n          });\n          p.addSubscribedMediaTrack(dummyTrack, audioTrack.sid, new MediaStream([dummyTrack]));\n          info.tracks = [...info.tracks, audioTrack];\n        }\n        p.updateInfo(info);\n      }\n    });\n  }\n  // /** @internal */\n  emit(event) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    // active speaker updates are too spammy\n    if (event !== RoomEvent.ActiveSpeakersChanged) {\n      livekitLogger.debug(\"room event \".concat(event), {\n        event,\n        args\n      });\n    }\n    return super.emit(event, ...args);\n  }\n}\n\nvar CheckStatus;\n(function (CheckStatus) {\n  CheckStatus[CheckStatus[\"IDLE\"] = 0] = \"IDLE\";\n  CheckStatus[CheckStatus[\"RUNNING\"] = 1] = \"RUNNING\";\n  CheckStatus[CheckStatus[\"SKIPPED\"] = 2] = \"SKIPPED\";\n  CheckStatus[CheckStatus[\"SUCCESS\"] = 3] = \"SUCCESS\";\n  CheckStatus[CheckStatus[\"FAILED\"] = 4] = \"FAILED\";\n})(CheckStatus || (CheckStatus = {}));\nclass Checker extends eventsExports.EventEmitter {\n  constructor(url, token) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    this.status = CheckStatus.IDLE;\n    this.logs = [];\n    this.errorsAsWarnings = false;\n    this.url = url;\n    this.token = token;\n    this.name = this.constructor.name;\n    this.room = new Room(options.roomOptions);\n    this.connectOptions = options.connectOptions;\n    if (options.errorsAsWarnings) {\n      this.errorsAsWarnings = options.errorsAsWarnings;\n    }\n  }\n  run(onComplete) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.status !== CheckStatus.IDLE) {\n        throw Error('check is running already');\n      }\n      this.setStatus(CheckStatus.RUNNING);\n      try {\n        yield this.perform();\n      } catch (err) {\n        if (err instanceof Error) {\n          if (this.errorsAsWarnings) {\n            this.appendWarning(err.message);\n          } else {\n            this.appendError(err.message);\n          }\n        }\n      }\n      yield this.disconnect();\n      // sleep for a bit to ensure disconnect\n      yield new Promise(resolve => setTimeout(resolve, 500));\n      // @ts-ignore\n      if (this.status !== CheckStatus.SKIPPED) {\n        this.setStatus(this.isSuccess() ? CheckStatus.SUCCESS : CheckStatus.FAILED);\n      }\n      if (onComplete) {\n        onComplete();\n      }\n      return this.getInfo();\n    });\n  }\n  isSuccess() {\n    return !this.logs.some(l => l.level === 'error');\n  }\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.room.state === ConnectionState.Connected) {\n        return this.room;\n      }\n      yield this.room.connect(this.url, this.token);\n      return this.room;\n    });\n  }\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.room && this.room.state !== ConnectionState.Disconnected) {\n        yield this.room.disconnect();\n        // wait for it to go through\n        yield new Promise(resolve => setTimeout(resolve, 500));\n      }\n    });\n  }\n  skip() {\n    this.setStatus(CheckStatus.SKIPPED);\n  }\n  appendMessage(message) {\n    this.logs.push({\n      level: 'info',\n      message\n    });\n    this.emit('update', this.getInfo());\n  }\n  appendWarning(message) {\n    this.logs.push({\n      level: 'warning',\n      message\n    });\n    this.emit('update', this.getInfo());\n  }\n  appendError(message) {\n    this.logs.push({\n      level: 'error',\n      message\n    });\n    this.emit('update', this.getInfo());\n  }\n  setStatus(status) {\n    this.status = status;\n    this.emit('update', this.getInfo());\n  }\n  get engine() {\n    var _a;\n    return (_a = this.room) === null || _a === void 0 ? void 0 : _a.engine;\n  }\n  getInfo() {\n    return {\n      logs: this.logs,\n      name: this.name,\n      status: this.status,\n      description: this.description\n    };\n  }\n}\n\n/**\n * Creates a local video and audio track at the same time. When acquiring both\n * audio and video tracks together, it'll display a single permission prompt to\n * the user instead of two separate ones.\n * @param options\n */\nfunction createLocalTracks(options) {\n  var _a, _b;\n  return __awaiter(this, void 0, void 0, function* () {\n    // set default options to true\n    options !== null && options !== void 0 ? options : options = {};\n    (_a = options.audio) !== null && _a !== void 0 ? _a : options.audio = true;\n    (_b = options.video) !== null && _b !== void 0 ? _b : options.video = true;\n    const opts = mergeDefaultOptions(options, audioDefaults, videoDefaults);\n    const constraints = constraintsForOptions(opts);\n    // Keep a reference to the promise on DeviceManager and await it in getLocalDevices()\n    // works around iOS Safari Bug https://bugs.webkit.org/show_bug.cgi?id=179363\n    const mediaPromise = navigator.mediaDevices.getUserMedia(constraints);\n    if (options.audio) {\n      DeviceManager.userMediaPromiseMap.set('audioinput', mediaPromise);\n      mediaPromise.catch(() => DeviceManager.userMediaPromiseMap.delete('audioinput'));\n    }\n    if (options.video) {\n      DeviceManager.userMediaPromiseMap.set('videoinput', mediaPromise);\n      mediaPromise.catch(() => DeviceManager.userMediaPromiseMap.delete('videoinput'));\n    }\n    const stream = yield mediaPromise;\n    return stream.getTracks().map(mediaStreamTrack => {\n      const isAudio = mediaStreamTrack.kind === 'audio';\n      isAudio ? options.audio : options.video;\n      let trackConstraints;\n      const conOrBool = isAudio ? constraints.audio : constraints.video;\n      if (typeof conOrBool !== 'boolean') {\n        trackConstraints = conOrBool;\n      }\n      // update the constraints with the device id the user gave permissions to in the permission prompt\n      // otherwise each track restart (e.g. mute - unmute) will try to initialize the device again -> causing additional permission prompts\n      if (trackConstraints) {\n        trackConstraints.deviceId = mediaStreamTrack.getSettings().deviceId;\n      } else {\n        trackConstraints = {\n          deviceId: mediaStreamTrack.getSettings().deviceId\n        };\n      }\n      const track = mediaTrackToLocalTrack(mediaStreamTrack, trackConstraints);\n      if (track.kind === Track.Kind.Video) {\n        track.source = Track.Source.Camera;\n      } else if (track.kind === Track.Kind.Audio) {\n        track.source = Track.Source.Microphone;\n      }\n      track.mediaStream = stream;\n      return track;\n    });\n  });\n}\n/**\n * Creates a [[LocalVideoTrack]] with getUserMedia()\n * @param options\n */\nfunction createLocalVideoTrack(options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const tracks = yield createLocalTracks({\n      audio: false,\n      video: options\n    });\n    return tracks[0];\n  });\n}\nfunction createLocalAudioTrack(options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const tracks = yield createLocalTracks({\n      audio: options,\n      video: false\n    });\n    return tracks[0];\n  });\n}\n/**\n * Creates a screen capture tracks with getDisplayMedia().\n * A LocalVideoTrack is always created and returned.\n * If { audio: true }, and the browser supports audio capture, a LocalAudioTrack is also created.\n */\nfunction createLocalScreenTracks(options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (options === undefined) {\n      options = {};\n    }\n    if (options.resolution === undefined) {\n      options.resolution = ScreenSharePresets.h1080fps15.resolution;\n    }\n    if (navigator.mediaDevices.getDisplayMedia === undefined) {\n      throw new DeviceUnsupportedError('getDisplayMedia not supported');\n    }\n    const constraints = screenCaptureToDisplayMediaStreamOptions(options);\n    const stream = yield navigator.mediaDevices.getDisplayMedia(constraints);\n    const tracks = stream.getVideoTracks();\n    if (tracks.length === 0) {\n      throw new TrackInvalidError('no video track found');\n    }\n    const screenVideo = new LocalVideoTrack(tracks[0], undefined, false);\n    screenVideo.source = Track.Source.ScreenShare;\n    const localTracks = [screenVideo];\n    if (stream.getAudioTracks().length > 0) {\n      const screenAudio = new LocalAudioTrack(stream.getAudioTracks()[0], undefined, false);\n      screenAudio.source = Track.Source.ScreenShareAudio;\n      localTracks.push(screenAudio);\n    }\n    return localTracks;\n  });\n}\n\nclass PublishAudioCheck extends Checker {\n  get description() {\n    return 'Can publish audio';\n  }\n  perform() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const room = yield this.connect();\n      const track = yield createLocalAudioTrack();\n      room.localParticipant.publishTrack(track);\n      // wait for a few seconds to publish\n      yield new Promise(resolve => setTimeout(resolve, 3000));\n      // verify RTC stats that it's publishing\n      const stats = yield (_a = track.sender) === null || _a === void 0 ? void 0 : _a.getStats();\n      if (!stats) {\n        throw new Error('Could not get RTCStats');\n      }\n      let numPackets = 0;\n      stats.forEach(stat => {\n        if (stat.type === 'outbound-rtp' && stat.mediaType === 'audio') {\n          numPackets = stat.packetsSent;\n        }\n      });\n      if (numPackets === 0) {\n        throw new Error('Could not determine packets are sent');\n      }\n      this.appendMessage(\"published \".concat(numPackets, \" audio packets\"));\n    });\n  }\n}\n\nclass PublishVideoCheck extends Checker {\n  get description() {\n    return 'Can publish video';\n  }\n  perform() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const room = yield this.connect();\n      const track = yield createLocalVideoTrack();\n      room.localParticipant.publishTrack(track);\n      // wait for a few seconds to publish\n      yield new Promise(resolve => setTimeout(resolve, 3000));\n      // verify RTC stats that it's publishing\n      const stats = yield (_a = track.sender) === null || _a === void 0 ? void 0 : _a.getStats();\n      if (!stats) {\n        throw new Error('Could not get RTCStats');\n      }\n      let numPackets = 0;\n      stats.forEach(stat => {\n        if (stat.type === 'outbound-rtp' && stat.mediaType === 'video') {\n          numPackets = stat.packetsSent;\n        }\n      });\n      if (numPackets === 0) {\n        throw new Error('Could not determine packets are sent');\n      }\n      this.appendMessage(\"published \".concat(numPackets, \" video packets\"));\n    });\n  }\n}\n\nclass ReconnectCheck extends Checker {\n  get description() {\n    return 'Resuming connection after interruption';\n  }\n  perform() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const room = yield this.connect();\n      let reconnectingTriggered = false;\n      let reconnected = false;\n      let reconnectResolver;\n      const reconnectTimeout = new Promise(resolve => {\n        setTimeout(resolve, 5000);\n        reconnectResolver = resolve;\n      });\n      room.on(RoomEvent.Reconnecting, () => {\n        reconnectingTriggered = true;\n      }).on(RoomEvent.Reconnected, () => {\n        reconnected = true;\n        reconnectResolver(true);\n      });\n      (_a = room.engine.client.ws) === null || _a === void 0 ? void 0 : _a.close();\n      const onClose = room.engine.client.onClose;\n      if (onClose) {\n        onClose('');\n      }\n      yield reconnectTimeout;\n      if (!reconnectingTriggered) {\n        throw new Error('Did not attempt to reconnect');\n      } else if (!reconnected || room.state !== ConnectionState.Connected) {\n        this.appendWarning('reconnection is only possible in Redis-based configurations');\n        throw new Error('Not able to reconnect');\n      }\n    });\n  }\n}\n\nclass TURNCheck extends Checker {\n  get description() {\n    return 'Can connect via TURN';\n  }\n  perform() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      const signalClient = new SignalClient();\n      const joinRes = yield signalClient.join(this.url, this.token, {\n        autoSubscribe: true,\n        maxRetries: 0,\n        e2eeEnabled: false,\n        websocketTimeout: 15000\n      });\n      let hasTLS = false;\n      let hasTURN = false;\n      let hasSTUN = false;\n      for (let iceServer of joinRes.iceServers) {\n        for (let url of iceServer.urls) {\n          if (url.startsWith('turn:')) {\n            hasTURN = true;\n            hasSTUN = true;\n          } else if (url.startsWith('turns:')) {\n            hasTURN = true;\n            hasSTUN = true;\n            hasTLS = true;\n          }\n          if (url.startsWith('stun:')) {\n            hasSTUN = true;\n          }\n        }\n      }\n      if (!hasSTUN) {\n        this.appendWarning('No STUN servers configured on server side.');\n      } else if (hasTURN && !hasTLS) {\n        this.appendWarning('TURN is configured server side, but TURN/TLS is unavailable.');\n      }\n      yield signalClient.close();\n      if (((_b = (_a = this.connectOptions) === null || _a === void 0 ? void 0 : _a.rtcConfig) === null || _b === void 0 ? void 0 : _b.iceServers) || hasTURN) {\n        yield this.room.connect(this.url, this.token, {\n          rtcConfig: {\n            iceTransportPolicy: 'relay'\n          }\n        });\n      } else {\n        this.appendWarning('No TURN servers configured.');\n        this.skip();\n        yield new Promise(resolve => setTimeout(resolve, 0));\n      }\n    });\n  }\n}\n\nclass WebRTCCheck extends Checker {\n  get description() {\n    return 'Establishing WebRTC connection';\n  }\n  perform() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let hasTcp = false;\n      let hasIpv4Udp = false;\n      this.room.on(RoomEvent.SignalConnected, () => {\n        const prevTrickle = this.room.engine.client.onTrickle;\n        this.room.engine.client.onTrickle = (sd, target) => {\n          if (sd.candidate) {\n            const candidate = new RTCIceCandidate(sd);\n            let str = \"\".concat(candidate.protocol, \" \").concat(candidate.address, \":\").concat(candidate.port, \" \").concat(candidate.type);\n            if (candidate.address) {\n              if (isIPPrivate(candidate.address)) {\n                str += ' (private)';\n              } else {\n                if (candidate.protocol === 'tcp' && candidate.tcpType === 'passive') {\n                  hasTcp = true;\n                  str += ' (passive)';\n                } else if (candidate.protocol === 'udp') {\n                  hasIpv4Udp = true;\n                }\n              }\n            }\n            this.appendMessage(str);\n          }\n          if (prevTrickle) {\n            prevTrickle(sd, target);\n          }\n        };\n        if (this.room.engine.subscriber) {\n          this.room.engine.subscriber.onIceCandidateError = ev => {\n            if (ev instanceof RTCPeerConnectionIceErrorEvent) {\n              this.appendWarning(\"error with ICE candidate: \".concat(ev.errorCode, \" \").concat(ev.errorText, \" \").concat(ev.url));\n            }\n          };\n        }\n      });\n      try {\n        yield this.connect();\n        livekitLogger.info('now the room is connected');\n      } catch (err) {\n        this.appendWarning('ports need to be open on firewall in order to connect.');\n        throw err;\n      }\n      if (!hasTcp) {\n        this.appendWarning('Server is not configured for ICE/TCP');\n      }\n      if (!hasIpv4Udp) {\n        this.appendWarning('No public IPv4 UDP candidates were found. Your server is likely not configured correctly');\n      }\n    });\n  }\n}\nfunction isIPPrivate(address) {\n  const parts = address.split('.');\n  if (parts.length === 4) {\n    if (parts[0] === '10') {\n      return true;\n    } else if (parts[0] === '192' && parts[1] === '168') {\n      return true;\n    } else if (parts[0] === '172') {\n      const second = parseInt(parts[1], 10);\n      if (second >= 16 && second <= 31) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nclass WebSocketCheck extends Checker {\n  get description() {\n    return 'Connecting to signal connection via WebSocket';\n  }\n  perform() {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.url.startsWith('ws:') || this.url.startsWith('http:')) {\n        this.appendWarning('Server is insecure, clients may block connections to it');\n      }\n      let signalClient = new SignalClient();\n      const joinRes = yield signalClient.join(this.url, this.token, {\n        autoSubscribe: true,\n        maxRetries: 0,\n        e2eeEnabled: false,\n        websocketTimeout: 15000\n      });\n      this.appendMessage(\"Connected to server, version \".concat(joinRes.serverVersion, \".\"));\n      if (((_a = joinRes.serverInfo) === null || _a === void 0 ? void 0 : _a.edition) === ServerInfo_Edition.Cloud && ((_b = joinRes.serverInfo) === null || _b === void 0 ? void 0 : _b.region)) {\n        this.appendMessage(\"LiveKit Cloud: \".concat((_c = joinRes.serverInfo) === null || _c === void 0 ? void 0 : _c.region));\n      }\n      yield signalClient.close();\n    });\n  }\n}\n\nclass ConnectionCheck extends eventsExports.EventEmitter {\n  constructor(url, token) {\n    super();\n    this.checkResults = new Map();\n    this.url = url;\n    this.token = token;\n  }\n  getNextCheckId() {\n    const nextId = this.checkResults.size;\n    this.checkResults.set(nextId, {\n      logs: [],\n      status: CheckStatus.IDLE,\n      name: '',\n      description: ''\n    });\n    return nextId;\n  }\n  updateCheck(checkId, info) {\n    this.checkResults.set(checkId, info);\n    this.emit('checkUpdate', checkId, info);\n  }\n  isSuccess() {\n    return Array.from(this.checkResults.values()).every(r => r.status !== CheckStatus.FAILED);\n  }\n  getResults() {\n    return Array.from(this.checkResults.values());\n  }\n  createAndRunCheck(check) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const checkId = this.getNextCheckId();\n      const test = new check(this.url, this.token);\n      const handleUpdate = info => {\n        this.updateCheck(checkId, info);\n      };\n      test.on('update', handleUpdate);\n      const result = yield test.run();\n      test.off('update', handleUpdate);\n      return result;\n    });\n  }\n  checkWebsocket() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.createAndRunCheck(WebSocketCheck);\n    });\n  }\n  checkWebRTC() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.createAndRunCheck(WebRTCCheck);\n    });\n  }\n  checkTURN() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.createAndRunCheck(TURNCheck);\n    });\n  }\n  checkReconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.createAndRunCheck(ReconnectCheck);\n    });\n  }\n  checkPublishAudio() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.createAndRunCheck(PublishAudioCheck);\n    });\n  }\n  checkPublishVideo() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.createAndRunCheck(PublishVideoCheck);\n    });\n  }\n}\n\n/**\n * Try to analyze the local track to determine the facing mode of a track.\n *\n * @remarks\n * There is no property supported by all browsers to detect whether a video track originated from a user- or environment-facing camera device.\n * For this reason, we use the `facingMode` property when available, but will fall back on a string-based analysis of the device label to determine the facing mode.\n * If both methods fail, the default facing mode will be used.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints/facingMode | MDN docs on facingMode}\n * @experimental\n */\nfunction facingModeFromLocalTrack(localTrack) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a;\n  const track = localTrack instanceof LocalTrack ? localTrack.mediaStreamTrack : localTrack;\n  const trackSettings = track.getSettings();\n  let result = {\n    facingMode: (_a = options.defaultFacingMode) !== null && _a !== void 0 ? _a : 'user',\n    confidence: 'low'\n  };\n  // 1. Try to get facingMode from track settings.\n  if ('facingMode' in trackSettings) {\n    const rawFacingMode = trackSettings.facingMode;\n    livekitLogger.debug('rawFacingMode', {\n      rawFacingMode\n    });\n    if (rawFacingMode && typeof rawFacingMode === 'string' && isFacingModeValue(rawFacingMode)) {\n      result = {\n        facingMode: rawFacingMode,\n        confidence: 'high'\n      };\n    }\n  }\n  // 2. If we don't have a high confidence we try to get the facing mode from the device label.\n  if (['low', 'medium'].includes(result.confidence)) {\n    livekitLogger.debug(\"Try to get facing mode from device label: (\".concat(track.label, \")\"));\n    const labelAnalysisResult = facingModeFromDeviceLabel(track.label);\n    if (labelAnalysisResult !== undefined) {\n      result = labelAnalysisResult;\n    }\n  }\n  return result;\n}\nconst knownDeviceLabels = new Map([['obs virtual camera', {\n  facingMode: 'environment',\n  confidence: 'medium'\n}]]);\nconst knownDeviceLabelSections = new Map([['iphone', {\n  facingMode: 'environment',\n  confidence: 'medium'\n}], ['ipad', {\n  facingMode: 'environment',\n  confidence: 'medium'\n}]]);\n/**\n * Attempt to analyze the device label to determine the facing mode.\n *\n * @experimental\n */\nfunction facingModeFromDeviceLabel(deviceLabel) {\n  var _a;\n  const label = deviceLabel.trim().toLowerCase();\n  // Empty string is a valid device label but we can't infer anything from it.\n  if (label === '') {\n    return undefined;\n  }\n  // Can we match against widely known device labels.\n  if (knownDeviceLabels.has(label)) {\n    return knownDeviceLabels.get(label);\n  }\n  // Can we match against sections of the device label.\n  return (_a = Array.from(knownDeviceLabelSections.entries()).find(_ref => {\n    let [section] = _ref;\n    return label.includes(section);\n  })) === null || _a === void 0 ? void 0 : _a[1];\n}\nfunction isFacingModeValue(item) {\n  const allowedValues = ['user', 'environment', 'left', 'right'];\n  return item === undefined || allowedValues.includes(item);\n}\n\n\n//# sourceMappingURL=livekit-client.esm.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/livekit-client@1.14.4/node_modules/livekit-client/dist/livekit-client.esm.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __addDisposableResource: function() { return /* binding */ __addDisposableResource; },\n/* harmony export */   __assign: function() { return /* binding */ __assign; },\n/* harmony export */   __asyncDelegator: function() { return /* binding */ __asyncDelegator; },\n/* harmony export */   __asyncGenerator: function() { return /* binding */ __asyncGenerator; },\n/* harmony export */   __asyncValues: function() { return /* binding */ __asyncValues; },\n/* harmony export */   __await: function() { return /* binding */ __await; },\n/* harmony export */   __awaiter: function() { return /* binding */ __awaiter; },\n/* harmony export */   __classPrivateFieldGet: function() { return /* binding */ __classPrivateFieldGet; },\n/* harmony export */   __classPrivateFieldIn: function() { return /* binding */ __classPrivateFieldIn; },\n/* harmony export */   __classPrivateFieldSet: function() { return /* binding */ __classPrivateFieldSet; },\n/* harmony export */   __createBinding: function() { return /* binding */ __createBinding; },\n/* harmony export */   __decorate: function() { return /* binding */ __decorate; },\n/* harmony export */   __disposeResources: function() { return /* binding */ __disposeResources; },\n/* harmony export */   __esDecorate: function() { return /* binding */ __esDecorate; },\n/* harmony export */   __exportStar: function() { return /* binding */ __exportStar; },\n/* harmony export */   __extends: function() { return /* binding */ __extends; },\n/* harmony export */   __generator: function() { return /* binding */ __generator; },\n/* harmony export */   __importDefault: function() { return /* binding */ __importDefault; },\n/* harmony export */   __importStar: function() { return /* binding */ __importStar; },\n/* harmony export */   __makeTemplateObject: function() { return /* binding */ __makeTemplateObject; },\n/* harmony export */   __metadata: function() { return /* binding */ __metadata; },\n/* harmony export */   __param: function() { return /* binding */ __param; },\n/* harmony export */   __propKey: function() { return /* binding */ __propKey; },\n/* harmony export */   __read: function() { return /* binding */ __read; },\n/* harmony export */   __rest: function() { return /* binding */ __rest; },\n/* harmony export */   __runInitializers: function() { return /* binding */ __runInitializers; },\n/* harmony export */   __setFunctionName: function() { return /* binding */ __setFunctionName; },\n/* harmony export */   __spread: function() { return /* binding */ __spread; },\n/* harmony export */   __spreadArray: function() { return /* binding */ __spreadArray; },\n/* harmony export */   __spreadArrays: function() { return /* binding */ __spreadArrays; },\n/* harmony export */   __values: function() { return /* binding */ __values; }\n/* harmony export */ });\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nfunction __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nfunction __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nfunction __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nfunction __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nfunction __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nfunction __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nfunction __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nfunction __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nfunction __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nfunction __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nfunction __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nfunction __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\n"));

/***/ })

});